# Maily

Maily is an AI-powered email campaign platform with advanced features including AI mesh networking, cognitive canvas, and predictive analytics.

## 🚀 Features

- **AI Mesh Network**: Collaborative AI agents working together on complex tasks
- **Email Campaign Management**: Create, send, and track email campaigns
- **Analytics Dashboard**: Real-time insights and performance metrics
- **Template Library**: Customizable email templates
- **Trust Verification**: Blockchain-based verification of email campaigns
- **Multi-platform Integration**: Connect with various marketing platforms

## 📋 Project Structure

```
maily/
├── apps/                   # Application services
│   ├── ai-service/         # AI Mesh Network service
│   ├── api/                # Main API backend
│   ├── web/                # Web frontend (Next.js)
│   ├── email-service/      # Email delivery service
│   ├── analytics-service/  # Analytics processing
│   ├── campaign-service/   # Campaign management
│   └── workers/            # Background task workers
├── packages/               # Shared packages
│   ├── ui/                 # UI components
│   ├── utils/              # Shared utilities
│   ├── database/           # Database utilities
│   ├── domain/             # Shared domain models
│   ├── testing/            # Testing utilities
│   └── error-handling/     # Error handling utilities
├── config/                 # Centralized configuration
│   ├── app/                # Application-specific configs
│   └── services/           # Service configurations 
├── docker/                 # Docker configuration
│   ├── dockerfiles/        # Standardized Dockerfiles
│   └── services/           # Service-specific Docker configs
├── infrastructure/         # Infrastructure as code
├── kubernetes/             # Kubernetes configuration
├── docs/                   # Documentation
└── scripts/                # Utility scripts
```

## 🔧 Development

### Prerequisites

- Node.js (v20.11.1+)
- Python 3.9+
- Docker and Docker Compose

### Setup

```bash
# Install dependencies
npm install

# Set up environment
cp .env.example .env
```

### Running locally

```bash
# Start all services
npm run dev

# Start specific service
npm run dev --filter=web
```

### Testing

```bash
# Run all tests
npm run test

# Run specific tests
npm test -- -t "test name"

# Run Python tests
cd apps/api && pytest

# Run end-to-end tests against staging environment
npm run test:e2e:staging

# Run smoke tests
npm run test:smoke

# Run deployment verification
npm run test:verify
```

### Deployment Testing

The deployment process includes comprehensive verification steps:

1. **Smoke Testing**: Basic functionality checks using `enhanced-smoke-test.js`
2. **Deployment Verification**: Resource validation using `verify-deployment.js`  
3. **End-to-End Testing**: Complete workflow testing using `e2e-staging-test.js`

End-to-end tests validate:
- Infrastructure health
- User authentication
- Email campaign flows
- AI integration
- Database integrity
- Performance metrics
- Error handling

## 📚 Documentation

Comprehensive documentation is available in the `/docs` directory and can be viewed using MkDocs:

```bash
# Install MkDocs
pip install mkdocs mkdocs-material

# Serve documentation locally
mkdocs serve
```

Or visit our [documentation site](https://docs.maily.com).

## 📋 Repository Standardization

The repository has been standardized and organized according to best practices:

- **Configuration**: Centralized in `config/` directory ([details](REPOSITORY-STANDARDIZATION.md#1-configuration-standardization))
- **Shared Code**: Organized in `packages/` directory ([details](packages/README.md))
- **Docker**: Standardized in `docker/dockerfiles/` ([details](docker/README.md))
- **Testing**: Standardized with Vitest for JS/TS ([details](CLEANUP-GUIDE.md#testing))
- **Naming Conventions**: kebab-case for directories, camelCase for files

For more information on these improvements, see:
- [Repository Standardization](REPOSITORY-STANDARDIZATION.md)
- [Cleanup Guide](CLEANUP-GUIDE.md)

## 🤝 Contributing

Please read our [Contributing Guide](.github/docs/CONTRIBUTING.md) to get started.

## 📄 License

This project is licensed under the terms of the [MIT license](LICENSE).

## 🔗 Links

- [Production Deployment Guide](docs/production-deployment-guide.md)
- [API Documentation](docs/api/overview.md)
- [Architecture Overview](docs/internal/architecture-overview.md)