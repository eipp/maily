{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Maily Documentation","text":"<p>Maily is a modern, AI-powered email campaign platform that helps you create, design, and optimize your email campaigns using cutting-edge artificial intelligence.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#ai-powered-content-generation","title":"\ud83e\udd16 AI-Powered Content Generation","text":"<ul> <li>Multiple AI provider support (OpenAI, Anthropic, Google, etc.)</li> <li>Smart content suggestions</li> <li>Personalization at scale</li> <li>A/B testing optimization</li> </ul>"},{"location":"#analytics-monitoring","title":"\ud83d\udcca Analytics &amp; Monitoring","text":"<ul> <li>Real-time campaign analytics</li> <li>Performance monitoring</li> <li>Prometheus metrics integration</li> <li>Grafana dashboards</li> </ul>"},{"location":"#enterprise-security","title":"\ud83d\udd12 Enterprise Security","text":"<ul> <li>Rate limiting</li> <li>CORS protection</li> <li>API key authentication</li> <li>Secure data encryption</li> </ul>"},{"location":"#robust-infrastructure","title":"\ud83d\udcbe Robust Infrastructure","text":"<ul> <li>Redis caching</li> <li>PostgreSQL database</li> <li>Distributed computing with Ray</li> <li>Cross-region replication</li> </ul>"},{"location":"#scalability","title":"\ud83d\udcc8 Scalability","text":"<ul> <li>Horizontal scaling support</li> <li>Load balancing ready</li> <li>Automated backups</li> <li>Disaster recovery procedures</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Core Guide</li> <li>API Reference</li> <li>Developer Guide</li> <li>Security &amp; Compliance</li> <li>Enhancement Plan</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    Client[Client] --&gt; Frontend[Next.js Frontend]\n    Frontend --&gt; API[FastAPI Backend]\n    API --&gt; Cache[Redis Cache]\n    API --&gt; DB[PostgreSQL]\n    API --&gt; AI[AI Providers]\n    API --&gt; Storage[File Storage]\n    API --&gt; Queue[Task Queue]\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Install the platform</li> <li>Configure your environment</li> <li>Create your first campaign</li> </ol>"},{"location":"#support","title":"Support","text":"<p>Need help? Check out our:</p> <ul> <li>API Reference</li> <li>Operation Runbook</li> <li>GitHub Issues</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Developer Guide for details.</p>"},{"location":"#enhancement-plan","title":"Enhancement Plan","text":"<p>We have developed a comprehensive plan to enhance Maily to reach a \"state of the art\" level. The plan is organized into sprints, each focusing on specific areas of improvement:</p> <ul> <li>Enhancement Implementation Plan - Comprehensive enhancement plan with implementation details</li> <li>Tech Stack - Detailed information about our technology stack</li> <li>Architecture Handbook - Overview of the system architecture and components</li> <li>Enhancement Tools Reference - Detailed information about recommended tools, including features, benefits, and integration points</li> </ul>"},{"location":"ai-handbook/","title":"Maily AI Handbook","text":"<p>Last Updated: March 6, 2025</p>"},{"location":"ai-handbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>AI Architecture</li> <li>AI Capabilities</li> <li>Implementation Details</li> <li>Integration Points</li> <li>Usage Guide</li> <li>AI Observability</li> <li>Cost Management</li> <li>Development Guidelines</li> <li>Security &amp; Compliance</li> <li>Performance Optimization</li> <li>Implementation Status</li> <li>Advanced Implementation Components</li> <li>Maintenance</li> <li>Migrating from Legacy AI Package</li> <li>Frequently Asked Questions</li> </ul>"},{"location":"ai-handbook/#overview","title":"Overview","text":"<p>This handbook provides a comprehensive guide to the AI systems within Maily. It serves as the primary reference for all AI-related documentation, covering the architecture, capabilities, integration points, and best practices for development and implementation.</p>"},{"location":"ai-handbook/#core-ai-value-propositions","title":"Core AI Value Propositions","text":"<ol> <li>Content Generation &amp; Optimization: AI-driven content creation and improvement</li> <li>Audience Segmentation: Advanced audience targeting using machine learning</li> <li>Delivery Optimization: Send time and frequency optimization</li> <li>Performance Prediction: Campaign success forecasting</li> <li>Personalization: Dynamic content tailoring for each recipient</li> </ol>"},{"location":"ai-handbook/#ai-architecture","title":"AI Architecture","text":"<p>The Maily AI system is built on a microservices architecture that integrates with the core platform through well-defined APIs. The architecture consists of several specialized components that work together to provide comprehensive AI capabilities.</p> <p></p>"},{"location":"ai-handbook/#key-components","title":"Key Components","text":"<ol> <li>AI Service: The central orchestration layer that coordinates all AI operations</li> <li>Model Registry: Version-controlled repository of trained machine learning models</li> <li>Feature Store: Centralized repository of features for model training and inference</li> <li>Inference Engine: High-performance system for real-time model predictions</li> <li>Training Pipeline: Automated workflow for model training and evaluation</li> <li>Observability System: Monitoring tools for AI performance and health</li> </ol>"},{"location":"ai-handbook/#technology-stack","title":"Technology Stack","text":"<ul> <li>Machine Learning Frameworks: PyTorch, TensorFlow, scikit-learn</li> <li>Natural Language Processing: Transformers, NLTK, spaCy</li> <li>Vector Database: Pinecone for similarity search and embeddings</li> <li>Model Serving: TorchServe, TensorFlow Serving</li> <li>Orchestration: Airflow for training workflows</li> <li>Monitoring: Prometheus, Grafana, and MLflow</li> <li>LLM Providers: Anthropic Claude 3 (Opus, Sonnet, Haiku), OpenAI GPT-4</li> <li>Observability: Langfuse for tracing and monitoring</li> <li>Model Registry: Weights &amp; Biases for experiment tracking and versioning</li> <li>Image Generation: Stability AI via Replicate</li> </ul>"},{"location":"ai-handbook/#ai-capabilities","title":"AI Capabilities","text":""},{"location":"ai-handbook/#content-generation","title":"Content Generation","text":"<p>The content generation system provides:</p> <ol> <li>Email Subject Lines: Generation of high-performing subject lines</li> <li>Body Content: Creation of email body content with customizable tone and style</li> <li>Call-to-Action: Suggestions for effective CTAs</li> <li>Image Prompts: Generation of prompts for image creation tools</li> </ol>"},{"location":"ai-handbook/#audience-segmentation","title":"Audience Segmentation","text":"<p>Machine learning models analyze subscriber behavior to create optimized audience segments:</p> <ol> <li>Engagement Prediction: Identifies subscribers most likely to engage</li> <li>Churn Prediction: Highlights at-risk subscribers</li> <li>Interest Clustering: Groups subscribers with similar interests</li> <li>Behavioral Segmentation: Segments based on past interactions</li> </ol>"},{"location":"ai-handbook/#campaign-optimization","title":"Campaign Optimization","text":"<p>AI-driven optimization of campaign parameters:</p> <ol> <li>Send Time Optimization: Determines optimal delivery times for each recipient</li> <li>Frequency Recommendation: Suggests ideal sending frequency</li> <li>A/B Test Analysis: Automated analysis and recommendations from tests</li> <li>Content Recommendations: Suggests content types based on audience preferences</li> </ol>"},{"location":"ai-handbook/#implementation-details","title":"Implementation Details","text":""},{"location":"ai-handbook/#model-descriptions","title":"Model Descriptions","text":"<ol> <li>Content Generator: Fine-tuned GPT model for email content generation</li> <li>Engagement Predictor: Gradient-boosted decision tree model</li> <li>Segmentation Engine: Clustering algorithms with custom feature engineering</li> <li>Send Time Optimizer: Reinforcement learning model with time-series features</li> </ol>"},{"location":"ai-handbook/#system-integration","title":"System Integration","text":"<p>The AI components integrate with the Maily platform at several key points:</p> <ol> <li>Campaign Editor: Content suggestions and improvements</li> <li>Campaign Setup: AI-powered recommendations during campaign creation</li> <li>Subscriber Management: Enriched subscriber profiles with AI-derived insights</li> <li>Audience Manager: AI-suggested segments and targeting options</li> <li>Analytics Dashboard: Predictive metrics and AI-powered insights</li> </ol>"},{"location":"ai-handbook/#data-flows","title":"Data Flows","text":"<ol> <li>Training Data Collection: Aggregation of anonymized email performance data</li> <li>Feature Engineering: Transformation of raw data into model features</li> <li>Inference Pipeline: Real-time prediction flow for user interactions</li> <li>Feedback Loop: Continuous improvement based on campaign results</li> </ol>"},{"location":"ai-handbook/#integration-points","title":"Integration Points","text":""},{"location":"ai-handbook/#api-reference","title":"API Reference","text":"<p>The AI service exposes a REST API with the following main endpoints:</p> <pre><code>// Content Generation API\nPOST /api/v1/ai/generate/subject\nPOST /api/v1/ai/generate/body\nPOST /api/v1/ai/generate/cta\nPOST /api/v1/ai/optimize/content\n\n// Segmentation API\nPOST /api/v1/ai/segment/create\nGET /api/v1/ai/segment/recommend\nPOST /api/v1/ai/segment/analyze\n\n// Optimization API\nPOST /api/v1/ai/optimize/sendtime\nPOST /api/v1/ai/optimize/frequency\nPOST /api/v1/ai/test/analyze\n</code></pre>"},{"location":"ai-handbook/#javascript-sdk","title":"JavaScript SDK","text":"<p>The AI capabilities are accessible through a JavaScript SDK:</p> <pre><code>import { AIService } from '@maily/ai-service';\n\n// Initialize the service\nconst aiService = new AIService({\n  apiKey: 'your-api-key',\n  environment: 'production'\n});\n\n// Generate email subject lines\nconst subjectLines = await aiService.generate.subjectLines({\n  productName: 'Widget Pro',\n  campaignType: 'product_announcement',\n  toneOfVoice: 'professional',\n  count: 5\n});\n\n// Get recommended segments\nconst segments = await aiService.segment.recommend({\n  campaignObjective: 'conversion',\n  productCategory: 'electronics'\n});\n</code></pre>"},{"location":"ai-handbook/#webhooks","title":"Webhooks","text":"<p>AI events can be subscribed to via webhooks:</p> <pre><code>{\n  \"event\": \"ai.model.updated\",\n  \"model\": \"subject_line_generator\",\n  \"version\": \"1.2.3\",\n  \"timestamp\": \"2023-03-06T12:34:56Z\",\n  \"changes\": [\n    \"Improved handling of promotional language\",\n    \"Added support for new industry verticals\",\n    \"50% faster inference time\"\n  ]\n}\n</code></pre>"},{"location":"ai-handbook/#usage-guide","title":"Usage Guide","text":""},{"location":"ai-handbook/#getting-started","title":"Getting Started","text":"<p>To begin using the AI capabilities:</p> <ol> <li>Enable AI Features: Activate AI features in your account settings</li> <li>Set Up API Access: Generate API keys in the developer portal</li> <li>Configure Preferences: Set default tone, style, and other AI preferences</li> <li>Start with Templates: Use AI-enhanced templates for your first campaigns</li> </ol>"},{"location":"ai-handbook/#best-practices","title":"Best Practices","text":"<ol> <li>Provide Context: The more information you provide, the better the AI results</li> <li>Review AI Output: Always review and edit AI-generated content</li> <li>Iterative Refinement: Use the feedback mechanisms to improve results</li> <li>A/B Test: Compare AI-generated content against traditional content</li> <li>Combine Approaches: Best results come from combining AI suggestions with human creativity</li> </ol>"},{"location":"ai-handbook/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Weekly Newsletter Generation: Automated creation of newsletter drafts</li> <li>Re-engagement Campaigns: Targeting dormant subscribers with personalized content</li> <li>Product Launch Sequences: Multi-email sequences for new product introductions</li> <li>Welcome Series Optimization: Optimizing onboarding email sequences</li> <li>Seasonal Campaign Planning: AI-assisted planning for holiday campaigns</li> </ol>"},{"location":"ai-handbook/#ai-observability","title":"AI Observability","text":""},{"location":"ai-handbook/#monitoring-metrics","title":"Monitoring Metrics","text":"<p>Key metrics for AI system health:</p> <ol> <li>Model Performance: Accuracy, precision, recall metrics</li> <li>Inference Latency: Response time for AI requests</li> <li>Usage Patterns: Volume and types of AI requests</li> <li>Error Rates: Frequency and types of AI processing errors</li> <li>User Feedback: Explicit feedback on AI suggestions</li> </ol>"},{"location":"ai-handbook/#debugging-tools","title":"Debugging Tools","text":"<ol> <li>AI Inspector: UI tool for examining AI decision-making</li> <li>Model Explainability: SHAP values and feature importance visualizations</li> <li>Performance Dashboard: Real-time monitoring of AI system performance</li> <li>Audit Logs: Detailed logs of all AI operations</li> <li>Langfuse Tracing: Detailed traces of AI inference chains</li> </ol>"},{"location":"ai-handbook/#langfuse-integration","title":"Langfuse Integration","text":"<p>Maily uses Langfuse for comprehensive LLM observability:</p> <pre><code># Example Langfuse integration\nfrom langfuse import Langfuse\n\nlangfuse = Langfuse(\n    api_key=os.getenv(\"LANGFUSE_API_KEY\"),\n    public_key=os.getenv(\"LANGFUSE_PUBLIC_KEY\"),\n    host=os.getenv(\"LANGFUSE_HOST\", \"https://cloud.langfuse.com\")\n)\n\n# Creating a trace\ntrace = langfuse.trace(\n    name=\"email_subject_generation\",\n    metadata={\n        \"user_id\": user_id,\n        \"campaign_id\": campaign_id,\n        \"template_id\": template_id\n    }\n)\n\n# Logging a generation\ngeneration = langfuse.generation(\n    name=\"subject_line\",\n    input=prompt,\n    output=subject_lines,\n    model=\"anthropic/claude-3-sonnet\",\n    trace_id=trace.id,\n    metadata={\n        \"temperature\": 0.7,\n        \"max_tokens\": 100\n    }\n)\n\n# Complete the trace\ntrace.update(status=\"success\")\n</code></pre>"},{"location":"ai-handbook/#cost-management","title":"Cost Management","text":""},{"location":"ai-handbook/#usage-optimization","title":"Usage Optimization","text":"<p>Strategies to optimize AI usage costs:</p> <ol> <li>Caching: Reuse of common AI responses</li> <li>Batching: Grouping requests for efficiency</li> <li>Tiered Processing: Using simpler models for routine tasks</li> <li>Scheduled Operations: Running intensive operations during off-peak hours</li> <li>Model Selection: Choosing the appropriate model for each task</li> <li>Claude Haiku for routine tasks</li> <li>Claude Sonnet for standard content generation</li> <li>Claude Opus for high-value campaigns and complex analyses</li> </ol>"},{"location":"ai-handbook/#pricing-structure","title":"Pricing Structure","text":"<p>The AI capabilities are included in Maily subscription plans with the following structure:</p> <ol> <li>Basic Plan: Limited AI suggestions with monthly caps</li> <li>Professional Plan: Full AI feature set with higher usage limits</li> <li>Enterprise Plan: Custom models and unlimited AI usage</li> <li>Usage-Based Add-ons: Additional AI capacity available as needed</li> </ol>"},{"location":"ai-handbook/#development-guidelines","title":"Development Guidelines","text":""},{"location":"ai-handbook/#model-selection-guidelines","title":"Model Selection Guidelines","text":"Task Recommended Model Rationale Subject Line Generation Claude 3 Sonnet Good balance of quality and cost Email Body Generation Claude 3 Sonnet Handles complex content well Quick Suggestions Claude 3 Haiku Fast, cost-effective for simple tasks Strategy Development Claude 3 Opus Best quality for high-value planning Image Generation Stability AI High-quality image outputs"},{"location":"ai-handbook/#ai-prompt-engineering","title":"AI Prompt Engineering","text":"<p>Best practices for prompt engineering:</p> <ol> <li>Clear Instructions: Be specific about the desired output format and content</li> <li>Contextual Information: Provide relevant campaign and audience details</li> <li>Few-Shot Examples: Include examples of desired outputs when possible</li> <li>Temperature Settings: Use higher values (0.7-0.9) for creative content, lower (0.1-0.3) for factual responses</li> <li>Evaluation Instructions: Include criteria for self-evaluation in the prompt</li> </ol>"},{"location":"ai-handbook/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"ai-handbook/#data-protection","title":"Data Protection","text":"<ol> <li>PII Handling: No personally identifiable information is sent to AI providers</li> <li>Data Retention: Training data is anonymized and follows retention policies</li> <li>Model Isolation: Customer data is segregated in separate model instances</li> </ol>"},{"location":"ai-handbook/#compliance-features","title":"Compliance Features","text":"<ol> <li>Content Filtering: Automatic detection and blocking of prohibited content</li> <li>Audit Trails: Comprehensive logging of all AI actions for compliance</li> <li>Privacy Controls: Granular controls for AI data usage</li> </ol>"},{"location":"ai-handbook/#performance-optimization","title":"Performance Optimization","text":"<p>Performance optimization strategies include:</p> <ol> <li>Model Quantization: Using optimized model versions</li> <li>Latency-Based Routing: Directing traffic to the most responsive endpoints</li> <li>Dynamic Scaling: Adjusting inference capacity based on demand</li> <li>Warm Pools: Maintaining ready-to-use inference instances</li> </ol>"},{"location":"ai-handbook/#implementation-status","title":"Implementation Status","text":""},{"location":"ai-handbook/#current-implementation-status","title":"Current Implementation Status","text":"<p>The following AI &amp; ML components are fully implemented and in production:</p> <ul> <li>Langfuse Integration: Complete observability with tracing capabilities</li> <li>Anthropic Claude 3 Models: Support for Claude 3 Opus, Sonnet, and Haiku</li> <li>Basic Stability AI Support: Image generation through Replicate adapter</li> </ul>"},{"location":"ai-handbook/#in-progress-implementations","title":"In-Progress Implementations","text":"<p>The following components are currently being implemented:</p> <ul> <li>Weights &amp; Biases Integration: For experiment tracking and model registry</li> <li>Vector Database Enrichment: Enhanced semantic search capabilities</li> <li>Custom ML Model Deployment: For campaign performance prediction</li> </ul>"},{"location":"ai-handbook/#advanced-implementation-components","title":"Advanced Implementation Components","text":""},{"location":"ai-handbook/#weights-biases-integration","title":"Weights &amp; Biases Integration","text":"<p>Implementation of the Weights &amp; Biases model registry for experiment tracking:</p> <pre><code># apps/api/ai/wandb_integration.py\nimport os\nimport wandb\nfrom typing import Dict, Any, Optional\n\nclass WandbModelRegistry:\n    \"\"\"Weights &amp; Biases model registry integration.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None, project_name: str = \"maily-ai\"):\n        \"\"\"Initialize the Weights &amp; Biases model registry.\"\"\"\n        self.api_key = api_key or os.getenv(\"WANDB_API_KEY\")\n        self.project_name = project_name\n\n        if not self.api_key:\n            self.enabled = False\n        else:\n            try:\n                wandb.login(key=self.api_key)\n                self.enabled = True\n            except Exception:\n                self.enabled = False\n\n    def log_model_usage(self,\n                        model_name: str,\n                        provider: str,\n                        prompt: str,\n                        response: str,\n                        metadata: Optional[Dict[str, Any]] = None) -&gt; Optional[str]:\n        \"\"\"Log model usage to Weights &amp; Biases.\"\"\"\n        if not self.enabled:\n            return None\n\n        try:\n            # Initialize a new W&amp;B run\n            run = wandb.init(\n                project=self.project_name,\n                job_type=\"inference\",\n                config={\n                    \"model_name\": model_name,\n                    \"provider\": provider,\n                    \"timestamp\": wandb.util.get_timestamp(),\n                    **(metadata or {})\n                }\n            )\n\n            # Log the prompt and response\n            wandb.log({\n                \"prompt\": prompt,\n                \"response\": response,\n                \"prompt_tokens\": len(prompt.split()),\n                \"response_tokens\": len(response.split()),\n                \"total_tokens\": len(prompt.split()) + len(response.split())\n            })\n\n            # Finish the run\n            run_id = run.id\n            run.finish()\n\n            return run_id\n        except Exception:\n            return None\n</code></pre>"},{"location":"ai-handbook/#vector-database-enrichment","title":"Vector Database Enrichment","text":"<p>Implementation of enhanced semantic search capabilities:</p> <pre><code>// apps/api/ai/vector-db.ts\nimport { PineconeClient } from '@pinecone-database/pinecone';\nimport { OpenAIEmbeddings } from '@langchain/openai';\n\nexport class VectorDatabase {\n  private pinecone: PineconeClient;\n  private embeddings: OpenAIEmbeddings;\n  private indexName: string;\n\n  constructor(apiKey: string, environment: string, indexName: string) {\n    this.pinecone = new PineconeClient();\n    this.pinecone.init({\n      apiKey,\n      environment\n    });\n\n    this.embeddings = new OpenAIEmbeddings({\n      modelName: \"text-embedding-3-small\"\n    });\n\n    this.indexName = indexName;\n  }\n\n  async addDocument(id: string, text: string, metadata: Record&lt;string, any&gt; = {}) {\n    const index = this.pinecone.Index(this.indexName);\n    const embedding = await this.embeddings.embedQuery(text);\n\n    await index.upsert({\n      upsertRequest: {\n        vectors: [{\n          id,\n          values: embedding,\n          metadata: {\n            text,\n            ...metadata\n          }\n        }]\n      }\n    });\n  }\n\n  async semanticSearch(query: string, topK: number = 5) {\n    const index = this.pinecone.Index(this.indexName);\n    const queryEmbedding = await this.embeddings.embedQuery(query);\n\n    const results = await index.query({\n      queryRequest: {\n        vector: queryEmbedding,\n        topK,\n        includeMetadata: true\n      }\n    });\n\n    return results.matches?.map(match =&gt; ({\n      id: match.id,\n      score: match.score,\n      text: match.metadata?.text,\n      metadata: match.metadata\n    }));\n  }\n}\n</code></pre>"},{"location":"ai-handbook/#custom-ml-model-deployment","title":"Custom ML Model Deployment","text":"<p>Implementation of machine learning models for campaign performance prediction:</p> <pre><code># apps/api/ai/models/performance_predictor.py\nimport pandas as pd\nimport numpy as np\nimport joblib\nfrom typing import Dict, Any, List, Optional\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom datetime import datetime\n\nclass CampaignPerformancePredictor:\n    \"\"\"Predicts campaign performance metrics based on campaign attributes.\"\"\"\n\n    def __init__(self, model_path: Optional[str] = None):\n        \"\"\"Initialize the performance predictor.\n\n        Args:\n            model_path: Path to the trained model file\n        \"\"\"\n        self.model_path = model_path or \"models/performance_predictor.joblib\"\n        try:\n            self.model = joblib.load(self.model_path)\n            self.is_loaded = True\n        except Exception:\n            # If model doesn't exist yet, initialize a new one\n            self.model = GradientBoostingRegressor()\n            self.is_loaded = False\n\n    def predict(self, campaign_data: Dict[str, Any]) -&gt; Dict[str, float]:\n        \"\"\"Predict performance metrics for a campaign.\n\n        Args:\n            campaign_data: Campaign attributes\n\n        Returns:\n            Dictionary of predicted metrics\n        \"\"\"\n        if not self.is_loaded:\n            # Return default predictions if model isn't trained\n            return {\n                \"open_rate\": 0.20,\n                \"click_rate\": 0.02,\n                \"conversion_rate\": 0.005,\n                \"unsubscribe_rate\": 0.001\n            }\n\n        # Transform campaign data into features\n        features = self._extract_features(campaign_data)\n\n        # Make predictions\n        predictions = self.model.predict([features])[0]\n\n        return {\n            \"open_rate\": float(predictions[0]),\n            \"click_rate\": float(predictions[1]),\n            \"conversion_rate\": float(predictions[2]),\n            \"unsubscribe_rate\": float(predictions[3])\n        }\n\n    def train(self, historical_campaigns: List[Dict[str, Any]]) -&gt; Dict[str, float]:\n        \"\"\"Train the model on historical campaign data.\n\n        Args:\n            historical_campaigns: List of historical campaigns with performance metrics\n\n        Returns:\n            Dictionary of model performance metrics\n        \"\"\"\n        # Extract features and targets\n        X = []\n        y = []\n\n        for campaign in historical_campaigns:\n            if self._has_complete_metrics(campaign):\n                X.append(self._extract_features(campaign))\n                y.append([\n                    campaign[\"metrics\"][\"open_rate\"],\n                    campaign[\"metrics\"][\"click_rate\"],\n                    campaign[\"metrics\"][\"conversion_rate\"],\n                    campaign[\"metrics\"][\"unsubscribe_rate\"]\n                ])\n\n        # Train the model\n        self.model = GradientBoostingRegressor(\n            n_estimators=100,\n            learning_rate=0.1,\n            max_depth=3\n        )\n        self.model.fit(X, y)\n\n        # Save the model\n        joblib.dump(self.model, self.model_path)\n        self.is_loaded = True\n\n        # Return model performance metrics\n        # In a real implementation, we would do cross-validation here\n        return {\n            \"r2_score\": 0.75,\n            \"mean_absolute_error\": 0.05\n        }\n\n    def _extract_features(self, campaign: Dict[str, Any]) -&gt; List[float]:\n        \"\"\"Extract features from campaign data.\n\n        Args:\n            campaign: Campaign data\n\n        Returns:\n            List of numerical features\n        \"\"\"\n        # Example feature extraction (would be more sophisticated in production)\n        features = [\n            len(campaign.get(\"subject\", \"\")),\n            campaign.get(\"word_count\", 0),\n            len(campaign.get(\"audience\", {}).get(\"segments\", [])),\n            campaign.get(\"send_hour\", 12),\n            campaign.get(\"day_of_week\", 2),\n            1 if \"promotion\" in campaign.get(\"tags\", []) else 0,\n            1 if \"newsletter\" in campaign.get(\"tags\", []) else 0,\n            campaign.get(\"image_count\", 0),\n            campaign.get(\"link_count\", 0),\n            campaign.get(\"audience\", {}).get(\"size\", 1000) / 1000  # Normalize\n        ]\n\n        return features\n\n    def _has_complete_metrics(self, campaign: Dict[str, Any]) -&gt; bool:\n        \"\"\"Check if a campaign has complete performance metrics.\n\n        Args:\n            campaign: Campaign data\n\n        Returns:\n            True if the campaign has all required metrics\n        \"\"\"\n        metrics = campaign.get(\"metrics\", {})\n        required_metrics = [\"open_rate\", \"click_rate\", \"conversion_rate\", \"unsubscribe_rate\"]\n\n        return all(metric in metrics for metric in required_metrics)\n</code></pre>"},{"location":"ai-handbook/#maintenance","title":"Maintenance","text":""},{"location":"ai-handbook/#model-retraining","title":"Model Retraining","text":"<p>The AI models are retrained on the following schedule:</p> <ol> <li>Content Generation Models: Quarterly updates from providers</li> <li>Custom ML Models: Monthly retraining based on new campaign data</li> <li>Segmentation Models: Bi-weekly updates to reflect changing user behaviors</li> </ol>"},{"location":"ai-handbook/#version-compatibility","title":"Version Compatibility","text":"<p>The AI service maintains compatibility with the following systems:</p> <ol> <li>Frontend SDK: Backwards compatible for the last 3 major versions</li> <li>API Endpoints: Versioned with deprecation notices 3 months in advance</li> <li>Model Versions: Multiple versions available with gradual transitions</li> </ol>"},{"location":"ai-handbook/#migrating-from-legacy-ai-package","title":"Migrating from Legacy AI Package","text":"<p>Migration steps from the legacy AI package:</p> <ol> <li>Update Dependencies: Install the new <code>@maily/ai-service</code> package</li> <li>Update API Calls: Replace legacy calls with the new API format</li> <li>Review Configurations: Update AI configuration in settings</li> <li>Test Integrations: Validate all AI touchpoints in your application</li> </ol>"},{"location":"ai-handbook/#code-migration-examples","title":"Code Migration Examples","text":"<pre><code>// Legacy code\nimport { generateContent } from '@maily/ai';\n\nconst content = await generateContent({\n  type: 'subject',\n  context: { productName: 'Widget' }\n});\n\n// New code\nimport { AIService } from '@maily/ai-service';\n\nconst aiService = new AIService({ apiKey: 'your-api-key' });\nconst content = await aiService.generate.subjectLines({\n  productName: 'Widget',\n  count: 3\n});\n</code></pre>"},{"location":"ai-handbook/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"ai-handbook/#general-questions","title":"General Questions","text":"<ol> <li> <p>Is the AI content unique for each recipient?    Yes, when using personalization features, unique content is generated for segments or individuals.</p> </li> <li> <p>How does the AI handle different industries?    Industry-specific knowledge is incorporated into prompt templates and training data.</p> </li> <li> <p>Can I use my own custom models?    Yes, Enterprise plans can integrate custom-trained models through our API.</p> </li> </ol>"},{"location":"ai-handbook/#technical-questions","title":"Technical Questions","text":"<ol> <li> <p>What's the rate limit for AI API calls?    Rate limits vary by plan level, with Enterprise plans offering custom limits.</p> </li> <li> <p>How is sensitive data handled?    PII is never sent to AI providers, and all data is encrypted in transit and at rest.</p> </li> <li> <p>Can I export the AI-generated content?    Yes, all content can be exported in multiple formats including HTML, Markdown, and plain text.</p> </li> </ol> <p>This handbook is maintained by the Maily AI Team. For questions or suggestions, contact ai-team@maily.com.</p>"},{"location":"ai-service-reference/","title":"Maily AI Service Reference","text":"<p>Last updated: March 5, 2025</p>"},{"location":"ai-service-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Architecture</li> <li>Model Adapter Interface</li> <li>Key Components</li> <li>Integration Points</li> <li>Features &amp; Capabilities</li> <li>Email Content Generation</li> <li>Subject Line Optimization</li> <li>Content Analysis</li> <li>Template Recommendations</li> <li>Audience Segmentation</li> <li>Performance Prediction</li> <li>Image Generation</li> <li>Technical Implementation</li> <li>Model Versioning &amp; Registry</li> <li>AI Observability</li> <li>Cost Management</li> <li>Frontend Integration</li> <li>Backend Integration</li> <li>Service Configuration</li> <li>Environment Variables</li> <li>Provider Configuration</li> <li>Model Selection</li> <li>Migration Guide</li> <li>Migrating from Legacy AI Package</li> <li>API Changes</li> <li>Usage Examples</li> <li>Frontend Usage</li> <li>Backend Usage</li> <li>API Endpoints</li> <li>Testing &amp; Evaluation</li> <li>Automated Testing</li> <li>Model Evaluation</li> <li>Performance Benchmarks</li> <li>Troubleshooting</li> <li>Common Issues</li> <li>Debugging Tools</li> <li>Future Roadmap</li> </ul>"},{"location":"ai-service-reference/#overview","title":"Overview","text":"<p>The Maily AI Service provides comprehensive artificial intelligence capabilities to enhance the email marketing platform. It integrates with multiple AI providers (OpenAI, Anthropic, Google) through a flexible adapter architecture, enabling advanced content generation, optimization, analysis, and personalization features.</p> <p>This reference document consolidates all AI-related documentation, providing a comprehensive guide for developers working with the AI components of the Maily platform.</p>"},{"location":"ai-service-reference/#architecture","title":"Architecture","text":""},{"location":"ai-service-reference/#model-adapter-interface","title":"Model Adapter Interface","text":"<p>The AI capabilities are built on a flexible adapter pattern that allows for easy integration with different AI models:</p> <ul> <li>Base Adapter Interface: Provides a common interface for all AI model implementations</li> <li>Provider-Specific Adapters: Implement the base interface for specific providers (OpenAI, Anthropic, Google)</li> <li>Factory Pattern: Manages adapter creation and allows dynamic switching between providers</li> <li>Configuration Management: Supports customization of model parameters like temperature and token limits</li> </ul> <pre><code>// Model adapter interface\ninterface ModelAdapter {\n  // Core methods\n  generateText(prompt: string, options?: GenerationOptions): Promise&lt;string&gt;;\n  generateChat(messages: ChatMessage[], options?: ChatOptions): Promise&lt;ChatResponse&gt;;\n\n  // Email-specific methods\n  generateEmailSubject(content: string, options?: SubjectOptions): Promise&lt;string[]&gt;;\n  analyzeEmailContent(content: string): Promise&lt;AnalysisResult&gt;;\n  optimizeEmailContent(content: string, options?: OptimizationOptions): Promise&lt;string&gt;;\n}\n</code></pre>"},{"location":"ai-service-reference/#key-components","title":"Key Components","text":""},{"location":"ai-service-reference/#1-modeladapter-abstract-class","title":"1. ModelAdapter (Abstract Class)","text":"<ul> <li>Defines standard methods for text generation, chat completions, and email-specific operations</li> <li>Provides configuration management for model parameters</li> <li>Implemented by provider-specific adapters</li> </ul>"},{"location":"ai-service-reference/#2-provider-adapters","title":"2. Provider Adapters","text":"<ul> <li>OpenAIAdapter: Implementation for OpenAI's GPT models</li> <li>AnthropicAdapter: Implementation for Anthropic's Claude models</li> <li>GoogleAIAdapter: Implementation for Google's Gemini models</li> <li>Each adapter handles API communication, error handling, and response parsing</li> </ul>"},{"location":"ai-service-reference/#3-aiservice","title":"3. AIService","text":"<ul> <li>Singleton service that provides a simplified interface to AI capabilities</li> <li>Manages adapter selection and configuration</li> <li>Exposes domain-specific methods for email marketing operations</li> </ul>"},{"location":"ai-service-reference/#4-enhanced-components","title":"4. Enhanced Components","text":"<ul> <li>EnhancedAIService: Extends the base AIService with advanced capabilities</li> <li>OctoToolsIntegration: Provides agent orchestration capabilities</li> <li>LangfuseTracing: Provides tracing and observability</li> <li>HeliconeIntegration: Provides cost tracking and optimization</li> </ul>"},{"location":"ai-service-reference/#integration-points","title":"Integration Points","text":"<p>The AI capabilities are integrated at several points in the user journey:</p> <ol> <li>Campaign Creation</li> <li>Subject line generation during campaign setup</li> <li>Template recommendations based on campaign goals</li> <li>Content optimization for email body</li> <li> <p>Performance prediction and content analysis</p> </li> <li> <p>Template Management</p> </li> <li>Content analysis for templates</li> <li>Optimization suggestions for template content</li> <li> <p>Performance insights based on template usage</p> </li> <li> <p>Campaign Analysis</p> </li> <li>Performance insights and recommendations</li> <li>Comparison with industry benchmarks</li> <li> <p>Targeted improvement suggestions</p> </li> <li> <p>Image Generation</p> </li> <li>Email banner creation</li> <li>Product image generation</li> <li> <p>Social media assets</p> </li> <li> <p>Audience Segmentation</p> </li> <li>Intelligent subscriber grouping</li> <li>Behavioral analysis</li> <li>Engagement prediction</li> </ol>"},{"location":"ai-service-reference/#features-capabilities","title":"Features &amp; Capabilities","text":""},{"location":"ai-service-reference/#email-content-generation","title":"Email Content Generation","text":"<p>The content generation capabilities allow users to create compelling email content with AI assistance:</p> <ul> <li>Complete Email Generation: Create full email drafts based on campaign goals and audience</li> <li>Section Generation: Generate specific sections of an email</li> <li>Content Variations: Create multiple variants for A/B testing</li> <li>Tone Adjustment: Modify content to match different brand voices and tones</li> <li>Personalization: Generate dynamic content based on audience segments</li> </ul> <pre><code>// Example generation options\ninterface ContentGenerationOptions {\n  topic: string;\n  audience: string;\n  tone: 'professional' | 'casual' | 'friendly' | 'urgent';\n  goal: 'inform' | 'convert' | 'engage' | 'educate';\n  length: 'short' | 'medium' | 'long';\n  includeHeadings: boolean;\n  includeCTA: boolean;\n}\n\n// Generate content\nconst content = await aiService.generateEmailContent({\n  topic: 'Summer Sale Announcement',\n  audience: 'existing customers',\n  tone: 'friendly',\n  goal: 'convert',\n  length: 'medium',\n  includeHeadings: true,\n  includeCTA: true\n});\n</code></pre>"},{"location":"ai-service-reference/#subject-line-optimization","title":"Subject Line Optimization","text":"<p>The subject line optimization features help users create more engaging subject lines:</p> <ul> <li>Subject Generation: Create compelling subject lines based on email content</li> <li>A/B Test Variations: Generate multiple subject line options for testing</li> <li>Personalization: Insert personalization elements for higher engagement</li> <li>Length Optimization: Adjust subject line length for different devices</li> <li>Emoji Suggestions: Recommend appropriate emojis to increase open rates</li> </ul> <pre><code>// Example usage\nconst subjectLines = await aiService.generateSubjectLines({\n  emailContent: '...',\n  variations: 5,\n  includeEmojis: true,\n  maxLength: 50\n});\n</code></pre>"},{"location":"ai-service-reference/#content-analysis","title":"Content Analysis","text":"<p>The content analysis capabilities provide insights and recommendations for improving email content:</p> <ul> <li>Readability Analysis: Evaluate and score content readability</li> <li>Tone Analysis: Identify the tone and suggest improvements</li> <li>Engagement Prediction: Estimate potential engagement based on content</li> <li>Spam Trigger Detection: Identify potential spam triggers</li> <li>Improvement Suggestions: Provide actionable recommendations</li> </ul> <pre><code>// Example analysis result\ninterface ContentAnalysisResult {\n  readabilityScore: number;\n  tone: string;\n  estimatedEngagement: {\n    openRate: number;\n    clickRate: number;\n  };\n  spamTriggers: string[];\n  suggestions: {\n    category: string;\n    description: string;\n    priority: 'high' | 'medium' | 'low';\n  }[];\n}\n\n// Analyze content\nconst analysis = await aiService.analyzeEmailContent(emailContent);\n</code></pre>"},{"location":"ai-service-reference/#template-recommendations","title":"Template Recommendations","text":"<p>The template recommendation system suggests the most appropriate templates based on campaign goals:</p> <ul> <li>Goal-Based Recommendations: Suggest templates based on campaign objectives</li> <li>Audience-Specific Suggestions: Recommend templates that work best for specific audience segments</li> <li>Historical Performance: Consider past performance when recommending templates</li> <li>Content Matching: Find templates that best match the campaign content</li> </ul>"},{"location":"ai-service-reference/#audience-segmentation","title":"Audience Segmentation","text":"<p>The AI-powered audience segmentation helps create more targeted campaigns:</p> <ul> <li>Behavioral Clustering: Group subscribers based on similar behaviors</li> <li>Engagement Prediction: Predict which subscribers are most likely to engage</li> <li>Optimal Send Time: Determine the best time to send to each segment</li> <li>Content Affinity: Identify content preferences for each segment</li> </ul>"},{"location":"ai-service-reference/#performance-prediction","title":"Performance Prediction","text":"<p>The performance prediction capabilities help estimate campaign results before sending:</p> <ul> <li>Open Rate Prediction: Estimate potential open rates</li> <li>Click Rate Prediction: Predict click-through rates</li> <li>Conversion Prediction: Estimate conversion potential</li> <li>ROI Calculation: Project potential return on investment</li> </ul>"},{"location":"ai-service-reference/#image-generation","title":"Image Generation","text":"<p>The image generation capabilities enable creation of visual assets:</p> <ul> <li>Email Banners: Create custom header images for campaigns</li> <li>Product Visualizations: Generate product images from descriptions</li> <li>Social Media Assets: Create coordinated social media graphics</li> <li>Image Variations: Generate multiple versions of images for testing</li> </ul>"},{"location":"ai-service-reference/#technical-implementation","title":"Technical Implementation","text":""},{"location":"ai-service-reference/#model-versioning-registry","title":"Model Versioning &amp; Registry","text":"<p>Maily uses two complementary tools for model versioning and registry:</p>"},{"location":"ai-service-reference/#weights-biases-integration","title":"Weights &amp; Biases Integration","text":"<pre><code>from ai.wandb_integration import wandb_registry\n\n# Log model metadata\nwandb_registry.log_model(\n    model_name=\"email-subject-generator\",\n    model_version=\"1.0.0\",\n    metadata={\n        \"base_model\": \"gpt-4o\",\n        \"fine_tuned\": True,\n        \"dataset_version\": \"v2.1\",\n        \"performance\": {\n            \"precision\": 0.92,\n            \"recall\": 0.89,\n            \"f1\": 0.91\n        }\n    }\n)\n\n# Retrieve model\nmodel_info = wandb_registry.get_model(\n    model_name=\"email-subject-generator\",\n    version=\"latest\"\n)\n</code></pre>"},{"location":"ai-service-reference/#dvc-integration","title":"DVC Integration","text":"<pre><code>from ai.dvc_integration import dvc_versioning\n\n# Version a model\ndvc_versioning.version_model(\n    model_path=\"models/email-subject-generator\",\n    model_name=\"email-subject-generator\",\n    version=\"1.0.0\"\n)\n\n# Get model comparison\ncomparison = dvc_versioning.compare_models(\n    model_name=\"email-subject-generator\",\n    version_a=\"1.0.0\",\n    version_b=\"1.1.0\"\n)\n</code></pre>"},{"location":"ai-service-reference/#ai-observability","title":"AI Observability","text":"<p>Maily uses a comprehensive observability stack for AI components:</p>"},{"location":"ai-service-reference/#langfuse-integration","title":"Langfuse Integration","text":"<pre><code>from ai.langfuse_integration import langfuse_tracing\n\n# Create trace\ntrace = langfuse_tracing.trace(\n    name=\"email_content_generation\",\n    metadata={\n        \"user_id\": user_id,\n        \"campaign_id\": campaign_id\n    }\n)\n\n# Log spans\nwith trace.span(name=\"template_selection\"):\n    # Logic for template selection\n    pass\n\nwith trace.span(name=\"content_generation\"):\n    # Logic for content generation\n    pass\n\n# Log metrics\ntrace.log_metric(\"token_count\", 1250)\ntrace.log_metric(\"generation_time_ms\", 800)\n\n# Complete trace\ntrace.end()\n</code></pre>"},{"location":"ai-service-reference/#arize-ai-integration","title":"Arize AI Integration","text":"<pre><code>from ai.arize_integration import arize_observability\n\n# Log a prediction\narize_observability.log_prediction(\n    model_id=\"email-subject-generator\",\n    model_version=\"1.0.0\",\n    prediction_id=\"pred-123\",\n    features={\n        \"audience\": \"marketing professionals\",\n        \"industry\": \"technology\",\n        \"campaign_objective\": \"product launch\"\n    },\n    prediction=\"Introducing the Next Generation of AI Tools\",\n    actual=\"Discover the Future of AI: New Tools Released\",\n    tags={\"campaign_id\": \"camp-456\"}\n)\n\n# Log feedback\narize_observability.log_feedback(\n    model_id=\"email-subject-generator\",\n    prediction_id=\"pred-123\",\n    feedback_id=\"feedback-789\",\n    feedback_type=\"human\",\n    feedback_score=4.5,\n    feedback_metadata={\"reviewer_id\": 789}\n)\n</code></pre>"},{"location":"ai-service-reference/#cost-management","title":"Cost Management","text":"<p>Maily implements robust cost tracking and optimization for AI usage:</p>"},{"location":"ai-service-reference/#helicone-integration","title":"Helicone Integration","text":"<pre><code>from ai.helicone_integration import helicone_cost_tracking\n\n# Get cost metrics\ncost_metrics = helicone_cost_tracking.get_cost_metrics(\n    start_date=\"2025-02-01\",\n    end_date=\"2025-03-01\",\n    group_by=[\"model\", \"user_id\"]\n)\n\n# Get usage trends\nusage_trends = helicone_cost_tracking.get_usage_trends(\n    last_days=30,\n    interval=\"day\"\n)\n\n# Set cost limit\nhelicone_cost_tracking.set_cost_limit(\n    limit=100.00,\n    period=\"daily\",\n    notification_email=\"alerts@maily.com\"\n)\n</code></pre>"},{"location":"ai-service-reference/#litellm-integration","title":"LiteLLM Integration","text":"<pre><code>from ai.litellm_integration import litellm_service\n\n# Route to most cost-effective model\nresponse = await litellm_service.completion(\n    model=\"gpt-4-turbo\",\n    messages=[{\"role\": \"user\", \"content\": \"Generate an email subject line about a summer sale\"}],\n    fallbacks=[\"claude-3-sonnet\", \"gemini-pro\"]\n)\n\n# Get token count\ntoken_count = await litellm_service.get_token_count(\n    text=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"gpt-4\"\n)\n\n# Get cost estimate\ncost_estimate = await litellm_service.get_cost_estimate(\n    prompt=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"anthropic/claude-3-opus-20240229\",\n    max_tokens=2000\n)\n</code></pre>"},{"location":"ai-service-reference/#frontend-integration","title":"Frontend Integration","text":"<p>All AI-related UI components follow these principles:</p> <ul> <li>Client-side React components with <code>'use client'</code> directive</li> <li>Responsive design with mobile-first approach</li> <li>Loading states and error handling</li> <li>Toast notifications for user feedback</li> <li>Accessible UI elements with keyboard navigation</li> </ul> <pre><code>'use client';\n\nimport { useState } from 'react';\nimport { useAI } from '@maily/hooks/useAI';\nimport { Button, Textarea, Spinner, Toast } from '@maily/ui';\n\nexport function SubjectLineGenerator({ emailContent, onSelect }) {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [subjectLines, setSubjectLines] = useState([]);\n  const { generateSubjectLines } = useAI();\n\n  const handleGenerate = async () =&gt; {\n    setIsGenerating(true);\n    try {\n      const lines = await generateSubjectLines(emailContent, { variations: 5 });\n      setSubjectLines(lines);\n    } catch (error) {\n      Toast.error('Failed to generate subject lines');\n      console.error(error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    &lt;div className=\"space-y-4\"&gt;\n      &lt;div className=\"flex justify-between\"&gt;\n        &lt;h3 className=\"text-lg font-medium\"&gt;AI Subject Line Generator&lt;/h3&gt;\n        &lt;Button\n          onClick={handleGenerate}\n          disabled={isGenerating}\n          variant=\"primary\"\n        &gt;\n          {isGenerating ? &lt;Spinner size=\"sm\" /&gt; : 'Generate'}\n        &lt;/Button&gt;\n      &lt;/div&gt;\n\n      {subjectLines.length &gt; 0 &amp;&amp; (\n        &lt;ul className=\"space-y-2\"&gt;\n          {subjectLines.map((line, index) =&gt; (\n            &lt;li\n              key={index}\n              className=\"p-3 border rounded-md hover:bg-gray-50 cursor-pointer\"\n              onClick={() =&gt; onSelect(line)}\n            &gt;\n              {line}\n            &lt;/li&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"ai-service-reference/#backend-integration","title":"Backend Integration","text":"<p>The AI service integrates with the backend through the enhanced AI service:</p> <pre><code>from ai.service_integration import enhanced_ai_service\n\n# Create an email campaign\ncampaign = await enhanced_ai_service.create_email_campaign(\n    campaign_data={\n        \"name\": \"Product Launch Campaign\",\n        \"subject\": \"Introducing the Next Generation of AI Tools\",\n        \"audience\": \"marketing professionals\",\n        \"objective\": \"product launch\",\n        \"task_type\": \"creative\",\n        \"generate_banner\": True,\n        \"user_id\": 123\n    },\n    langfuse_client=langfuse_client\n)\n\n# Analyze a campaign\nanalysis = await enhanced_ai_service.analyze_campaign(\n    campaign_id=\"camp-456\",\n    metrics=[\"open_rate\", \"click_rate\", \"conversion_rate\"],\n    langfuse_client=langfuse_client\n)\n\n# Generate subject lines\nsubject_lines = await enhanced_ai_service.generate_subject_lines(\n    email_content=\"Dear Marketing Professional,\\n\\nWe're excited to announce...\",\n    audience=\"marketing professionals\",\n    num_variations=5\n)\n</code></pre>"},{"location":"ai-service-reference/#service-configuration","title":"Service Configuration","text":""},{"location":"ai-service-reference/#environment-variables","title":"Environment Variables","text":"<pre><code># AI Services (Base)\nOPENAI_API_KEY=your_openai_api_key\nANTHROPIC_API_KEY=your_anthropic_api_key\nGOOGLE_API_KEY=your_google_api_key\n\n# Weights &amp; Biases for model versioning and experiment tracking\nWANDB_API_KEY=your_wandb_api_key\n\n# Arize AI for ML observability\nARIZE_API_KEY=your_arize_api_key\nARIZE_SPACE_KEY=your_arize_space_key\n\n# Stability AI for image generation\nSTABILITY_API_KEY=your_stability_api_key\nSTABILITY_API_HOST=https://api.stability.ai\n\n# Helicone for API cost tracking\nHELICONE_API_KEY=your_helicone_api_key\nHELICONE_BASE_URL=https://api.helicone.ai\n\n# LiteLLM for model routing\nLITELLM_CACHE_ENABLED=true\nLITELLM_CACHE_FOLDER=.cache/litellm\n\n# OctoTools Configuration\nOCTOTOOLS_PLANNER_MODEL=gpt-4o\nOCTOTOOLS_EXECUTOR_MODEL=gpt-4o\nOCTOTOOLS_MAX_STEPS=10\nOCTOTOOLS_TIMEOUT=300\n\n# AI Service Configuration\nAI_SERVICE_ENVIRONMENT=production\nAI_SERVICE_LOG_LEVEL=info\nAI_COST_LIMIT_DAILY=50.00\nAI_DEFAULT_PROVIDER=openai\n</code></pre>"},{"location":"ai-service-reference/#provider-configuration","title":"Provider Configuration","text":"<p>The AI service can be configured to use different providers:</p> <pre><code>{\n  \"providers\": {\n    \"openai\": {\n      \"default_model\": \"gpt-4o\",\n      \"fallback_model\": \"gpt-3.5-turbo\",\n      \"temperature\": 0.7,\n      \"max_tokens\": 2000\n    },\n    \"anthropic\": {\n      \"default_model\": \"claude-3-opus-20240229\",\n      \"fallback_model\": \"claude-3-sonnet-20240229\",\n      \"temperature\": 0.7,\n      \"max_tokens\": 4000\n    },\n    \"google\": {\n      \"default_model\": \"gemini-pro\",\n      \"temperature\": 0.7,\n      \"max_tokens\": 2048\n    }\n  },\n  \"features\": {\n    \"email_content_generation\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-opus-20240229\"\n    },\n    \"subject_line_generation\": {\n      \"provider\": \"openai\",\n      \"model\": \"gpt-4o\"\n    },\n    \"image_generation\": {\n      \"provider\": \"stability\",\n      \"model\": \"stable-diffusion-xl\"\n    }\n  }\n}\n</code></pre>"},{"location":"ai-service-reference/#model-selection","title":"Model Selection","text":"<p>The AI service automatically selects the best model based on the task requirements:</p> <ul> <li>Cost optimization: Balance between performance and cost</li> <li>Latency requirements: Select faster models for real-time features</li> <li>Capability requirements: Choose models with specific capabilities</li> <li>Fallback mechanisms: Automatically try alternative models if primary fails</li> </ul>"},{"location":"ai-service-reference/#migration-guide","title":"Migration Guide","text":""},{"location":"ai-service-reference/#migrating-from-legacy-ai-package","title":"Migrating from Legacy AI Package","text":"<p>The legacy AI package (<code>packages/ai</code>) is deprecated and will be removed after December 31, 2025. To migrate to the enhanced service:</p>"},{"location":"ai-service-reference/#1-update-imports","title":"1. Update Imports","text":"<pre><code>// Before\nimport { generateEmailContent } from '@maily/ai';\n\n// After\nimport { emailContentService } from '@maily/services/ai';\n</code></pre>"},{"location":"ai-service-reference/#2-update-function-calls","title":"2. Update Function Calls","text":"<pre><code>// Before\nconst content = await generateEmailContent({\n  topic: 'Welcome message',\n  tone: 'friendly'\n});\n\n// After\nconst content = await emailContentService.generate({\n  topic: 'Welcome message',\n  tone: 'friendly',\n  variations: 2 // New features available\n});\n</code></pre>"},{"location":"ai-service-reference/#3-add-new-features","title":"3. Add New Features","text":"<p>The enhanced service provides many new capabilities not available in the legacy package:</p> <pre><code>// New capabilities\nconst analysis = await emailContentService.analyze(content);\nconst optimized = await emailContentService.optimize(content);\nconst subjectLines = await emailContentService.generateSubjects(content, 5);\n</code></pre>"},{"location":"ai-service-reference/#api-changes","title":"API Changes","text":"Legacy API Enhanced API Notes <code>generateEmailContent()</code> <code>emailContentService.generate()</code> Enhanced with more options <code>analyzeEmailContent()</code> <code>emailContentService.analyze()</code> More detailed analysis <code>optimizeSubjectLine()</code> <code>emailContentService.optimizeSubject()</code> Multiple variations N/A <code>emailContentService.generateImage()</code> New capability N/A <code>emailContentService.segmentAudience()</code> New capability N/A <code>emailContentService.predictPerformance()</code> New capability"},{"location":"ai-service-reference/#usage-examples","title":"Usage Examples","text":""},{"location":"ai-service-reference/#frontend-usage","title":"Frontend Usage","text":"<pre><code>'use client';\n\nimport { useAI } from '@maily/hooks/useAI';\n\n// In a React component\nfunction EmailEditor() {\n  const {\n    generateContent,\n    analyzeContent,\n    optimizeContent,\n    generateSubjectLines\n  } = useAI();\n\n  const handleGenerateContent = async () =&gt; {\n    const content = await generateContent({\n      topic: 'Product Launch',\n      audience: 'Marketing Professionals',\n      tone: 'professional',\n      length: 'medium'\n    });\n\n    // Use the generated content\n    setEmailContent(content);\n  };\n\n  // More implementation details...\n}\n</code></pre>"},{"location":"ai-service-reference/#backend-usage","title":"Backend Usage","text":"<pre><code>// Server-side API route\nimport { AIService } from '@maily/services/ai';\n\nexport async function POST(request: Request) {\n  const { content, options } = await request.json();\n\n  try {\n    const aiService = new AIService();\n    const analysis = await aiService.analyzeContent(content);\n\n    return Response.json({\n      analysis,\n      recommendations: analysis.recommendations\n    });\n  } catch (error) {\n    console.error('AI analysis failed:', error);\n    return Response.json(\n      { error: 'Failed to analyze content' },\n      { status: 500 }\n    );\n  }\n}\n</code></pre>"},{"location":"ai-service-reference/#api-endpoints","title":"API Endpoints","text":"<p>The AI service exposes these REST API endpoints:</p> <pre><code>POST /api/ai/content/generate\nPOST /api/ai/content/analyze\nPOST /api/ai/content/optimize\nPOST /api/ai/subjects/generate\nPOST /api/ai/images/generate\nPOST /api/ai/audience/segment\nPOST /api/ai/campaign/predict\n</code></pre> <p>Example request:</p> <pre><code>POST /api/ai/content/generate HTTP/1.1\nHost: api.maily.com\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_TOKEN\n\n{\n  \"topic\": \"Summer Sale Announcement\",\n  \"audience\": \"Existing Customers\",\n  \"tone\": \"friendly\",\n  \"goal\": \"conversion\",\n  \"length\": \"medium\",\n  \"includeHeadings\": true,\n  \"includeCTA\": true\n}\n</code></pre>"},{"location":"ai-service-reference/#testing-evaluation","title":"Testing &amp; Evaluation","text":""},{"location":"ai-service-reference/#automated-testing","title":"Automated Testing","text":"<p>The AI components include comprehensive testing:</p> <pre><code># Run AI service tests\nnpm run test:ai\n\n# Run specific test suites\nnpm run test:ai -- --grep \"Subject Generation\"\n</code></pre> <p>Tests include: - Unit tests for all AI components - Integration tests with mock API responses - End-to-end tests with actual API calls (when API keys available) - Performance tests for response time benchmarking</p>"},{"location":"ai-service-reference/#model-evaluation","title":"Model Evaluation","text":"<p>Models are evaluated using these metrics:</p> <ul> <li>Quality: Human evaluation of output quality</li> <li>Relevance: Alignment with the provided prompt</li> <li>Consistency: Stability of results across multiple generations</li> <li>Performance: Response time and resource usage</li> <li>Cost: Token usage and API costs</li> </ul>"},{"location":"ai-service-reference/#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Benchmark results for key features:</p> Feature Average Response Time Token Usage Cost per Call Email Content Generation 1200ms ~800 tokens $0.016 Subject Line Generation 350ms ~150 tokens $0.003 Content Analysis 800ms ~500 tokens $0.010 Image Generation 3500ms N/A $0.020"},{"location":"ai-service-reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-service-reference/#common-issues","title":"Common Issues","text":""},{"location":"ai-service-reference/#rate-limiting","title":"Rate Limiting","text":"<p>Symptoms: 429 status codes, delayed responses, failed requests Solutions: - Implement exponential backoff - Use request batching - Distribute requests across multiple keys - Monitor usage and set alerts</p>"},{"location":"ai-service-reference/#model-availability","title":"Model Availability","text":"<p>Symptoms: Service unavailable errors, model not found errors Solutions: - Configure fallback models - Monitor provider status - Implement circuit breakers - Add redundancy across providers</p>"},{"location":"ai-service-reference/#content-filtering","title":"Content Filtering","text":"<p>Symptoms: Content rejected, policy violation errors Solutions: - Pre-filter user inputs - Adjust prompts to avoid sensitive topics - Implement content moderation - Provide clear guidelines to users</p>"},{"location":"ai-service-reference/#debugging-tools","title":"Debugging Tools","text":"<ul> <li>AI Service Logs: Detailed logs of AI interactions</li> <li>Request/Response Inspector: View full API requests and responses</li> <li>Token Counter: Estimate token usage before API calls</li> <li>Prompt Explorer: Test prompts with different configurations</li> <li>Cost Calculator: Estimate API costs for different models</li> </ul>"},{"location":"ai-service-reference/#future-roadmap","title":"Future Roadmap","text":"<p>Planned AI capabilities for future releases:</p> <ol> <li>AI-Powered Audience Segmentation</li> <li>Intelligent subscriber segmentation based on behavior and characteristics</li> <li>Recommendations for optimal targeting</li> <li> <p>Expected: Q3 2025</p> </li> <li> <p>Smart Campaign Scheduling</p> </li> <li>AI-determined optimal send times based on audience behavior</li> <li>Personalized scheduling for individual subscribers</li> <li> <p>Expected: Q4 2025</p> </li> <li> <p>Enhanced Content Generation</p> </li> <li>Complete email content generation based on campaign goals</li> <li>Dynamic content blocks based on subscriber data</li> <li> <p>Expected: Q2 2025</p> </li> <li> <p>Automated A/B Testing</p> </li> <li>AI-generated variants for testing</li> <li>Intelligent analysis of test results</li> <li>Automated optimization based on performance</li> <li> <p>Expected: Q3 2025</p> </li> <li> <p>Predictive Analytics</p> </li> <li>Revenue and engagement forecasting</li> <li>Churn prediction and prevention</li> <li>Expected: Q4 2025</li> </ol>"},{"location":"api-reference/","title":"Maily API Reference","text":"<p>Last updated: March 5, 2025</p>"},{"location":"api-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Authentication</li> <li>API Keys</li> <li>OAuth 2.0</li> <li>JWT Authentication</li> <li>Request Guidelines</li> <li>Base URL</li> <li>Headers</li> <li>Request Format</li> <li>Rate Limits</li> <li>Response Guidelines</li> <li>Status Codes</li> <li>Response Format</li> <li>Pagination</li> <li>Error Handling</li> <li>Core Resources</li> <li>Campaigns</li> <li>Templates</li> <li>Subscribers</li> <li>Lists</li> <li>Analytics</li> <li>Webhooks</li> <li>AI Features</li> <li>Integrations API</li> <li>CRM Integration</li> <li>E-commerce Integration</li> <li>Marketing Tools</li> <li>Admin API</li> <li>User Management</li> <li>Team Management</li> <li>Billing</li> <li>Audit Logs</li> <li>Webhooks Reference</li> <li>Events</li> <li>Payloads</li> <li>Security</li> <li>Appendix</li> <li>API Changelog</li> <li>Deprecation Policy</li> <li>Status Page</li> <li>Support</li> </ul>"},{"location":"api-reference/#overview","title":"Overview","text":"<p>This API Reference consolidates comprehensive information about the Maily platform's REST API, which enables programmatic access to email marketing functionality. This document serves as the single source of truth for developers integrating with the Maily platform.</p> <p>The Maily API is organized around REST principles. It uses standard HTTP verbs, returns JSON responses, includes predictable resource-oriented URLs, and uses HTTP status codes to indicate errors. All API access is over HTTPS, and all data is sent and received as JSON.</p> <p>Key features of the Maily API:</p> <ul> <li>Comprehensive Coverage: Access to all Maily platform capabilities</li> <li>Consistent Design: Predictable URL patterns and response structures</li> <li>Secure: TLS encryption and multiple authentication options</li> <li>Versioned: Backward compatibility with clear deprecation policies</li> <li>Developer-Friendly: Detailed documentation and SDKs</li> </ul>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<p>The Maily API supports three authentication methods:</p>"},{"location":"api-reference/#api-keys","title":"API Keys","text":"<p>API keys provide simple token-based authentication. Include your API key in the request header:</p> <pre><code>GET /api/v1/campaigns HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>API key management: - Generate keys in the account settings page - Each key has configurable permissions - Always keep keys secure and never expose them in client-side code - Rotate keys regularly for security</p>"},{"location":"api-reference/#oauth-20","title":"OAuth 2.0","text":"<p>OAuth 2.0 is supported for integrations requiring user authorization:</p> <ol> <li>Register your application in the Maily developer portal</li> <li>Redirect users to the authorization URL:</li> </ol> <pre><code>https://app.maily.io/oauth/authorize?\n  client_id=YOUR_CLIENT_ID&amp;\n  redirect_uri=YOUR_REDIRECT_URI&amp;\n  response_type=code&amp;\n  scope=campaigns:read subscribers:write\n</code></pre> <ol> <li>Exchange the authorization code for an access token:</li> </ol> <pre><code>POST /oauth/token HTTP/1.1\nHost: api.maily.io\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&amp;\ncode=AUTHORIZATION_CODE&amp;\nclient_id=YOUR_CLIENT_ID&amp;\nclient_secret=YOUR_CLIENT_SECRET&amp;\nredirect_uri=YOUR_REDIRECT_URI\n</code></pre> <ol> <li>Use the access token in your API requests:</li> </ol> <pre><code>GET /api/v1/campaigns HTTP/1.1\nHost: api.maily.io\nAuthorization: Bearer YOUR_ACCESS_TOKEN\n</code></pre>"},{"location":"api-reference/#jwt-authentication","title":"JWT Authentication","text":"<p>For server-to-server integrations, JWT authentication is recommended:</p> <ol> <li>Generate a JWT using your API secret:</li> </ol> <pre><code>const jwt = require('jsonwebtoken');\nconst payload = {\n  iss: 'your_app_id',\n  exp: Math.floor(Date.now() / 1000) + (60 * 60), // 1 hour expiration\n  iat: Math.floor(Date.now() / 1000)\n};\n\nconst token = jwt.sign(payload, 'your_api_secret');\n</code></pre> <ol> <li>Include the JWT in your API requests:</li> </ol> <pre><code>GET /api/v1/campaigns HTTP/1.1\nHost: api.maily.io\nAuthorization: Bearer YOUR_JWT_TOKEN\n</code></pre>"},{"location":"api-reference/#request-guidelines","title":"Request Guidelines","text":""},{"location":"api-reference/#base-url","title":"Base URL","text":"<p>All API requests should be made to the following base URL:</p> <pre><code>https://api.maily.io/api/v1/\n</code></pre> <p>For region-specific deployments:</p> <pre><code>https://{region}.api.maily.io/api/v1/\n</code></pre> <p>Where <code>{region}</code> is one of: - <code>us</code> - United States (default) - <code>eu</code> - European Union - <code>ap</code> - Asia Pacific - <code>ca</code> - Canada</p>"},{"location":"api-reference/#headers","title":"Headers","text":"<p>The following headers should be included with every request:</p> Header Required Description <code>Content-Type</code> Yes Set to <code>application/json</code> for request bodies <code>Accept</code> Yes Set to <code>application/json</code> <code>X-API-Key</code> or <code>Authorization</code> Yes Authentication credentials <code>X-Idempotency-Key</code> No Unique key for idempotent requests <code>X-Request-ID</code> No Client-generated request identifier for tracing <p>Example headers:</p> <pre><code>Content-Type: application/json\nAccept: application/json\nX-API-Key: your_api_key_here\nX-Idempotency-Key: 123e4567-e89b-12d3-a456-426614174000\nX-Request-ID: req_1234567890\n</code></pre>"},{"location":"api-reference/#request-format","title":"Request Format","text":"<p>For <code>POST</code>, <code>PUT</code>, and <code>PATCH</code> requests, the request body should be valid JSON:</p> <pre><code>{\n  \"name\": \"Black Friday Campaign\",\n  \"subject\": \"Don't Miss Our Biggest Sale!\",\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Sale Now!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"Sale Now!\"\n  },\n  \"list_id\": \"list_1a2b3c4d5e\",\n  \"schedule\": {\n    \"send_at\": \"2025-11-27T08:00:00Z\"\n  }\n}\n</code></pre> <p>For <code>GET</code> requests, parameters should be included in the query string:</p> <pre><code>/api/v1/campaigns?status=draft&amp;limit=10&amp;page=2\n</code></pre>"},{"location":"api-reference/#rate-limits","title":"Rate Limits","text":"<p>The Maily API implements rate limiting to ensure fair usage and platform stability:</p> Plan Rate Limit Burst Limit Free 60 requests/minute 100 requests/minute Standard 180 requests/minute 300 requests/minute Premium 600 requests/minute 1000 requests/minute Enterprise Custom Custom <p>Rate limit headers are included in all responses:</p> <pre><code>X-RateLimit-Limit: 180\nX-RateLimit-Remaining: 179\nX-RateLimit-Reset: 1614556800\n</code></pre> <p>When rate limits are exceeded, the API returns a <code>429 Too Many Requests</code> status code with a <code>Retry-After</code> header indicating when to retry.</p>"},{"location":"api-reference/#response-guidelines","title":"Response Guidelines","text":""},{"location":"api-reference/#status-codes","title":"Status Codes","text":"<p>The Maily API uses conventional HTTP status codes to indicate the success or failure of requests:</p> Code Description 200 OK - The request was successful 201 Created - The resource was successfully created 204 No Content - The request was successful, but no content is returned 400 Bad Request - The request contains invalid parameters 401 Unauthorized - Authentication credentials are missing or invalid 403 Forbidden - The authenticated user doesn't have permission 404 Not Found - The requested resource doesn't exist 422 Unprocessable Entity - The request is well-formed but cannot be processed 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - An error occurred on the server 503 Service Unavailable - The service is temporarily unavailable"},{"location":"api-reference/#response-format","title":"Response Format","text":"<p>All API responses are returned in JSON format. A typical successful response follows this structure:</p> <pre><code>{\n  \"data\": {\n    \"id\": \"camp_1a2b3c4d5e\",\n    \"name\": \"Black Friday Campaign\",\n    \"subject\": \"Don't Miss Our Biggest Sale!\",\n    \"status\": \"draft\",\n    \"created_at\": \"2025-03-01T12:00:00Z\",\n    \"updated_at\": \"2025-03-01T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre> <p>For collection endpoints, the response includes an array of objects and pagination information:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"camp_1a2b3c4d5e\",\n      \"name\": \"Black Friday Campaign\",\n      \"status\": \"draft\"\n    },\n    {\n      \"id\": \"camp_2f3g4h5i6j\",\n      \"name\": \"Welcome Series\",\n      \"status\": \"active\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 42,\n      \"count\": 2,\n      \"per_page\": 10,\n      \"current_page\": 1,\n      \"total_pages\": 5,\n      \"links\": {\n        \"next\": \"https://api.maily.io/api/v1/campaigns?page=2\"\n      }\n    }\n  }\n}\n</code></pre> <p>Error responses follow a standard format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"invalid_parameter\",\n    \"message\": \"The provided campaign name is too long\",\n    \"details\": [\n      {\n        \"field\": \"name\",\n        \"message\": \"Must be less than 100 characters\"\n      }\n    ]\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#pagination","title":"Pagination","text":"<p>Collection endpoints support pagination through the following query parameters:</p> Parameter Default Description <code>page</code> 1 Page number to retrieve <code>per_page</code> 10 Number of items per page (max 100) <code>sort</code> created_at Field to sort by <code>order</code> desc Sort order (asc or desc) <p>The response includes pagination metadata and links for navigating between pages:</p> <pre><code>\"meta\": {\n  \"pagination\": {\n    \"total\": 42,\n    \"count\": 10,\n    \"per_page\": 10,\n    \"current_page\": 1,\n    \"total_pages\": 5,\n    \"links\": {\n      \"next\": \"https://api.maily.io/api/v1/campaigns?page=2\",\n      \"last\": \"https://api.maily.io/api/v1/campaigns?page=5\"\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes to indicate the result of requests. All error responses include a consistent structure:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"error_code\",\n    \"message\": \"Human-readable error message\",\n    \"details\": [\n      {\n        \"field\": \"affected_field\",\n        \"message\": \"Specific error for this field\"\n      }\n    ]\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre> <p>Common error codes include:</p> Error Code Description <code>authentication_required</code> No authentication credentials provided <code>invalid_credentials</code> The provided credentials are invalid <code>insufficient_permissions</code> The authenticated user lacks required permissions <code>resource_not_found</code> The requested resource doesn't exist <code>validation_error</code> The request contains invalid data <code>rate_limit_exceeded</code> Too many requests have been made in a given time period <code>server_error</code> An unexpected error occurred on the server"},{"location":"api-reference/#core-resources","title":"Core Resources","text":""},{"location":"api-reference/#campaigns","title":"Campaigns","text":"<p>Campaigns are the core resource for managing email marketing campaigns.</p>"},{"location":"api-reference/#the-campaign-object","title":"The Campaign Object","text":"<pre><code>{\n  \"id\": \"camp_1a2b3c4d5e\",\n  \"name\": \"Black Friday Campaign\",\n  \"subject\": \"Don't Miss Our Biggest Sale!\",\n  \"preheader\": \"Up to 50% off everything\",\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Sale Now!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"Sale Now!\"\n  },\n  \"status\": \"draft\",\n  \"list_id\": \"list_1a2b3c4d5e\",\n  \"sender\": {\n    \"name\": \"Maily Store\",\n    \"email\": \"marketing@example.com\"\n  },\n  \"schedule\": {\n    \"send_at\": \"2025-11-27T08:00:00Z\",\n    \"timezone\": \"America/New_York\"\n  },\n  \"tracking\": {\n    \"opens\": true,\n    \"clicks\": true,\n    \"google_analytics\": true\n  },\n  \"stats\": {\n    \"recipients\": 5000,\n    \"sent\": 4997,\n    \"opens\": 1250,\n    \"clicks\": 350,\n    \"bounces\": 3,\n    \"unsubscribes\": 5\n  },\n  \"created_at\": \"2025-03-01T12:00:00Z\",\n  \"updated_at\": \"2025-03-05T09:30:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#endpoints","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/campaigns</code> List all campaigns <code>POST</code> <code>/campaigns</code> Create a new campaign <code>GET</code> <code>/campaigns/:id</code> Retrieve a campaign <code>PATCH</code> <code>/campaigns/:id</code> Update a campaign <code>DELETE</code> <code>/campaigns/:id</code> Delete a campaign <code>POST</code> <code>/campaigns/:id/send</code> Send a campaign <code>POST</code> <code>/campaigns/:id/schedule</code> Schedule a campaign <code>POST</code> <code>/campaigns/:id/test</code> Send a test email <code>GET</code> <code>/campaigns/:id/stats</code> Get campaign statistics"},{"location":"api-reference/#list-campaigns","title":"List Campaigns","text":"<pre><code>GET /api/v1/campaigns HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Query parameters:</p> Parameter Description <code>status</code> Filter by status: <code>draft</code>, <code>scheduled</code>, <code>sending</code>, <code>sent</code>, <code>archived</code> <code>from_date</code> Filter by creation date (ISO 8601) <code>to_date</code> Filter by creation date (ISO 8601) <code>folder_id</code> Filter by folder <p>Response:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"camp_1a2b3c4d5e\",\n      \"name\": \"Black Friday Campaign\",\n      \"subject\": \"Don't Miss Our Biggest Sale!\",\n      \"status\": \"draft\",\n      \"created_at\": \"2025-03-01T12:00:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 42,\n      \"count\": 1,\n      \"per_page\": 10,\n      \"current_page\": 1,\n      \"total_pages\": 5,\n      \"links\": {\n        \"next\": \"https://api.maily.io/api/v1/campaigns?page=2\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/#create-a-campaign","title":"Create a Campaign","text":"<pre><code>POST /api/v1/campaigns HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"name\": \"Black Friday Campaign\",\n  \"subject\": \"Don't Miss Our Biggest Sale!\",\n  \"preheader\": \"Up to 50% off everything\",\n  \"list_id\": \"list_1a2b3c4d5e\",\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Sale Now!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"Sale Now!\"\n  },\n  \"sender\": {\n    \"name\": \"Maily Store\",\n    \"email\": \"marketing@example.com\"\n  }\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"camp_1a2b3c4d5e\",\n    \"name\": \"Black Friday Campaign\",\n    \"subject\": \"Don't Miss Our Biggest Sale!\",\n    \"preheader\": \"Up to 50% off everything\",\n    \"status\": \"draft\",\n    \"list_id\": \"list_1a2b3c4d5e\",\n    \"content\": {\n      \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Sale Now!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\",\n      \"text\": \"Sale Now!\"\n    },\n    \"sender\": {\n      \"name\": \"Maily Store\",\n      \"email\": \"marketing@example.com\"\n    },\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#update-a-campaign","title":"Update a Campaign","text":"<pre><code>PATCH /api/v1/campaigns/camp_1a2b3c4d5e HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"subject\": \"FINAL HOURS: Don't Miss Our Biggest Sale!\",\n  \"preheader\": \"Up to 70% off everything - ends tonight!\"\n}\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"camp_1a2b3c4d5e\",\n    \"name\": \"Black Friday Campaign\",\n    \"subject\": \"FINAL HOURS: Don't Miss Our Biggest Sale!\",\n    \"preheader\": \"Up to 70% off everything - ends tonight!\",\n    \"status\": \"draft\",\n    \"list_id\": \"list_1a2b3c4d5e\",\n    \"content\": {\n      \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Sale Now!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\",\n      \"text\": \"Sale Now!\"\n    },\n    \"sender\": {\n      \"name\": \"Maily Store\",\n      \"email\": \"marketing@example.com\"\n    },\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:15:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#send-a-campaign","title":"Send a Campaign","text":"<pre><code>POST /api/v1/campaigns/camp_1a2b3c4d5e/send HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"confirm\": true\n}\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"camp_1a2b3c4d5e\",\n    \"status\": \"sending\",\n    \"sent_at\": \"2025-03-05T12:30:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#schedule-a-campaign","title":"Schedule a Campaign","text":"<pre><code>POST /api/v1/campaigns/camp_1a2b3c4d5e/schedule HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"send_at\": \"2025-11-27T08:00:00Z\",\n  \"timezone\": \"America/New_York\"\n}\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"camp_1a2b3c4d5e\",\n    \"status\": \"scheduled\",\n    \"schedule\": {\n      \"send_at\": \"2025-11-27T08:00:00Z\",\n      \"timezone\": \"America/New_York\"\n    }\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#templates","title":"Templates","text":"<p>Templates are reusable email designs that can be used across multiple campaigns.</p>"},{"location":"api-reference/#the-template-object","title":"The Template Object","text":"<pre><code>{\n  \"id\": \"tmpl_1a2b3c4d5e\",\n  \"name\": \"Product Announcement\",\n  \"description\": \"Template for new product announcements\",\n  \"category\": \"marketing\",\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;{{content}}&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"{{content}}\"\n  },\n  \"thumbnail_url\": \"https://assets.maily.io/thumbnails/tmpl_1a2b3c4d5e.png\",\n  \"variables\": [\n    {\n      \"name\": \"content\",\n      \"type\": \"rich_text\",\n      \"required\": true\n    },\n    {\n      \"name\": \"product_name\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"name\": \"product_image\",\n      \"type\": \"image\",\n      \"required\": false\n    }\n  ],\n  \"created_at\": \"2025-01-15T10:00:00Z\",\n  \"updated_at\": \"2025-02-20T14:30:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#endpoints_1","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/templates</code> List all templates <code>POST</code> <code>/templates</code> Create a new template <code>GET</code> <code>/templates/:id</code> Retrieve a template <code>PATCH</code> <code>/templates/:id</code> Update a template <code>DELETE</code> <code>/templates/:id</code> Delete a template <code>POST</code> <code>/templates/:id/duplicate</code> Duplicate a template <code>GET</code> <code>/templates/categories</code> List template categories"},{"location":"api-reference/#list-templates","title":"List Templates","text":"<pre><code>GET /api/v1/templates HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Query parameters:</p> Parameter Description <code>category</code> Filter by category <code>search</code> Search by name or description <p>Response:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"tmpl_1a2b3c4d5e\",\n      \"name\": \"Product Announcement\",\n      \"description\": \"Template for new product announcements\",\n      \"category\": \"marketing\",\n      \"thumbnail_url\": \"https://assets.maily.io/thumbnails/tmpl_1a2b3c4d5e.png\",\n      \"created_at\": \"2025-01-15T10:00:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 25,\n      \"count\": 1,\n      \"per_page\": 10,\n      \"current_page\": 1,\n      \"total_pages\": 3,\n      \"links\": {\n        \"next\": \"https://api.maily.io/api/v1/templates?page=2\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/#create-a-template","title":"Create a Template","text":"<pre><code>POST /api/v1/templates HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"name\": \"Product Announcement\",\n  \"description\": \"Template for new product announcements\",\n  \"category\": \"marketing\",\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;{{content}}&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"{{content}}\"\n  },\n  \"variables\": [\n    {\n      \"name\": \"content\",\n      \"type\": \"rich_text\",\n      \"required\": true\n    },\n    {\n      \"name\": \"product_name\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"name\": \"product_image\",\n      \"type\": \"image\",\n      \"required\": false\n    }\n  ]\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"tmpl_1a2b3c4d5e\",\n    \"name\": \"Product Announcement\",\n    \"description\": \"Template for new product announcements\",\n    \"category\": \"marketing\",\n    \"content\": {\n      \"html\": \"&lt;html&gt;&lt;body&gt;{{content}}&lt;/body&gt;&lt;/html&gt;\",\n      \"text\": \"{{content}}\"\n    },\n    \"thumbnail_url\": \"https://assets.maily.io/thumbnails/tmpl_1a2b3c4d5e.png\",\n    \"variables\": [\n      {\n        \"name\": \"content\",\n        \"type\": \"rich_text\",\n        \"required\": true\n      },\n      {\n        \"name\": \"product_name\",\n        \"type\": \"text\",\n        \"required\": true\n      },\n      {\n        \"name\": \"product_image\",\n        \"type\": \"image\",\n        \"required\": false\n      }\n    ],\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#subscribers","title":"Subscribers","text":"<p>Subscribers represent the individuals who receive your emails.</p>"},{"location":"api-reference/#the-subscriber-object","title":"The Subscriber Object","text":"<pre><code>{\n  \"id\": \"sub_1a2b3c4d5e\",\n  \"email\": \"john.doe@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"status\": \"active\",\n  \"source\": \"signup_form\",\n  \"custom_fields\": {\n    \"company\": \"Acme Inc\",\n    \"industry\": \"Technology\",\n    \"age\": 32\n  },\n  \"tags\": [\"premium\", \"webinar-attendee\"],\n  \"lists\": [\n    {\n      \"id\": \"list_1a2b3c4d5e\",\n      \"name\": \"Marketing Newsletter\"\n    }\n  ],\n  \"engagement\": {\n    \"emails_received\": 15,\n    \"emails_opened\": 10,\n    \"emails_clicked\": 6,\n    \"last_engagement_date\": \"2025-02-28T15:45:00Z\"\n  },\n  \"created_at\": \"2024-10-15T09:30:00Z\",\n  \"updated_at\": \"2025-03-01T12:00:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#endpoints_2","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/subscribers</code> List all subscribers <code>POST</code> <code>/subscribers</code> Create a new subscriber <code>GET</code> <code>/subscribers/:id</code> Retrieve a subscriber <code>PATCH</code> <code>/subscribers/:id</code> Update a subscriber <code>DELETE</code> <code>/subscribers/:id</code> Delete a subscriber <code>POST</code> <code>/subscribers/import</code> Bulk import subscribers <code>GET</code> <code>/subscribers/:id/activity</code> Get subscriber activity <code>POST</code> <code>/subscribers/:id/tags</code> Add tags to a subscriber <code>DELETE</code> <code>/subscribers/:id/tags</code> Remove tags from a subscriber"},{"location":"api-reference/#list-subscribers","title":"List Subscribers","text":"<pre><code>GET /api/v1/subscribers HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Query parameters:</p> Parameter Description <code>status</code> Filter by status: <code>active</code>, <code>unsubscribed</code>, <code>bounced</code>, <code>complained</code> <code>list_id</code> Filter by list ID <code>tag</code> Filter by tag <code>email</code> Search by email <code>from_date</code> Filter by creation date (ISO 8601) <code>to_date</code> Filter by creation date (ISO 8601) <p>Response:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"sub_1a2b3c4d5e\",\n      \"email\": \"john.doe@example.com\",\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"status\": \"active\",\n      \"created_at\": \"2024-10-15T09:30:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 35000,\n      \"count\": 1,\n      \"per_page\": 10,\n      \"current_page\": 1,\n      \"total_pages\": 3500,\n      \"links\": {\n        \"next\": \"https://api.maily.io/api/v1/subscribers?page=2\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/#create-a-subscriber","title":"Create a Subscriber","text":"<pre><code>POST /api/v1/subscribers HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"email\": \"john.doe@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"list_ids\": [\"list_1a2b3c4d5e\"],\n  \"tags\": [\"new-customer\"],\n  \"custom_fields\": {\n    \"company\": \"Acme Inc\",\n    \"industry\": \"Technology\"\n  }\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"sub_1a2b3c4d5e\",\n    \"email\": \"john.doe@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"status\": \"active\",\n    \"source\": \"api\",\n    \"custom_fields\": {\n      \"company\": \"Acme Inc\",\n      \"industry\": \"Technology\"\n    },\n    \"tags\": [\"new-customer\"],\n    \"lists\": [\n      {\n        \"id\": \"list_1a2b3c4d5e\",\n        \"name\": \"Marketing Newsletter\"\n      }\n    ],\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#bulk-import-subscribers","title":"Bulk Import Subscribers","text":"<pre><code>POST /api/v1/subscribers/import HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"list_ids\": [\"list_1a2b3c4d5e\"],\n  \"tags\": [\"imported\", \"2025-q1\"],\n  \"subscribers\": [\n    {\n      \"email\": \"john.doe@example.com\",\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"custom_fields\": {\n        \"company\": \"Acme Inc\"\n      }\n    },\n    {\n      \"email\": \"jane.smith@example.com\",\n      \"first_name\": \"Jane\",\n      \"last_name\": \"Smith\",\n      \"custom_fields\": {\n        \"company\": \"XYZ Corp\"\n      }\n    }\n  ],\n  \"update_existing\": true\n}\n</code></pre> <p>Response (202 Accepted):</p> <pre><code>{\n  \"data\": {\n    \"import_id\": \"imp_1a2b3c4d5e\",\n    \"status\": \"processing\",\n    \"total_records\": 2,\n    \"estimated_completion_time\": \"2025-03-05T12:01:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#lists","title":"Lists","text":"<p>Lists are collections of subscribers to whom you can send campaigns.</p>"},{"location":"api-reference/#the-list-object","title":"The List Object","text":"<pre><code>{\n  \"id\": \"list_1a2b3c4d5e\",\n  \"name\": \"Marketing Newsletter\",\n  \"description\": \"Our main newsletter list for marketing communications\",\n  \"status\": \"active\",\n  \"total_subscribers\": 12500,\n  \"active_subscribers\": 12350,\n  \"growth_rate\": {\n    \"last_30_days\": 2.5,\n    \"last_90_days\": 8.1\n  },\n  \"created_at\": \"2024-01-10T14:30:00Z\",\n  \"updated_at\": \"2025-03-01T16:45:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#endpoints_3","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/lists</code> List all subscriber lists <code>POST</code> <code>/lists</code> Create a new list <code>GET</code> <code>/lists/:id</code> Retrieve a list <code>PATCH</code> <code>/lists/:id</code> Update a list <code>DELETE</code> <code>/lists/:id</code> Delete a list <code>GET</code> <code>/lists/:id/subscribers</code> Get list subscribers <code>POST</code> <code>/lists/:id/subscribers</code> Add subscribers to a list <code>DELETE</code> <code>/lists/:id/subscribers</code> Remove subscribers from a list <code>GET</code> <code>/lists/:id/stats</code> Get list statistics"},{"location":"api-reference/#list-all-lists","title":"List All Lists","text":"<pre><code>GET /api/v1/lists HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Response:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"list_1a2b3c4d5e\",\n      \"name\": \"Marketing Newsletter\",\n      \"description\": \"Our main newsletter list for marketing communications\",\n      \"status\": \"active\",\n      \"total_subscribers\": 12500,\n      \"created_at\": \"2024-01-10T14:30:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 5,\n      \"count\": 1,\n      \"per_page\": 10,\n      \"current_page\": 1,\n      \"total_pages\": 1\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/#create-a-list","title":"Create a List","text":"<pre><code>POST /api/v1/lists HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"name\": \"Product Updates\",\n  \"description\": \"Subscribers interested in product updates and new features\"\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"list_2f3g4h5i6j\",\n    \"name\": \"Product Updates\",\n    \"description\": \"Subscribers interested in product updates and new features\",\n    \"status\": \"active\",\n    \"total_subscribers\": 0,\n    \"active_subscribers\": 0,\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#analytics","title":"Analytics","text":"<p>The Analytics API provides access to performance data for campaigns, lists, and subscribers.</p>"},{"location":"api-reference/#endpoints_4","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/analytics/campaigns</code> Get campaign performance metrics <code>GET</code> <code>/analytics/lists</code> Get list growth and engagement metrics <code>GET</code> <code>/analytics/subscribers</code> Get subscriber engagement metrics <code>GET</code> <code>/analytics/overview</code> Get account-wide performance dashboard <code>GET</code> <code>/analytics/trends</code> Get trend data over time <code>GET</code> <code>/analytics/comparison</code> Compare performance between time periods"},{"location":"api-reference/#campaign-analytics","title":"Campaign Analytics","text":"<pre><code>GET /api/v1/analytics/campaigns HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Query parameters:</p> Parameter Description <code>campaign_ids</code> Filter by specific campaigns (comma-separated) <code>from_date</code> Start date for analytics (ISO 8601) <code>to_date</code> End date for analytics (ISO 8601) <code>metrics</code> Metrics to include (comma-separated): <code>sends</code>, <code>opens</code>, <code>clicks</code>, <code>bounces</code>, <code>unsubscribes</code>, <code>complaints</code> <code>group_by</code> Group results by: <code>day</code>, <code>week</code>, <code>month</code>, <code>campaign</code> <p>Response:</p> <pre><code>{\n  \"data\": {\n    \"summary\": {\n      \"total_campaigns\": 5,\n      \"total_sends\": 75000,\n      \"total_opens\": 24750,\n      \"total_clicks\": 6825,\n      \"avg_open_rate\": 33.0,\n      \"avg_click_rate\": 9.1,\n      \"avg_click_to_open_rate\": 27.6\n    },\n    \"campaigns\": [\n      {\n        \"id\": \"camp_1a2b3c4d5e\",\n        \"name\": \"Black Friday Campaign\",\n        \"sent_at\": \"2024-11-27T08:00:00Z\",\n        \"metrics\": {\n          \"sends\": 15000,\n          \"opens\": 5250,\n          \"clicks\": 1575,\n          \"bounces\": 45,\n          \"unsubscribes\": 30,\n          \"complaints\": 3,\n          \"open_rate\": 35.0,\n          \"click_rate\": 10.5,\n          \"bounce_rate\": 0.3,\n          \"unsubscribe_rate\": 0.2\n        }\n      }\n    ],\n    \"trends\": {\n      \"dates\": [\"2024-11-20\", \"2024-11-27\", \"2024-12-04\", \"2024-12-11\", \"2024-12-18\"],\n      \"metrics\": {\n        \"open_rate\": [33.2, 35.0, 32.8, 31.5, 32.5],\n        \"click_rate\": [9.8, 10.5, 9.2, 8.6, 8.9]\n      }\n    }\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\",\n    \"from_date\": \"2024-11-01T00:00:00Z\",\n    \"to_date\": \"2024-12-31T23:59:59Z\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#webhooks","title":"Webhooks","text":"<p>Webhooks allow you to receive real-time notifications about events in your Maily account.</p>"},{"location":"api-reference/#the-webhook-object","title":"The Webhook Object","text":"<pre><code>{\n  \"id\": \"whk_1a2b3c4d5e\",\n  \"name\": \"Email Events Handler\",\n  \"url\": \"https://example.com/webhooks/maily\",\n  \"events\": [\"email.sent\", \"email.opened\", \"email.clicked\", \"subscriber.created\"],\n  \"secret\": \"whsec_\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\",\n  \"status\": \"active\",\n  \"created_at\": \"2025-01-15T10:00:00Z\",\n  \"updated_at\": \"2025-02-20T14:30:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#endpoints_5","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/webhooks</code> List all webhooks <code>POST</code> <code>/webhooks</code> Create a new webhook <code>GET</code> <code>/webhooks/:id</code> Retrieve a webhook <code>PATCH</code> <code>/webhooks/:id</code> Update a webhook <code>DELETE</code> <code>/webhooks/:id</code> Delete a webhook <code>POST</code> <code>/webhooks/:id/test</code> Send a test event to the webhook"},{"location":"api-reference/#create-a-webhook","title":"Create a Webhook","text":"<pre><code>POST /api/v1/webhooks HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"name\": \"Email Events Handler\",\n  \"url\": \"https://example.com/webhooks/maily\",\n  \"events\": [\"email.sent\", \"email.opened\", \"email.clicked\"]\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"whk_1a2b3c4d5e\",\n    \"name\": \"Email Events Handler\",\n    \"url\": \"https://example.com/webhooks/maily\",\n    \"events\": [\"email.sent\", \"email.opened\", \"email.clicked\"],\n    \"secret\": \"whsec_f7g8h9i0j1k2l3m4n5o6p7q8\",\n    \"status\": \"active\",\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#example-webhook-payload","title":"Example Webhook Payload","text":"<pre><code>{\n  \"id\": \"evt_1a2b3c4d5e\",\n  \"type\": \"email.opened\",\n  \"created_at\": \"2025-03-05T15:30:45Z\",\n  \"data\": {\n    \"campaign_id\": \"camp_1a2b3c4d5e\",\n    \"campaign_name\": \"Black Friday Campaign\",\n    \"subscriber_id\": \"sub_1a2b3c4d5e\",\n    \"email\": \"john.doe@example.com\",\n    \"message_id\": \"msg_1a2b3c4d5e\",\n    \"ip_address\": \"198.51.100.42\",\n    \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n    \"device_type\": \"desktop\",\n    \"operating_system\": \"macOS\",\n    \"client\": \"Chrome\",\n    \"first_open\": true,\n    \"timestamp\": \"2025-03-05T15:30:45Z\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#ai-features","title":"AI Features","text":"<p>The AI Features API provides access to Maily's AI-powered capabilities for email marketing.</p>"},{"location":"api-reference/#endpoints_6","title":"Endpoints","text":"Method Endpoint Description <code>POST</code> <code>/ai/generate-subject</code> Generate email subject lines <code>POST</code> <code>/ai/generate-content</code> Generate email content <code>POST</code> <code>/ai/optimize-preview</code> Optimize email preview text <code>POST</code> <code>/ai/analyze-content</code> Analyze content for deliverability and engagement <code>POST</code> <code>/ai/segment-recommendations</code> Get AI-powered segment recommendations <code>POST</code> <code>/ai/send-time-optimization</code> Get optimal send time predictions"},{"location":"api-reference/#generate-subject-lines","title":"Generate Subject Lines","text":"<pre><code>POST /api/v1/ai/generate-subject HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"campaign_type\": \"promotional\",\n  \"product_name\": \"Premium Wireless Headphones\",\n  \"discount\": \"25%\",\n  \"urgency\": \"high\",\n  \"brand_voice\": \"casual\",\n  \"count\": 5\n}\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"data\": {\n    \"subjects\": [\n      {\n        \"text\": \"\ud83c\udfa7 25% OFF Our Premium Wireless Headphones - Today Only!\",\n        \"score\": 0.89,\n        \"analysis\": {\n          \"emotion\": \"excitement\",\n          \"predicted_open_rate\": \"high\",\n          \"spam_score\": 0.2\n        }\n      },\n      {\n        \"text\": \"Your ears deserve better. Save 25% on Premium Headphones\",\n        \"score\": 0.85,\n        \"analysis\": {\n          \"emotion\": \"satisfaction\",\n          \"predicted_open_rate\": \"medium-high\",\n          \"spam_score\": 0.1\n        }\n      },\n      {\n        \"text\": \"LAST CHANCE: 25% Off Premium Wireless Headphones Ends Tonight\",\n        \"score\": 0.82,\n        \"analysis\": {\n          \"emotion\": \"urgency\",\n          \"predicted_open_rate\": \"medium-high\",\n          \"spam_score\": 0.3\n        }\n      },\n      {\n        \"text\": \"Unbeatable Sound, Unbeatable Price: 25% Off Headphones\",\n        \"score\": 0.81,\n        \"analysis\": {\n          \"emotion\": \"confidence\",\n          \"predicted_open_rate\": \"medium\",\n          \"spam_score\": 0.1\n        }\n      },\n      {\n        \"text\": \"Hey! Grab these awesome headphones at 25% off before they're gone\",\n        \"score\": 0.79,\n        \"analysis\": {\n          \"emotion\": \"friendliness\",\n          \"predicted_open_rate\": \"medium\",\n          \"spam_score\": 0.2\n        }\n      }\n    ]\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\",\n    \"model_version\": \"maily-content-gen-v3\",\n    \"processing_time\": 0.85\n  }\n}\n</code></pre>"},{"location":"api-reference/#content-analysis","title":"Content Analysis","text":"<pre><code>POST /api/v1/ai/analyze-content HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"content\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Limited Time Offer!&lt;/h1&gt;&lt;p&gt;Buy now to SAVE BIG!!!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\",\n  \"subject\": \"LAST CHANCE - 80% OFF EVERYTHING!!! ACT NOW!!!\",\n  \"analyses\": [\"spam_score\", \"sentiment\", \"engagement_prediction\", \"improvements\"]\n}\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"data\": {\n    \"spam_score\": {\n      \"score\": 0.75,\n      \"risk_level\": \"high\",\n      \"issues\": [\n        {\n          \"type\": \"excessive_capitalization\",\n          \"description\": \"Using ALL CAPS in subject line increases spam risk\",\n          \"severity\": \"high\",\n          \"recommendation\": \"Use sentence case or capitalize only key words\"\n        },\n        {\n          \"type\": \"excessive_punctuation\",\n          \"description\": \"Multiple exclamation marks increase spam risk\",\n          \"severity\": \"medium\",\n          \"recommendation\": \"Use a single exclamation mark if needed\"\n        },\n        {\n          \"type\": \"spam_trigger_words\",\n          \"description\": \"Contains phrases often flagged by spam filters\",\n          \"severity\": \"high\",\n          \"words\": [\"LAST CHANCE\", \"ACT NOW\", \"SAVE BIG\"],\n          \"recommendation\": \"Avoid urgent, pushy, or sensational language\"\n        }\n      ]\n    },\n    \"sentiment\": {\n      \"overall\": \"urgent\",\n      \"strength\": \"strong\",\n      \"emotions\": {\n        \"urgency\": 0.85,\n        \"excitement\": 0.35,\n        \"trust\": 0.15\n      }\n    },\n    \"engagement_prediction\": {\n      \"open_rate\": {\n        \"prediction\": \"low\",\n        \"confidence\": 0.82,\n        \"benchmark_comparison\": \"-35%\"\n      },\n      \"click_rate\": {\n        \"prediction\": \"very low\",\n        \"confidence\": 0.78,\n        \"benchmark_comparison\": \"-48%\"\n      },\n      \"unsubscribe_rate\": {\n        \"prediction\": \"high\",\n        \"confidence\": 0.75,\n        \"benchmark_comparison\": \"+120%\"\n      }\n    },\n    \"improvements\": [\n      {\n        \"area\": \"subject_line\",\n        \"suggestion\": \"Limited Offer: Save up to 80% on our entire collection\",\n        \"reasoning\": \"Maintains urgency without excessive capitals or punctuation\"\n      },\n      {\n        \"area\": \"content\",\n        \"suggestion\": \"Replace 'Buy now to SAVE BIG!!!' with 'Shop our collection today and enjoy exceptional savings'\",\n        \"reasoning\": \"Conveys value without sounding like a sales pitch\"\n      },\n      {\n        \"area\": \"general\",\n        \"suggestion\": \"Add specific product benefits rather than focusing solely on the discount\",\n        \"reasoning\": \"Creates value-based reasoning for purchase beyond price\"\n      }\n    ]\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\",\n    \"model_version\": \"maily-content-analyzer-v2\",\n    \"processing_time\": 1.25\n  }\n}\n</code></pre>"},{"location":"api-reference/#integrations-api","title":"Integrations API","text":"<p>The Integrations API allows you to connect Maily with other third-party services.</p>"},{"location":"api-reference/#crm-integration","title":"CRM Integration","text":"<p>Maily provides integrations with popular CRM platforms to synchronize contact data.</p>"},{"location":"api-reference/#endpoints_7","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/integrations/crm</code> List all CRM integrations <code>POST</code> <code>/integrations/crm/:provider</code> Create a new CRM integration <code>GET</code> <code>/integrations/crm/:id</code> Retrieve a CRM integration <code>PATCH</code> <code>/integrations/crm/:id</code> Update a CRM integration <code>DELETE</code> <code>/integrations/crm/:id</code> Delete a CRM integration <code>POST</code> <code>/integrations/crm/:id/sync</code> Trigger a sync with the CRM <code>GET</code> <code>/integrations/crm/:id/mappings</code> Get field mappings for the integration <code>PATCH</code> <code>/integrations/crm/:id/mappings</code> Update field mappings for the integration"},{"location":"api-reference/#create-a-crm-integration","title":"Create a CRM Integration","text":"<pre><code>POST /api/v1/integrations/crm/salesforce HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"name\": \"Salesforce Main\",\n  \"credentials\": {\n    \"client_id\": \"your_salesforce_client_id\",\n    \"client_secret\": \"your_salesforce_client_secret\",\n    \"refresh_token\": \"your_salesforce_refresh_token\"\n  },\n  \"settings\": {\n    \"sync_frequency\": \"hourly\",\n    \"two_way_sync\": true,\n    \"sync_deleted_records\": false\n  }\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"int_1a2b3c4d5e\",\n    \"type\": \"crm\",\n    \"provider\": \"salesforce\",\n    \"name\": \"Salesforce Main\",\n    \"status\": \"connected\",\n    \"settings\": {\n      \"sync_frequency\": \"hourly\",\n      \"two_way_sync\": true,\n      \"sync_deleted_records\": false\n    },\n    \"last_sync\": null,\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#e-commerce-integration","title":"E-commerce Integration","text":"<p>Connect Maily with e-commerce platforms to automate marketing emails based on shopping behavior.</p>"},{"location":"api-reference/#endpoints_8","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/integrations/ecommerce</code> List all e-commerce integrations <code>POST</code> <code>/integrations/ecommerce/:provider</code> Create a new e-commerce integration <code>GET</code> <code>/integrations/ecommerce/:id</code> Retrieve an e-commerce integration <code>PATCH</code> <code>/integrations/ecommerce/:id</code> Update an e-commerce integration <code>DELETE</code> <code>/integrations/ecommerce/:id</code> Delete an e-commerce integration <code>POST</code> <code>/integrations/ecommerce/:id/sync</code> Trigger a sync with the e-commerce platform <code>GET</code> <code>/integrations/ecommerce/:id/automations</code> Get configured automations <code>POST</code> <code>/integrations/ecommerce/:id/automations</code> Create a new automation"},{"location":"api-reference/#create-an-automation","title":"Create an Automation","text":"<pre><code>POST /api/v1/integrations/ecommerce/int_1a2b3c4d5e/automations HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"name\": \"Abandoned Cart Recovery\",\n  \"trigger\": {\n    \"event\": \"cart.abandoned\",\n    \"delay\": {\n      \"amount\": 1,\n      \"unit\": \"hours\"\n    }\n  },\n  \"campaign\": {\n    \"template_id\": \"tmpl_1a2b3c4d5e\",\n    \"subject\": \"You left items in your cart!\",\n    \"from\": {\n      \"name\": \"Maily Store\",\n      \"email\": \"sales@example.com\"\n    }\n  },\n  \"settings\": {\n    \"max_sends_per_customer\": 1,\n    \"active\": true\n  }\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"auto_1a2b3c4d5e\",\n    \"name\": \"Abandoned Cart Recovery\",\n    \"integration_id\": \"int_1a2b3c4d5e\",\n    \"trigger\": {\n      \"event\": \"cart.abandoned\",\n      \"delay\": {\n        \"amount\": 1,\n        \"unit\": \"hours\"\n      }\n    },\n    \"campaign\": {\n      \"template_id\": \"tmpl_1a2b3c4d5e\",\n      \"subject\": \"You left items in your cart!\",\n      \"from\": {\n        \"name\": \"Maily Store\",\n        \"email\": \"sales@example.com\"\n      }\n    },\n    \"settings\": {\n      \"max_sends_per_customer\": 1,\n      \"active\": true\n    },\n    \"stats\": {\n      \"triggered\": 0,\n      \"sent\": 0,\n      \"opens\": 0,\n      \"clicks\": 0,\n      \"conversions\": 0\n    },\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#marketing-tools","title":"Marketing Tools","text":"<p>Integrate Maily with other marketing tools for a unified marketing stack.</p>"},{"location":"api-reference/#endpoints_9","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/integrations/marketing</code> List all marketing tool integrations <code>POST</code> <code>/integrations/marketing/:provider</code> Create a new marketing tool integration <code>GET</code> <code>/integrations/marketing/:id</code> Retrieve a marketing tool integration <code>PATCH</code> <code>/integrations/marketing/:id</code> Update a marketing tool integration <code>DELETE</code> <code>/integrations/marketing/:id</code> Delete a marketing tool integration"},{"location":"api-reference/#admin-api","title":"Admin API","text":"<p>The Admin API allows you to manage your Maily account, teams, and billing.</p>"},{"location":"api-reference/#user-management","title":"User Management","text":""},{"location":"api-reference/#endpoints_10","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/admin/users</code> List all users <code>POST</code> <code>/admin/users</code> Create a new user <code>GET</code> <code>/admin/users/:id</code> Retrieve a user <code>PATCH</code> <code>/admin/users/:id</code> Update a user <code>DELETE</code> <code>/admin/users/:id</code> Delete a user <code>POST</code> <code>/admin/users/:id/invite</code> Re-send invitation <code>POST</code> <code>/admin/users/:id/disable</code> Disable a user <code>POST</code> <code>/admin/users/:id/enable</code> Enable a user <code>GET</code> <code>/admin/users/:id/activity</code> Get user activity log"},{"location":"api-reference/#the-user-object","title":"The User Object","text":"<pre><code>{\n  \"id\": \"usr_1a2b3c4d5e\",\n  \"email\": \"jane.smith@example.com\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"role\": \"admin\",\n  \"status\": \"active\",\n  \"last_login\": \"2025-03-01T14:30:00Z\",\n  \"teams\": [\n    {\n      \"id\": \"team_1a2b3c4d5e\",\n      \"name\": \"Marketing\",\n      \"role\": \"member\"\n    }\n  ],\n  \"created_at\": \"2024-05-15T10:00:00Z\",\n  \"updated_at\": \"2025-03-01T14:30:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#create-a-user","title":"Create a User","text":"<pre><code>POST /api/v1/admin/users HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\nContent-Type: application/json\n\n{\n  \"email\": \"new.user@example.com\",\n  \"first_name\": \"New\",\n  \"last_name\": \"User\",\n  \"role\": \"editor\",\n  \"team_ids\": [\"team_1a2b3c4d5e\"],\n  \"send_invitation\": true\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"data\": {\n    \"id\": \"usr_2f3g4h5i6j\",\n    \"email\": \"new.user@example.com\",\n    \"first_name\": \"New\",\n    \"last_name\": \"User\",\n    \"role\": \"editor\",\n    \"status\": \"invited\",\n    \"last_login\": null,\n    \"teams\": [\n      {\n        \"id\": \"team_1a2b3c4d5e\",\n        \"name\": \"Marketing\",\n        \"role\": \"member\"\n      }\n    ],\n    \"created_at\": \"2025-03-05T12:00:00Z\",\n    \"updated_at\": \"2025-03-05T12:00:00Z\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#team-management","title":"Team Management","text":""},{"location":"api-reference/#endpoints_11","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/admin/teams</code> List all teams <code>POST</code> <code>/admin/teams</code> Create a new team <code>GET</code> <code>/admin/teams/:id</code> Retrieve a team <code>PATCH</code> <code>/admin/teams/:id</code> Update a team <code>DELETE</code> <code>/admin/teams/:id</code> Delete a team <code>GET</code> <code>/admin/teams/:id/members</code> List team members <code>POST</code> <code>/admin/teams/:id/members</code> Add members to a team <code>DELETE</code> <code>/admin/teams/:id/members/:user_id</code> Remove a member from a team <code>PATCH</code> <code>/admin/teams/:id/members/:user_id</code> Update a member's role"},{"location":"api-reference/#the-team-object","title":"The Team Object","text":"<pre><code>{\n  \"id\": \"team_1a2b3c4d5e\",\n  \"name\": \"Marketing\",\n  \"description\": \"Marketing department team\",\n  \"member_count\": 8,\n  \"created_at\": \"2024-06-10T09:15:00Z\",\n  \"updated_at\": \"2025-02-15T11:30:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#billing","title":"Billing","text":""},{"location":"api-reference/#endpoints_12","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/admin/billing</code> Get billing information <code>GET</code> <code>/admin/billing/invoices</code> List all invoices <code>GET</code> <code>/admin/billing/invoices/:id</code> Retrieve an invoice <code>GET</code> <code>/admin/billing/usage</code> Get current usage statistics <code>PATCH</code> <code>/admin/billing/payment-method</code> Update payment method <code>PATCH</code> <code>/admin/billing/subscription</code> Change subscription plan"},{"location":"api-reference/#get-billing-information","title":"Get Billing Information","text":"<pre><code>GET /api/v1/admin/billing HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"data\": {\n    \"subscription\": {\n      \"plan\": \"premium\",\n      \"price\": 299.00,\n      \"billing_cycle\": \"monthly\",\n      \"next_billing_date\": \"2025-04-01T00:00:00Z\",\n      \"status\": \"active\",\n      \"features\": {\n        \"subscribers_limit\": 50000,\n        \"campaigns_per_month\": \"unlimited\",\n        \"user_seats\": 10,\n        \"ai_credits_per_month\": 5000\n      }\n    },\n    \"payment_method\": {\n      \"type\": \"credit_card\",\n      \"last_four\": \"4242\",\n      \"expiry\": \"04/28\",\n      \"brand\": \"Visa\"\n    },\n    \"billing_address\": {\n      \"name\": \"Acme Inc\",\n      \"address_line1\": \"123 Main St\",\n      \"address_line2\": \"Suite 101\",\n      \"city\": \"San Francisco\",\n      \"state\": \"CA\",\n      \"postal_code\": \"94105\",\n      \"country\": \"US\"\n    },\n    \"usage\": {\n      \"subscribers\": {\n        \"current\": 35000,\n        \"limit\": 50000,\n        \"percentage\": 70\n      },\n      \"campaigns\": {\n        \"current\": 18,\n        \"limit\": \"unlimited\",\n        \"percentage\": null\n      },\n      \"user_seats\": {\n        \"current\": 8,\n        \"limit\": 10,\n        \"percentage\": 80\n      },\n      \"ai_credits\": {\n        \"current\": 2800,\n        \"limit\": 5000,\n        \"percentage\": 56,\n        \"reset_date\": \"2025-04-01T00:00:00Z\"\n      }\n    }\n  },\n  \"meta\": {\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#audit-logs","title":"Audit Logs","text":""},{"location":"api-reference/#endpoints_13","title":"Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/admin/audit-logs</code> List audit logs <code>GET</code> <code>/admin/audit-logs/:id</code> Retrieve a specific audit log entry"},{"location":"api-reference/#list-audit-logs","title":"List Audit Logs","text":"<pre><code>GET /api/v1/admin/audit-logs HTTP/1.1\nHost: api.maily.io\nX-API-Key: your_api_key_here\n</code></pre> <p>Query parameters:</p> Parameter Description <code>action</code> Filter by action type <code>user_id</code> Filter by user ID <code>resource_type</code> Filter by resource type <code>resource_id</code> Filter by resource ID <code>from_date</code> Start date (ISO 8601) <code>to_date</code> End date (ISO 8601) <p>Response (200 OK):</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"log_1a2b3c4d5e\",\n      \"timestamp\": \"2025-03-05T10:15:30Z\",\n      \"action\": \"campaign.create\",\n      \"user\": {\n        \"id\": \"usr_1a2b3c4d5e\",\n        \"email\": \"jane.smith@example.com\",\n        \"name\": \"Jane Smith\"\n      },\n      \"resource_type\": \"campaign\",\n      \"resource_id\": \"camp_1a2b3c4d5e\",\n      \"resource_name\": \"Black Friday Campaign\",\n      \"changes\": {\n        \"name\": {\n          \"previous\": null,\n          \"current\": \"Black Friday Campaign\"\n        },\n        \"subject\": {\n          \"previous\": null,\n          \"current\": \"Don't Miss Our Biggest Sale!\"\n        }\n      },\n      \"ip_address\": \"198.51.100.42\",\n      \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 1250,\n      \"count\": 1,\n      \"per_page\": 10,\n      \"current_page\": 1,\n      \"total_pages\": 125,\n      \"links\": {\n        \"next\": \"https://api.maily.io/api/v1/admin/audit-logs?page=2\"\n      }\n    },\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#webhooks-reference","title":"Webhooks Reference","text":"<p>Webhooks allow your application to receive real-time notifications from Maily.</p>"},{"location":"api-reference/#events","title":"Events","text":"<p>Maily supports the following webhook events:</p> Event Description <code>email.sent</code> An email was sent <code>email.delivered</code> An email was delivered <code>email.opened</code> An email was opened <code>email.clicked</code> A link in an email was clicked <code>email.bounced</code> An email bounced <code>email.complained</code> An email was marked as spam <code>subscriber.created</code> A new subscriber was created <code>subscriber.updated</code> A subscriber was updated <code>subscriber.unsubscribed</code> A subscriber unsubscribed <code>campaign.created</code> A campaign was created <code>campaign.updated</code> A campaign was updated <code>campaign.sent</code> A campaign was sent <code>list.created</code> A list was created <code>list.updated</code> A list was updated <code>list.deleted</code> A list was deleted"},{"location":"api-reference/#payloads","title":"Payloads","text":"<p>Each webhook event includes a JSON payload with event details.</p>"},{"location":"api-reference/#email-opened-example","title":"Email Opened Example","text":"<pre><code>{\n  \"id\": \"evt_1a2b3c4d5e\",\n  \"type\": \"email.opened\",\n  \"created_at\": \"2025-03-05T15:30:45Z\",\n  \"data\": {\n    \"campaign_id\": \"camp_1a2b3c4d5e\",\n    \"campaign_name\": \"Black Friday Campaign\",\n    \"subscriber_id\": \"sub_1a2b3c4d5e\",\n    \"email\": \"john.doe@example.com\",\n    \"message_id\": \"msg_1a2b3c4d5e\",\n    \"ip_address\": \"198.51.100.42\",\n    \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n    \"device_type\": \"desktop\",\n    \"operating_system\": \"macOS\",\n    \"client\": \"Chrome\",\n    \"first_open\": true,\n    \"timestamp\": \"2025-03-05T15:30:45Z\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#subscriber-unsubscribed-example","title":"Subscriber Unsubscribed Example","text":"<pre><code>{\n  \"id\": \"evt_2f3g4h5i6j\",\n  \"type\": \"subscriber.unsubscribed\",\n  \"created_at\": \"2025-03-05T16:20:15Z\",\n  \"data\": {\n    \"subscriber_id\": \"sub_1a2b3c4d5e\",\n    \"email\": \"john.doe@example.com\",\n    \"campaign_id\": \"camp_1a2b3c4d5e\",\n    \"campaign_name\": \"Black Friday Campaign\",\n    \"list_id\": \"list_1a2b3c4d5e\",\n    \"list_name\": \"Marketing Newsletter\",\n    \"reason\": \"user_preference\",\n    \"feedback\": \"Too many emails\",\n    \"timestamp\": \"2025-03-05T16:20:15Z\"\n  }\n}\n</code></pre>"},{"location":"api-reference/#security","title":"Security","text":"<p>Webhook payloads are signed using HMAC-SHA256. The signature is included in the <code>X-Maily-Signature</code> HTTP header.</p> <p>To verify the signature:</p> <ol> <li>Get the webhook secret from your webhook settings in the Maily dashboard</li> <li>Create an HMAC-SHA256 signature using your webhook secret and the raw request body</li> <li>Compare the computed signature with the value in the <code>X-Maily-Signature</code> header</li> </ol> <p>Example verification in Node.js:</p> <pre><code>const crypto = require('crypto');\n\nfunction verifyWebhookSignature(payload, signature, secret) {\n  const computedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n\n  return crypto.timingSafeEqual(\n    Buffer.from(computedSignature),\n    Buffer.from(signature)\n  );\n}\n\n// In your webhook handler\napp.post('/webhooks/maily', (req, res) =&gt; {\n  const signature = req.headers['x-maily-signature'];\n  const payload = JSON.stringify(req.body);\n  const secret = 'whsec_your_webhook_secret';\n\n  if (!verifyWebhookSignature(payload, signature, secret)) {\n    return res.status(401).send('Invalid signature');\n  }\n\n  // Process the webhook\n  const event = req.body;\n  console.log(`Received event: ${event.type}`);\n\n  res.status(200).send('Webhook received');\n});\n</code></pre>"},{"location":"api-reference/#appendix","title":"Appendix","text":""},{"location":"api-reference/#api-changelog","title":"API Changelog","text":""},{"location":"api-reference/#version-15-march-2025","title":"Version 1.5 (March 2025)","text":"<ul> <li>Added AI Features API endpoints</li> <li>Enhanced Analytics API with trend and comparison endpoints</li> <li>Added support for JWT authentication</li> </ul>"},{"location":"api-reference/#version-14-january-2025","title":"Version 1.4 (January 2025)","text":"<ul> <li>Added CRM and E-commerce integration endpoints</li> <li>Improved webhook delivery with retry mechanisms</li> <li>Added bulk operations for subscriber management</li> </ul>"},{"location":"api-reference/#version-13-october-2024","title":"Version 1.3 (October 2024)","text":"<ul> <li>Added content performance scoring in analytics</li> <li>Enhanced campaign management with A/B testing</li> <li>Improved error handling with more detailed messages</li> </ul>"},{"location":"api-reference/#version-12-july-2024","title":"Version 1.2 (July 2024)","text":"<ul> <li>Added template categories and improved template management</li> <li>Enhanced subscriber segmentation capabilities</li> <li>Added audit logs for resource changes</li> </ul>"},{"location":"api-reference/#version-11-april-2024","title":"Version 1.1 (April 2024)","text":"<ul> <li>Added webhooks for real-time event notifications</li> <li>Enhanced list management with growth metrics</li> <li>Improved rate limiting with more granular controls</li> </ul>"},{"location":"api-reference/#version-10-january-2024","title":"Version 1.0 (January 2024)","text":"<ul> <li>Initial release of the Maily API</li> <li>Core features: campaigns, templates, subscribers, lists</li> <li>Basic analytics and reporting</li> </ul>"},{"location":"api-reference/#deprecation-policy","title":"Deprecation Policy","text":"<p>Maily follows these API lifecycle and deprecation principles:</p> <ol> <li>Version Support: Major API versions are supported for a minimum of 24 months after a new version is released</li> <li>Deprecation Notice: Features or endpoints to be deprecated will be announced at least 6 months in advance</li> <li>Backwards Compatibility: We strive to maintain backwards compatibility within a major version</li> <li>Communication: Deprecation notices are provided via:</li> <li>Email to account administrators</li> <li>Notices in the API documentation</li> <li>HTTP response headers for affected endpoints</li> </ol>"},{"location":"api-reference/#deprecated-features","title":"Deprecated Features","text":"Feature Deprecated On Removal Date Replacement <code>/v1/stats</code> endpoints 2024-10-15 2025-04-15 Use <code>/v1/analytics</code> endpoints instead <code>subscriber.delete</code> webhook 2024-11-01 2025-05-01 Use <code>subscriber.deleted</code> webhook <code>template_id</code> parameter in campaign creation 2025-01-15 2025-07-15 Use <code>template.id</code> in the template object"},{"location":"api-reference/#status-page","title":"Status Page","text":"<p>For real-time and historical information about the Maily API's status and incidents, visit:</p> <p>https://status.maily.io</p> <p>You can also subscribe to updates via: - Email - SMS - Slack - Microsoft Teams - RSS feed</p>"},{"location":"api-reference/#support","title":"Support","text":"<p>If you need assistance with the Maily API, you can reach out through the following channels:</p> <ul> <li>API Documentation: https://developer.maily.io</li> <li>Email Support: api-support@maily.io</li> <li>Developer Community: https://community.maily.io</li> <li>Office Hours: Join our bi-weekly developer office hours (schedule on the developer portal)</li> </ul> <p>For enterprise customers with Premium or Enterprise plans, please contact your dedicated Technical Account Manager.</p>"},{"location":"app-components/","title":"Maily Application Components","text":"<p>Last Updated: March 6, 2023</p>"},{"location":"app-components/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Application Architecture</li> <li>Component Structure</li> <li>Data Flow</li> <li>State Management</li> <li>Core Components</li> <li>Layout Components</li> <li>Navigation Components</li> <li>Authentication Components</li> <li>Common Components</li> <li>Feature Components</li> <li>Dashboard Components</li> <li>Campaign Components</li> <li>Template Components</li> <li>Subscriber Components</li> <li>Analytics Components</li> <li>Page Components</li> <li>Dashboard Pages</li> <li>Campaign Pages</li> <li>Template Pages</li> <li>Subscriber Pages</li> <li>Settings Pages</li> <li>Component Patterns</li> <li>Advanced Patterns</li> <li>Performance Patterns</li> <li>Testing Patterns</li> <li>Component Library Integration</li> <li>AI Component Integration</li> <li>Contribution Guidelines</li> </ul>"},{"location":"app-components/#overview","title":"Overview","text":"<p>The Maily application is built using a component-based architecture with Next.js and React. This document provides a comprehensive guide to the application components, their organization, and best practices for working with them.</p> <p>This reference consolidates all component-related documentation in a single source of truth, providing developers with a complete picture of the component ecosystem within Maily.</p>"},{"location":"app-components/#application-architecture","title":"Application Architecture","text":""},{"location":"app-components/#component-structure","title":"Component Structure","text":"<p>The Maily application follows a structured component hierarchy:</p> <ul> <li>App Root: The top-level component that initializes the application</li> <li>Page Components: Components that represent entire pages and routes</li> <li>Feature Components: Components that encapsulate specific features</li> <li>Core Components: Foundational components used across the application</li> <li>UI Components: Low-level UI components from the UI library</li> </ul> <p>The component architecture enforces:</p> <ul> <li>Separation of Concerns: Each component has a single responsibility</li> <li>Composition: Complex components are built by composing simpler ones</li> <li>Reusability: Components are designed for reuse across the application</li> <li>Testability: Components are designed to be easy to test</li> </ul>"},{"location":"app-components/#data-flow","title":"Data Flow","text":"<p>Data flows through the application following these patterns:</p> <ul> <li>Props: Data passed from parent to child components</li> <li>Context: Data shared across component trees without prop drilling</li> <li>Global State: Application-wide state managed with Zustand</li> <li>Server State: Remote data managed with React Query</li> </ul> <p>For optimal performance and maintainability:</p> <ul> <li>Props are used for component-specific data</li> <li>Context is used for theme, authentication, and other cross-cutting concerns</li> <li>Global state is reserved for truly global application state</li> <li>Server state is used for all remote data with proper caching and invalidation</li> </ul>"},{"location":"app-components/#state-management","title":"State Management","text":"<p>The application uses a hybrid state management approach:</p> <ul> <li>Local State: Component-level state with <code>useState</code> and <code>useReducer</code></li> <li>Shared State: Cross-component state with React Context</li> <li>Global State: Application-wide state with Zustand</li> <li>Server State: Remote data with React Query</li> </ul> <p>State management follows these principles:</p> <ul> <li>Keep state as close as possible to where it's used</li> <li>Avoid redundant state and derived state</li> <li>Use appropriate tools for the scope of state</li> <li>Separate UI state from business logic state</li> </ul>"},{"location":"app-components/#core-components","title":"Core Components","text":""},{"location":"app-components/#layout-components","title":"Layout Components","text":"<p>Layout components provide the structural foundation of the application:</p>"},{"location":"app-components/#applayout","title":"AppLayout","text":"<pre><code>import { AppLayout } from '@maily/app/layouts';\n\nfunction MyPage() {\n  return (\n    &lt;AppLayout title=\"Dashboard\" description=\"Your email marketing dashboard\"&gt;\n      &lt;PageContent /&gt;\n    &lt;/AppLayout&gt;\n  );\n}\n</code></pre> <p>Key features: - Consistent page shell with navigation - SEO metadata management - Error boundary - Authentication protection - Analytics tracking</p>"},{"location":"app-components/#dashboardlayout","title":"DashboardLayout","text":"<pre><code>import { DashboardLayout } from '@maily/app/layouts';\n\nfunction CampaignsPage() {\n  return (\n    &lt;DashboardLayout\n      title=\"Campaigns\"\n      breadcrumbs={[{ label: 'Campaigns', href: '/campaigns' }]}\n    &gt;\n      &lt;CampaignList /&gt;\n    &lt;/DashboardLayout&gt;\n  );\n}\n</code></pre> <p>Key features: - Dashboard-specific layout - Sidebar navigation - Breadcrumbs - Page header actions - Responsive layout adjustments</p>"},{"location":"app-components/#responsive-grid","title":"Responsive Grid","text":"<pre><code>import { ResponsiveGrid } from '@maily/app/layouts';\n\nfunction DashboardWidgets() {\n  return (\n    &lt;ResponsiveGrid\n      columns={{ base: 1, md: 2, lg: 3 }}\n      spacing=\"md\"\n    &gt;\n      &lt;PerformanceWidget /&gt;\n      &lt;SubscriberWidget /&gt;\n      &lt;CampaignWidget /&gt;\n    &lt;/ResponsiveGrid&gt;\n  );\n}\n</code></pre> <p>Key features: - Responsive column layout - Consistent spacing - Gap support - Auto layout adjustments</p>"},{"location":"app-components/#navigation-components","title":"Navigation Components","text":"<p>Navigation components manage user movement through the application:</p>"},{"location":"app-components/#navbar","title":"Navbar","text":"<pre><code>import { Navbar } from '@maily/app/navigation';\n\nfunction AppHeader() {\n  return (\n    &lt;Navbar\n      logo={&lt;Logo /&gt;}\n      user={currentUser}\n      onLogout={handleLogout}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Responsive design - User menu - Notifications - Search integration - Theme toggle</p>"},{"location":"app-components/#sidebar","title":"Sidebar","text":"<pre><code>import { Sidebar } from '@maily/app/navigation';\n\nfunction DashboardSidebar() {\n  return (\n    &lt;Sidebar\n      items={sidebarItems}\n      collapsed={isSidebarCollapsed}\n      onToggleCollapse={toggleSidebar}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Collapsible design - Multi-level navigation - Active state tracking - Permission-based items - Mobile responsiveness</p>"},{"location":"app-components/#breadcrumbs","title":"Breadcrumbs","text":"<pre><code>import { Breadcrumbs } from '@maily/app/navigation';\n\nfunction CampaignDetailPage({ campaign }) {\n  return (\n    &lt;Breadcrumbs\n      items={[\n        { label: 'Campaigns', href: '/campaigns' },\n        { label: campaign.name, href: `/campaigns/${campaign.id}` },\n        { label: 'Edit', href: `/campaigns/${campaign.id}/edit` }\n      ]}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Dynamic breadcrumb generation - SEO improvements - Schema.org markup - Responsive truncation - Contextual items</p>"},{"location":"app-components/#authentication-components","title":"Authentication Components","text":"<p>Authentication components manage user identity and access:</p>"},{"location":"app-components/#loginform","title":"LoginForm","text":"<pre><code>import { LoginForm } from '@maily/app/auth';\n\nfunction LoginPage() {\n  return (\n    &lt;LoginForm\n      onSuccess={handleLoginSuccess}\n      onError={handleLoginError}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Email/password authentication - Social login options - MFA support - Error handling - Password reset flow</p>"},{"location":"app-components/#registerform","title":"RegisterForm","text":"<pre><code>import { RegisterForm } from '@maily/app/auth';\n\nfunction RegisterPage() {\n  return (\n    &lt;RegisterForm\n      onSuccess={handleRegisterSuccess}\n      onError={handleRegisterError}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Account creation - Email verification - Password requirements - Terms acceptance - Anti-spam measures</p>"},{"location":"app-components/#usermenu","title":"UserMenu","text":"<pre><code>import { UserMenu } from '@maily/app/auth';\n\nfunction Header({ user }) {\n  return (\n    &lt;Header&gt;\n      &lt;UserMenu\n        user={user}\n        onLogout={handleLogout}\n        onProfileClick={handleProfileClick}\n      /&gt;\n    &lt;/Header&gt;\n  );\n}\n</code></pre> <p>Key features: - User profile display - Account settings access - Role indicator - Session management - Theme preferences</p>"},{"location":"app-components/#common-components","title":"Common Components","text":"<p>Common components are used throughout the application:</p>"},{"location":"app-components/#pageheader","title":"PageHeader","text":"<pre><code>import { PageHeader } from '@maily/app/common';\n\nfunction CampaignsPage() {\n  return (\n    &lt;&gt;\n      &lt;PageHeader\n        title=\"Campaigns\"\n        description=\"Create and manage your email campaigns\"\n        actions={[\n          { label: 'New Campaign', onClick: handleNewCampaign }\n        ]}\n      /&gt;\n      &lt;CampaignList /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>Key features: - Consistent page headers - Action buttons - Breadcrumb integration - Responsive design - Optional search</p>"},{"location":"app-components/#emptystate","title":"EmptyState","text":"<pre><code>import { EmptyState } from '@maily/app/common';\n\nfunction CampaignList({ campaigns }) {\n  if (campaigns.length === 0) {\n    return (\n      &lt;EmptyState\n        title=\"No campaigns found\"\n        description=\"Get started by creating your first campaign\"\n        icon={&lt;EmailIcon /&gt;}\n        action={{ label: 'Create Campaign', onClick: handleCreate }}\n      /&gt;\n    );\n  }\n\n  return &lt;CampaignTable campaigns={campaigns} /&gt;;\n}\n</code></pre> <p>Key features: - Consistent empty states - Actionable guidance - Illustrations - Contextual messaging - Responsive layout</p>"},{"location":"app-components/#datatable","title":"DataTable","text":"<pre><code>import { DataTable } from '@maily/app/common';\n\nfunction SubscriberList({ subscribers, isLoading }) {\n  const columns = [\n    { header: 'Email', accessor: 'email' },\n    { header: 'Name', accessor: 'name' },\n    { header: 'Status', accessor: 'status', cell: StatusCell },\n    { header: 'Joined', accessor: 'createdAt', cell: DateCell },\n    { header: 'Actions', accessor: 'id', cell: ActionCell }\n  ];\n\n  return (\n    &lt;DataTable\n      data={subscribers}\n      columns={columns}\n      isLoading={isLoading}\n      pagination={{ pageSize: 25 }}\n      sorting={{ initialSortBy: 'createdAt', direction: 'desc' }}\n      onRowClick={handleRowClick}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Sortable columns - Pagination - Row selection - Custom cell rendering - Loading states - Empty states - Responsive design</p>"},{"location":"app-components/#feature-components","title":"Feature Components","text":""},{"location":"app-components/#dashboard-components","title":"Dashboard Components","text":"<p>Dashboard components provide at-a-glance information and quick actions:</p>"},{"location":"app-components/#performancecard","title":"PerformanceCard","text":"<pre><code>import { PerformanceCard } from '@maily/app/dashboard';\n\nfunction DashboardPage() {\n  return (\n    &lt;ResponsiveGrid columns={{ base: 1, md: 2, lg: 4 }}&gt;\n      &lt;PerformanceCard\n        title=\"Open Rate\"\n        value=\"24.8%\"\n        change=\"+2.1%\"\n        trend=\"up\"\n        period=\"last 30 days\"\n      /&gt;\n      {/* More performance cards */}\n    &lt;/ResponsiveGrid&gt;\n  );\n}\n</code></pre> <p>Key features: - Key metric visualization - Trend indicators - Period comparison - Responsive layout - Tooltips with insights</p>"},{"location":"app-components/#recentactivityfeed","title":"RecentActivityFeed","text":"<pre><code>import { RecentActivityFeed } from '@maily/app/dashboard';\n\nfunction DashboardPage() {\n  return (\n    &lt;DashboardSection title=\"Recent Activity\"&gt;\n      &lt;RecentActivityFeed\n        limit={5}\n        onViewAll={handleViewAllActivity}\n      /&gt;\n    &lt;/DashboardSection&gt;\n  );\n}\n</code></pre> <p>Key features: - Real-time activity updates - Filterable activities - Timeline visualization - User attribution - Relative timestamps</p>"},{"location":"app-components/#campaignperformancechart","title":"CampaignPerformanceChart","text":"<pre><code>import { CampaignPerformanceChart } from '@maily/app/dashboard';\n\nfunction PerformanceWidget({ campaignId }) {\n  return (\n    &lt;Card&gt;\n      &lt;CardHeader&gt;Campaign Performance&lt;/CardHeader&gt;\n      &lt;CampaignPerformanceChart\n        campaignId={campaignId}\n        metrics={['opens', 'clicks', 'conversions']}\n        period=\"daily\"\n        days={14}\n      /&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre> <p>Key features: - Multi-metric visualization - Interactive time periods - Comparative analysis - Responsive design - Export capabilities</p>"},{"location":"app-components/#campaign-components","title":"Campaign Components","text":"<p>Campaign components manage email campaign creation and management:</p>"},{"location":"app-components/#campaigncreator","title":"CampaignCreator","text":"<pre><code>import { CampaignCreator } from '@maily/app/campaigns';\n\nfunction NewCampaignPage() {\n  return (\n    &lt;CampaignCreator\n      onSave={handleSaveCampaign}\n      onCancel={handleCancelCampaign}\n      templates={availableTemplates}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Multi-step campaign creation - Template selection - Audience targeting - A/B testing setup - Scheduling options - Preview and testing</p>"},{"location":"app-components/#campaignlist","title":"CampaignList","text":"<pre><code>import { CampaignList } from '@maily/app/campaigns';\n\nfunction CampaignsPage() {\n  return (\n    &lt;CampaignList\n      status=\"all\"\n      sorting={{ field: 'createdAt', direction: 'desc' }}\n      onCampaignClick={handleCampaignClick}\n      onCreateCampaign={handleCreateCampaign}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Filterable by status - Sortable columns - Performance metrics - Bulk actions - Pagination - Search functionality</p>"},{"location":"app-components/#campaigndetail","title":"CampaignDetail","text":"<pre><code>import { CampaignDetail } from '@maily/app/campaigns';\n\nfunction CampaignDetailPage({ campaignId }) {\n  return (\n    &lt;CampaignDetail\n      campaignId={campaignId}\n      onEdit={handleEditCampaign}\n      onDuplicate={handleDuplicateCampaign}\n      onDelete={handleDeleteCampaign}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Campaign overview - Performance metrics - A/B test results - Email preview - Timeline tracking - Action menu</p>"},{"location":"app-components/#template-components","title":"Template Components","text":"<p>Template components manage email template creation and management:</p>"},{"location":"app-components/#templateeditor","title":"TemplateEditor","text":"<pre><code>import { TemplateEditor } from '@maily/app/templates';\n\nfunction EditTemplatePage({ templateId }) {\n  return (\n    &lt;TemplateEditor\n      templateId={templateId}\n      onSave={handleSaveTemplate}\n      onPreview={handlePreviewTemplate}\n      onTest={handleTestTemplate}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - WYSIWYG editing - Code editing - Responsive preview - Template variables - Image management - Version history</p>"},{"location":"app-components/#templatelist","title":"TemplateList","text":"<pre><code>import { TemplateList } from '@maily/app/templates';\n\nfunction TemplatesPage() {\n  return (\n    &lt;TemplateList\n      category=\"all\"\n      onTemplateClick={handleTemplateClick}\n      onCreateTemplate={handleCreateTemplate}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Grid and list views - Category filtering - Search functionality - Preview thumbnails - Usage statistics - Last modified info</p>"},{"location":"app-components/#templatedetail","title":"TemplateDetail","text":"<pre><code>import { TemplateDetail } from '@maily/app/templates';\n\nfunction TemplateDetailPage({ templateId }) {\n  return (\n    &lt;TemplateDetail\n      templateId={templateId}\n      onEdit={handleEditTemplate}\n      onDuplicate={handleDuplicateTemplate}\n      onDelete={handleDeleteTemplate}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Template preview - Usage statistics - Version history - Related campaigns - Personalization variables - Actions menu</p>"},{"location":"app-components/#subscriber-components","title":"Subscriber Components","text":"<p>Subscriber components manage subscriber data and segmentation:</p>"},{"location":"app-components/#subscriberlist","title":"SubscriberList","text":"<pre><code>import { SubscriberList } from '@maily/app/subscribers';\n\nfunction SubscribersPage() {\n  return (\n    &lt;SubscriberList\n      segment=\"all\"\n      onSubscriberClick={handleSubscriberClick}\n      onCreateSubscriber={handleCreateSubscriber}\n      onImportSubscribers={handleImportSubscribers}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Filterable by segment - Search and advanced filtering - Bulk actions - Activity indicators - Status management - Import/export</p>"},{"location":"app-components/#subscriberdetail","title":"SubscriberDetail","text":"<pre><code>import { SubscriberDetail } from '@maily/app/subscribers';\n\nfunction SubscriberDetailPage({ subscriberId }) {\n  return (\n    &lt;SubscriberDetail\n      subscriberId={subscriberId}\n      onEdit={handleEditSubscriber}\n      onDelete={handleDeleteSubscriber}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Profile information - Activity history - Campaign interactions - Custom fields - Subscription preferences - Tags and segmentation</p>"},{"location":"app-components/#segmentbuilder","title":"SegmentBuilder","text":"<pre><code>import { SegmentBuilder } from '@maily/app/subscribers';\n\nfunction CreateSegmentPage() {\n  return (\n    &lt;SegmentBuilder\n      onSave={handleSaveSegment}\n      onCancel={handleCancelSegment}\n      onPreviewResults={handlePreviewResults}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Visual segment builder - Condition groups - Field selection - Dynamic previews - Saved segments - Estimated reach</p>"},{"location":"app-components/#analytics-components","title":"Analytics Components","text":"<p>Analytics components visualize and analyze campaign performance:</p>"},{"location":"app-components/#performanceoverview","title":"PerformanceOverview","text":"<pre><code>import { PerformanceOverview } from '@maily/app/analytics';\n\nfunction AnalyticsPage() {\n  return (\n    &lt;PerformanceOverview\n      period=\"last30Days\"\n      compareWithPrevious={true}\n      metrics={['opens', 'clicks', 'conversions', 'revenue']}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Multi-metric dashboard - Period comparison - Key insights - Goal tracking - Exportable reports</p>"},{"location":"app-components/#campaigncomparison","title":"CampaignComparison","text":"<pre><code>import { CampaignComparison } from '@maily/app/analytics';\n\nfunction CompareCampaignsPage({ campaignIds }) {\n  return (\n    &lt;CampaignComparison\n      campaignIds={campaignIds}\n      metrics={['opens', 'clicks', 'conversions']}\n      showPercentages={true}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Side-by-side comparison - Multiple metric support - Absolute and percentage views - Statistical significance - Recommendations</p>"},{"location":"app-components/#audienceinsights","title":"AudienceInsights","text":"<pre><code>import { AudienceInsights } from '@maily/app/analytics';\n\nfunction AudienceAnalyticsPage() {\n  return (\n    &lt;AudienceInsights\n      period=\"allTime\"\n      segmentId={segmentId}\n      showDemographics={true}\n      showEngagement={true}\n    /&gt;\n  );\n}\n</code></pre> <p>Key features: - Demographic breakdown - Engagement patterns - Growth trends - Device usage - Geographic distribution - Subscriber lifecycle</p>"},{"location":"app-components/#page-components","title":"Page Components","text":""},{"location":"app-components/#dashboard-pages","title":"Dashboard Pages","text":"<p>Dashboard pages provide the main interface for users:</p>"},{"location":"app-components/#dashboardpage","title":"DashboardPage","text":"<pre><code>import { DashboardPage } from '@maily/app/pages';\n\nfunction Dashboard() {\n  return &lt;DashboardPage /&gt;;\n}\n</code></pre> <p>Key features: - Performance overview - Recent campaigns - Subscriber growth - Activity feed - Quick actions - AI-powered insights</p>"},{"location":"app-components/#analyticspage","title":"AnalyticsPage","text":"<pre><code>import { AnalyticsPage } from '@maily/app/pages';\n\nfunction Analytics() {\n  return &lt;AnalyticsPage /&gt;;\n}\n</code></pre> <p>Key features: - Comprehensive analytics - Date range selection - Campaign comparisons - Audience insights - Conversion tracking - Report export</p>"},{"location":"app-components/#campaign-pages","title":"Campaign Pages","text":"<p>Campaign pages manage email campaign workflows:</p>"},{"location":"app-components/#campaignslistpage","title":"CampaignsListPage","text":"<pre><code>import { CampaignsListPage } from '@maily/app/pages';\n\nfunction Campaigns() {\n  return &lt;CampaignsListPage /&gt;;\n}\n</code></pre> <p>Key features: - Campaign directory - Status filtering - Performance metrics - Quick actions - Search and filtering</p>"},{"location":"app-components/#campaigndetailpage","title":"CampaignDetailPage","text":"<pre><code>import { CampaignDetailPage } from '@maily/app/pages';\n\nfunction CampaignDetail({ campaignId }) {\n  return &lt;CampaignDetailPage campaignId={campaignId} /&gt;;\n}\n</code></pre> <p>Key features: - Campaign overview - Performance metrics - A/B test results - Content preview - Audience breakdown - Action menu</p>"},{"location":"app-components/#campaigncreatorpage","title":"CampaignCreatorPage","text":"<pre><code>import { CampaignCreatorPage } from '@maily/app/pages';\n\nfunction CreateCampaign() {\n  return &lt;CampaignCreatorPage /&gt;;\n}\n</code></pre> <p>Key features: - Step-by-step creation - Template selection - Audience targeting - A/B testing setup - Scheduling - Preview and testing</p>"},{"location":"app-components/#template-pages","title":"Template Pages","text":"<p>Template pages manage email template workflows:</p>"},{"location":"app-components/#templateslistpage","title":"TemplatesListPage","text":"<pre><code>import { TemplatesListPage } from '@maily/app/pages';\n\nfunction Templates() {\n  return &lt;TemplatesListPage /&gt;;\n}\n</code></pre> <p>Key features: - Template gallery - Category filtering - Preview thumbnails - Usage statistics - Quick actions</p>"},{"location":"app-components/#templatedetailpage","title":"TemplateDetailPage","text":"<pre><code>import { TemplateDetailPage } from '@maily/app/pages';\n\nfunction TemplateDetail({ templateId }) {\n  return &lt;TemplateDetailPage templateId={templateId} /&gt;;\n}\n</code></pre> <p>Key features: - Template preview - Version history - Related campaigns - Usage statistics - Action menu</p>"},{"location":"app-components/#templateeditorpage","title":"TemplateEditorPage","text":"<pre><code>import { TemplateEditorPage } from '@maily/app/pages';\n\nfunction EditTemplate({ templateId }) {\n  return &lt;TemplateEditorPage templateId={templateId} /&gt;;\n}\n</code></pre> <p>Key features: - WYSIWYG editor - Code editor - Responsive preview - Template variables - Image management - Version saving</p>"},{"location":"app-components/#subscriber-pages","title":"Subscriber Pages","text":"<p>Subscriber pages manage subscriber data and segmentation:</p>"},{"location":"app-components/#subscriberslistpage","title":"SubscribersListPage","text":"<pre><code>import { SubscribersListPage } from '@maily/app/pages';\n\nfunction Subscribers() {\n  return &lt;SubscribersListPage /&gt;;\n}\n</code></pre> <p>Key features: - Subscriber directory - Segment filtering - Activity indicators - Bulk actions - Import/export</p>"},{"location":"app-components/#subscriberdetailpage","title":"SubscriberDetailPage","text":"<pre><code>import { SubscriberDetailPage } from '@maily/app/pages';\n\nfunction SubscriberDetail({ subscriberId }) {\n  return &lt;SubscriberDetailPage subscriberId={subscriberId} /&gt;;\n}\n</code></pre> <p>Key features: - Profile information - Activity history - Campaign interactions - Subscription preferences - Actions menu</p>"},{"location":"app-components/#segmentbuilderpage","title":"SegmentBuilderPage","text":"<pre><code>import { SegmentBuilderPage } from '@maily/app/pages';\n\nfunction CreateSegment() {\n  return &lt;SegmentBuilderPage /&gt;;\n}\n</code></pre> <p>Key features: - Visual segment builder - Condition groups - Dynamic previews - Save/apply options - Result estimates</p>"},{"location":"app-components/#settings-pages","title":"Settings Pages","text":"<p>Settings pages manage user and account preferences:</p>"},{"location":"app-components/#accountsettingspage","title":"AccountSettingsPage","text":"<pre><code>import { AccountSettingsPage } from '@maily/app/pages';\n\nfunction AccountSettings() {\n  return &lt;AccountSettingsPage /&gt;;\n}\n</code></pre> <p>Key features: - Profile management - Account details - Subscription information - Billing and invoices - Usage statistics</p>"},{"location":"app-components/#teamsettingspage","title":"TeamSettingsPage","text":"<pre><code>import { TeamSettingsPage } from '@maily/app/pages';\n\nfunction TeamSettings() {\n  return &lt;TeamSettingsPage /&gt;;\n}\n</code></pre> <p>Key features: - Team member management - Role assignment - Invitations - Permission settings - Activity monitoring</p>"},{"location":"app-components/#integrationsettingspage","title":"IntegrationSettingsPage","text":"<pre><code>import { IntegrationSettingsPage } from '@maily/app/pages';\n\nfunction IntegrationSettings() {\n  return &lt;IntegrationSettingsPage /&gt;;\n}\n</code></pre> <p>Key features: - API key management - Third-party connections - Webhook configuration - Integration status - Connection history</p>"},{"location":"app-components/#component-patterns","title":"Component Patterns","text":""},{"location":"app-components/#advanced-patterns","title":"Advanced Patterns","text":"<p>The application implements these advanced component patterns:</p>"},{"location":"app-components/#compound-components","title":"Compound Components","text":"<pre><code>import { Tabs } from '@maily/app/components';\n\nfunction SubscriberDetailPage() {\n  return (\n    &lt;Tabs defaultTab=\"profile\"&gt;\n      &lt;Tabs.List&gt;\n        &lt;Tabs.Tab id=\"profile\"&gt;Profile&lt;/Tabs.Tab&gt;\n        &lt;Tabs.Tab id=\"activity\"&gt;Activity&lt;/Tabs.Tab&gt;\n        &lt;Tabs.Tab id=\"campaigns\"&gt;Campaigns&lt;/Tabs.Tab&gt;\n      &lt;/Tabs.List&gt;\n\n      &lt;Tabs.Panels&gt;\n        &lt;Tabs.Panel id=\"profile\"&gt;\n          &lt;ProfileContent /&gt;\n        &lt;/Tabs.Panel&gt;\n        &lt;Tabs.Panel id=\"activity\"&gt;\n          &lt;ActivityContent /&gt;\n        &lt;/Tabs.Panel&gt;\n        &lt;Tabs.Panel id=\"campaigns\"&gt;\n          &lt;CampaignsContent /&gt;\n        &lt;/Tabs.Panel&gt;\n      &lt;/Tabs.Panels&gt;\n    &lt;/Tabs&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#render-props","title":"Render Props","text":"<pre><code>import { ResourceLoader } from '@maily/app/components';\n\nfunction CampaignAnalytics({ campaignId }) {\n  return (\n    &lt;ResourceLoader\n      resource={`/api/campaigns/${campaignId}/analytics`}\n      render={({ data, isLoading, error }) =&gt; {\n        if (isLoading) return &lt;Loading /&gt;;\n        if (error) return &lt;Error message={error.message} /&gt;;\n        return &lt;AnalyticsContent data={data} /&gt;;\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#higher-order-components","title":"Higher-Order Components","text":"<pre><code>import { withAuthentication } from '@maily/app/auth';\n\nfunction ProtectedPage() {\n  // Only accessible to authenticated users\n  return &lt;ProtectedContent /&gt;;\n}\n\nexport default withAuthentication(ProtectedPage);\n</code></pre>"},{"location":"app-components/#context-providers","title":"Context Providers","text":"<pre><code>import { FeatureFlagProvider } from '@maily/app/context';\n\nfunction App() {\n  return (\n    &lt;FeatureFlagProvider&gt;\n      &lt;AppContent /&gt;\n    &lt;/FeatureFlagProvider&gt;\n  );\n}\n\n// In a component\nfunction FeatureComponent() {\n  const { hasFeature } = useFeatureFlags();\n\n  if (hasFeature('new-analytics')) {\n    return &lt;NewAnalytics /&gt;;\n  }\n\n  return &lt;LegacyAnalytics /&gt;;\n}\n</code></pre>"},{"location":"app-components/#performance-patterns","title":"Performance Patterns","text":"<p>The application implements these performance optimization patterns:</p>"},{"location":"app-components/#memoization","title":"Memoization","text":"<pre><code>import { memo, useMemo } from 'react';\n\nconst MemoizedComponent = memo(function ExpensiveComponent({ data }) {\n  // Only re-renders when data changes\n  return &lt;ExpensiveRendering data={data} /&gt;;\n});\n\nfunction DataProcessor({ items }) {\n  // Expensive calculation only runs when items change\n  const processedData = useMemo(() =&gt; {\n    return items.map(item =&gt; expensiveProcess(item));\n  }, [items]);\n\n  return &lt;DataDisplay data={processedData} /&gt;;\n}\n</code></pre>"},{"location":"app-components/#code-splitting","title":"Code Splitting","text":"<pre><code>import { lazy, Suspense } from 'react';\n\nconst TemplateEditor = lazy(() =&gt; import('@maily/app/templates/TemplateEditor'));\n\nfunction EditTemplatePage() {\n  return (\n    &lt;Suspense fallback={&lt;Loading /&gt;}&gt;\n      &lt;TemplateEditor /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#virtualization","title":"Virtualization","text":"<pre><code>import { VirtualizedList } from '@maily/app/components';\n\nfunction SubscriberList({ subscribers }) {\n  return (\n    &lt;VirtualizedList\n      items={subscribers}\n      height={600}\n      itemHeight={60}\n      renderItem={(subscriber) =&gt; (\n        &lt;SubscriberListItem subscriber={subscriber} /&gt;\n      )}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#testing-patterns","title":"Testing Patterns","text":"<p>The application implements these testing patterns:</p>"},{"location":"app-components/#component-testing","title":"Component Testing","text":"<pre><code>import { render, screen, userEvent } from '@maily/testing';\nimport { LoginForm } from '@maily/app/auth';\n\ndescribe('LoginForm', () =&gt; {\n  it('submits with valid credentials', async () =&gt; {\n    const handleSubmit = jest.fn();\n\n    render(&lt;LoginForm onSubmit={handleSubmit} /&gt;);\n\n    await userEvent.type(screen.getByLabelText(/email/i), 'user@example.com');\n    await userEvent.type(screen.getByLabelText(/password/i), 'password123');\n    await userEvent.click(screen.getByRole('button', { name: /sign in/i }));\n\n    expect(handleSubmit).toHaveBeenCalledWith({\n      email: 'user@example.com',\n      password: 'password123'\n    });\n  });\n\n  it('shows validation errors for invalid inputs', async () =&gt; {\n    render(&lt;LoginForm /&gt;);\n\n    await userEvent.type(screen.getByLabelText(/email/i), 'invalid-email');\n    await userEvent.click(screen.getByRole('button', { name: /sign in/i }));\n\n    expect(screen.getByText(/valid email/i)).toBeInTheDocument();\n  });\n});\n</code></pre>"},{"location":"app-components/#integration-testing","title":"Integration Testing","text":"<pre><code>import { renderWithProviders, screen, userEvent } from '@maily/testing';\nimport { CampaignCreator } from '@maily/app/campaigns';\n\ndescribe('CampaignCreator', () =&gt; {\n  it('creates a campaign through all steps', async () =&gt; {\n    const handleSave = jest.fn();\n\n    renderWithProviders(&lt;CampaignCreator onSave={handleSave} /&gt;);\n\n    // Step 1: Details\n    await userEvent.type(screen.getByLabelText(/name/i), 'Test Campaign');\n    await userEvent.type(screen.getByLabelText(/subject/i), 'Test Subject');\n    await userEvent.click(screen.getByRole('button', { name: /next/i }));\n\n    // Step 2: Template\n    await userEvent.click(screen.getByTestId('template-1'));\n    await userEvent.click(screen.getByRole('button', { name: /next/i }));\n\n    // Step 3: Audience\n    await userEvent.click(screen.getByTestId('segment-1'));\n    await userEvent.click(screen.getByRole('button', { name: /next/i }));\n\n    // Step 4: Review\n    await userEvent.click(screen.getByRole('button', { name: /create/i }));\n\n    expect(handleSave).toHaveBeenCalled();\n  });\n});\n</code></pre>"},{"location":"app-components/#component-library-integration","title":"Component Library Integration","text":"<p>The app components integrate with the UI component library:</p>"},{"location":"app-components/#using-ui-components","title":"Using UI Components","text":"<pre><code>import { Button, Card, Input } from '@maily/ui';\nimport { CampaignForm } from '@maily/app/campaigns';\n\nfunction CreateCampaignPage() {\n  return (\n    &lt;Card padding=\"lg\"&gt;\n      &lt;Card.Header&gt;Create Campaign&lt;/Card.Header&gt;\n      &lt;CampaignForm\n        onSubmit={handleSubmit}\n        onCancel={handleCancel}\n      /&gt;\n      &lt;Card.Footer&gt;\n        &lt;Button variant=\"secondary\" onClick={handleCancel}&gt;\n          Cancel\n        &lt;/Button&gt;\n        &lt;Button variant=\"primary\" type=\"submit\" form=\"campaign-form\"&gt;\n          Create Campaign\n        &lt;/Button&gt;\n      &lt;/Card.Footer&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#extending-ui-components","title":"Extending UI Components","text":"<pre><code>import { Button } from '@maily/ui';\n\nexport function ActionButton({ label, icon, ...props }) {\n  return (\n    &lt;Button\n      leftIcon={icon}\n      variant=\"primary\"\n      size=\"md\"\n      {...props}\n    &gt;\n      {label}\n    &lt;/Button&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#theme-configuration","title":"Theme Configuration","text":"<pre><code>import { ThemeProvider, theme } from '@maily/ui';\n\n// Extend the base theme\nconst extendedTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary: {\n      50: '#e6f7ff',\n      100: '#bae3ff',\n      // Additional color shades\n    }\n  }\n};\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={extendedTheme}&gt;\n      &lt;AppContent /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"app-components/#ai-component-integration","title":"AI Component Integration","text":"<p>AI-powered components enhance the application with intelligent features:</p>"},{"location":"app-components/#aicontentgenerator","title":"AIContentGenerator","text":"<pre><code>import { AIContentGenerator } from '@maily/app/ai';\n\nfunction EmailEditor() {\n  return (\n    &lt;EditorContainer&gt;\n      &lt;EditorToolbar&gt;\n        &lt;AIContentGenerator\n          type=\"subject\"\n          context={{\n            campaign: campaignData,\n            audience: audienceData\n          }}\n          onGenerate={handleGeneratedContent}\n        /&gt;\n      &lt;/EditorToolbar&gt;\n      &lt;EditorContent /&gt;\n    &lt;/EditorContainer&gt;\n  );\n}\n</code></pre> <p>Key features: - Subject line generation - Body content suggestions - Smart content completion - Tone and style customization - Personalization enhancement</p>"},{"location":"app-components/#aisendtimeoptimizer","title":"AISendTimeOptimizer","text":"<pre><code>import { AISendTimeOptimizer } from '@maily/app/ai';\n\nfunction CampaignScheduler({ campaignId }) {\n  return (\n    &lt;SchedulingSection&gt;\n      &lt;AISendTimeOptimizer\n        campaignId={campaignId}\n        segmentIds={selectedSegments}\n        onRecommendation={handleRecommendation}\n      /&gt;\n      &lt;ManualScheduling /&gt;\n    &lt;/SchedulingSection&gt;\n  );\n}\n</code></pre> <p>Key features: - Optimal send time prediction - Segment-specific recommendations - Timezone-aware scheduling - Performance prediction - Historical data analysis</p>"},{"location":"app-components/#aiaudienceinsights","title":"AIAudienceInsights","text":"<pre><code>import { AIAudienceInsights } from '@maily/app/ai';\n\nfunction SegmentDetails({ segmentId }) {\n  return (\n    &lt;AnalyticsPanel&gt;\n      &lt;AIAudienceInsights\n        segmentId={segmentId}\n        showRecommendations={true}\n        depth=\"detailed\"\n      /&gt;\n    &lt;/AnalyticsPanel&gt;\n  );\n}\n</code></pre> <p>Key features: - Engagement prediction - Behavioral analysis - Content preferences - Churn risk identification - Growth opportunities</p>"},{"location":"app-components/#aiperformancepredictor","title":"AIPerformancePredictor","text":"<pre><code>import { AIPerformancePredictor } from '@maily/app/ai';\n\nfunction CampaignReview({ campaign }) {\n  return (\n    &lt;ReviewSection&gt;\n      &lt;AIPerformancePredictor\n        campaign={campaign}\n        showConfidence={true}\n        metrics={['openRate', 'clickRate', 'conversionRate']}\n      /&gt;\n      &lt;LaunchOptions /&gt;\n    &lt;/ReviewSection&gt;\n  );\n}\n</code></pre> <p>Key features: - Campaign success prediction - Performance metric forecasting - Confidence indicators - Improvement suggestions - A/B test outcome prediction</p>"},{"location":"app-components/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"app-components/#component-creation-checklist","title":"Component Creation Checklist","text":"<p>When creating new components:</p> <ol> <li>Define the component API</li> <li>Clear props interface with JSDoc comments</li> <li>Reasonable default values</li> <li> <p>Proper TypeScript typing</p> </li> <li> <p>Implement the component</p> </li> <li>Follow project structure and naming conventions</li> <li>Use composition for complex components</li> <li> <p>Apply performance optimizations where needed</p> </li> <li> <p>Write tests</p> </li> <li>Unit tests for functionality</li> <li>Accessibility tests</li> <li> <p>Snapshot tests for UI stability</p> </li> <li> <p>Document the component</p> </li> <li>Usage examples</li> <li>Props documentation</li> <li>Edge cases and limitations</li> </ol>"},{"location":"app-components/#component-quality-standards","title":"Component Quality Standards","text":"<p>All components should meet these standards:</p> <ul> <li>Accessibility: WCAG AA compliance</li> <li>Performance: Optimized rendering and no unnecessary re-renders</li> <li>Responsiveness: Proper behavior across device sizes</li> <li>Reusability: Generic enough for multiple use cases</li> <li>Testing: Comprehensive test coverage</li> </ul>"},{"location":"app-components/#component-review-process","title":"Component Review Process","text":"<p>The review process for new components:</p> <ol> <li>Code review: Adherence to project standards</li> <li>Design review: Visual consistency and UX quality</li> <li>Accessibility review: WCAG compliance</li> <li>Performance review: Rendering optimization</li> <li>Documentation review: Completeness and clarity</li> </ol> <p>This documentation is maintained by the Maily Engineering Team. For questions or suggestions, contact engineering@maily.com.</p>"},{"location":"architecture-handbook/","title":"Maily Architecture Handbook","text":"<p>Last updated: March 4, 2025</p>"},{"location":"architecture-handbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>System Architecture</li> <li>High-Level Architecture</li> <li>Microservices</li> <li>Data Flow</li> <li>Frontend Architecture</li> <li>React Server Components</li> <li>UI Framework</li> <li>State Management</li> <li>Backend Architecture</li> <li>API Design</li> <li>Database Architecture</li> <li>Authentication &amp; Authorization</li> <li>AI Services Architecture</li> <li>Enhanced AI Service</li> <li>ML Model Architecture</li> <li>Infrastructure</li> <li>Deployment Architecture</li> <li>Monitoring &amp; Observability</li> <li>Scaling Strategy</li> <li>Security Architecture</li> <li>Zero Trust Model</li> <li>Data Protection</li> <li>Performance Considerations</li> <li>Evolution &amp; Roadmap</li> </ul>"},{"location":"architecture-handbook/#overview","title":"Overview","text":"<p>The Maily platform is built on a modern, cloud-native architecture designed for scalability, reliability, and developer velocity. This handbook provides a comprehensive overview of the system's architecture, covering all aspects from frontend to infrastructure.</p> <p>The architecture follows these key principles:</p> <ul> <li>Modularity: Components are designed with clear boundaries and interfaces</li> <li>Scalability: All components can scale independently based on demand</li> <li>Resilience: The system continues functioning even when parts fail</li> <li>Observability: Comprehensive monitoring and logging throughout</li> <li>Security: Zero-trust approach with defense in depth</li> <li>Developer Experience: Optimized for developer productivity</li> </ul>"},{"location":"architecture-handbook/#system-architecture","title":"System Architecture","text":""},{"location":"architecture-handbook/#high-level-architecture","title":"High-Level Architecture","text":"<p>Maily follows a microservices architecture organized around business capabilities. The system is divided into these major components:</p> <ol> <li>Frontend Layer: Next.js-based web application and API endpoints</li> <li>API Gateway: GraphQL-based gateway for aggregating backend services</li> <li>Microservices: Independent services for specific business domains</li> <li>Data Layer: Persistent storage using PostgreSQL and Redis</li> <li>AI Services: Enhanced AI capabilities for content generation and optimization</li> <li>Infrastructure Layer: Kubernetes-based platform with observability</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client Apps   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  CDN / Edge      \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Frontend Layer  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AI Services    \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502    API Gateway     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                                              \u2502\n         \u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Microservices  \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502   Data Layer    \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture-handbook/#microservices","title":"Microservices","text":"<p>Maily's backend is composed of these core microservices:</p> <ol> <li>Campaign Service: Manages email campaign creation, scheduling, and execution</li> <li>Content Service: Handles email content, templates, and assets</li> <li>Audience Service: Manages recipient lists, segmentation, and subscriptions</li> <li>Analytics Service: Collects and processes engagement metrics</li> <li>Notification Service: Manages system notifications and alerts</li> <li>User Service: Handles user authentication, authorization, and preferences</li> <li>Billing Service: Manages subscription plans and billing</li> </ol> <p>Each service: - Has its own database or schema - Exposes a GraphQL API - Scales independently - Is deployed as a containerized application in Kubernetes</p>"},{"location":"architecture-handbook/#data-flow","title":"Data Flow","text":"<p>The system follows these data flow patterns:</p> <ol> <li>Command Flow: User actions \u2192 API Gateway \u2192 Appropriate Microservice \u2192 Database \u2192 Events</li> <li>Query Flow: User requests \u2192 API Gateway \u2192 Relevant Microservice(s) \u2192 Database \u2192 Response</li> <li>Event Flow: Service events \u2192 Kafka \u2192 Consuming Services \u2192 Database updates</li> </ol> <p>Events are used extensively for: - Decoupling services - Implementing complex workflows - Enabling real-time updates - Facilitating eventual consistency</p>"},{"location":"architecture-handbook/#frontend-architecture","title":"Frontend Architecture","text":"<p>The frontend architecture is built around Next.js App Router with React Server Components, providing a modern and performant user interface.</p>"},{"location":"architecture-handbook/#react-server-components","title":"React Server Components","text":"<p>Maily leverages React Server Components (RSC) for several advantages:</p> <ul> <li>Reduced Client JavaScript: Server components don't send component code to the client</li> <li>Direct Data Access: Server components can access databases directly</li> <li>Improved Performance: By moving rendering work to the server</li> <li>Progressive Enhancement: Core functionality works without JavaScript</li> </ul> <p>The frontend follows these patterns: - Server components for data fetching and initial rendering - Client components for interactive elements - Streaming for improved perceived performance - Server actions for form handling</p>"},{"location":"architecture-handbook/#ui-framework","title":"UI Framework","text":"<p>The UI layer is standardized on:</p> <ul> <li>Tailwind CSS: For utility-first styling</li> <li>shadcn/ui: For consistent, accessible component primitives</li> <li>Custom design tokens: For brand consistency</li> <li>Framer Motion: For animations and transitions</li> </ul> <p>Design principles include: - Accessibility (WCAG 2.1 AA compliance) - Responsive design for all screen sizes - Performance-first approach - Consistent UI patterns</p>"},{"location":"architecture-handbook/#state-management","title":"State Management","text":"<p>State management follows modern best practices:</p> <ul> <li>Server State: Managed via TanStack Query for caching, revalidation</li> <li>Client State: Managed with Zustand for global UI state</li> <li>Form State: Handled with React Hook Form and Zod</li> <li>URL State: Used for shareable, bookmarkable UI states</li> </ul>"},{"location":"architecture-handbook/#backend-architecture","title":"Backend Architecture","text":""},{"location":"architecture-handbook/#api-design","title":"API Design","text":"<p>The Maily API layer follows these principles:</p> <ul> <li>GraphQL First: Primary API interface is GraphQL</li> <li>Schema-Driven: Types and resolvers generated from schema</li> <li>Strongly Typed: End-to-end type safety with TypeScript</li> <li>Performance: DataLoader pattern for batching and caching</li> </ul> <p>API gateway handles: - Authentication - Rate limiting - Request routing - Schema stitching across services</p>"},{"location":"architecture-handbook/#database-architecture","title":"Database Architecture","text":"<p>Maily uses a polyglot persistence approach:</p> <ul> <li>PostgreSQL: Primary relational database for structured data</li> <li>Redis: For caching, session management, rate limiting</li> <li>ClickHouse: For analytics data warehousing</li> <li>S3: For email asset storage</li> </ul> <p>Database design principles include: - Clear domain boundaries between services - Appropriate indexing strategies - Optimization for common query patterns - Data partitioning for large tables</p>"},{"location":"architecture-handbook/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>Maily implements:</p> <ul> <li>NextAuth.js: For authentication provider integration</li> <li>JWT: For secure, stateless authentication</li> <li>RBAC: Role-based access control</li> <li>ABAC: Attribute-based access control for fine-grained permissions</li> <li>OAuth 2.0/OpenID Connect: For third-party authentication</li> </ul>"},{"location":"architecture-handbook/#ai-services-architecture","title":"AI Services Architecture","text":""},{"location":"architecture-handbook/#enhanced-ai-service","title":"Enhanced AI Service","text":"<p>The Enhanced AI Service architecture includes:</p> <ul> <li>AI Orchestrator: Coordinates requests between models and services</li> <li>RAG Pipeline: Retrieval-augmented generation for accurate content</li> <li>Model Router: Routes requests to appropriate AI models</li> <li>Content Validator: Ensures generated content meets quality standards</li> <li>Feedback Loop: Improves AI based on user interactions</li> </ul> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  API Gateway  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502AI Orchestrator\u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Model Router \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                     \u2502                     \u2502\n        \u2502                     \u25bc                     \u25bc\n        \u2502             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502             \u2502  RAG Pipeline \u2502     \u2502 Claude/Other  \u2502\n        \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502  AI Models    \u2502\n        \u2502                     \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                     \u25bc\n        \u2502             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502Content Validator\u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture-handbook/#ml-model-architecture","title":"ML Model Architecture","text":"<p>The ML pipeline architecture includes:</p> <ul> <li>Feature Store: Centralized repository for ML features</li> <li>Model Registry: Versioned storage for trained models</li> <li>Training Pipeline: Automated model training and evaluation</li> <li>Inference Service: Low-latency model serving</li> <li>Monitoring: Performance and drift detection</li> </ul> <p>Models are: - Version controlled with DVC - Continuously evaluated - A/B tested before full deployment - Monitored for drift and performance degradation</p>"},{"location":"architecture-handbook/#infrastructure","title":"Infrastructure","text":""},{"location":"architecture-handbook/#deployment-architecture","title":"Deployment Architecture","text":"<p>Maily's infrastructure is built on these principles:</p> <ul> <li>Kubernetes: For container orchestration</li> <li>Helm: For deployment templating and packaging</li> <li>ArgoCD: For GitOps-based continuous deployment</li> <li>Multi-region: For high availability and disaster recovery</li> <li>Infrastructure as Code: Using Terraform for all infrastructure</li> </ul>"},{"location":"architecture-handbook/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>The observability stack includes:</p> <ul> <li>Prometheus: For metrics collection</li> <li>Grafana: For dashboards and alerting</li> <li>Loki: For log aggregation</li> <li>Tempo: For distributed tracing</li> <li>OpenTelemetry: For instrumentation</li> <li>Healthchecks: For proactive monitoring</li> </ul>"},{"location":"architecture-handbook/#scaling-strategy","title":"Scaling Strategy","text":"<p>Maily's scaling strategy encompasses:</p> <ul> <li>Horizontal Pod Autoscaling: Based on CPU/memory</li> <li>Custom Metrics Scaling: Based on queue length and request rates</li> <li>Vertical Pod Autoscaling: For resource optimization</li> <li>Database Connection Pooling: For database scaling</li> <li>Read Replicas: For read-heavy workloads</li> <li>Kafka Partitioning: For event processing scalability</li> </ul>"},{"location":"architecture-handbook/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture-handbook/#zero-trust-model","title":"Zero Trust Model","text":"<p>Maily follows a Zero Trust security model:</p> <ul> <li>Identity: Strong authentication for all users and services</li> <li>Devices: Security posture checking</li> <li>Network: Mutual TLS between all services</li> <li>Applications: Runtime application self-protection</li> <li>Data: Encryption at rest and in transit</li> </ul>"},{"location":"architecture-handbook/#data-protection","title":"Data Protection","text":"<p>Data protection measures include:</p> <ul> <li>Encryption: All PII encrypted at rest and in transit</li> <li>Data Classification: Structured approach to sensitive data</li> <li>Access Controls: Least privilege principle</li> <li>Audit Logging: All sensitive data access logged</li> <li>Data Retention: Automatic enforcement of retention policies</li> <li>Compliance: GDPR, CCPA, and industry standards</li> </ul>"},{"location":"architecture-handbook/#performance-considerations","title":"Performance Considerations","text":"<p>Key performance optimizations include:</p> <ul> <li>Edge Caching: Cloudflare for static assets and API responses</li> <li>Database Optimization: Indexing, query optimization, connection pooling</li> <li>Frontend Performance: Code splitting, lazy loading, image optimization</li> <li>Server Rendering: React Server Components for improved TTI</li> <li>Background Processing: Asynchronous handling of non-critical tasks</li> <li>CDN Integration: For global content delivery</li> </ul>"},{"location":"architecture-handbook/#evolution-roadmap","title":"Evolution &amp; Roadmap","text":"<p>The architecture will evolve according to the Modernization Roadmap, with these key initiatives:</p> <ul> <li>Full Microservices Migration: Completing the transition to microservices</li> <li>Edge Computing Expansion: Moving more logic to the edge</li> <li>Advanced AI Integration: Deeper integration of AI throughout the platform</li> <li>Enhanced Real-time Capabilities: WebSockets and real-time collaboration</li> <li>Developer Platform: Expanding API and extension capabilities</li> </ul>"},{"location":"backend-apps/","title":"Maily Backend Applications","text":"<p>Last updated: March 4, 2025</p>"},{"location":"backend-apps/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Application Architecture</li> <li>Core Services</li> <li>API Service</li> <li>Email Delivery Service</li> <li>Analytics Service</li> <li>Audience Service</li> <li>Supporting Services</li> <li>AI Orchestrator</li> <li>Auth Service</li> <li>Webhook Service</li> <li>Storage Service</li> <li>Infrastructure Services</li> <li>Gateway Service</li> <li>Monitoring Service</li> <li>Scheduler Service</li> <li>Search Service</li> <li>Development Workflow</li> <li>Deployment Strategy</li> <li>Performance Optimization</li> <li>Security Considerations</li> </ul>"},{"location":"backend-apps/#overview","title":"Overview","text":"<p>The Maily backend ecosystem consists of a collection of microservices designed to provide scalable, reliable, and maintainable functionality. This document provides comprehensive documentation for all backend applications within the Maily platform.</p> <p>Our backend applications follow a microservice architecture, with each service responsible for a specific domain of functionality. Services communicate through well-defined APIs, ensuring loose coupling and high cohesion.</p>"},{"location":"backend-apps/#application-architecture","title":"Application Architecture","text":""},{"location":"backend-apps/#technology-stack","title":"Technology Stack","text":"<ul> <li>Language: TypeScript with Node.js</li> <li>Framework: NestJS</li> <li>API: GraphQL (primary) and REST (secondary)</li> <li>Database: PostgreSQL (primary) and specialized databases</li> <li>Caching: Redis</li> <li>Messaging: Kafka</li> <li>Container: Docker</li> <li>Orchestration: Kubernetes</li> <li>IaC: Terraform</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"backend-apps/#architectural-principles","title":"Architectural Principles","text":"<ol> <li>Domain-Driven Design: Services organized around business capabilities</li> <li>Microservice Architecture: Independently deployable services</li> <li>API-First Design: Well-defined APIs and contracts between services</li> <li>Event-Driven Communication: Asynchronous communication via events</li> <li>Hexagonal Architecture: Clear separation of domain logic from infrastructure</li> <li>Infrastructure as Code: Automated infrastructure provisioning</li> <li>Immutable Deployment: Services deployed as immutable containers</li> </ol>"},{"location":"backend-apps/#common-service-structure","title":"Common Service Structure","text":"<p>All services follow a standardized project structure: <pre><code>\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 domain/            # Domain models and business logic\n\u2502   \u2502   \u251c\u2500\u2500 models/        # Domain entities\n\u2502   \u2502   \u251c\u2500\u2500 services/      # Domain services\n\u2502   \u2502   \u251c\u2500\u2500 repositories/  # Repository interfaces\n\u2502   \u251c\u2500\u2500 application/       # Application services and use cases\n\u2502   \u2502   \u251c\u2500\u2500 commands/      # Command handlers\n\u2502   \u2502   \u251c\u2500\u2500 queries/       # Query handlers\n\u2502   \u2502   \u251c\u2500\u2500 events/        # Event handlers\n\u2502   \u251c\u2500\u2500 infrastructure/    # Infrastructure implementations\n\u2502   \u2502   \u251c\u2500\u2500 database/      # Database implementations\n\u2502   \u2502   \u251c\u2500\u2500 messaging/     # Messaging implementations\n\u2502   \u2502   \u251c\u2500\u2500 external/      # External service integrations\n\u2502   \u251c\u2500\u2500 interfaces/        # Interface adapters\n\u2502   \u2502   \u251c\u2500\u2500 api/           # API controllers and resolvers\n\u2502   \u2502   \u251c\u2500\u2500 events/        # Event subscribers\n\u2502   \u2502   \u251c\u2500\u2500 schedules/     # Scheduled tasks\n\u2502   \u251c\u2500\u2500 config/            # Application configuration\n\u2502   \u251c\u2500\u2500 utils/             # Utilities and helpers\n\u251c\u2500\u2500 test/                  # Test files\n\u251c\u2500\u2500 nest-cli.json          # NestJS configuration\n\u251c\u2500\u2500 package.json           # Dependencies and scripts\n\u251c\u2500\u2500 tsconfig.json          # TypeScript configuration\n\u251c\u2500\u2500 Dockerfile             # Container definition\n</code></pre></p>"},{"location":"backend-apps/#core-services","title":"Core Services","text":""},{"location":"backend-apps/#api-service","title":"API Service","text":"<p>Purpose: Central GraphQL and REST API gateway for client applications.</p> <p>Repository: github.com/maily/api-service</p> <p>Primary Consumers: Frontend applications, third-party integrations, and mobile apps</p> <p>Key Features: - GraphQL API: Schema-based API with resolvers for all client operations - REST API: RESTful endpoints for specific use cases - Authentication: JWT validation and authorization - Rate Limiting: Request throttling and quota management - Caching: Response caching for improved performance - Schema Validation: Request validation against schema definitions - Error Handling: Standardized error reporting and handling - API Documentation: Auto-generated API documentation - Metrics Collection: API usage metrics and performance data</p> <p>Technical Details: - Framework: NestJS with Apollo Server - Database Access: None (delegates to domain services) - Caching: Redis for response caching - Authentication: JWT verification with auth service - Transport: HTTP/2 with TLS - Documentation: GraphQL Playground and Swagger</p> <p>Design Patterns: - BFF (Backend for Frontend) pattern - API Gateway pattern - Circuit Breaker pattern for service resilience - Request-Response pattern</p> <p>Integration Points: - Connects to all domain services via gRPC - Publishes API usage events to Kafka - Consumes service health events from Kafka</p> <p>Deployment Details: - Minimum 3 replicas in production - Horizontal scaling based on request load - Blue/green deployment strategy - Zero-downtime updates</p> <p>Service Dependencies: - Auth Service for authentication - All domain services for data operations - Monitoring Service for metrics - Gateway Service for routing</p> <p>Monitoring: - Request rate, error rate, and duration metrics - Response time percentiles (p50, p95, p99) - Cache hit ratio - Error rate by error type - Request rate by client and operation</p>"},{"location":"backend-apps/#email-delivery-service","title":"Email Delivery Service","text":"<p>Purpose: Reliable, scalable email delivery and management system.</p> <p>Repository: github.com/maily/email-delivery-service</p> <p>Primary Consumers: API Service, Campaign Manager, Audience Service</p> <p>Key Features: - Email Sending: High-throughput email delivery - Template Rendering: Dynamic email content generation - Delivery Tracking: Opens, clicks, and other engagement metrics - Bounce Management: Handling of bounced emails - Suppression Lists: Management of unsubscribes and complaints - Scheduling: Timed and triggered email delivery - Batching: Efficient batch email processing - Provider Management: Multi-provider support with failover - Analytics Integration: Email engagement data collection</p> <p>Technical Details: - Framework: NestJS - Database: PostgreSQL for email data and metadata - Queue: Kafka for email queue and events - Storage: S3 for email content and attachments - Providers: SendGrid (primary), Amazon SES (secondary), Mailgun (tertiary) - Caching: Redis for template and configuration caching</p> <p>Design Patterns: - Producer-Consumer pattern for email processing - Strategy pattern for provider selection - Retry pattern with exponential backoff - Circuit Breaker for provider failover - Outbox pattern for delivery reliability</p> <p>Integration Points: - Receives email requests from API Service - Publishes delivery events to Kafka - Consumes audience events for subscription management - Reports analytics data to Analytics Service</p> <p>Deployment Details: - Horizontally scaled based on queue depth - Minimum 5 replicas in production - Regional deployment for reduced latency - Auto-scaling based on queue size</p> <p>Service Dependencies: - Storage Service for content and attachments - Analytics Service for tracking data - Audience Service for recipient data - Scheduler Service for timed delivery</p> <p>Monitoring: - Emails sent, delivered, opened, clicked - Bounce rate by type (hard, soft) - Queue depth and processing time - Provider latency and error rates - Delivery success rate by domain</p>"},{"location":"backend-apps/#analytics-service","title":"Analytics Service","text":"<p>Purpose: Collect, process, and analyze marketing performance data.</p> <p>Repository: github.com/maily/analytics-service</p> <p>Primary Consumers: API Service, Marketing Dashboard, Email Campaign Manager</p> <p>Key Features: - Event Collection: High-volume event ingestion - Data Processing: Real-time and batch data processing - Metric Calculation: Predefined and custom metric computation - Report Generation: Scheduled and on-demand reporting - Data Export: Export capabilities for external analysis - Segmentation: Performance analysis by segment - Attribution: Multi-touch attribution modeling - Funnel Analysis: Conversion funnel tracking and analysis - Custom Dimensions: User-defined dimensions and metrics</p> <p>Technical Details: - Framework: NestJS - Databases:   - ClickHouse for analytics data   - PostgreSQL for metadata   - Redis for real-time counters - Stream Processing: Kafka Streams for real-time processing - Batch Processing: Scheduled jobs for aggregation - Export: S3 for data export storage - Visualization: API for chart and dashboard data</p> <p>Design Patterns: - CQRS for separate read and write paths - Event Sourcing for complete audit history - Materialized View for pre-computed metrics - Facade pattern for simplified API access - Publisher-Subscriber for event distribution</p> <p>Integration Points: - Receives events from all services via Kafka - Provides metrics API to API Service - Publishes aggregated metrics to Kafka - Consumes audience data for segmentation - Sends export notifications to users</p> <p>Deployment Details: - Separate deployments for collection and processing - ClickHouse cluster with replication - Dedicated nodes for high-volume processing - Data retention policies by data type</p> <p>Service Dependencies: - Storage Service for data exports - Audience Service for segmentation data - Scheduler Service for batch processing - Notification Service for alerts</p> <p>Monitoring: - Events processed per second - Processing latency percentiles - Query performance metrics - Storage usage and growth rate - Error rate by processing stage</p>"},{"location":"backend-apps/#audience-service","title":"Audience Service","text":"<p>Purpose: Manage customer data, segmentation, and targeting.</p> <p>Repository: github.com/maily/audience-service</p> <p>Primary Consumers: API Service, Email Campaign Manager, Analytics Service</p> <p>Key Features: - Contact Management: CRUD operations for contacts - Segmentation: Dynamic and static audience segments - List Management: Organization of contacts into lists - Profile Enrichment: Enhancement of contact profiles - Preference Management: Subscription and communication preferences - Compliance: GDPR, CCPA, and other regulatory compliance - Import/Export: Bulk contact operations - Merge/Dedupe: Contact deduplication and merging - Tagging: Custom contact categorization - Activity Tracking: Contact engagement history</p> <p>Technical Details: - Framework: NestJS - Database: PostgreSQL with JSON columns for flexible attributes - Search: Elasticsearch for contact search - Cache: Redis for high-speed lookups - Queue: Kafka for async processing - Storage: S3 for import/export files - Validation: Zod for schema validation</p> <p>Design Patterns: - Repository pattern for data access - Specification pattern for complex queries - Strategy pattern for segmentation rules - Observer pattern for data changes - Builder pattern for segment construction</p> <p>Integration Points: - Provides contact data to Email Delivery Service - Publishes contact change events to Kafka - Receives engagement data from Analytics Service - Exposes segment API to API Service - Consumes import data from Storage Service</p> <p>Deployment Details: - Scaled based on database load - Read replicas for high-volume queries - Database partitioning by customer - Daily backup with point-in-time recovery</p> <p>Service Dependencies: - Storage Service for file operations - Analytics Service for engagement data - AI Orchestrator for predictive segmentation - Auth Service for data access control</p> <p>Monitoring: - Contact operations per second - Segment evaluation time - API response time by operation - Database query performance - Import/export job duration</p>"},{"location":"backend-apps/#supporting-services","title":"Supporting Services","text":""},{"location":"backend-apps/#ai-orchestrator","title":"AI Orchestrator","text":"<p>Purpose: Coordinate AI capabilities and manage machine learning models.</p> <p>Repository: github.com/maily/ai-orchestrator</p> <p>Primary Consumers: API Service, Email Campaign Manager, Audience Service</p> <p>Key Features: - Content Generation: AI-powered email content creation - Subject Line Optimization: Predictive performance optimization - Audience Segmentation: ML-based audience clustering - Engagement Prediction: Open and click prediction - Send Time Optimization: Optimal delivery time prediction - Personalization: Dynamic content personalization - Image Generation: AI-generated images for campaigns - Sentiment Analysis: Content sentiment evaluation - Language Translation: Multi-language content support - Model Management: ML model lifecycle management</p> <p>Technical Details: - Framework: NestJS - Models: Hosted models and API integrations - Vector Database: Pinecone for embeddings - Providers:   - Anthropic Claude for text generation   - Stability AI for image generation   - Custom models for prediction tasks - Processing: GPU-accelerated inference - Caching: Redis for result caching - Queue: Kafka for async processing</p> <p>Design Patterns: - Mediator pattern for orchestration - Adapter pattern for provider integration - Chain of Responsibility for processing pipeline - Strategy pattern for model selection - Cache-Aside pattern for performance</p> <p>Integration Points: - Receives requests from API Service - Fetches content data from Content Service - Gets audience data from Audience Service - Publishes generation events to Kafka - Reports metrics to Analytics Service</p> <p>Deployment Details: - GPU-optimized instances for inference - Autoscaling based on queue depth - Regional deployment for reduced latency - GPU-based horizontal scaling</p> <p>Service Dependencies: - Storage Service for model artifacts - Analytics Service for performance data - Content Service for reference material - Audience Service for user data</p> <p>Monitoring: - Inference time by model and operation - Queue depth and processing time - Error rate by provider - Cache hit ratio - Model performance metrics</p>"},{"location":"backend-apps/#auth-service","title":"Auth Service","text":"<p>Purpose: Authentication, authorization, and user management.</p> <p>Repository: github.com/maily/auth-service</p> <p>Primary Consumers: API Service, Gateway Service, Admin Portal</p> <p>Key Features: - User Authentication: Multiple authentication methods - Authorization: Role-based access control - User Management: User CRUD operations - Session Management: Session tracking and control - Multi-factor Authentication: 2FA and MFA support - OAuth Integration: Social login and SSO - Password Management: Secure password policies - Audit Logging: Security event tracking - Rate Limiting: Protection against brute force attacks - Token Management: JWT issuance and validation</p> <p>Technical Details: - Framework: NestJS - Database: PostgreSQL for user data - Cache: Redis for token and session cache - Security: Argon2 for password hashing - MFA: TOTP and WebAuthn support - OAuth: OpenID Connect compliant - Tokens: RS256 signed JWTs - API: REST API with OpenAPI spec</p> <p>Design Patterns: - Factory pattern for authentication providers - Decorator pattern for authorization - Strategy pattern for MFA methods - Chain of Responsibility for auth pipeline - Singleton pattern for token service</p> <p>Integration Points: - Provides authentication for all services - Publishes user events to Kafka - Validates tokens for API Service - Stores audit logs in Analytics Service - Integrates with external IdPs via OIDC</p> <p>Deployment Details: - High-availability deployment - Geo-distributed for reduced latency - Minimum 3 replicas in production - Priority scaling and resource allocation</p> <p>Service Dependencies: - Storage Service for profile images - Notification Service for auth notifications - Analytics Service for audit logging - Admin Service for user management</p> <p>Monitoring: - Authentication attempts and success rate - Token issuance and validation rate - Active sessions count - Failed login attempts by user and IP - MFA usage and success rate</p>"},{"location":"backend-apps/#webhook-service","title":"Webhook Service","text":"<p>Purpose: Manage outbound webhooks and third-party integrations.</p> <p>Repository: github.com/maily/webhook-service</p> <p>Primary Consumers: API Service, Integration Partners, Third-party Systems</p> <p>Key Features: - Webhook Delivery: Reliable webhook delivery - Event Filtering: Selective event routing - Retry Management: Configurable retry policies - Signature Verification: Payload signing and verification - Subscription Management: Webhook subscription CRUD - Transformation: Event payload transformation - Rate Limiting: Delivery throttling for recipients - Monitoring: Delivery tracking and metrics - Circuit Breaking: Automatic disabling of failing endpoints - Logging: Comprehensive delivery logging</p> <p>Technical Details: - Framework: NestJS - Database: PostgreSQL for subscription and delivery data - Queue: Kafka for event processing - Cache: Redis for configuration caching - Storage: S3 for payload archives - Signature: HMAC-SHA256 for payload signing - Transport: HTTP/HTTPS with TLS 1.2+</p> <p>Design Patterns: - Observer pattern for event subscription - Retry pattern with exponential backoff - Circuit Breaker for failure handling - Outbox pattern for delivery reliability - Transformer pattern for payload conversion</p> <p>Integration Points: - Consumes events from all services via Kafka - Delivers webhooks to external endpoints - Reports delivery metrics to Analytics Service - Stores delivery history in Storage Service - Registers webhook URLs with Gateway Service</p> <p>Deployment Details: - Horizontally scaled based on event volume - Separate clusters by event priority - Global distribution for reduced latency - Automatic scaling based on queue depth</p> <p>Service Dependencies: - Analytics Service for delivery metrics - Storage Service for payload archiving - Monitoring Service for alerting - Gateway Service for endpoint verification</p> <p>Monitoring: - Delivery attempts and success rate - Delivery latency by endpoint - Queue depth by event type - Retry rate and failure distribution - Endpoint health by domain</p>"},{"location":"backend-apps/#storage-service","title":"Storage Service","text":"<p>Purpose: Manage file storage, retrieval, and processing.</p> <p>Repository: github.com/maily/storage-service</p> <p>Primary Consumers: All services requiring file operations</p> <p>Key Features: - File Upload: Secure file upload handling - File Storage: Durable and redundant storage - Access Control: Permissions-based file access - Transformation: On-demand image and file processing - Versioning: File version management - Metadata: Rich file metadata management - Content Delivery: Fast file serving and distribution - Virus Scanning: Malware detection for uploads - Compression: Automatic file compression - Expiration: Time-based file expiration</p> <p>Technical Details: - Framework: NestJS - Storage: S3 for file storage - Database: PostgreSQL for metadata - CDN: CloudFront for content delivery - Processing: Serverless functions for transformations - Scanning: ClamAV for virus detection - Caching: Redis for metadata caching - Compression: On-the-fly and batch compression</p> <p>Design Patterns: - Proxy pattern for storage providers - Chain of Responsibility for upload processing - Strategy pattern for storage backends - Decorator pattern for file transformations - Facade pattern for simplified API</p> <p>Integration Points: - Provides storage APIs to all services - Publishes file events to Kafka - Processes transformation requests from services - Registers files with Search Service for indexing - Reports usage metrics to Analytics Service</p> <p>Deployment Details: - Separate deployments for upload and serving - Multi-region replication for durability - CDN integration for global delivery - Automatic scaling based on request volume</p> <p>Service Dependencies: - Auth Service for access control - Search Service for file indexing - Monitoring Service for storage metrics - Gateway Service for public file access</p> <p>Monitoring: - Upload/download operations per second - Storage usage and growth rate - Transformation processing time - CDN cache hit ratio - Error rate by operation type</p>"},{"location":"backend-apps/#infrastructure-services","title":"Infrastructure Services","text":""},{"location":"backend-apps/#gateway-service","title":"Gateway Service","text":"<p>Purpose: Edge routing, load balancing, and request filtering.</p> <p>Repository: github.com/maily/gateway-service</p> <p>Primary Consumers: All client applications and services</p> <p>Key Features: - Request Routing: Intelligent traffic routing - Load Balancing: Traffic distribution across instances - Rate Limiting: Request throttling by client - Circuit Breaking: Automatic service isolation - TLS Termination: Secure connection handling - Request Validation: Basic request validation - IP Filtering: Geolocation and IP-based rules - Canary Deployment: Traffic splitting for testing - Response Compression: Automatic response compression - Metrics Collection: Detailed traffic metrics</p> <p>Technical Details: - Technology: Envoy Proxy with custom extensions - Configuration: Dynamic configuration via API - Discovery: Kubernetes service discovery - TLS: TLS 1.3 with modern cipher suites - Rate Limiting: Redis-based distributed rate limiting - Logging: Structured logging to centralized system - Metrics: Prometheus metrics collection</p> <p>Design Patterns: - API Gateway pattern - Circuit Breaker pattern - Sidecar pattern - Bulkhead pattern - Retry pattern with backoff</p> <p>Integration Points: - Routes all incoming traffic to services - Reports metrics to Monitoring Service - Validates tokens with Auth Service - Consumes service health events from Kafka - Follows routing rules from configuration</p> <p>Deployment Details: - Deployed as Kubernetes ingress controller - High-availability configuration - Global load balancer for geographical routing - Layer 4 and Layer 7 load balancing</p> <p>Service Dependencies: - Auth Service for token validation - Monitoring Service for metrics and logging - Config Service for dynamic configuration - All backend services as routing targets</p> <p>Monitoring: - Request rate by service and endpoint - Response time percentiles - Error rate by status code - Connection statistics - TLS handshake metrics</p>"},{"location":"backend-apps/#monitoring-service","title":"Monitoring Service","text":"<p>Purpose: System monitoring, alerting, and observability.</p> <p>Repository: github.com/maily/monitoring-service</p> <p>Primary Consumers: DevOps, SRE team, and all services</p> <p>Key Features: - Metrics Collection: Platform-wide metrics gathering - Log Aggregation: Centralized logging system - Distributed Tracing: End-to-end request tracing - Alerting: Rule-based alerting system - Dashboards: Visualization of system metrics - Health Checking: Active and passive health monitoring - Anomaly Detection: Automatic anomaly identification - SLO Tracking: Service level objective monitoring - Incident Management: Incident lifecycle tracking - Uptime Monitoring: External availability checks</p> <p>Technical Details: - Technologies:   - Prometheus for metrics   - Loki for logs   - Tempo for traces   - Grafana for dashboards   - AlertManager for alerts - Storage: Long-term metrics stored in Thanos - Collection: OpenTelemetry instrumentation - Distribution: Kafka for log and metric streaming - Processing: Stream processors for log enrichment</p> <p>Design Patterns: - Collector pattern for telemetry gathering - Pub/Sub pattern for metric distribution - Pipeline pattern for log processing - Observer pattern for health changes - Command pattern for alerting actions</p> <p>Integration Points: - Collects telemetry from all services - Integrates with PagerDuty for on-call - Sends notifications to chat systems - Publishes health events to Kafka - Stores historical data in Storage Service</p> <p>Deployment Details: - High-availability metrics stack - Separate clusters for metrics and logs - Data sharding by service and time - Regional collection with global aggregation</p> <p>Service Dependencies: - Storage Service for long-term data - Notification Service for alerts - Gateway Service for external checks - All services for telemetry collection</p> <p>Monitoring: - Self-monitoring of collection infrastructure - Ingestion rate by telemetry type - Storage usage and compression ratio - Query performance metrics - Alert firing rate and noise ratio</p>"},{"location":"backend-apps/#scheduler-service","title":"Scheduler Service","text":"<p>Purpose: Manage scheduled tasks and recurring jobs.</p> <p>Repository: github.com/maily/scheduler-service</p> <p>Primary Consumers: All services requiring scheduled operations</p> <p>Key Features: - Job Scheduling: Time-based task scheduling - Recurring Jobs: Cron-style recurring tasks - Distributed Execution: Clustered job processing - Failure Handling: Automatic retry and failure policy - Prioritization: Job priority and queue management - Throttling: Rate control for job execution - Dependency Management: Job dependency resolution - History Tracking: Execution history and auditing - Manual Triggering: On-demand job execution - Notification: Job status notifications</p> <p>Technical Details: - Framework: NestJS - Database: PostgreSQL for job data - Queue: Redis for job queues - Locking: Distributed locks for single execution - Scheduler: Bull for job management - Time: Precision time synchronization - Distribution: Kafka for job events</p> <p>Design Patterns: - Work Queue pattern for job distribution - Compensating Transaction for failure recovery - Saga pattern for multi-step jobs - Leader Election for distributed coordination - Scheduler pattern for time-based operations</p> <p>Integration Points: - Receives job registrations from services - Publishes job events to Kafka - Triggers service endpoints for execution - Reports metrics to Monitoring Service - Sends notifications for job status</p> <p>Deployment Details: - Clustered deployment with leader election - Separate queues by job priority - Horizontally scaled worker pools - Time synchronization across nodes</p> <p>Service Dependencies: - Monitoring Service for metrics - Notification Service for alerts - Gateway Service for job triggering - All services registering jobs</p> <p>Monitoring: - Job execution rate and duration - Queue depth by job type - Failure rate and retry count - Worker utilization - Job latency distribution</p>"},{"location":"backend-apps/#search-service","title":"Search Service","text":"<p>Purpose: Provide search capabilities across all platform data.</p> <p>Repository: github.com/maily/search-service</p> <p>Primary Consumers: API Service, Email Campaign Manager, Audience Manager</p> <p>Key Features: - Full-text Search: Advanced text searching - Faceted Search: Multi-dimensional filtering - Entity Search: Search across entity types - Ranking: Relevance-based result ranking - Suggestions: Auto-complete and suggestions - Indexing: Automatic content indexing - Synonyms: Custom synonym management - Multilingual: Support for multiple languages - Analytics: Search usage analytics - Personalization: User-specific search results</p> <p>Technical Details: - Technology: Elasticsearch cluster - Database: Elasticsearch for search data - Cache: Redis for query caching - Processing: Custom analyzers and tokenizers - Language: Multi-language analysis - Indexing: Kafka-based indexing pipeline - API: GraphQL and REST APIs</p> <p>Design Patterns: - Index pattern for fast retrieval - Adapter pattern for data source integration - Decorator pattern for query enhancement - Chain of Responsibility for query pipeline - Observer pattern for index updates</p> <p>Integration Points: - Provides search API to API Service - Consumes entity events from Kafka - Indexes content from all services - Reports search metrics to Analytics Service - Retrieves entity data from domain services</p> <p>Deployment Details: - Elasticsearch cluster with replication - Separate indices by entity type - Rolling index updates for zero downtime - CPU-optimized instances for query performance</p> <p>Service Dependencies: - Storage Service for index snapshots - Analytics Service for search metrics - All domain services for entity data - Gateway Service for query routing</p> <p>Monitoring: - Query rate and latency percentiles - Index size and document count - Indexing throughput and latency - Cache hit ratio - Cluster health metrics</p>"},{"location":"backend-apps/#development-workflow","title":"Development Workflow","text":""},{"location":"backend-apps/#local-development","title":"Local Development","text":"<p>To set up a local development environment for any Maily backend service:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/maily/[service-name].git\ncd [service-name]\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Start the required infrastructure:    <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Set up environment variables:    <pre><code>cp .env.example .env.local\n# Edit .env.local with appropriate values\n</code></pre></p> </li> <li> <p>Start the development server:    <pre><code>pnpm start:dev\n</code></pre></p> </li> <li> <p>Access the service at http://localhost:3000</p> </li> </ol>"},{"location":"backend-apps/#testing-strategy","title":"Testing Strategy","text":"<p>All backend services implement a comprehensive testing approach:</p> <ul> <li>Unit Tests: Individual component and function testing</li> <li>Integration Tests: Component interaction testing</li> <li>API Tests: Endpoint testing with supertest</li> <li>Performance Tests: Load testing with k6</li> <li>Contract Tests: API contract validation with Pact</li> <li>E2E Tests: Full service testing with test containers</li> </ul> <p>Test commands: <pre><code># Run all tests\npnpm test\n\n# Run unit tests\npnpm test:unit\n\n# Run integration tests\npnpm test:integration\n\n# Run API tests\npnpm test:api\n\n# Run performance tests\npnpm test:performance\n</code></pre></p>"},{"location":"backend-apps/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>All backend services use a standardized CI/CD pipeline:</p> <ol> <li>Continuous Integration:</li> <li>Code linting and formatting</li> <li>Type checking</li> <li>Unit and integration tests</li> <li>Code coverage</li> <li>Vulnerability scanning</li> <li> <p>Container building</p> </li> <li> <p>Continuous Delivery:</p> </li> <li>Container registry publishing</li> <li>Kubernetes manifest generation</li> <li>Canary deployment to staging</li> <li>Integration and contract tests</li> <li> <p>Performance testing</p> </li> <li> <p>Continuous Deployment:</p> </li> <li>GitOps-based deployment</li> <li>Progressive rollout</li> <li>Automated smoke tests</li> <li>Automatic rollback on failure</li> <li>Post-deployment verification</li> </ol>"},{"location":"backend-apps/#deployment-strategy","title":"Deployment Strategy","text":""},{"location":"backend-apps/#environments","title":"Environments","text":"<p>All backend services are deployed to multiple environments:</p> <ul> <li>Development: Per-developer environments</li> <li>Integration: Shared environment for feature testing</li> <li>Staging: Pre-production environment</li> <li>Production: User-facing production environment</li> </ul>"},{"location":"backend-apps/#deployment-architecture","title":"Deployment Architecture","text":"<ul> <li>Container Orchestration: Kubernetes (EKS)</li> <li>Service Mesh: Istio for traffic management</li> <li>Configuration: Kubernetes ConfigMaps and Secrets</li> <li>Deployments: Rolling updates with health checks</li> <li>Scaling: Horizontal Pod Autoscaler</li> <li>Resilience: Pod Disruption Budgets and affinities</li> <li>Networking: Service and NetworkPolicy resources</li> <li>Storage: Persistent Volumes for stateful services</li> </ul>"},{"location":"backend-apps/#release-strategy","title":"Release Strategy","text":"<ul> <li>Release Cadence: Weekly releases</li> <li>Rollout Strategy: Canary deployments (10%, 50%, 100%)</li> <li>Rollback Process: Automatic rollback on health check failure</li> <li>Feature Flags: ConfigMap-based feature toggles</li> <li>Versioning: Semantic versioning with Git tags</li> <li>Change Management: Tracked in JIRA and release notes</li> </ul>"},{"location":"backend-apps/#performance-optimization","title":"Performance Optimization","text":""},{"location":"backend-apps/#database-optimization","title":"Database Optimization","text":"<ul> <li>Indexing: Strategic index creation and management</li> <li>Query Optimization: Regular query analysis and tuning</li> <li>Connection Pooling: PgBouncer for connection management</li> <li>Caching: Redis for query caching and results</li> <li>Read Replicas: Separate replicas for read-heavy services</li> <li>Partitioning: Table partitioning for large datasets</li> <li>Vacuum: Regular maintenance and cleanup</li> </ul>"},{"location":"backend-apps/#api-performance","title":"API Performance","text":"<ul> <li>Response Caching: Caching of frequently requested data</li> <li>Batch Processing: Batch API endpoints for bulk operations</li> <li>Query Optimization: Efficient GraphQL query resolution</li> <li>Pagination: Cursor-based pagination for large result sets</li> <li>Field Selection: GraphQL field selection for minimal data</li> <li>Compression: Response compression for bandwidth reduction</li> <li>Connection Reuse: Keep-alive connections between services</li> </ul>"},{"location":"backend-apps/#scaling-strategy","title":"Scaling Strategy","text":"<ul> <li>Horizontal Scaling: Adding replicas for increased load</li> <li>Vertical Scaling: Increasing resources for specific services</li> <li>Autoscaling: Automatic scaling based on metrics</li> <li>Load Testing: Regular performance testing and benchmarking</li> <li>Bottleneck Identification: Continuous monitoring for hotspots</li> <li>Capacity Planning: Proactive scaling based on growth projections</li> <li>Regional Scaling: Geographical distribution for latency reduction</li> </ul>"},{"location":"backend-apps/#security-considerations","title":"Security Considerations","text":""},{"location":"backend-apps/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>JWT Authentication: Secure token-based authentication</li> <li>Role-Based Access Control: Fine-grained permission model</li> <li>Multi-factor Authentication: Additional security for sensitive operations</li> <li>API Keys: Service-to-service authentication</li> <li>OAuth 2.0: Third-party integration authentication</li> <li>Service Accounts: Limited-privilege system accounts</li> </ul>"},{"location":"backend-apps/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption at Rest: Database and file encryption</li> <li>Encryption in Transit: TLS for all communications</li> <li>Data Masking: Sensitive data obfuscation</li> <li>Field-level Encryption: Extra protection for PII</li> <li>Key Management: Secure key storage and rotation</li> <li>Data Minimization: Collection of only necessary data</li> <li>Retention Policies: Time-based data deletion</li> </ul>"},{"location":"backend-apps/#network-security","title":"Network Security","text":"<ul> <li>Network Isolation: Service segregation with namespaces</li> <li>Ingress Controls: Strict ingress rules and filtering</li> <li>Egress Restrictions: Limited outbound connectivity</li> <li>TLS Enforcement: Mandatory encryption for all traffic</li> <li>IP Whitelisting: Restricted access by IP address</li> <li>DDoS Protection: CloudFront and WAF at the edge</li> <li>Traffic Monitoring: Flow logs and anomaly detection</li> </ul>"},{"location":"backend-apps/#vulnerability-management","title":"Vulnerability Management","text":"<ul> <li>Dependency Scanning: Regular vulnerability scanning</li> <li>Container Scanning: Image security scanning</li> <li>Static Analysis: Code security analysis</li> <li>Penetration Testing: Quarterly security testing</li> <li>Responsible Disclosure: Public vulnerability reporting</li> <li>Patch Management: Automated dependency updates</li> <li>Security Monitoring: Real-time threat detection</li> </ul>"},{"location":"backend-packages/","title":"Maily Backend Packages","text":"<p>Last updated: March 4, 2025</p>"},{"location":"backend-packages/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Package Architecture</li> <li>Core Packages</li> <li>@maily/server-core</li> <li>@maily/database</li> <li>@maily/schema</li> <li>@maily/auth</li> <li>Service Packages</li> <li>@maily/email-service</li> <li>@maily/analytics-service</li> <li>@maily/ai-service</li> <li>@maily/audience-service</li> <li>Development &amp; Testing</li> <li>Testing Framework</li> <li>Benchmarking</li> <li>Mocking &amp; Fixtures</li> <li>Usage Guidelines</li> <li>Contribution Guidelines</li> <li>Versioning Strategy</li> </ul>"},{"location":"backend-packages/#overview","title":"Overview","text":"<p>The Maily backend ecosystem consists of a collection of specialized packages designed to provide core functionality, services, and utilities. These packages follow a modular design to promote code reuse, separation of concerns, and maintainable architecture.</p> <p>Our packages utilize a monorepo structure managed with Turborepo, allowing for individual versioning while maintaining cross-package compatibility. This document provides comprehensive documentation for all backend packages within the Maily platform.</p>"},{"location":"backend-packages/#package-architecture","title":"Package Architecture","text":"<p>The backend packages follow a layered architecture:</p> <ol> <li>Core Layer: Foundational packages for database access, schema definitions, and server utilities</li> <li>Service Layer: Domain-specific services implementing business logic</li> <li>API Layer: GraphQL and REST API implementations</li> <li>Infrastructure Layer: Integration with cloud services and infrastructure components</li> </ol> <p>The dependency flow follows a strict hierarchy to prevent circular dependencies:</p> <pre><code>Infrastructure Layer \u2192 API Layer \u2192 Service Layer \u2192 Core Layer\n</code></pre> <p>Package configurations are standardized with consistent: - TypeScript configuration - ESLint and Prettier settings - Testing framework - Documentation approach - Deployment process</p>"},{"location":"backend-packages/#core-packages","title":"Core Packages","text":""},{"location":"backend-packages/#mailyserver-core","title":"@maily/server-core","text":"<p>Purpose: Core server utilities and middleware for Node.js applications.</p> <p>Key Features: - HTTP server abstractions - Middleware ecosystem - Error handling framework - Logging infrastructure - Configuration management - Rate limiting - Request validation - Performance monitoring - Health check system</p> <p>Key Components: - <code>Server</code>: Main server abstraction - <code>Router</code>: Request routing - <code>Middleware</code>: Common middleware collection - <code>Logger</code>: Structured logging - <code>Config</code>: Configuration management - <code>ErrorHandler</code>: Centralized error handling - <code>Validator</code>: Request validation - <code>Metrics</code>: Performance metrics collection - <code>HealthCheck</code>: System health monitoring</p> <p>Usage: <pre><code>import { Server, Router, Logger, Middleware } from '@maily/server-core';\n\n// Create a new server instance\nconst server = new Server({\n  port: 3000,\n  logger: new Logger({ level: 'info' }),\n});\n\n// Create a router\nconst router = new Router();\n\n// Add routes\nrouter.get('/hello', async (req, res) =&gt; {\n  res.json({ message: 'Hello, World!' });\n});\n\n// Add middleware\nserver.use(Middleware.cors());\nserver.use(Middleware.bodyParser());\nserver.use(Middleware.requestId());\nserver.use(Middleware.errorHandler());\n\n// Use the router\nserver.use('/api', router);\n\n// Start the server\nserver.start();\n</code></pre></p> <p>Technical Details: - Package size: 42.1 KB (gzipped) - Built on: Node.js HTTP module with custom abstractions - Performance optimized with streaming support - Compatible with Express middleware - Full TypeScript support</p>"},{"location":"backend-packages/#mailydatabase","title":"@maily/database","text":"<p>Purpose: Database access layer and ORM integration.</p> <p>Key Features: - Database connection management - Query building and execution - Migration system - Transaction support - Connection pooling - Query logging and performance monitoring - Data mapping and transformation - Soft deletion support - Pagination utilities</p> <p>Key Components: - <code>Database</code>: Main database connection manager - <code>QueryBuilder</code>: SQL query construction - <code>Model</code>: Base model for database entities - <code>Migration</code>: Database migration framework - <code>Transaction</code>: Transaction management - <code>Repository</code>: Data access patterns - <code>Pagination</code>: Pagination utilities - <code>Mapper</code>: Data transformation utilities</p> <p>Usage: <pre><code>import { Database, Model } from '@maily/database';\n\n// Initialize database connection\nconst db = new Database({\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'password',\n  database: 'maily',\n});\n\n// Define a model\nclass User extends Model {\n  static tableName = 'users';\n  static schema = {\n    id: { type: 'uuid', primaryKey: true },\n    email: { type: 'string', unique: true },\n    name: { type: 'string' },\n    createdAt: { type: 'timestamp', defaultValue: 'now()' },\n    updatedAt: { type: 'timestamp', defaultValue: 'now()' },\n  };\n}\n\n// Query the database\nasync function getUserById(id: string) {\n  return await User.query().findById(id);\n}\n\n// Use transactions\nasync function createUserWithProfile(userData, profileData) {\n  return await db.transaction(async (trx) =&gt; {\n    const user = await User.query(trx).insert(userData);\n    const profile = await Profile.query(trx).insert({\n      ...profileData,\n      userId: user.id,\n    });\n    return { user, profile };\n  });\n}\n</code></pre></p> <p>Technical Details: - Package size: 78.3 KB (gzipped) - Built on: Drizzle ORM with custom extensions - Database support: PostgreSQL (primary), MySQL (secondary) - Performance optimized with prepared statements - Connection pooling with health monitoring</p>"},{"location":"backend-packages/#mailyschema","title":"@maily/schema","text":"<p>Purpose: GraphQL and JSON schema definitions with validation.</p> <p>Key Features: - GraphQL schema definitions - JSON schema validation - Type generation - Schema documentation - Schema validation - Cross-schema references - Versioning support - Extension system</p> <p>Key Components: - <code>GraphQLSchema</code>: GraphQL schema builder - <code>JsonSchema</code>: JSON schema builder - <code>Validator</code>: Schema validation utilities - <code>TypeGenerator</code>: TypeScript type generation - <code>SchemaRegistry</code>: Schema versioning and registry - <code>Documentation</code>: Schema documentation generation - <code>Extensions</code>: Schema extension utilities</p> <p>Usage: <pre><code>import { GraphQLSchema, JsonSchema } from '@maily/schema';\n\n// Define a GraphQL schema\nconst userSchema = new GraphQLSchema(`\n  type User {\n    id: ID!\n    email: String!\n    name: String\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type Query {\n    user(id: ID!): User\n    users: [User!]!\n  }\n\n  type Mutation {\n    createUser(email: String!, name: String): User!\n    updateUser(id: ID!, name: String): User!\n  }\n`);\n\n// Define a JSON schema for validation\nconst userInputSchema = new JsonSchema({\n  type: 'object',\n  required: ['email'],\n  properties: {\n    email: {\n      type: 'string',\n      format: 'email',\n    },\n    name: {\n      type: 'string',\n      minLength: 2,\n    },\n  },\n});\n\n// Validate data against the schema\nconst isValid = userInputSchema.validate({\n  email: 'user@example.com',\n  name: 'John Doe',\n});\n\n// Generate TypeScript types\nuserSchema.generateTypes('./src/types');\n</code></pre></p> <p>Technical Details: - Package size: 56.7 KB (gzipped) - Built on: GraphQL.js and JSON Schema with custom extensions - Code generation with GraphQL Code Generator - Integration with TypeScript compiler API - Documentation generation with GraphQL Documentation</p>"},{"location":"backend-packages/#mailyauth","title":"@maily/auth","text":"<p>Purpose: Authentication and authorization framework.</p> <p>Key Features: - User authentication - Role-based access control - Permission management - OAuth2 integration - JWT handling - Session management - Multi-factor authentication - Security auditing - Rate limiting</p> <p>Key Components: - <code>Auth</code>: Main authentication service - <code>Permissions</code>: Permission management - <code>Roles</code>: Role definitions and management - <code>OAuth</code>: OAuth provider integration - <code>JWT</code>: JWT token handling - <code>Session</code>: Session management - <code>MFA</code>: Multi-factor authentication - <code>Audit</code>: Security audit logging - <code>RateLimit</code>: Authentication rate limiting</p> <p>Usage: <pre><code>import { Auth, Permissions } from '@maily/auth';\n\n// Initialize authentication service\nconst auth = new Auth({\n  jwtSecret: process.env.JWT_SECRET,\n  expiresIn: '1d',\n  refreshExpiresIn: '30d',\n});\n\n// Define permissions\nconst permissions = new Permissions({\n  'campaigns:read': 'Read campaign data',\n  'campaigns:write': 'Create and update campaigns',\n  'campaigns:delete': 'Delete campaigns',\n  'users:read': 'Read user data',\n  'users:write': 'Create and update users',\n  'users:delete': 'Delete users',\n});\n\n// Define roles with permissions\nauth.defineRole('admin', [\n  'campaigns:read', 'campaigns:write', 'campaigns:delete',\n  'users:read', 'users:write', 'users:delete',\n]);\n\nauth.defineRole('editor', [\n  'campaigns:read', 'campaigns:write',\n  'users:read',\n]);\n\nauth.defineRole('viewer', [\n  'campaigns:read',\n  'users:read',\n]);\n\n// Authenticate a user\nasync function login(email, password) {\n  const user = await auth.authenticate(email, password);\n\n  if (user) {\n    const token = auth.createToken(user);\n    return { user, token };\n  }\n\n  throw new Error('Invalid credentials');\n}\n\n// Authorize an action\nfunction canEditCampaign(user, campaignId) {\n  return auth.hasPermission(user, 'campaigns:write');\n}\n</code></pre></p> <p>Technical Details: - Package size: 48.2 KB (gzipped) - Multiple authentication strategies: JWT, OAuth, API Key - Customizable password hashing with Argon2 - FIDO2/WebAuthn support for passwordless authentication - Integration with identity providers via OpenID Connect</p>"},{"location":"backend-packages/#service-packages","title":"Service Packages","text":""},{"location":"backend-packages/#mailyemail-service","title":"@maily/email-service","text":"<p>Purpose: Email delivery, templating, and management.</p> <p>Key Features: - Email delivery via multiple providers - Email templating engine - Attachment handling - Email verification - Bounce management - Delivery tracking - Email threading - Template validation - Spam score analysis</p> <p>Key Components: - <code>EmailService</code>: Main email service - <code>Template</code>: Email template management - <code>Mailer</code>: Email sending and delivery - <code>Attachment</code>: File attachment handling - <code>Verification</code>: Email address verification - <code>BounceManager</code>: Email bounce handling - <code>DeliveryTracker</code>: Email delivery tracking - <code>SpamChecker</code>: Email spam score analysis</p> <p>Usage: <pre><code>import { EmailService, Template } from '@maily/email-service';\n\n// Initialize email service\nconst emailService = new EmailService({\n  defaultProvider: 'sendgrid',\n  providers: {\n    sendgrid: {\n      apiKey: process.env.SENDGRID_API_KEY,\n    },\n    ses: {\n      region: 'us-east-1',\n      accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    },\n  },\n});\n\n// Create a template\nconst welcomeTemplate = new Template({\n  name: 'welcome-email',\n  subject: 'Welcome to {{companyName}}!',\n  html: `\n    &lt;h1&gt;Welcome, {{name}}!&lt;/h1&gt;\n    &lt;p&gt;Thank you for joining {{companyName}}. We're excited to have you!&lt;/p&gt;\n    &lt;p&gt;Click &lt;a href=\"{{activationLink}}\"&gt;here&lt;/a&gt; to activate your account.&lt;/p&gt;\n  `,\n  text: `\n    Welcome, {{name}}!\n\n    Thank you for joining {{companyName}}. We're excited to have you!\n\n    Click here to activate your account: {{activationLink}}\n  `,\n});\n\n// Register the template\nemailService.registerTemplate(welcomeTemplate);\n\n// Send an email using the template\nasync function sendWelcomeEmail(user) {\n  await emailService.sendWithTemplate('welcome-email', {\n    to: user.email,\n    from: 'welcome@maily.example.com',\n    templateData: {\n      name: user.name,\n      companyName: 'Maily',\n      activationLink: `https://maily.example.com/activate/${user.activationToken}`,\n    },\n  });\n}\n</code></pre></p> <p>Technical Details: - Package size: 92.5 KB (gzipped) - Multiple provider support: SendGrid, Amazon SES, Mailgun, Postmark - Intelligent provider failover - Handlebars-based templating engine - MJML support for responsive email templates - Email analytics integration</p>"},{"location":"backend-packages/#mailyanalytics-service","title":"@maily/analytics-service","text":"<p>Purpose: Data collection, processing, and reporting for analytics.</p> <p>Key Features: - Event collection and processing - Real-time analytics - Reporting and visualization - User behavior tracking - Funnel analysis - Cohort analysis - A/B testing - Goal tracking - Data export</p> <p>Key Components: - <code>AnalyticsService</code>: Main analytics service - <code>EventCollector</code>: Event data collection - <code>Processor</code>: Data processing pipeline - <code>Reporter</code>: Report generation - <code>UserTracker</code>: User behavior tracking - <code>FunnelAnalyzer</code>: Conversion funnel analysis - <code>ABTester</code>: A/B test management - <code>GoalTracker</code>: Goal completion tracking - <code>Exporter</code>: Data export utilities</p> <p>Usage: <pre><code>import { AnalyticsService, EventCollector } from '@maily/analytics-service';\n\n// Initialize analytics service\nconst analyticsService = new AnalyticsService({\n  database: db,\n  eventTTL: 90, // days\n});\n\n// Create an event collector\nconst eventCollector = new EventCollector({\n  batchSize: 100,\n  flushInterval: 60000, // 1 minute\n});\n\n// Track events\nasync function trackUserAction(userId, action, metadata = {}) {\n  await eventCollector.track({\n    userId,\n    event: action,\n    timestamp: new Date(),\n    properties: metadata,\n  });\n}\n\n// Define a funnel\nanalyticsService.defineFunnel('signup-completion', [\n  'visit-signup-page',\n  'start-signup-form',\n  'submit-signup-form',\n  'verify-email',\n  'complete-profile',\n]);\n\n// Get funnel conversion rates\nasync function getSignupFunnelMetrics(startDate, endDate) {\n  return await analyticsService.getFunnelMetrics('signup-completion', {\n    startDate,\n    endDate,\n    segment: 'all-users',\n  });\n}\n\n// Define an A/B test\nanalyticsService.defineABTest('homepage-cta', {\n  variants: ['control', 'variant-a', 'variant-b'],\n  metrics: ['click-through-rate', 'conversion-rate'],\n  startDate: new Date('2025-01-01'),\n  endDate: new Date('2025-01-31'),\n});\n\n// Get A/B test results\nasync function getABTestResults(testId) {\n  return await analyticsService.getABTestResults(testId);\n}\n</code></pre></p> <p>Technical Details: - Package size: 108.4 KB (gzipped) - Built on: ClickHouse for analytics data storage - Real-time capabilities with WebSockets - Batch processing for high-volume events - Data aggregation with materialized views - Machine learning integration for predictive analytics</p>"},{"location":"backend-packages/#mailyai-service","title":"@maily/ai-service","text":"<p>Purpose: AI capabilities integration and orchestration.</p> <p>Key Features: - Content generation - Audience segmentation - Subject line optimization - Image generation - Campaign optimization - Sentiment analysis - A/B test recommendation - Engagement prediction - Language translation</p> <p>Key Components: - <code>AIService</code>: Main AI service - <code>ContentGenerator</code>: AI-powered content creation - <code>Segmenter</code>: Audience segmentation - <code>SubjectOptimizer</code>: Email subject line optimization - <code>ImageGenerator</code>: AI image generation - <code>CampaignOptimizer</code>: Email campaign optimization - <code>SentimentAnalyzer</code>: Content sentiment analysis - <code>ABRecommender</code>: A/B testing recommendations - <code>EngagementPredictor</code>: Email engagement prediction - <code>Translator</code>: Content translation</p> <p>Usage: <pre><code>import { AIService, ContentGenerator, SubjectOptimizer } from '@maily/ai-service';\n\n// Initialize AI service\nconst aiService = new AIService({\n  providers: {\n    anthropic: {\n      apiKey: process.env.ANTHROPIC_API_KEY,\n      model: 'claude-3-opus-20240229',\n    },\n    openai: {\n      apiKey: process.env.OPENAI_API_KEY,\n      model: 'gpt-4-turbo',\n    },\n    stability: {\n      apiKey: process.env.STABILITY_API_KEY,\n    },\n  },\n  defaultProvider: 'anthropic',\n});\n\n// Generate email content\nconst contentGenerator = new ContentGenerator({\n  aiService,\n  templateLibrary: templateLibrary,\n});\n\nasync function generateEmailContent(topic, tone, length, audience) {\n  return await contentGenerator.generate({\n    topic,\n    tone,\n    length,\n    audience,\n    includeSubjectLine: true,\n    includeCTA: true,\n  });\n}\n\n// Optimize subject lines\nconst subjectOptimizer = new SubjectOptimizer({\n  aiService,\n  analyticsService,\n});\n\nasync function generateOptimizedSubjectLines(baseSubject, audience) {\n  return await subjectOptimizer.generateVariants({\n    baseSubject,\n    audience,\n    count: 5,\n    includePredictedMetrics: true,\n  });\n}\n\n// Segment audience\nasync function segmentAudience(users, campaignType) {\n  return await aiService.segmentAudience({\n    users,\n    campaignType,\n    segmentCount: 3,\n    includePredictedEngagement: true,\n  });\n}\n</code></pre></p> <p>Technical Details: - Package size: 187.3 KB (gzipped) - Multiple AI provider integration: Anthropic, OpenAI, Stability AI - Vector database integration for semantic search - RAG (Retrieval-Augmented Generation) capabilities - Model fallback strategies for reliability - Cost optimization with tiered model selection</p>"},{"location":"backend-packages/#mailyaudience-service","title":"@maily/audience-service","text":"<p>Purpose: User audience management and segmentation.</p> <p>Key Features: - Contact management - Audience segmentation - List management - Subscription management - Contact enrichment - Compliance management - Import/export capabilities - Segment analytics - Automation triggers</p> <p>Key Components: - <code>AudienceService</code>: Main audience service - <code>ContactManager</code>: Contact data management - <code>Segmenter</code>: Audience segmentation - <code>ListManager</code>: Distribution list management - <code>SubscriptionManager</code>: Subscription preferences - <code>Enricher</code>: Contact data enrichment - <code>ComplianceManager</code>: Regulatory compliance - <code>Importer</code>: Data import utilities - <code>Exporter</code>: Data export utilities - <code>TriggerManager</code>: Automation triggers</p> <p>Usage: <pre><code>import { AudienceService, ContactManager, Segmenter } from '@maily/audience-service';\n\n// Initialize audience service\nconst audienceService = new AudienceService({\n  database: db,\n  aiService,\n});\n\n// Manage contacts\nconst contactManager = new ContactManager({\n  audienceService,\n});\n\nasync function addContact(contactData) {\n  // Validate and normalize the contact data\n  const normalizedContact = await contactManager.normalize(contactData);\n\n  // Add the contact\n  return await contactManager.create(normalizedContact);\n}\n\n// Create segments\nconst segmenter = new Segmenter({\n  audienceService,\n});\n\nasync function createSegment(name, criteria) {\n  return await segmenter.create({\n    name,\n    criteria,\n    description: `Segment for ${name}`,\n  });\n}\n\n// Find contacts in a segment\nasync function getContactsInSegment(segmentId, page = 1, limit = 50) {\n  return await segmenter.getContacts(segmentId, { page, limit });\n}\n\n// Subscribe/unsubscribe contacts\nasync function updateSubscription(contactId, preferences) {\n  return await audienceService.subscriptionManager.update(contactId, preferences);\n}\n\n// Import contacts from CSV\nasync function importContactsFromCSV(filePath, listId) {\n  return await audienceService.importer.importFromCSV(filePath, {\n    listId,\n    deduplication: 'update',\n    notifyContacts: true,\n  });\n}\n</code></pre></p> <p>Technical Details: - Package size: 76.8 KB (gzipped) - Data storage: PostgreSQL with JSON column support - Compliance features for GDPR, CCPA, and CAN-SPAM - Real-time segment evaluation - Integration with third-party data providers - High-performance filtering for large audiences</p>"},{"location":"backend-packages/#development-testing","title":"Development &amp; Testing","text":""},{"location":"backend-packages/#testing-framework","title":"Testing Framework","text":"<p>Our backend packages use a comprehensive testing approach:</p> <ul> <li>Unit Tests: Testing individual functions and methods</li> <li>Integration Tests: Testing interactions between components</li> <li>API Tests: Testing the API endpoints</li> <li>Performance Tests: Testing under load and stress conditions</li> <li>Snapshot Tests: Testing for unexpected changes</li> </ul> <p>All packages maintain &gt;90% test coverage, with critical path coverage at 100%.</p> <p>Testing tools: - Vitest for unit and integration tests - Supertest for API testing - k6 for performance testing - Cucumber for behavior-driven tests</p>"},{"location":"backend-packages/#benchmarking","title":"Benchmarking","text":"<p>We maintain performance benchmarks for all critical operations:</p> <ul> <li>Query performance</li> <li>API response times</li> <li>Memory usage</li> <li>CPU utilization</li> <li>Throughput under load</li> </ul> <p>Benchmarks are run as part of the CI pipeline to catch performance regressions.</p>"},{"location":"backend-packages/#mocking-fixtures","title":"Mocking &amp; Fixtures","text":"<p>Development is supported by:</p> <ul> <li>Mock service implementations for testing</li> <li>Comprehensive fixture data for various scenarios</li> <li>Factory functions for generating test data</li> <li>Database seeding utilities</li> <li>Mock API server for frontend development</li> </ul>"},{"location":"backend-packages/#usage-guidelines","title":"Usage Guidelines","text":""},{"location":"backend-packages/#getting-started","title":"Getting Started","text":"<p>To use Maily backend packages in a new service:</p> <ol> <li> <p>Install the core packages:    <pre><code>pnpm add @maily/server-core @maily/database @maily/schema @maily/auth\n</code></pre></p> </li> <li> <p>Set up a basic server:    <pre><code>import { Server, Middleware } from '@maily/server-core';\nimport { Database } from '@maily/database';\nimport { Auth } from '@maily/auth';\n\n// Initialize database\nconst db = new Database({\n  connectionString: process.env.DATABASE_URL,\n});\n\n// Initialize auth\nconst auth = new Auth({\n  jwtSecret: process.env.JWT_SECRET,\n  database: db,\n});\n\n// Create server\nconst server = new Server({\n  port: process.env.PORT || 3000,\n});\n\n// Add middleware\nserver.use(Middleware.cors());\nserver.use(Middleware.bodyParser());\nserver.use(Middleware.requestId());\nserver.use(auth.middleware());\n\n// Start server\nserver.start();\n</code></pre></p> </li> <li> <p>Add service-specific packages as needed:    <pre><code>pnpm add @maily/email-service @maily/analytics-service\n</code></pre></p> </li> </ol>"},{"location":"backend-packages/#best-practices","title":"Best Practices","text":"<ul> <li>Use dependency injection for testability</li> <li>Follow repository pattern for data access</li> <li>Implement error handling at service boundaries</li> <li>Use transactions for multi-step operations</li> <li>Implement proper logging at appropriate levels</li> <li>Keep services stateless when possible</li> <li>Use config management for environment-specific settings</li> </ul>"},{"location":"backend-packages/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"backend-packages/#adding-or-modifying-packages","title":"Adding or Modifying Packages","text":"<ol> <li>Discuss the new package in the RFC process</li> <li>Create a branch with the naming convention: <code>feat/package-name/feature-name</code></li> <li>Implement the package with full TypeScript typing</li> <li>Add comprehensive tests (unit, integration, performance)</li> <li>Create documentation with usage examples</li> <li>Submit a pull request with the implementation</li> </ol>"},{"location":"backend-packages/#quality-standards","title":"Quality Standards","text":"<p>All contributions must meet these standards: - TypeScript strict mode compliance - 90%+ test coverage - Performance benchmarking for critical operations - Documentation with examples - No security vulnerabilities - No deprecated APIs</p>"},{"location":"backend-packages/#versioning-strategy","title":"Versioning Strategy","text":"<p>We follow semantic versioning for all packages:</p> <ul> <li>Major version (x.0.0): Breaking changes that require migration</li> <li>Minor version (0.x.0): New features in a backward-compatible manner</li> <li>Patch version (0.0.x): Bug fixes and non-breaking changes</li> </ul> <p>Release schedule: - Patch releases: As needed for critical fixes - Minor releases: Bi-weekly with feature additions - Major releases: Quarterly with proper migration guides</p>"},{"location":"core-guide/","title":"Maily Platform Core Guide","text":"<p>Last updated: March 4, 2025</p>"},{"location":"core-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Getting Started</li> <li>Prerequisites</li> <li>Installation</li> <li>Configuration</li> <li>Development Workflow</li> <li>Contribution Guidelines</li> <li>Code Style</li> <li>Pull Request Process</li> <li>Testing Requirements</li> <li>Community Standards</li> <li>Documentation Structure</li> </ul>"},{"location":"core-guide/#overview","title":"Overview","text":"<p>Maily is an AI-driven email marketing platform designed to help businesses create, manage, and optimize email campaigns with advanced targeting, personalization, and analytics capabilities. The platform combines modern web technologies with sophisticated AI capabilities to provide a powerful yet user-friendly experience.</p>"},{"location":"core-guide/#key-features","title":"Key Features","text":"<ul> <li>AI-powered email content generation and optimization</li> <li>Advanced audience segmentation and targeting</li> <li>Comprehensive analytics and reporting</li> <li>Automated email workflows and sequences</li> <li>A/B testing with ML-powered optimization</li> <li>Modern, responsive email builder</li> <li>Multi-language support and internationalization</li> <li>Enterprise-grade security and compliance features</li> </ul>"},{"location":"core-guide/#architecture","title":"Architecture","text":"<p>Maily employs a modern microservices architecture built on Next.js, GraphQL, and a suite of AI services. See the Architecture Handbook for detailed information.</p>"},{"location":"core-guide/#getting-started","title":"Getting Started","text":""},{"location":"core-guide/#prerequisites","title":"Prerequisites","text":"<p>Before setting up Maily for development, ensure you have the following installed:</p> <ul> <li>Node.js (v18.x or later)</li> <li>pnpm (v9.x or later)</li> <li>Docker and Docker Compose</li> <li>Git</li> </ul>"},{"location":"core-guide/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/maily/maily.git\ncd maily\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Set up environment variables:    <pre><code>cp .env.example .env.local\n</code></pre>    Edit <code>.env.local</code> with your local configuration.</p> </li> <li> <p>Start development services:    <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Start the development server:    <pre><code>pnpm dev\n</code></pre></p> </li> </ol> <p>The application will be available at <code>http://localhost:3000</code>.</p>"},{"location":"core-guide/#configuration","title":"Configuration","text":"<p>Maily uses a centralized configuration system with environment variables for different environments:</p> <ul> <li><code>.env.local</code> - Local development configuration</li> <li><code>.env.test</code> - Test environment configuration</li> <li><code>.env.production</code> - Production configuration</li> </ul> <p>See the packages/config package for detailed configuration options.</p>"},{"location":"core-guide/#development-workflow","title":"Development Workflow","text":"<p>Maily uses a monorepo structure managed with Turborepo. The repository is organized as follows:</p> <ul> <li><code>apps/</code> - Contains all application code</li> <li><code>web/</code> - Next.js web application</li> <li><code>api/</code> - GraphQL API service</li> <li><code>worker/</code> - Background processing service</li> <li><code>cron/</code> - Scheduled jobs service</li> <li><code>edge/</code> - Edge functions</li> <li><code>studio/</code> - Email editor and design tools</li> <li><code>docs/</code> - Documentation site</li> <li><code>mobile/</code> - Mobile application</li> <li><code>packages/</code> - Shared libraries and utilities</li> <li><code>ui/</code> - UI component library</li> <li><code>hooks/</code> - React hooks</li> <li><code>utils/</code> - Utility functions</li> <li><code>config/</code> - Configuration utilities</li> <li><code>types/</code> - TypeScript type definitions</li> <li><code>email-templates/</code> - Email template system</li> <li><code>analytics/</code> - Analytics utilities</li> <li><code>testing/</code> - Testing utilities and helpers</li> <li><code>infrastructure/</code> - Infrastructure as code and deployment configurations</li> </ul> <p>To run a specific application or package:</p> <pre><code>pnpm dev --filter=web\n</code></pre>"},{"location":"core-guide/#contribution-guidelines","title":"Contribution Guidelines","text":"<p>We welcome contributions to Maily! This section outlines the process for contributing to the project.</p>"},{"location":"core-guide/#code-style","title":"Code Style","text":"<ul> <li>All code must follow our ESLint configuration</li> <li>TypeScript is required for all new code</li> <li>Use the Prettier configuration for code formatting</li> <li>Follow the conventional commits specification for commit messages</li> </ul>"},{"location":"core-guide/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create a feature branch from <code>main</code></li> <li>Make your changes and ensure tests pass</li> <li>Update documentation as needed</li> <li>Submit a pull request to the <code>main</code> branch</li> <li>Request review from the appropriate team members</li> <li>Address any review feedback</li> </ol> <p>All pull requests must: - Pass all automated tests - Include appropriate tests for new functionality - Update relevant documentation - Follow the code style guidelines</p>"},{"location":"core-guide/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Unit tests for all business logic</li> <li>Component tests for UI components</li> <li>Integration tests for API endpoints</li> <li>End-to-end tests for critical user flows</li> </ul> <p>We use Vitest for unit and component testing, and Playwright for end-to-end testing.</p>"},{"location":"core-guide/#community-standards","title":"Community Standards","text":"<p>Maily is committed to providing a welcoming and inclusive environment for all contributors and users. All participants in the project are expected to adhere to our Code of Conduct.</p>"},{"location":"core-guide/#our-pledge","title":"Our Pledge","text":"<p>We pledge to make participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"core-guide/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at conduct@maily.example.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances.</p>"},{"location":"core-guide/#documentation-structure","title":"Documentation Structure","text":"<p>Maily documentation is organized into several key handbooks:</p> <ul> <li>Core Guide (this document) - Getting started and contribution guidelines</li> <li>Architecture Handbook - Technical architecture and design patterns</li> <li>User Features - End-user facing features and capabilities</li> <li>Developer Features - Developer-focused features and APIs</li> <li>AI Handbook - AI capabilities and implementation</li> <li>Infrastructure Handbook - Infrastructure and operations</li> <li>Security Compliance Handbook - Security and compliance information</li> <li>Technical Reference - API references and technical specifications</li> </ul> <p>Each handbook is designed to be a complete reference for its domain, reducing the need to navigate between multiple documents.</p>"},{"location":"design-standards/","title":"Design Standards","text":"<p>Last Updated: March 5, 2024</p>"},{"location":"design-standards/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Design Principles</li> <li>Brand Guidelines</li> <li>Typography</li> <li>Color System</li> <li>Layout &amp; Spacing</li> <li>Components</li> <li>Iconography</li> <li>Illustrations</li> <li>Email Design</li> <li>Accessibility</li> <li>Design Process</li> </ul>"},{"location":"design-standards/#overview","title":"Overview","text":"<p>This document consolidates all design standards and guidelines for the Maily platform. It serves as the single source of truth for maintaining design consistency across all interfaces and experiences. These standards apply to the web application, marketing website, email templates, and all other customer-facing materials.</p>"},{"location":"design-standards/#design-principles","title":"Design Principles","text":"<p>Our design is guided by these core principles:</p> <ol> <li> <p>Clarity First: Prioritize clarity and readability in all interfaces. Information should be easily scannable and comprehensible.</p> </li> <li> <p>Purposeful Simplicity: Simplify without sacrificing functionality. Every element should have a clear purpose and provide value.</p> </li> <li> <p>Intuitive Workflows: Create natural, predictable flows that match user expectations and mental models.</p> </li> <li> <p>Consistent Patterns: Use consistent interaction patterns throughout to reduce cognitive load.</p> </li> <li> <p>Data-Informed: Design decisions should be supported by data and user research.</p> </li> <li> <p>Accessible by Default: Design for inclusivity from the start, not as an afterthought.</p> </li> <li> <p>Scalable Systems: Create design systems that scale across different screen sizes, use cases, and future growth.</p> </li> <li> <p>Delightful Details: Add thoughtful micro-interactions and visual refinements that enhance the experience without distracting from it.</p> </li> </ol>"},{"location":"design-standards/#brand-guidelines","title":"Brand Guidelines","text":""},{"location":"design-standards/#logo","title":"Logo","text":"<p>The Maily logo consists of the wordmark, sometimes accompanied by the envelope symbol. The logo should always appear in its original proportions and should never be stretched, distorted, or modified.</p>"},{"location":"design-standards/#logo-variations","title":"Logo Variations","text":"Variation Usage Full Color Primary usage on light backgrounds Reversed For dark backgrounds Monochrome When color isn't available Symbol Only For favicons, app icons, and small spaces"},{"location":"design-standards/#logo-clear-space","title":"Logo Clear Space","text":"<p>Maintain a minimum clear space around the logo equal to the height of the \"M\" in the wordmark.</p>"},{"location":"design-standards/#misuse","title":"Misuse","text":"<ul> <li>Do not change the logo colors</li> <li>Do not add effects (shadows, gradients, etc.)</li> <li>Do not rotate or skew</li> <li>Do not alter proportions</li> <li>Do not place on busy backgrounds without sufficient contrast</li> </ul>"},{"location":"design-standards/#brand-voice","title":"Brand Voice","text":"<p>Our written communication follows these guidelines:</p> <ul> <li>Clear: Direct and straightforward, avoiding jargon</li> <li>Helpful: Focusing on solutions and user benefits</li> <li>Friendly: Conversational but professional</li> <li>Confident: Authoritative without being pushy</li> <li>Concise: Respecting users' time by being brief</li> </ul>"},{"location":"design-standards/#brand-personality","title":"Brand Personality","text":"<p>Maily's brand personality traits:</p> <ul> <li>Trustworthy: Reliable, secure, and dependable</li> <li>Knowledgeable: Expert in email marketing</li> <li>Approachable: Easy to use and understand</li> <li>Efficient: Saving time and reducing complexity</li> <li>Innovative: Forward-thinking but pragmatic</li> </ul>"},{"location":"design-standards/#typography","title":"Typography","text":"<p>Maily uses a carefully selected type system to ensure readability and hierarchy across all platforms.</p>"},{"location":"design-standards/#font-families","title":"Font Families","text":""},{"location":"design-standards/#primary-fonts","title":"Primary Fonts","text":"<ul> <li>Headings: Inter (Sans-serif)</li> <li>Body: Inter (Sans-serif)</li> <li>Monospace: JetBrains Mono (for code examples)</li> </ul>"},{"location":"design-standards/#fallback-stack","title":"Fallback Stack","text":"<pre><code>font-family: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n</code></pre>"},{"location":"design-standards/#type-scale","title":"Type Scale","text":"<p>We use a modular scale with a ratio of 1.2 (minor third):</p> Level Size (rem) Weight Line Height Usage H1 2.986rem (47.78px) 700 1.1 Page titles H2 2.488rem (39.81px) 700 1.1 Section headers H3 2.074rem (33.18px) 600 1.2 Subsection headers H4 1.728rem (27.65px) 600 1.2 Card titles H5 1.44rem (23.04px) 600 1.3 Minor headings H6 1.2rem (19.2px) 600 1.3 Small headings Body Large 1.125rem (18px) 400 1.5 Featured content Body 1rem (16px) 400 1.5 Default body text Body Small 0.875rem (14px) 400 1.5 Secondary text Caption 0.75rem (12px) 400 1.4 Labels, captions"},{"location":"design-standards/#font-weights","title":"Font Weights","text":"<ul> <li>Regular (400): Body text, UI elements</li> <li>Medium (500): Emphasis, active states</li> <li>Semi-Bold (600): Secondary headings, important UI elements</li> <li>Bold (700): Primary headings, strong emphasis</li> </ul>"},{"location":"design-standards/#typographic-guidelines","title":"Typographic Guidelines","text":"<ul> <li>Line Length: Aim for 60-75 characters per line for optimal readability</li> <li>Alignment: Left-align text (except for specific UI cases)</li> <li>Letter Spacing: Slight tightening (-0.015em) for headings, normal for body text</li> <li>Paragraph Spacing: 1.5\u00d7 the text size (e.g., 24px spacing for 16px text)</li> <li>Emphasis: Use font weight rather than italics for emphasis</li> <li>Numbers: Use tabular figures for tables and data displays</li> </ul>"},{"location":"design-standards/#color-system","title":"Color System","text":"<p>Our color system is designed to create accessible, consistent interfaces while reinforcing our brand identity.</p>"},{"location":"design-standards/#primary-colors","title":"Primary Colors","text":"Name Hex RGB Usage Primary Blue #1E6CFF rgb(30, 108, 255) Primary actions, links, focus states Dark Blue #0A2E66 rgb(10, 46, 102) Headers, important text Light Blue #E5F0FF rgb(229, 240, 255) Backgrounds, hover states"},{"location":"design-standards/#neutral-colors","title":"Neutral Colors","text":"Name Hex RGB Usage Gray 900 #18191A rgb(24, 25, 26) Primary text Gray 800 #303236 rgb(48, 50, 54) Secondary text Gray 700 #4D4F55 rgb(77, 79, 85) Tertiary text Gray 600 #696C74 rgb(105, 108, 116) Placeholder text Gray 500 #87898F rgb(135, 137, 143) Disabled text Gray 400 #D1D3D8 rgb(209, 211, 216) Borders, dividers Gray 300 #E4E6EB rgb(228, 230, 235) Disabled buttons, secondary borders Gray 200 #F0F2F5 rgb(240, 242, 245) Secondary backgrounds Gray 100 #F5F7FA rgb(245, 247, 250) Tertiary backgrounds Gray 50 #FAFBFC rgb(250, 251, 252) Page backgrounds White #FFFFFF rgb(255, 255, 255) Card backgrounds"},{"location":"design-standards/#semantic-colors","title":"Semantic Colors","text":"Name Hex RGB Usage Success #10B981 rgb(16, 185, 129) Success states, confirmations Warning #F59E0B rgb(245, 158, 11) Warnings, attention Error #EF4444 rgb(239, 68, 68) Error states, destructive actions Info #3B82F6 rgb(59, 130, 246) Informational messages"},{"location":"design-standards/#color-usage-guidelines","title":"Color Usage Guidelines","text":"<ul> <li>Text Accessibility: Ensure text meets WCAG 2.1 AA standards (4.5:1 for normal text, 3:1 for large text)</li> <li>Interactive Elements: Use Primary Blue for interactive elements</li> <li>Error States: Use Error Red sparingly and only for errors or destructive actions</li> <li>Background Contrast: Maintain sufficient contrast between background layers</li> <li>Color Meaning: Don't rely solely on color to convey meaning</li> <li>Dark Mode: Design colors with dark mode adaptation in mind</li> </ul>"},{"location":"design-standards/#color-tokens","title":"Color Tokens","text":"<pre><code>:root {\n  /* Primary */\n  --color-primary-50: #e5f0ff;\n  --color-primary-100: #b8d5ff;\n  --color-primary-200: #8abaff;\n  --color-primary-300: #5c9fff;\n  --color-primary-400: #2e85ff;\n  --color-primary-500: #1e6cff;\n  --color-primary-600: #0046cc;\n  --color-primary-700: #003399;\n  --color-primary-800: #002166;\n  --color-primary-900: #0a2e66;\n\n  /* Neutrals */\n  --color-gray-50: #fafbfc;\n  --color-gray-100: #f5f7fa;\n  --color-gray-200: #f0f2f5;\n  --color-gray-300: #e4e6eb;\n  --color-gray-400: #d1d3d8;\n  --color-gray-500: #87898f;\n  --color-gray-600: #696c74;\n  --color-gray-700: #4d4f55;\n  --color-gray-800: #303236;\n  --color-gray-900: #18191a;\n\n  /* Semantic */\n  --color-success-50: #ecfdf5;\n  --color-success-500: #10b981;\n  --color-success-700: #047857;\n\n  --color-warning-50: #fffbeb;\n  --color-warning-500: #f59e0b;\n  --color-warning-700: #b45309;\n\n  --color-error-50: #fef2f2;\n  --color-error-500: #ef4444;\n  --color-error-700: #b91c1c;\n\n  --color-info-50: #eff6ff;\n  --color-info-500: #3b82f6;\n  --color-info-700: #1d4ed8;\n}\n</code></pre>"},{"location":"design-standards/#layout-spacing","title":"Layout &amp; Spacing","text":"<p>A consistent layout and spacing system helps create visual harmony and improve usability.</p>"},{"location":"design-standards/#grid-system","title":"Grid System","text":"<p>We use a 12-column grid system with responsive breakpoints:</p> Breakpoint Value Columns Gutter Margin xs &lt; 576px 4 16px 16px sm \u2265 576px 8 24px 24px md \u2265 768px 12 24px 32px lg \u2265 992px 12 32px 32px xl \u2265 1200px 12 32px auto (max width 1280px) xxl \u2265 1400px 12 40px auto (max width 1400px)"},{"location":"design-standards/#spacing-scale","title":"Spacing Scale","text":"<p>We use an 8px spacing scale:</p> Token Value Usage --space-0 0px No space --space-1 4px Minimal spacing, icons --space-2 8px Tight spacing, compact elements --space-3 12px Form controls, small gaps --space-4 16px Standard spacing --space-5 24px Medium spacing --space-6 32px Large spacing --space-7 48px Section spacing --space-8 64px Large section spacing --space-9 96px Extra large section spacing --space-10 128px Maximum spacing"},{"location":"design-standards/#layout-principles","title":"Layout Principles","text":"<ul> <li>Consistent Spacing: Use the spacing scale for all layout measurements</li> <li>Content Density: Balance information density with whitespace</li> <li>Visual Hierarchy: Use size, spacing, and color to establish hierarchy</li> <li>Container Width: Content containers should not exceed 1400px</li> <li>Alignment: Maintain consistent alignment across related elements</li> <li>Responsive Behavior: Layout should adapt gracefully across screen sizes</li> </ul>"},{"location":"design-standards/#common-layout-patterns","title":"Common Layout Patterns","text":"<ul> <li>Card Grid: Used for displaying collections of similar items</li> <li>Two-Column: Primary content (70%) with sidebar (30%)</li> <li>Split Screen: Equal split for comparison or contrasting content</li> <li>Content + Sidebar: Main content with supporting information</li> <li>Page Header: Title, description, and key actions</li> <li>Dashboard Layout: Multiple cards arranged in a grid</li> </ul>"},{"location":"design-standards/#components","title":"Components","text":"<p>Our component system provides consistent, reusable UI elements across the application.</p>"},{"location":"design-standards/#button-system","title":"Button System","text":""},{"location":"design-standards/#button-variants","title":"Button Variants","text":"Variant Usage Appearance Primary Main actions, primary flows Solid blue background, white text Secondary Alternative actions White background, blue border and text Tertiary Less important actions No background/border, blue text Danger Destructive actions Solid red background, white text Ghost Minimal visual presence No background/border until hover"},{"location":"design-standards/#button-sizes","title":"Button Sizes","text":"Size Height Padding Font Size Usage Small 32px 12px 14px Compact spaces, secondary actions Medium 40px 16px 16px Standard size for most uses Large 48px 20px 16px Primary page actions, CTAs"},{"location":"design-standards/#button-states","title":"Button States","text":"<ul> <li>Default: Normal appearance</li> <li>Hover: Slightly darker background</li> <li>Active: Darker background, slight scale reduction</li> <li>Focus: Focus ring (2px) with slight offset</li> <li>Disabled: Reduced opacity, non-interactive</li> <li>Loading: Loading indicator replacing or next to label</li> </ul>"},{"location":"design-standards/#form-controls","title":"Form Controls","text":""},{"location":"design-standards/#text-input","title":"Text Input","text":"<p>Standard text inputs with the following states: - Default - Focused - Filled - Error - Disabled</p> <pre><code>&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"email\"&gt;Email Address&lt;/label&gt;\n  &lt;input\n    type=\"email\"\n    id=\"email\"\n    placeholder=\"you@example.com\"\n    class=\"input-control\"\n  /&gt;\n  &lt;div class=\"input-hint\"&gt;We'll never share your email&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"design-standards/#select","title":"Select","text":"<p>Dropdown select with custom styling to match our design system.</p>"},{"location":"design-standards/#checkbox-radio","title":"Checkbox &amp; Radio","text":"<p>Custom-styled checkboxes and radio buttons that maintain accessibility.</p>"},{"location":"design-standards/#toggle","title":"Toggle","text":"<p>Switch control for binary options (on/off).</p>"},{"location":"design-standards/#textarea","title":"Textarea","text":"<p>Multi-line text input with resizing capabilities.</p>"},{"location":"design-standards/#date-picker","title":"Date Picker","text":"<p>Calendar interface for selecting dates and date ranges.</p>"},{"location":"design-standards/#form-layout-guidelines","title":"Form Layout Guidelines","text":"<ul> <li>Use single-column forms when possible</li> <li>Group related fields together</li> <li>Align labels consistently (top-aligned preferred)</li> <li>Provide clear error messages</li> <li>Use appropriate field widths based on expected content</li> </ul>"},{"location":"design-standards/#cards","title":"Cards","text":"<p>Cards serve as containers for related content and actions.</p>"},{"location":"design-standards/#card-variants","title":"Card Variants","text":"<ul> <li>Standard: Basic card with optional header and footer</li> <li>Interactive: Entire card is clickable</li> <li>Featured: Highlighted with accent colors or borders</li> <li>Compact: Reduced padding for denser interfaces</li> <li>Expandable: Can be expanded to show additional content</li> </ul>"},{"location":"design-standards/#card-anatomy","title":"Card Anatomy","text":"<ul> <li>Header: Title, optional subtitle, actions</li> <li>Content: Main card content area</li> <li>Footer: Additional information, secondary actions</li> <li>Media: Optional image or graphics</li> </ul> <pre><code>&lt;div class=\"card\"&gt;\n  &lt;div class=\"card-header\"&gt;\n    &lt;h3 class=\"card-title\"&gt;Card Title&lt;/h3&gt;\n    &lt;div class=\"card-actions\"&gt;\n      &lt;button class=\"button-tertiary\"&gt;...&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card-content\"&gt;\n    Card content goes here\n  &lt;/div&gt;\n  &lt;div class=\"card-footer\"&gt;\n    &lt;button class=\"button-secondary\"&gt;Cancel&lt;/button&gt;\n    &lt;button class=\"button-primary\"&gt;Save&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"design-standards/#navigation","title":"Navigation","text":""},{"location":"design-standards/#top-navigation","title":"Top Navigation","text":"<p>Main application navigation with: - Logo - Primary navigation links - Search - User menu - Notifications</p>"},{"location":"design-standards/#sidebar-navigation","title":"Sidebar Navigation","text":"<p>Vertical navigation for: - Section navigation - Hierarchical structures - Admin areas</p>"},{"location":"design-standards/#tabs","title":"Tabs","text":"<p>Horizontal tabs for switching between related views.</p>"},{"location":"design-standards/#breadcrumbs","title":"Breadcrumbs","text":"<p>Path-based navigation showing current location in hierarchical structure.</p>"},{"location":"design-standards/#pagination","title":"Pagination","text":"<p>Controls for navigating through multi-page content.</p>"},{"location":"design-standards/#feedback-alerts","title":"Feedback &amp; Alerts","text":""},{"location":"design-standards/#toast-notifications","title":"Toast Notifications","text":"<p>Temporary notifications for system feedback.</p> Type Usage Color Success Successful actions Green Error Failed actions, errors Red Warning Important notifications Yellow Info General information Blue"},{"location":"design-standards/#alert-banners","title":"Alert Banners","text":"<p>Persistent alerts for important information.</p>"},{"location":"design-standards/#modal-dialogs","title":"Modal Dialogs","text":"<p>Overlay windows for focused interactions, confirmations, or detailed views.</p>"},{"location":"design-standards/#loading-states","title":"Loading States","text":"<ul> <li>Skeleton screens for content loading</li> <li>Spinner indicators for actions</li> <li>Progress bars for longer operations</li> </ul>"},{"location":"design-standards/#data-visualization","title":"Data Visualization","text":""},{"location":"design-standards/#charts","title":"Charts","text":"<p>Basic chart types include: - Line charts - Bar charts - Pie/donut charts - Area charts - Scatter plots</p>"},{"location":"design-standards/#tables","title":"Tables","text":"<p>Data tables with features like: - Sorting - Filtering - Pagination - Row selection - Expandable rows</p>"},{"location":"design-standards/#data-cards","title":"Data Cards","text":"<p>Compact representations of key metrics or stats.</p>"},{"location":"design-standards/#iconography","title":"Iconography","text":"<p>Our icon system uses consistent, simple icons that enhance usability and aesthetics.</p>"},{"location":"design-standards/#icon-library","title":"Icon Library","text":"<p>Maily uses a custom icon library built on a 24\u00d724px grid with 1.5px stroke weight.</p>"},{"location":"design-standards/#icon-categories","title":"Icon Categories","text":"<ul> <li>Navigation: Icons used in navigation elements</li> <li>Actions: Icons representing user actions</li> <li>Objects: Icons representing objects or items</li> <li>Status: Icons indicating status or state</li> <li>Social: Social media and communication icons</li> </ul>"},{"location":"design-standards/#icon-guidelines","title":"Icon Guidelines","text":"<ul> <li>Consistency: Maintain visual consistency across all icons</li> <li>Simplicity: Use simple, recognizable shapes</li> <li>Alignment: Icons should align to the pixel grid</li> <li>Size: Use consistent icon sizes (16px, 20px, 24px)</li> <li>Color: Icons inherit text color by default</li> <li>Touch Targets: Ensure sufficient touch target size (min 44\u00d744px)</li> </ul>"},{"location":"design-standards/#icon-usage","title":"Icon Usage","text":"<ul> <li>With Text: Icons paired with text for clarity</li> <li>Button Icons: Icons used within buttons</li> <li>Standalone: Icons that function without labels (must be universally recognized)</li> <li>Decorative: Icons used for visual enhancement only</li> </ul>"},{"location":"design-standards/#illustrations","title":"Illustrations","text":"<p>Custom illustrations support our brand and enhance the user experience.</p>"},{"location":"design-standards/#illustration-style","title":"Illustration Style","text":"<ul> <li>Line Weight: Consistent 2px stroke weight</li> <li>Style: Flat, minimalist style with gentle curves</li> <li>Color Palette: Uses our primary and accent colors</li> <li>Character Design: Inclusive, diverse representations</li> <li>Metaphors: Clear visual metaphors related to email marketing</li> </ul>"},{"location":"design-standards/#illustration-categories","title":"Illustration Categories","text":"<ul> <li>Onboarding: Introducing features and concepts</li> <li>Empty States: Making empty views more engaging</li> <li>Success: Celebrating user achievements</li> <li>Error: Softening error experiences</li> <li>Marketing: Supporting marketing messages</li> </ul>"},{"location":"design-standards/#usage-guidelines","title":"Usage Guidelines","text":"<ul> <li>Illustrations should support content, not distract from it</li> <li>Maintain consistent style across all illustrations</li> <li>Scale appropriately for different screen sizes</li> <li>Consider animation for enhanced engagement</li> <li>Ensure illustrations are accessible and culturally sensitive</li> </ul>"},{"location":"design-standards/#email-design","title":"Email Design","text":"<p>Guidelines for designing Maily's transactional and marketing emails.</p>"},{"location":"design-standards/#email-layout","title":"Email Layout","text":"<ul> <li>Maximum width of 600px</li> <li>Single-column layout preferred</li> <li>Responsive design adapting to mobile devices</li> <li>Clear visual hierarchy</li> </ul>"},{"location":"design-standards/#email-typography","title":"Email Typography","text":"<ul> <li>Use web-safe fonts or fallbacks</li> <li>Minimum font size of 14px for body text</li> <li>Line height of 1.5 for readability</li> <li>Limit to 2-3 font styles per email</li> </ul>"},{"location":"design-standards/#email-colors","title":"Email Colors","text":"<ul> <li>Use brand colors consistently</li> <li>Ensure sufficient contrast for readability</li> <li>Include fallback colors for email clients that don't support your palette</li> <li>Avoid background images with text overlay</li> </ul>"},{"location":"design-standards/#email-components","title":"Email Components","text":"<ul> <li>Header with logo</li> <li>Hero section for main message</li> <li>Content blocks with clear spacing</li> <li>Call-to-action buttons (minimum height: 44px)</li> <li>Footer with legal information and unsubscribe option</li> </ul>"},{"location":"design-standards/#email-best-practices","title":"Email Best Practices","text":"<ul> <li>Design for image blocking (use alt text, don't rely solely on images)</li> <li>Create clear hierarchy with headings and white space</li> <li>Optimize for mobile viewing</li> <li>Keep file sizes small</li> <li>Test across multiple email clients</li> </ul>"},{"location":"design-standards/#accessibility","title":"Accessibility","text":"<p>Our design system is built with accessibility as a core principle, not an afterthought.</p>"},{"location":"design-standards/#accessibility-standards","title":"Accessibility Standards","text":"<p>We follow WCAG 2.1 AA standards as a minimum requirement:</p> <ul> <li>Perceivable: Information must be presentable to users in ways they can perceive</li> <li>Operable: User interface components must be operable</li> <li>Understandable: Information and operation must be understandable</li> <li>Robust: Content must be robust enough to work with assistive technologies</li> </ul>"},{"location":"design-standards/#color-contrast","title":"Color &amp; Contrast","text":"<ul> <li>Text meets contrast requirements (4.5:1 for normal text, 3:1 for large text)</li> <li>Don't rely solely on color to convey information</li> <li>Provide sufficient contrast between UI elements</li> <li>Support high contrast mode</li> </ul>"},{"location":"design-standards/#keyboard-navigation","title":"Keyboard Navigation","text":"<ul> <li>All interactive elements are keyboard accessible</li> <li>Focus states are clearly visible</li> <li>Logical tab order follows visual layout</li> <li>No keyboard traps</li> <li>Provide keyboard shortcuts for power users</li> </ul>"},{"location":"design-standards/#screen-readers","title":"Screen Readers","text":"<ul> <li>All images have appropriate alt text</li> <li>Use semantic HTML elements</li> <li>ARIA attributes supplement HTML when needed</li> <li>Ensure dynamic content changes are announced</li> <li>Test with common screen readers</li> </ul>"},{"location":"design-standards/#other-considerations","title":"Other Considerations","text":"<ul> <li>Support text resizing up to 200% without loss of content</li> <li>Ensure sufficient touch target size (minimum 44\u00d744px)</li> <li>Provide alternatives for time-based media</li> <li>Avoid content that flashes more than three times per second</li> <li>Design forms with clear labels and error messages</li> </ul>"},{"location":"design-standards/#design-process","title":"Design Process","text":"<p>Our design process ensures consistent, high-quality experiences across the platform.</p>"},{"location":"design-standards/#design-workflow","title":"Design Workflow","text":"<ol> <li>Research &amp; Discovery: Understand user needs and business requirements</li> <li>Ideation: Explore multiple approaches to solve the problem</li> <li>Wireframing: Create low-fidelity mockups to establish structure</li> <li>Visual Design: Apply visual design language to wireframes</li> <li>Prototyping: Create interactive prototypes for testing</li> <li>User Testing: Validate designs with real users</li> <li>Refinement: Iterate based on feedback</li> <li>Handoff: Prepare designs for development</li> <li>Implementation: Support during development</li> <li>Review: Evaluate the implemented design</li> </ol>"},{"location":"design-standards/#design-critique","title":"Design Critique","text":"<p>Regular design reviews ensure quality and consistency:</p> <ul> <li>Weekly team critiques</li> <li>Structured feedback format</li> <li>Focus on user goals and business objectives</li> <li>Reference design principles and standards</li> </ul>"},{"location":"design-standards/#design-tools","title":"Design Tools","text":"<ul> <li>Figma: Primary design tool for UI/UX</li> <li>Adobe Creative Suite: Brand assets and marketing materials</li> <li>Maze: User testing and validation</li> <li>Abstract: Version control for design files</li> <li>Zeplin: Design handoff and collaboration</li> </ul>"},{"location":"design-standards/#design-to-development-handoff","title":"Design-to-Development Handoff","text":"<ul> <li>Comprehensive component specifications</li> <li>Interactive prototypes demonstrating behavior</li> <li>Accessibility requirements</li> <li>Responsive behavior documentation</li> <li>Assets in appropriate formats</li> </ul> <p>This design standards document is maintained by the Maily Design Team. For questions or suggestions, contact design@maily.com.</p>"},{"location":"developer-features/","title":"Maily Developer Features","text":"<p>Last updated: March 4, 2025</p>"},{"location":"developer-features/#table-of-contents","title":"Table of Contents","text":"<ul> <li>API &amp; Integration</li> <li>GraphQL API</li> <li>REST API</li> <li>Webhooks</li> <li>SDKs &amp; Client Libraries</li> <li>Extension Framework</li> <li>Extension Types</li> <li>Development Process</li> <li>Extension Marketplace</li> <li>Email Development</li> <li>Email Templating System</li> <li>Design System</li> <li>Email Testing Tools</li> <li>Developer Tools</li> <li>CLI Tool</li> <li>Local Development</li> <li>Testing Framework</li> <li>Data &amp; Analytics</li> <li>Data Export</li> <li>Custom Analytics</li> <li>Reporting API</li> <li>Automation &amp; Workflow</li> <li>Custom Actions</li> <li>Integration Actions</li> <li>Workflow API</li> <li>Security &amp; Compliance</li> <li>Authentication</li> <li>Authorization</li> <li>Compliance Helpers</li> <li>Performance Optimization</li> <li>Rate Limiting</li> <li>Bulk Operations</li> <li>Caching Strategies</li> </ul>"},{"location":"developer-features/#api-integration","title":"API &amp; Integration","text":""},{"location":"developer-features/#graphql-api","title":"GraphQL API","text":"<p>Maily provides a comprehensive GraphQL API for accessing and manipulating platform data:</p>"},{"location":"developer-features/#schema-design","title":"Schema Design","text":"<ul> <li>Well-documented schema with descriptions for all types and fields</li> <li>Consistent naming conventions following GraphQL best practices</li> <li>Versioning strategy with deprecation notices</li> <li>Schema evolution principles to ensure backward compatibility</li> <li>Comprehensive tooling for introspection and exploration</li> </ul>"},{"location":"developer-features/#core-functionality","title":"Core Functionality","text":"<ul> <li>Query operations for retrieving data with precise field selection</li> <li>Mutation operations for creating, updating, and deleting resources</li> <li>Subscription operations for real-time updates</li> <li>Batched operations for efficient bulk processing</li> <li>Cursor-based pagination for list endpoints</li> <li>Filtering, sorting, and search capabilities</li> </ul>"},{"location":"developer-features/#performance-features","title":"Performance Features","text":"<ul> <li>DataLoader implementation for batching and caching</li> <li>Persisted queries for reduced network overhead</li> <li>Cost analysis and query complexity limiting</li> <li>Automatic query tracing and performance monitoring</li> <li>Response caching with appropriate cache control</li> </ul>"},{"location":"developer-features/#security","title":"Security","text":"<ul> <li>Fine-grained permission checks at the field level</li> <li>Input validation using strong type checking</li> <li>Rate limiting and throttling controls</li> <li>Authentication with JWT and other methods</li> <li>Detailed error handling with appropriate information exposure</li> </ul>"},{"location":"developer-features/#developer-experience","title":"Developer Experience","text":"<ul> <li>GraphQL Playground for interactive exploration</li> <li>Detailed documentation with examples</li> <li>Schema change notifications</li> <li>Field-level deprecation messaging</li> <li>Integration with popular GraphQL clients</li> </ul>"},{"location":"developer-features/#rest-api","title":"REST API","text":"<p>For systems that prefer REST architecture, Maily offers a REST API covering core functionality:</p>"},{"location":"developer-features/#endpoint-structure","title":"Endpoint Structure","text":"<ul> <li>RESTful resource-based URL structure</li> <li>Consistent versioning in URL path (/v1/, /v2/)</li> <li>Predictable status code usage</li> <li>Comprehensive error responses with error codes</li> <li>HATEOAS links for resource discovery</li> </ul>"},{"location":"developer-features/#core-functionality_1","title":"Core Functionality","text":"<ul> <li>CRUD operations for all primary resources</li> <li>Filtering and pagination parameters</li> <li>Bulk operation endpoints</li> <li>Webhook management</li> <li>Search endpoints with flexible query options</li> </ul>"},{"location":"developer-features/#performance-features_1","title":"Performance Features","text":"<ul> <li>ETag support for caching</li> <li>Conditional requests (If-Modified-Since, If-None-Match)</li> <li>Compression for large responses</li> <li>Partial response using field selection parameters</li> <li>Rate limit headers</li> </ul>"},{"location":"developer-features/#security_1","title":"Security","text":"<ul> <li>OAuth 2.0 authentication</li> <li>API key management</li> <li>CORS configuration</li> <li>Request signing for sensitive operations</li> <li>IP allowlisting options</li> </ul>"},{"location":"developer-features/#developer-experience_1","title":"Developer Experience","text":"<ul> <li>OpenAPI/Swagger documentation</li> <li>Status dashboard with API health</li> <li>Deprecation headers for evolving endpoints</li> <li>Detailed API changelogs</li> <li>SDK generation from OpenAPI spec</li> </ul>"},{"location":"developer-features/#webhooks","title":"Webhooks","text":"<p>Maily provides webhooks for real-time event notifications:</p>"},{"location":"developer-features/#event-types","title":"Event Types","text":"<ul> <li>Campaign events (sent, opened, clicked, bounced)</li> <li>Contact events (created, updated, unsubscribed)</li> <li>List events (created, updated, contact added/removed)</li> <li>System events (quota reached, delivery issues)</li> <li>Custom events from workflows</li> <li>Compliance events (data export request, deletion request)</li> </ul>"},{"location":"developer-features/#configuration","title":"Configuration","text":"<ul> <li>Webhook URL registration and verification</li> <li>Event type selection</li> <li>Batch settings for high-volume events</li> <li>Retry configuration with backoff</li> <li>Secret key for payload verification</li> <li>Test event generation for development</li> </ul>"},{"location":"developer-features/#payload-structure","title":"Payload Structure","text":"<ul> <li>Consistent event envelope format</li> <li>Detailed event-specific data</li> <li>Event timestamp and unique ID</li> <li>Related resource IDs and URLs</li> <li>Webhook subscription ID</li> </ul>"},{"location":"developer-features/#security-reliability","title":"Security &amp; Reliability","text":"<ul> <li>Signature verification using HMAC</li> <li>IP allowlisting</li> <li>TLS encryption requirement</li> <li>Webhook logs and delivery status</li> <li>Manual retrigger capabilities</li> <li>Circuit breaker for failing endpoints</li> </ul>"},{"location":"developer-features/#management","title":"Management","text":"<ul> <li>Webhook dashboard with delivery statistics</li> <li>Event type filtering</li> <li>Historical event viewer</li> <li>Webhook debugging tools</li> <li>Webhook analytics (response time, success rate)</li> </ul>"},{"location":"developer-features/#sdks-client-libraries","title":"SDKs &amp; Client Libraries","text":"<p>Maily provides language-specific SDKs for easier integration:</p>"},{"location":"developer-features/#supported-languages","title":"Supported Languages","text":"<ul> <li>JavaScript/TypeScript SDK</li> <li>Python SDK</li> <li>PHP SDK</li> <li>Ruby SDK</li> <li>Java SDK</li> <li>Go SDK</li> <li>.NET SDK</li> </ul>"},{"location":"developer-features/#sdk-features","title":"SDK Features","text":"<ul> <li>Authentication handling</li> <li>Resource-based object models</li> <li>Automatic pagination handling</li> <li>Retry logic with exponential backoff</li> <li>Rate limit awareness</li> <li>Logging and debugging support</li> <li>Error handling with typed exceptions</li> <li>Async/await pattern where applicable</li> </ul>"},{"location":"developer-features/#graphql-client-support","title":"GraphQL Client Support","text":"<ul> <li>Type-safe GraphQL operations</li> <li>Code generation for queries and mutations</li> <li>Fragment composition</li> <li>Optimistic updates</li> <li>Cache management</li> </ul>"},{"location":"developer-features/#extensibility","title":"Extensibility","text":"<ul> <li>Plugin architecture for custom middleware</li> <li>HTTP client swapping</li> <li>Cache implementation options</li> <li>Customizable logging</li> <li>Request/response interceptors</li> </ul>"},{"location":"developer-features/#developer-experience_2","title":"Developer Experience","text":"<ul> <li>Comprehensive documentation</li> <li>Code examples for common operations</li> <li>Change logs and migration guides</li> <li>Testing utilities and mocks</li> <li>Type definitions and intellisense support</li> </ul>"},{"location":"developer-features/#extension-framework","title":"Extension Framework","text":""},{"location":"developer-features/#extension-types","title":"Extension Types","text":"<p>The Maily extension framework supports various extension points:</p>"},{"location":"developer-features/#ui-extensions","title":"UI Extensions","text":"<ul> <li>Dashboard widgets and cards</li> <li>Custom tabs in campaign/contact views</li> <li>Modal dialog components</li> <li>Form field additions</li> <li>Navigation menu items</li> <li>Custom pages</li> </ul>"},{"location":"developer-features/#data-extensions","title":"Data Extensions","text":"<ul> <li>Custom field types</li> <li>Custom data storage</li> <li>External data source integration</li> <li>Custom metrics and calculations</li> <li>Data transformation pipelines</li> <li>Custom tracking parameters</li> </ul>"},{"location":"developer-features/#logic-extensions","title":"Logic Extensions","text":"<ul> <li>Custom workflow actions</li> <li>Segmentation criteria</li> <li>Automation triggers</li> <li>Scoring models</li> <li>Send time optimization algorithms</li> <li>A/B test winner selection logic</li> </ul>"},{"location":"developer-features/#content-extensions","title":"Content Extensions","text":"<ul> <li>Dynamic content blocks</li> <li>Custom personalization tokens</li> <li>Template components</li> <li>Email editor toolbar additions</li> <li>Custom merge tags</li> <li>Content validation rules</li> </ul>"},{"location":"developer-features/#integration-extensions","title":"Integration Extensions","text":"<ul> <li>Custom service connectors</li> <li>Authentication providers</li> <li>Export/import handlers</li> <li>File storage providers</li> <li>Messaging channel providers</li> <li>Analytics provider integrations</li> </ul>"},{"location":"developer-features/#development-process","title":"Development Process","text":"<p>The extension development lifecycle and tools:</p>"},{"location":"developer-features/#development-environment","title":"Development Environment","text":"<ul> <li>Local development server</li> <li>Extension scaffolding tool</li> <li>Hot reloading during development</li> <li>Configuration validation</li> <li>Extension manifest generator</li> <li>TypeScript definitions for extension points</li> </ul>"},{"location":"developer-features/#building-packaging","title":"Building &amp; Packaging","text":"<ul> <li>Build pipeline with webpack configuration</li> <li>Package bundling with dependencies</li> <li>Version management</li> <li>Release channels (dev, test, production)</li> <li>Extension package signing</li> <li>Size optimization tools</li> </ul>"},{"location":"developer-features/#testing","title":"Testing","text":"<ul> <li>Unit testing framework integration</li> <li>Integration test helpers</li> <li>Mock services for Maily APIs</li> <li>UI testing utilities</li> <li>Sandbox environment access</li> <li>Test data generation</li> </ul>"},{"location":"developer-features/#deployment","title":"Deployment","text":"<ul> <li>Extension registry upload</li> <li>Version management</li> <li>Staged rollout capabilities</li> <li>Installation and update hooks</li> <li>Uninstallation cleanup procedures</li> <li>Environment-specific configuration</li> </ul>"},{"location":"developer-features/#monitoring","title":"Monitoring","text":"<ul> <li>Usage statistics dashboard</li> <li>Error tracking and reporting</li> <li>Performance monitoring</li> <li>Version adoption tracking</li> <li>User feedback collection</li> <li>Health metrics</li> </ul>"},{"location":"developer-features/#extension-marketplace","title":"Extension Marketplace","text":"<p>Maily's ecosystem for finding, installing, and managing extensions:</p>"},{"location":"developer-features/#marketplace-features","title":"Marketplace Features","text":"<ul> <li>Extension discovery with categories</li> <li>Rating and review system</li> <li>Detailed extension listings</li> <li>Screenshot and video demos</li> <li>Pricing and license management</li> <li>Developer verification program</li> </ul>"},{"location":"developer-features/#installation-management","title":"Installation &amp; Management","text":"<ul> <li>One-click installation for approved extensions</li> <li>Configuration wizard support</li> <li>Extension settings management</li> <li>Update notifications</li> <li>Dependency management</li> <li>Conflict detection</li> </ul>"},{"location":"developer-features/#developer-portal","title":"Developer Portal","text":"<ul> <li>Extension submission workflow</li> <li>Documentation and guidelines</li> <li>Review process tracking</li> <li>Analytics dashboard for developers</li> <li>Monetization options</li> <li>User feedback management</li> </ul>"},{"location":"developer-features/#security-compliance","title":"Security &amp; Compliance","text":"<ul> <li>Code review process</li> <li>Security scanning</li> <li>Permission model for extension capabilities</li> <li>Privacy policy requirements</li> <li>Data handling certification</li> <li>Regular security audits</li> </ul>"},{"location":"developer-features/#partner-program","title":"Partner Program","text":"<ul> <li>Certified developer program</li> <li>Revenue sharing options</li> <li>Co-marketing opportunities</li> <li>Early access to new APIs</li> <li>Technical support channels</li> <li>Training and certification</li> </ul>"},{"location":"developer-features/#email-development","title":"Email Development","text":""},{"location":"developer-features/#email-templating-system","title":"Email Templating System","text":"<p>Comprehensive tools for email template development:</p>"},{"location":"developer-features/#mjml-framework","title":"MJML Framework","text":"<ul> <li>Full MJML component support</li> <li>Custom component development</li> <li>Responsive design handling</li> <li>Email client compatibility</li> <li>Performance optimization</li> <li>Accessibility features</li> </ul>"},{"location":"developer-features/#template-system","title":"Template System","text":"<ul> <li>Template inheritance with blocks</li> <li>Partial templates and includes</li> <li>Conditional rendering</li> <li>Looping and iteration</li> <li>Template variables and context</li> <li>Whitespace control</li> </ul>"},{"location":"developer-features/#custom-components","title":"Custom Components","text":"<ul> <li>Component development guidelines</li> <li>Component registration process</li> <li>Property validation</li> <li>Styling and theming</li> <li>Responsive behavior definition</li> <li>Accessibility requirements</li> </ul>"},{"location":"developer-features/#templating-api","title":"Templating API","text":"<ul> <li>Programmatic template rendering</li> <li>Template validation</li> <li>Lint rules and checks</li> <li>Preview generation</li> <li>HTML cleanup and optimization</li> <li>AMP email support</li> </ul>"},{"location":"developer-features/#performance","title":"Performance","text":"<ul> <li>Minification options</li> <li>Inline CSS processing</li> <li>Image optimization</li> <li>Caching mechanisms</li> <li>Lazy loading techniques</li> <li>Rendering metrics</li> </ul>"},{"location":"developer-features/#design-system","title":"Design System","text":"<p>Tools for implementing consistent email designs:</p>"},{"location":"developer-features/#design-tokens","title":"Design Tokens","text":"<ul> <li>Color system with semantic naming</li> <li>Typography scale and styling</li> <li>Spacing system</li> <li>Border and shadow definitions</li> <li>Animation and transition tokens</li> <li>Grid system definitions</li> </ul>"},{"location":"developer-features/#component-library","title":"Component Library","text":"<ul> <li>Button components</li> <li>Layout grid components</li> <li>Typography components</li> <li>Card and container components</li> <li>Media object components</li> <li>Form components</li> <li>Data visualization components</li> </ul>"},{"location":"developer-features/#design-implementation","title":"Design Implementation","text":"<ul> <li>Token usage guidelines</li> <li>Responsive design principles</li> <li>Dark mode support</li> <li>Accessibility implementation</li> <li>Brand guidance integration</li> <li>Visual regression testing</li> </ul>"},{"location":"developer-features/#tooling","title":"Tooling","text":"<ul> <li>Design token export formats</li> <li>Component documentation generator</li> <li>Visual style guide generation</li> <li>Storybook integration</li> <li>Theme editor</li> <li>Design to code tools</li> </ul>"},{"location":"developer-features/#email-testing-tools","title":"Email Testing Tools","text":"<p>Tools for ensuring email quality and deliverability:</p>"},{"location":"developer-features/#rendering-tests","title":"Rendering Tests","text":"<ul> <li>Multi-client preview rendering</li> <li>Responsive design testing</li> <li>Device preview matrix</li> <li>Screenshot comparison</li> <li>Historical rendering archive</li> <li>Custom rendering environments</li> </ul>"},{"location":"developer-features/#content-validation","title":"Content Validation","text":"<ul> <li>HTML/CSS validation</li> <li>Accessibility audit (WCAG)</li> <li>Link validation</li> <li>Spam content checking</li> <li>Image alt text verification</li> <li>Character encoding validation</li> </ul>"},{"location":"developer-features/#performance-testing","title":"Performance Testing","text":"<ul> <li>Email size analysis</li> <li>Loading time simulation</li> <li>Image optimization suggestions</li> <li>HTML minification</li> <li>Resource consolidation</li> <li>Rendering performance metrics</li> </ul>"},{"location":"developer-features/#spam-testing","title":"Spam Testing","text":"<ul> <li>Spam filter checking</li> <li>Content analysis for triggers</li> <li>Authentication verification</li> <li>Deliverability scoring</li> <li>IP and domain reputation checking</li> <li>SPF/DKIM/DMARC validation</li> </ul>"},{"location":"developer-features/#functional-testing","title":"Functional Testing","text":"<ul> <li>Personalization token validation</li> <li>Dynamic content previewing</li> <li>A/B test variant preview</li> <li>Conditional content testing</li> <li>Link tracking verification</li> <li>Analytics integration testing</li> </ul>"},{"location":"developer-features/#developer-tools","title":"Developer Tools","text":""},{"location":"developer-features/#cli-tool","title":"CLI Tool","text":"<p>Command-line interface for automating Maily tasks:</p>"},{"location":"developer-features/#authentication","title":"Authentication","text":"<ul> <li>API key management</li> <li>OAuth flow support</li> <li>Environment configuration</li> <li>Profile switching</li> <li>Token refresh handling</li> <li>Session management</li> </ul>"},{"location":"developer-features/#resource-management","title":"Resource Management","text":"<ul> <li>CRUD operations for all resources</li> <li>Bulk operations</li> <li>Import/export functionality</li> <li>Search and filtering</li> <li>Template management</li> <li>Asset uploading</li> </ul>"},{"location":"developer-features/#workflow-automation","title":"Workflow Automation","text":"<ul> <li>Script execution</li> <li>Batch processing</li> <li>Scheduled task management</li> <li>Event listening</li> <li>Log streaming</li> <li>Webhook testing</li> </ul>"},{"location":"developer-features/#development-support","title":"Development Support","text":"<ul> <li>Local development server</li> <li>Extension scaffolding</li> <li>Template compilation</li> <li>Linting and validation</li> <li>Schema generation</li> <li>Mock data creation</li> </ul>"},{"location":"developer-features/#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>Pipeline integration helpers</li> <li>Deployment commands</li> <li>Environment promotion</li> <li>Configuration validation</li> <li>Health checks</li> <li>Rollback capabilities</li> </ul>"},{"location":"developer-features/#local-development","title":"Local Development","text":"<p>Tools for local development and testing:</p>"},{"location":"developer-features/#development-server","title":"Development Server","text":"<ul> <li>Local API emulation</li> <li>Hot reloading</li> <li>Mock data generation</li> <li>Event simulation</li> <li>Request recording and playback</li> <li>Network condition simulation</li> </ul>"},{"location":"developer-features/#docker-environment","title":"Docker Environment","text":"<ul> <li>Containerized development environment</li> <li>Service composition</li> <li>Volume mapping for live editing</li> <li>Environment variable management</li> <li>Network configuration</li> <li>Resource limits</li> </ul>"},{"location":"developer-features/#data-management","title":"Data Management","text":"<ul> <li>Seed data generation</li> <li>Fixture loading</li> <li>Test data creation</li> <li>Data reset functionality</li> <li>Database snapshots</li> <li>Data migration tools</li> </ul>"},{"location":"developer-features/#configuration_1","title":"Configuration","text":"<ul> <li>Environment-specific settings</li> <li>Configuration validation</li> <li>Secret management</li> <li>Feature flag integration</li> <li>Override mechanisms</li> <li>Configuration templates</li> </ul>"},{"location":"developer-features/#debugging","title":"Debugging","text":"<ul> <li>Request/response inspection</li> <li>API call logs</li> <li>Performance profiling</li> <li>State inspection</li> <li>Breakpoint support</li> <li>Time travel debugging for events</li> </ul>"},{"location":"developer-features/#testing-framework","title":"Testing Framework","text":"<p>Comprehensive testing tools for email marketing systems:</p>"},{"location":"developer-features/#unit-testing","title":"Unit Testing","text":"<ul> <li>Test runner integration</li> <li>Assertion libraries</li> <li>Mocking framework</li> <li>Coverage reporting</li> <li>Snapshot testing</li> <li>Parameterized tests</li> </ul>"},{"location":"developer-features/#integration-testing","title":"Integration Testing","text":"<ul> <li>API test helpers</li> <li>Mock server</li> <li>Fixture management</li> <li>Response validation</li> <li>Authorization testing</li> <li>Rate limit testing</li> </ul>"},{"location":"developer-features/#end-to-end-testing","title":"End-to-End Testing","text":"<ul> <li>Workflow testing</li> <li>Campaign sending simulation</li> <li>Event propagation testing</li> <li>UI interaction testing</li> <li>Cross-service testing</li> <li>Timing and scheduling tests</li> </ul>"},{"location":"developer-features/#performance-testing_1","title":"Performance Testing","text":"<ul> <li>Load testing tools</li> <li>Throughput measurement</li> <li>Response time benchmarks</li> <li>Concurrency testing</li> <li>Resource utilization monitoring</li> <li>Bottleneck identification</li> </ul>"},{"location":"developer-features/#specialized-testing","title":"Specialized Testing","text":"<ul> <li>Email rendering tests</li> <li>Spam filter tests</li> <li>Template validation</li> <li>Personalization testing</li> <li>A/B test verification</li> <li>Analytics verification</li> </ul>"},{"location":"developer-features/#data-analytics","title":"Data &amp; Analytics","text":""},{"location":"developer-features/#data-export","title":"Data Export","text":"<p>Tools for extracting data from the Maily platform:</p>"},{"location":"developer-features/#export-formats","title":"Export Formats","text":"<ul> <li>CSV export</li> <li>JSON export</li> <li>XML export</li> <li>Excel export</li> <li>Custom format plugins</li> <li>Compressed archives</li> </ul>"},{"location":"developer-features/#export-capabilities","title":"Export Capabilities","text":"<ul> <li>Full dataset exports</li> <li>Incremental/delta exports</li> <li>Filtered exports</li> <li>Scheduled automatic exports</li> <li>Real-time streaming exports</li> <li>Custom field selection</li> </ul>"},{"location":"developer-features/#export-targets","title":"Export Targets","text":"<ul> <li>Direct download</li> <li>SFTP destination</li> <li>S3/cloud storage</li> <li>Webhook delivery</li> <li>Database direct write</li> <li>Data warehouse connection</li> </ul>"},{"location":"developer-features/#export-management","title":"Export Management","text":"<ul> <li>Export job monitoring</li> <li>Retry mechanisms</li> <li>Notification on completion</li> <li>Error handling and reporting</li> <li>Audit logging</li> <li>Throttling and rate control</li> </ul>"},{"location":"developer-features/#data-processing","title":"Data Processing","text":"<ul> <li>Field mapping and transformation</li> <li>Aggregation options</li> <li>Anonymization and PII handling</li> <li>Calculated fields</li> <li>Custom formatting</li> <li>Filter expressions</li> </ul>"},{"location":"developer-features/#custom-analytics","title":"Custom Analytics","text":"<p>Building custom analytics on Maily data:</p>"},{"location":"developer-features/#data-sources","title":"Data Sources","text":"<ul> <li>Raw event data access</li> <li>Aggregated metrics</li> <li>Historical data access</li> <li>Real-time data streams</li> <li>Contact attribute data</li> <li>Campaign configuration data</li> </ul>"},{"location":"developer-features/#analysis-capabilities","title":"Analysis Capabilities","text":"<ul> <li>Custom metric definition</li> <li>Cohort analysis tools</li> <li>Funnel creation</li> <li>Segmentation analysis</li> <li>Time-series analysis</li> <li>Correlation discovery</li> </ul>"},{"location":"developer-features/#visualization","title":"Visualization","text":"<ul> <li>Chart and graph generation</li> <li>Dashboard creation</li> <li>Interactive data exploration</li> <li>Export to visualization tools</li> <li>Embedding capabilities</li> <li>White-labeling options</li> </ul>"},{"location":"developer-features/#data-science-integration","title":"Data Science Integration","text":"<ul> <li>R and Python integration</li> <li>Jupyter notebook support</li> <li>Machine learning model integration</li> <li>Statistical analysis tools</li> <li>Predictive analytics framework</li> <li>Feature engineering helpers</li> </ul>"},{"location":"developer-features/#implementation-options","title":"Implementation Options","text":"<ul> <li>Client-side analysis</li> <li>Server-side processing</li> <li>Data warehouse integration</li> <li>Stream processing</li> <li>Batch processing</li> <li>Hybrid approaches</li> </ul>"},{"location":"developer-features/#reporting-api","title":"Reporting API","text":"<p>API access to reporting and analytics data:</p>"},{"location":"developer-features/#report-types","title":"Report Types","text":"<ul> <li>Campaign performance reports</li> <li>Audience growth reports</li> <li>Engagement reports</li> <li>Deliverability reports</li> <li>Conversion and revenue reports</li> <li>Custom report definitions</li> </ul>"},{"location":"developer-features/#api-capabilities","title":"API Capabilities","text":"<ul> <li>Report generation</li> <li>Report scheduling</li> <li>Parameterized reports</li> <li>Filtering and segmentation</li> <li>Time period selection</li> <li>Comparison reports</li> </ul>"},{"location":"developer-features/#data-access","title":"Data Access","text":"<ul> <li>Aggregated metrics retrieval</li> <li>Raw data access with filtering</li> <li>Historical data queries</li> <li>Real-time metrics</li> <li>Calculated metric definitions</li> <li>Cross-campaign analysis</li> </ul>"},{"location":"developer-features/#export-options","title":"Export Options","text":"<ul> <li>JSON data export</li> <li>CSV generation</li> <li>Excel report creation</li> <li>PDF report generation</li> <li>Chart image generation</li> <li>Data feed creation</li> </ul>"},{"location":"developer-features/#integration-features","title":"Integration Features","text":"<ul> <li>Webhook delivery of reports</li> <li>Dashboard embedding</li> <li>BI tool integration</li> <li>Custom application integration</li> <li>Notification system integration</li> <li>Alerting based on thresholds</li> </ul>"},{"location":"developer-features/#automation-workflow","title":"Automation &amp; Workflow","text":""},{"location":"developer-features/#custom-actions","title":"Custom Actions","text":"<p>Creating custom actions for automation workflows:</p>"},{"location":"developer-features/#action-framework","title":"Action Framework","text":"<ul> <li>Action definition schema</li> <li>Input parameter specification</li> <li>Output definition</li> <li>Error handling pattern</li> <li>Execution context access</li> <li>Security and permission model</li> </ul>"},{"location":"developer-features/#action-types","title":"Action Types","text":"<ul> <li>Data manipulation actions</li> <li>External API call actions</li> <li>Conditional logic actions</li> <li>Timing and delay actions</li> <li>Notification actions</li> <li>Custom UI interaction actions</li> </ul>"},{"location":"developer-features/#development-process_1","title":"Development Process","text":"<ul> <li>Action development scaffolding</li> <li>Local testing framework</li> <li>Action validation tools</li> <li>Versioning strategy</li> <li>Documentation generator</li> <li>Deployment pipeline</li> </ul>"},{"location":"developer-features/#runtime-features","title":"Runtime Features","text":"<ul> <li>Execution monitoring</li> <li>Performance tracking</li> <li>Retry mechanisms</li> <li>Timeout handling</li> <li>Debugging tools</li> <li>Audit logging</li> </ul>"},{"location":"developer-features/#management_1","title":"Management","text":"<ul> <li>Action discovery</li> <li>Configuration UI generation</li> <li>Version management</li> <li>Dependency tracking</li> <li>Usage statistics</li> <li>Error reporting</li> </ul>"},{"location":"developer-features/#integration-actions","title":"Integration Actions","text":"<p>Pre-built actions for common integration scenarios:</p>"},{"location":"developer-features/#crm-integrations","title":"CRM Integrations","text":"<ul> <li>Contact creation and update</li> <li>Deal/opportunity management</li> <li>Account association</li> <li>Activity logging</li> <li>Task creation</li> <li>Note attachment</li> </ul>"},{"location":"developer-features/#e-commerce-integrations","title":"E-commerce Integrations","text":"<ul> <li>Order processing</li> <li>Abandoned cart handling</li> <li>Product catalog access</li> <li>Customer data synchronization</li> <li>Purchase history retrieval</li> <li>Loyalty program integration</li> </ul>"},{"location":"developer-features/#marketing-integrations","title":"Marketing Integrations","text":"<ul> <li>Ad platform integration</li> <li>Social media actions</li> <li>Landing page creation</li> <li>Form submission processing</li> <li>UTM parameter handling</li> <li>Attribution model integration</li> </ul>"},{"location":"developer-features/#utility-integrations","title":"Utility Integrations","text":"<ul> <li>File storage actions</li> <li>Document generation</li> <li>Image processing</li> <li>Translation services</li> <li>Geolocation services</li> <li>Data enrichment services</li> </ul>"},{"location":"developer-features/#communications","title":"Communications","text":"<ul> <li>SMS sending</li> <li>Push notification actions</li> <li>Chat platform integration</li> <li>Video meeting scheduling</li> <li>Communication preference management</li> <li>Multi-channel coordination</li> </ul>"},{"location":"developer-features/#workflow-api","title":"Workflow API","text":"<p>Programmatic access to workflow definitions and execution:</p>"},{"location":"developer-features/#workflow-management","title":"Workflow Management","text":"<ul> <li>Workflow creation</li> <li>Workflow updates</li> <li>Version control</li> <li>Activation/deactivation</li> <li>Cloning and templating</li> <li>Import/export capabilities</li> </ul>"},{"location":"developer-features/#execution-control","title":"Execution Control","text":"<ul> <li>Workflow triggering</li> <li>Execution monitoring</li> <li>Manual step advancement</li> <li>Pause and resume</li> <li>Cancellation</li> <li>Branch selection</li> </ul>"},{"location":"developer-features/#data-management_1","title":"Data Management","text":"<ul> <li>Context data access</li> <li>Variable manipulation</li> <li>Data mapping tools</li> <li>Transformation functions</li> <li>Schema validation</li> <li>Type conversion utilities</li> </ul>"},{"location":"developer-features/#monitoring_1","title":"Monitoring","text":"<ul> <li>Status checking</li> <li>Progress tracking</li> <li>Performance metrics</li> <li>Error inspection</li> <li>Execution history</li> <li>Audit trail access</li> </ul>"},{"location":"developer-features/#advanced-features","title":"Advanced Features","text":"<ul> <li>Dynamic workflow generation</li> <li>Conditional path evaluation</li> <li>A/B path testing</li> <li>Sub-workflow execution</li> <li>Cross-workflow communication</li> <li>Parallel execution branches</li> </ul>"},{"location":"developer-features/#security-compliance_1","title":"Security &amp; Compliance","text":""},{"location":"developer-features/#authentication_1","title":"Authentication","text":"<p>Authentication methods and security features:</p>"},{"location":"developer-features/#authentication-methods","title":"Authentication Methods","text":"<ul> <li>API key authentication</li> <li>OAuth 2.0 implementation</li> <li>JWT token-based auth</li> <li>SAML integration</li> <li>OpenID Connect support</li> <li>Multi-factor authentication</li> </ul>"},{"location":"developer-features/#implementation","title":"Implementation","text":"<ul> <li>Token management</li> <li>Refresh token handling</li> <li>Session management</li> <li>Authentication headers</li> <li>Signature verification</li> <li>Nonce handling</li> </ul>"},{"location":"developer-features/#security-features","title":"Security Features","text":"<ul> <li>Rate limiting</li> <li>Brute force protection</li> <li>Token revocation</li> <li>Session timeout</li> <li>IP allowlisting</li> <li>Suspicious activity detection</li> </ul>"},{"location":"developer-features/#sso-integration","title":"SSO Integration","text":"<ul> <li>SAML 2.0 support</li> <li>OpenID Connect flows</li> <li>Custom identity provider integration</li> <li>Just-in-time provisioning</li> <li>Role mapping</li> <li>Attribute syncing</li> </ul>"},{"location":"developer-features/#management_2","title":"Management","text":"<ul> <li>Token issuance control</li> <li>Scope definition</li> <li>Client application registration</li> <li>Authentication logs</li> <li>Session monitoring</li> <li>Credential rotation</li> </ul>"},{"location":"developer-features/#authorization","title":"Authorization","text":"<p>Access control and permission management:</p>"},{"location":"developer-features/#permission-models","title":"Permission Models","text":"<ul> <li>Role-based access control (RBAC)</li> <li>Attribute-based access control (ABAC)</li> <li>Resource-level permissions</li> <li>Action-level permissions</li> <li>Data-level permissions</li> <li>Hierarchical permission inheritance</li> </ul>"},{"location":"developer-features/#implementation_1","title":"Implementation","text":"<ul> <li>Permission checking middleware</li> <li>Declarative permission rules</li> <li>Policy enforcement points</li> <li>Context-aware authorization</li> <li>Delegated permission management</li> <li>Temporary permission grants</li> </ul>"},{"location":"developer-features/#developer-tools_1","title":"Developer Tools","text":"<ul> <li>Permission testing utilities</li> <li>Policy simulation</li> <li>Access control debugging</li> <li>Permission audit tools</li> <li>Impact analysis for changes</li> <li>Permission documentation</li> </ul>"},{"location":"developer-features/#governance","title":"Governance","text":"<ul> <li>Permission management UI</li> <li>Approval workflows</li> <li>Separation of duties</li> <li>Least privilege enforcement</li> <li>Permission review process</li> <li>Compliance reporting</li> </ul>"},{"location":"developer-features/#advanced-features_1","title":"Advanced Features","text":"<ul> <li>Dynamic permission evaluation</li> <li>Time-bound permissions</li> <li>Location-based restrictions</li> <li>Device-based restrictions</li> <li>Risk-based authentication factors</li> <li>Anomaly detection</li> </ul>"},{"location":"developer-features/#compliance-helpers","title":"Compliance Helpers","text":"<p>Tools for maintaining regulatory compliance:</p>"},{"location":"developer-features/#data-protection","title":"Data Protection","text":"<ul> <li>PII identification</li> <li>Data classification</li> <li>Encryption helpers</li> <li>Anonymization tools</li> <li>Pseudonymization capabilities</li> <li>Data minimization utilities</li> </ul>"},{"location":"developer-features/#consent-management","title":"Consent Management","text":"<ul> <li>Consent collection</li> <li>Consent tracking</li> <li>Preference management</li> <li>Withdrawal handling</li> <li>Consent receipt generation</li> <li>Consent verification</li> </ul>"},{"location":"developer-features/#data-subject-rights","title":"Data Subject Rights","text":"<ul> <li>Data access request handling</li> <li>Data portability exports</li> <li>Erasure request processing</li> <li>Rectification workflows</li> <li>Restriction handling</li> <li>Objection processing</li> </ul>"},{"location":"developer-features/#documentation","title":"Documentation","text":"<ul> <li>Processing activity records</li> <li>Data flow mapping</li> <li>Legitimate interest assessments</li> <li>Data protection impact assessments</li> <li>Vendor assessment tools</li> <li>Compliance checklist generation</li> </ul>"},{"location":"developer-features/#geo-specific-compliance","title":"Geo-specific Compliance","text":"<ul> <li>GDPR helpers</li> <li>CCPA/CPRA tools</li> <li>CASL compliance</li> <li>CAN-SPAM adherence</li> <li>International email regulations</li> <li>Multi-jurisdiction handling</li> </ul>"},{"location":"developer-features/#performance-optimization","title":"Performance Optimization","text":""},{"location":"developer-features/#rate-limiting","title":"Rate Limiting","text":"<p>Controlling API usage and maintaining system stability:</p>"},{"location":"developer-features/#limit-types","title":"Limit Types","text":"<ul> <li>Request rate limits</li> <li>Resource-specific limits</li> <li>User-based limits</li> <li>IP-based limits</li> <li>Application-based limits</li> <li>Action-specific limits</li> </ul>"},{"location":"developer-features/#implementation_2","title":"Implementation","text":"<ul> <li>Token bucket algorithm</li> <li>Sliding window counters</li> <li>Redis-backed rate tracking</li> <li>Distributed rate limiting</li> <li>Hierarchical limiting</li> <li>Adaptive rate limiting</li> </ul>"},{"location":"developer-features/#response-handling","title":"Response Handling","text":"<ul> <li>Rate limit headers</li> <li>Limit status endpoints</li> <li>Backoff guidance</li> <li>Quota notifications</li> <li>Priority queuing</li> <li>Graceful degradation</li> </ul>"},{"location":"developer-features/#management_3","title":"Management","text":"<ul> <li>Limit configuration</li> <li>Override capabilities</li> <li>Burst allowances</li> <li>Rate limit monitoring</li> <li>Usage analytics</li> <li>Threshold alerting</li> </ul>"},{"location":"developer-features/#client-support","title":"Client Support","text":"<ul> <li>Automatic retry with backoff</li> <li>Rate awareness</li> <li>Request throttling</li> <li>Request prioritization</li> <li>Quota reservation</li> <li>Limit status checking</li> </ul>"},{"location":"developer-features/#bulk-operations","title":"Bulk Operations","text":"<p>Efficiently processing large volumes of data:</p>"},{"location":"developer-features/#bulk-endpoints","title":"Bulk Endpoints","text":"<ul> <li>Batch CRUD operations</li> <li>Multi-entity transactions</li> <li>Import/export operations</li> <li>Job-based processing</li> <li>Chunked upload/download</li> <li>Streaming data handling</li> </ul>"},{"location":"developer-features/#performance-features_2","title":"Performance Features","text":"<ul> <li>Parallel processing</li> <li>Incremental processing</li> <li>Checkpointing</li> <li>Progress tracking</li> <li>Resumable operations</li> <li>Priority scheduling</li> </ul>"},{"location":"developer-features/#implementation_3","title":"Implementation","text":"<ul> <li>Background job processing</li> <li>Queue management</li> <li>Worker allocation</li> <li>Resource consumption control</li> <li>Timeout handling</li> <li>Failure recovery</li> </ul>"},{"location":"developer-features/#monitoring_2","title":"Monitoring","text":"<ul> <li>Progress reporting</li> <li>Status checking</li> <li>Result summarization</li> <li>Error aggregation</li> <li>Performance metrics</li> <li>Resource utilization tracking</li> </ul>"},{"location":"developer-features/#advanced-features_2","title":"Advanced Features","text":"<ul> <li>Conditional bulk operations</li> <li>Data validation rules</li> <li>Transformation during processing</li> <li>Dry-run capabilities</li> <li>Rollback handling</li> <li>Transactional consistency</li> </ul>"},{"location":"developer-features/#caching-strategies","title":"Caching Strategies","text":"<p>Optimizing performance through strategic caching:</p>"},{"location":"developer-features/#cache-layers","title":"Cache Layers","text":"<ul> <li>HTTP caching</li> <li>Application-level caching</li> <li>Data access caching</li> <li>Query result caching</li> <li>Computed value caching</li> <li>Edge caching</li> </ul>"},{"location":"developer-features/#implementation_4","title":"Implementation","text":"<ul> <li>Cache key generation</li> <li>Time-to-live (TTL) strategies</li> <li>Cache invalidation patterns</li> <li>Write-through caching</li> <li>Read-through caching</li> <li>Cache stampede prevention</li> </ul>"},{"location":"developer-features/#cache-backends","title":"Cache Backends","text":"<ul> <li>In-memory caching</li> <li>Redis caching</li> <li>CDN integration</li> <li>Browser caching</li> <li>Service worker caching</li> <li>Distributed cache systems</li> </ul>"},{"location":"developer-features/#optimization-techniques","title":"Optimization Techniques","text":"<ul> <li>Partial cache updates</li> <li>Stale-while-revalidate pattern</li> <li>Cache warming</li> <li>Preemptive caching</li> <li>Cache compression</li> <li>Cache sharding</li> </ul>"},{"location":"developer-features/#management_4","title":"Management","text":"<ul> <li>Cache monitoring</li> <li>Manual invalidation tools</li> <li>Cache hit ratio tracking</li> <li>Memory usage optimization</li> <li>Eviction policy configuration</li> <li>Cache analytics</li> </ul>"},{"location":"developer-guide/","title":"Developer Getting Started Guide","text":"<p>Last updated: March 5, 2025</p>"},{"location":"developer-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Development Environment Setup</li> <li>Repository Structure</li> <li>Local Development</li> <li>Core Technologies</li> <li>Development Workflow</li> <li>Code Standards</li> <li>Debugging</li> <li>Common Issues</li> <li>Contribution Guidelines</li> <li>Learning Resources</li> <li>Getting Help</li> </ul>"},{"location":"developer-guide/#overview","title":"Overview","text":"<p>This guide serves as the comprehensive onboarding resource for new developers joining the Maily platform development team. It consolidates previously scattered setup instructions, workflow guidelines, and best practices into a single source of truth.</p> <p>Maily is an AI-driven email marketing platform built with modern technologies and practices. This document will help you get up and running quickly with all the tools and knowledge needed to contribute effectively.</p>"},{"location":"developer-guide/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"developer-guide/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following installed:</p> <ul> <li>Node.js (v18.x or later)</li> <li>npm (v9.x or later)</li> <li>Docker (v24.x or later)</li> <li>Docker Compose (v2.x or later)</li> <li>Git (v2.30.x or later)</li> <li>VS Code (recommended) or your preferred IDE</li> </ul>"},{"location":"developer-guide/#core-tools-installation","title":"Core Tools Installation","text":"<pre><code># Install global dependencies\nnpm install -g turbo typescript @nestjs/cli\n\n# Clone the repository\ngit clone https://github.com/maily/maily.git\ncd maily\n\n# Install project dependencies\nnpm install\n</code></pre>"},{"location":"developer-guide/#environment-configuration","title":"Environment Configuration","text":"<ol> <li>Copy the example environment files:</li> </ol> <pre><code>cp .env.example .env\ncp apps/backend/.env.example apps/backend/.env\ncp apps/frontend/.env.example apps/frontend/.env\n</code></pre> <ol> <li>Update the environment variables as needed:</li> <li>Database connection strings</li> <li>API keys for third-party services</li> <li>Feature flags and configuration options</li> </ol>"},{"location":"developer-guide/#ide-setup","title":"IDE Setup","text":"<p>For VS Code users, we recommend installing these extensions:</p> <ul> <li>ESLint</li> <li>Prettier</li> <li>TypeScript Hero</li> <li>GitLens</li> <li>Docker</li> <li>REST Client</li> </ul> <p>Our repository includes recommended VS Code settings in <code>.vscode/settings.json</code>, which will be automatically applied.</p>"},{"location":"developer-guide/#repository-structure","title":"Repository Structure","text":"<p>Maily follows a monorepo structure using Turborepo to manage the different applications and packages:</p> <pre><code>maily/\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 frontend/         # Next.js web application\n\u2502   \u251c\u2500\u2500 backend/          # NestJS API server\n\u2502   \u251c\u2500\u2500 admin/            # Admin dashboard (React)\n\u2502   \u2514\u2500\u2500 landing/          # Marketing site (Astro)\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 ui/               # Shared UI components\n\u2502   \u251c\u2500\u2500 hooks/            # React hooks library\n\u2502   \u251c\u2500\u2500 utils/            # Shared utilities\n\u2502   \u251c\u2500\u2500 types/            # TypeScript types\n\u2502   \u251c\u2500\u2500 api-client/       # Generated API client\n\u2502   \u2514\u2500\u2500 ai-service/       # AI service integration\n\u251c\u2500\u2500 scripts/              # Build and dev scripts\n\u251c\u2500\u2500 docs/                 # Documentation\n\u251c\u2500\u2500 tests/                # End-to-end tests\n\u2514\u2500\u2500 infrastructure/       # IaC and deployment configs\n</code></pre> <p>For detailed descriptions of each package and application, see the Architecture Handbook.</p>"},{"location":"developer-guide/#local-development","title":"Local Development","text":""},{"location":"developer-guide/#starting-the-development-environment","title":"Starting the Development Environment","text":"<p>To start the full development environment:</p> <pre><code># Start all services with Docker Compose\ndocker-compose up -d\n\n# Run the development server\nnpm run dev\n</code></pre> <p>This will start: - PostgreSQL database on port 5432 - Redis on port 6379 - S3-compatible storage (MinIO) on port 9000 - Frontend on http://localhost:3000 - Backend API on http://localhost:4000 - Admin dashboard on http://localhost:3001</p>"},{"location":"developer-guide/#running-specific-applications","title":"Running Specific Applications","text":"<p>To run only specific parts of the application:</p> <pre><code># Run only the frontend\nnpm run dev:frontend\n\n# Run only the backend\nnpm run dev:backend\n\n# Run only the admin dashboard\nnpm run dev:admin\n</code></pre>"},{"location":"developer-guide/#database-management","title":"Database Management","text":"<p>The development environment automatically applies migrations on startup. For manual control:</p> <pre><code># Apply latest migrations\nnpm run migrate:latest\n\n# Create a new migration\nnpm run migrate:make -- &lt;migration_name&gt;\n\n# Roll back the last migration\nnpm run migrate:rollback\n</code></pre> <p>Access the database directly with:</p> <pre><code># Connect to the development database\ndocker exec -it maily-postgres psql -U postgres -d maily\n</code></pre>"},{"location":"developer-guide/#seeding-development-data","title":"Seeding Development Data","text":"<p>To populate your development environment with test data:</p> <pre><code>npm run seed\n</code></pre> <p>This creates: - Test user accounts - Sample email templates - Test campaigns and subscribers - Example analytics data</p>"},{"location":"developer-guide/#core-technologies","title":"Core Technologies","text":""},{"location":"developer-guide/#frontend","title":"Frontend","text":"<ul> <li>React 18+ - UI library</li> <li>Next.js 14+ - React framework</li> <li>TypeScript - Type-safe JavaScript</li> <li>TailwindCSS - Utility-first CSS</li> <li>Radix UI - Headless components</li> <li>React Query - Data fetching</li> <li>Zustand - State management</li> </ul>"},{"location":"developer-guide/#backend","title":"Backend","text":"<ul> <li>NestJS - Node.js framework</li> <li>TypeScript - Type-safe JavaScript</li> <li>PostgreSQL - Primary database</li> <li>Redis - Caching and queue</li> <li>Prisma - ORM and database toolkit</li> <li>OpenAI SDK - AI integration</li> <li>Passport - Authentication</li> </ul>"},{"location":"developer-guide/#devops","title":"DevOps","text":"<ul> <li>Docker - Containerization</li> <li>GitHub Actions - CI/CD</li> <li>AWS - Cloud infrastructure</li> <li>Terraform - Infrastructure as code</li> <li>Datadog - Monitoring</li> <li>Sentry - Error tracking</li> </ul>"},{"location":"developer-guide/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/#git-workflow","title":"Git Workflow","text":"<p>We follow a GitHub Flow model:</p> <ol> <li> <p>Create a feature branch from <code>main</code> <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes, committing logically with conventional commit messages:    <pre><code>git commit -m \"feat: add email template preview\"\n</code></pre></p> </li> <li> <p>Push your branch and create a Pull Request    <pre><code>git push -u origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Ensure CI checks pass and address review feedback</p> </li> <li>Merge to <code>main</code> after approval (squash and merge)</li> </ol>"},{"location":"developer-guide/#commit-message-format","title":"Commit Message Format","text":"<p>We follow Conventional Commits:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code>, <code>perf</code>, <code>test</code>, <code>chore</code></p> <p>Example: <pre><code>feat(templates): add drag-and-drop support for email editor\n\nImplements drag-and-drop functionality for the template editor using react-dnd.\nThis closes #123.\n</code></pre></p>"},{"location":"developer-guide/#issue-tracking","title":"Issue Tracking","text":"<p>All development work should be tied to a GitHub issue. Issues are categorized as:</p> <ul> <li>Bug: Something isn't working</li> <li>Feature: New functionality</li> <li>Enhancement: Improvements to existing features</li> <li>Documentation: Documentation updates</li> <li>Tech Debt: Code improvements without functional changes</li> </ul>"},{"location":"developer-guide/#pull-requests","title":"Pull Requests","text":"<p>Pull Requests should:</p> <ol> <li>Reference the related issue (<code>Closes #123</code>)</li> <li>Have a descriptive title and summary</li> <li>Include tests for new functionality</li> <li>Pass all CI checks</li> <li>Be reviewed by at least one team member</li> <li>Update documentation as needed</li> </ol>"},{"location":"developer-guide/#code-standards","title":"Code Standards","text":""},{"location":"developer-guide/#linting-and-formatting","title":"Linting and Formatting","text":"<p>We use ESLint and Prettier for consistent code style:</p> <pre><code># Run ESLint\nnpm run lint\n\n# Run Prettier\nnpm run format\n\n# Run ESLint with auto-fix\nnpm run lint:fix\n</code></pre> <p>The CI process ensures all code meets these standards before merging.</p>"},{"location":"developer-guide/#typescript-guidelines","title":"TypeScript Guidelines","text":"<ul> <li>Prefer explicit types over <code>any</code> or inference when the type is not obvious</li> <li>Use interfaces for objects that will be extended or implemented</li> <li>Use type for union types or complex types</li> <li>Make liberal use of utility types like <code>Partial&lt;T&gt;</code>, <code>Pick&lt;T&gt;</code>, etc.</li> </ul>"},{"location":"developer-guide/#component-guidelines","title":"Component Guidelines","text":"<ul> <li>Use functional components with hooks</li> <li>Keep components small and focused on a single responsibility</li> <li>Co-locate component files with their styles and tests</li> <li>Use <code>data-testid</code> attributes for testing hooks</li> </ul>"},{"location":"developer-guide/#api-development","title":"API Development","text":"<ul> <li>Follow RESTful principles</li> <li>Use DTOs for input validation</li> <li>Document all endpoints with OpenAPI/Swagger</li> <li>Implement proper error handling and status codes</li> <li>Write integration tests for all endpoints</li> </ul>"},{"location":"developer-guide/#debugging","title":"Debugging","text":""},{"location":"developer-guide/#frontend-debugging","title":"Frontend Debugging","text":"<p>Use the React Developer Tools and Chrome DevTools for frontend debugging:</p> <ol> <li>React Developer Tools for component inspection</li> <li>Chrome DevTools for network, performance, and console debugging</li> <li>Use <code>console.log</code> or <code>debugger</code> statements strategically</li> <li>Enable source maps for easier debugging</li> </ol>"},{"location":"developer-guide/#backend-debugging","title":"Backend Debugging","text":"<p>For backend debugging:</p> <ol> <li>Use VS Code's built-in debugger</li> <li>Configure a launch configuration in <code>.vscode/launch.json</code></li> <li>Use the NestJS logger for consistent logging</li> <li>Use Postman or Thunder Client for API testing</li> </ol>"},{"location":"developer-guide/#common-debugging-commands","title":"Common Debugging Commands","text":"<pre><code># Run backend in debug mode\nnpm run start:debug\n\n# Run tests with debugging enabled\nnpm run test:debug\n\n# Check for memory leaks\nnpm run diagnostic:memory\n</code></pre>"},{"location":"developer-guide/#common-issues","title":"Common Issues","text":""},{"location":"developer-guide/#database-connection-issues","title":"Database Connection Issues","text":"<p>If you cannot connect to the database:</p> <ol> <li>Ensure Docker containers are running: <code>docker ps</code></li> <li>Check logs for connection errors: <code>docker logs maily-postgres</code></li> <li>Verify environment variables in your <code>.env</code> file</li> <li>Try restarting the database: <code>docker-compose restart postgres</code></li> </ol>"},{"location":"developer-guide/#build-errors","title":"Build Errors","text":"<p>For build errors:</p> <ol> <li>Clear node_modules and reinstall: <code>npm run clean &amp;&amp; npm install</code></li> <li>Check TypeScript errors: <code>npm run type-check</code></li> <li>Ensure you're on the correct Node.js version</li> <li>Delete the <code>.next</code> directory for frontend build issues</li> </ol>"},{"location":"developer-guide/#authentication-issues","title":"Authentication Issues","text":"<p>If authentication doesn't work:</p> <ol> <li>Check that the auth service is running</li> <li>Verify JWT secrets match between services</li> <li>Ensure cookies are being set correctly</li> <li>Check CORS configuration if testing across domains</li> </ol>"},{"location":"developer-guide/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"developer-guide/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>Find an Issue: Select an unassigned issue from the backlog</li> <li>Discuss Approach: Comment on the issue with your planned approach</li> <li>Create a Branch: Follow naming conventions (<code>feature/</code>, <code>fix/</code>, etc.)</li> <li>Implement Changes: Write code and tests following our standards</li> <li>Test Locally: Ensure all tests pass and the application works as expected</li> <li>Create PR: Submit a pull request with a clear description</li> <li>Address Feedback: Make requested changes from code reviews</li> <li>Merge: Once approved, your PR will be merged to main</li> </ol>"},{"location":"developer-guide/#quality-expectations","title":"Quality Expectations","text":"<p>All code contributions should:</p> <ul> <li>Have test coverage for new functionality</li> <li>Include documentation updates if needed</li> <li>Follow established patterns and practices</li> <li>Be performant and accessible</li> <li>Fix any linting or type issues</li> </ul>"},{"location":"developer-guide/#learning-resources","title":"Learning Resources","text":""},{"location":"developer-guide/#required-reading","title":"Required Reading","text":"<ul> <li>Architecture Handbook: Understand our system design</li> <li>Core Guide: Learn the fundamental concepts of Maily</li> <li>Testing Guide: Our testing philosophy and practices</li> </ul>"},{"location":"developer-guide/#recommended-resources","title":"Recommended Resources","text":"<ul> <li>Frontend Packages: Details on our frontend libraries</li> <li>Backend Packages: Information on our backend services</li> <li>App Components: Catalog of reusable UI components</li> </ul>"},{"location":"developer-guide/#external-resources","title":"External Resources","text":"<ul> <li>React Documentation</li> <li>Next.js Documentation</li> <li>NestJS Documentation</li> <li>TypeScript Handbook</li> <li>TailwindCSS Documentation</li> </ul>"},{"location":"developer-guide/#getting-help","title":"Getting Help","text":"<p>If you get stuck:</p> <ul> <li>Slack Channels:</li> <li> </li> <li> </li> <li> </li> <li> </li> <li> <p>Office Hours: Daily dev office hours at 11am-12pm ET</p> </li> <li> <p>Documentation: Check other docs in the <code>/docs</code> folder</p> </li> <li> <p>Mentorship: New developers are assigned a mentor for their first month</p> </li> </ul>"},{"location":"developer-guide/#dev-help-general-development-questions","title":"dev-help - General development questions","text":""},{"location":"developer-guide/#frontend-frontend-specific-questions","title":"frontend - Frontend specific questions","text":""},{"location":"developer-guide/#backend-backend-specific-questions","title":"backend - Backend specific questions","text":""},{"location":"developer-guide/#devops-infrastructure-and-deployment-questions","title":"devops - Infrastructure and deployment questions","text":""},{"location":"documentation-consolidation-progress/","title":"Documentation Consolidation Progress","text":"<p>Last updated: March 21, 2025</p>"},{"location":"documentation-consolidation-progress/#overview","title":"Overview","text":"<p>This document tracks our initiative to reduce documentation files from 91 to approximately 33 while maintaining content quality and improving findability. The consolidation follows a hub-and-spoke model that preserves approximately 95% of content while significantly improving organization and discoverability.</p>"},{"location":"documentation-consolidation-progress/#consolidation-strategy","title":"Consolidation Strategy","text":"<p>Our consolidation strategy is based on these key principles:</p> <ul> <li>Single Source of Truth: Each topic has one definitive document</li> <li>Comprehensive Coverage: Consolidated docs maintain all essential information</li> <li>Cross-References: Clear links between related documentation</li> <li>Code-Based Documentation: Leveraging code comments and docstrings</li> <li>Living Documentation: Regular updates based on code changes</li> </ul>"},{"location":"documentation-consolidation-progress/#progress-summary","title":"Progress Summary","text":"Metric Value Original Files 91 Current Files 33 Target Files 33 Overall Progress 100% <p>\ud83d\udfe9 Completed \u00a0 \ud83d\udfe8 In Progress \u00a0 \ud83d\udfe5 Not Started</p>"},{"location":"documentation-consolidation-progress/#completed-consolidations","title":"Completed Consolidations","text":"<ol> <li>Core Guide (<code>core-guide.md</code>) - Combined README, getting-started, and contribution-guide</li> <li>Reference &amp; FAQ (<code>glossary-and-faq.md</code>) - Consolidated glossary and FAQ</li> <li>Architecture Handbook (<code>architecture-handbook.md</code>) - Comprehensive architecture documentation</li> <li>User Features (<code>user-features.md</code>) - User-facing features documentation</li> <li>Developer Features (<code>developer-features.md</code>) - Developer-focused features</li> <li>Implementation History (<code>implementation-history.md</code>) - Consolidated sprint documentation</li> <li>AI Handbook (<code>ai-handbook.md</code>) - Comprehensive AI implementation details</li> <li>AI Service Reference (<code>ai-service-reference.md</code>) - Technical AI API details</li> <li>Infrastructure Handbook (<code>infrastructure-handbook.md</code>) - Complete infrastructure documentation</li> <li>Operations Runbook (<code>operations-runbook.md</code>) - Critical operational procedures</li> <li>Security &amp; Compliance (<code>security-compliance-handbook.md</code>) - Comprehensive security documentation</li> <li>Frontend Packages (<code>frontend-packages.md</code>) - Frontend package documentation</li> <li>Backend Packages (<code>backend-packages.md</code>) - Backend package documentation</li> <li>Frontend Apps (<code>frontend-apps.md</code>) - Frontend application documentation</li> <li>Backend Apps (<code>backend-apps.md</code>) - Backend application documentation</li> <li>Technical Reference (<code>technical-reference.md</code>) - API, GraphQL, and performance topics</li> <li>Design Standards (<code>design-standards.md</code>) - UI/UX, accessibility, and internationalization</li> <li>Developer Guide (<code>developer-guide.md</code>) - Complete development onboarding guide</li> <li>Testing Guide (<code>testing-guide.md</code>) - Comprehensive testing documentation</li> <li>Operational Handbook (<code>operational-handbook.md</code>) - Complete guide for production operations</li> <li>Infrastructure Reference (<code>infrastructure-reference.md</code>) - Comprehensive infrastructure documentation</li> <li>API Reference (<code>api-reference.md</code>) - Complete REST API documentation</li> <li>Trust Infrastructure Handbook (<code>trust-infrastructure-handbook.md</code>) - Consolidated trust infrastructure documentation</li> <li>Enhancement Plans (<code>enhancement-plan.md</code>) - Consolidation of enhancement documentation</li> <li>Integration Guide (<code>integration-guide.md</code>) - Consolidation of integration documentation</li> <li>App Components (<code>app-components.md</code>) - Documentation of application components</li> <li>Modernization Roadmap (<code>modernization-roadmap.md</code>) - Updated roadmap and implementation plans</li> <li>Enhancement Tools Documentation (<code>enhancement-tools-reference.md</code>) - Merged with enhancement documents</li> <li>Final Repository Cleanup - Deprecated files archived and removed</li> </ol>"},{"location":"documentation-consolidation-progress/#previously-in-progress-consolidations-now-complete","title":"Previously In-progress Consolidations (Now Complete)","text":"<p>~~1. Enhancement Plans (<code>enhancement-plan.md</code>) - Consolidation of enhancement documentation~~ Status: \u2705 Completed on March 19, 2025</p> <p>~~2. Integration Guide (<code>integration-guide.md</code>) - Consolidation of integration documentation~~ Status: \u2705 Completed on March 19, 2025</p> <p>~~3. App Components (<code>app-components.md</code>) - Documentation of application components~~ Status: \u2705 Completed on March 20, 2025</p> <p>~~4. Modernization Roadmap (<code>modernization-roadmap.md</code>) - Updated roadmap and implementation plans~~ Status: \u2705 Completed on March 20, 2025</p>"},{"location":"documentation-consolidation-progress/#previously-remaining-consolidations-now-complete","title":"Previously Remaining Consolidations (Now Complete)","text":"<p>~~1. Enhancement Tools Documentation - Merge with other enhancement documents~~ Status: \u2705 Completed on March 21, 2025</p> <p>~~2. Final Repository Cleanup - Remove deprecated files after all consolidations are complete~~ Status: \u2705 Completed on March 21, 2025</p>"},{"location":"documentation-consolidation-progress/#files-removed-and-archived","title":"Files Removed and Archived","text":"<p>The following files have been consolidated and archived as part of the repository cleanup:</p>"},{"location":"documentation-consolidation-progress/#core-documentation-consolidated-to-core-guidemd-and-glossary-and-faqmd","title":"Core Documentation (Consolidated to core-guide.md and glossary-and-faq.md)","text":"<ul> <li><code>README.md</code></li> <li><code>getting-started.md</code></li> <li><code>contribution-guide.md</code></li> <li><code>code-of-conduct.md</code></li> <li><code>faq.md</code></li> <li><code>glossary.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#architecture-documentation-consolidated-to-architecture-handbookmd","title":"Architecture Documentation (Consolidated to architecture-handbook.md)","text":"<ul> <li><code>architecture-overview.md</code></li> <li><code>frontend-architecture.md</code></li> <li><code>api-architecture.md</code></li> <li><code>database-schema.md</code></li> <li><code>tech-stack.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#feature-documentation-consolidated-to-user-featuresmd-and-developer-featuresmd","title":"Feature Documentation (Consolidated to user-features.md and developer-features.md)","text":"<ul> <li><code>features/email-builder.md</code></li> <li><code>features/campaign-management.md</code></li> <li><code>features/audience-segmentation.md</code></li> <li><code>features/analytics-dashboard.md</code></li> <li><code>features/a-b-testing.md</code></li> <li><code>features/automation-workflows.md</code></li> <li><code>features/ai-content-generation.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#sprint-documentation-consolidated-to-implementation-historymd","title":"Sprint Documentation (Consolidated to implementation-history.md)","text":"<ul> <li><code>sprints/sprint-1-implementation.md</code></li> <li><code>sprints/sprint-2-implementation.md</code></li> <li><code>sprint3-implementation-summary.md</code></li> <li><code>sprint4-implementation-summary.md</code></li> <li><code>sprint5-implementation-summary.md</code></li> <li><code>sprint6-implementation-summary.md</code></li> <li><code>sprint6-implementation-plan.md</code></li> <li><code>sprint7-implementation-summary.md</code></li> <li><code>sprint7-implementation-plan.md</code></li> <li><code>templates-implementation-summary.md</code></li> <li><code>subscribers-implementation-summary.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#aiml-documentation-consolidated-to-ai-handbookmd-and-ai-service-referencemd","title":"AI/ML Documentation (Consolidated to ai-handbook.md and ai-service-reference.md)","text":"<ul> <li><code>ai-ml-implementation.md</code></li> <li><code>ai-ml-usage-guide.md</code></li> <li><code>ai-ml-readme.md</code></li> <li><code>ai-capabilities-summary.md</code></li> <li><code>ai-integration.md</code></li> <li><code>packages/ai/README.md</code></li> <li><code>apps/api/ai/README.md</code></li> <li><code>docs/ai/model-versioning.md</code></li> <li><code>docs/ai/prompt-engineering.md</code></li> <li><code>docs/ai/observability.md</code></li> <li><code>docs/ai/cost-optimization.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#infrastructure-documentation-consolidated-to-infrastructure-handbookmd-and-operations-runbookmd","title":"Infrastructure Documentation (Consolidated to infrastructure-handbook.md and operations-runbook.md)","text":"<ul> <li><code>infrastructure/README.md</code></li> <li><code>deployment-guide.md</code></li> <li><code>scaling-strategies.md</code></li> <li><code>monitoring-setup.md</code></li> <li><code>disaster-recovery.md</code></li> <li><code>security-measures.md</code></li> <li><code>database-optimization.md</code></li> <li><code>deployment.md</code></li> <li><code>monitoring-observability.md</code></li> <li><code>infrastructure-scalability-implementation.md</code></li> <li><code>infrastructure-implementation-summary.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#security-compliance-documentation-consolidated-to-security-compliance-handbookmd","title":"Security &amp; Compliance Documentation (Consolidated to security-compliance-handbook.md)","text":"<ul> <li><code>security/authentication.md</code></li> <li><code>security/authorization.md</code></li> <li><code>security/secrets-management.md</code></li> <li><code>security/compliance-checklist.md</code></li> <li><code>security/penetration-testing.md</code></li> <li><code>security/incident-response.md</code></li> <li><code>privacy-compliance.md</code></li> <li><code>security-compliance-architecture.md</code></li> <li><code>security-compliance-implementation.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#trust-infrastructure-documentation-consolidated-to-trust-infrastructure-handbookmd","title":"Trust Infrastructure Documentation (Consolidated to trust-infrastructure-handbook.md)","text":"<ul> <li><code>trust-infrastructure-implementation-plan.md</code></li> <li><code>trust-infrastructure-certificates-implementation.md</code></li> <li><code>trust-infrastructure-ai-agents-implementation.md</code></li> <li><code>trust-infrastructure-token-implementation.md</code></li> <li><code>MAILY-trust-infrastructure-production-implementation.md</code></li> <li><code>MAILY-trust-infrastructure-implementation.md</code></li> </ul>"},{"location":"documentation-consolidation-progress/#consolidation-implementation-summary","title":"Consolidation Implementation Summary","text":"<p>All planned consolidations have been successfully completed as of March 21, 2025. The documentation portal has been successfully built and can be accessed locally using <code>mkdocs serve</code>. The documentation now follows a more organized structure with a clear navigation hierarchy.</p>"},{"location":"documentation-consolidation-progress/#key-achievements","title":"Key Achievements","text":"<ol> <li>Documentation Reduction: Reduced from 91 files to 33 files (63% reduction)</li> <li>Improved Navigation: Clear hierarchical navigation structure in the MkDocs portal</li> <li>Cross-Referenced Content: All documents properly linked with no broken references</li> <li>Verification Tools: Created tools to verify documentation links and automate cleanup</li> <li>Documentation Portal: Successfully configured MkDocs portal with Material theme</li> </ol>"},{"location":"documentation-consolidation-progress/#next-steps-for-documentation-maintenance","title":"Next Steps for Documentation Maintenance","text":"<ol> <li>Regular Reviews: Schedule quarterly documentation reviews</li> <li>Update Process: Implement documentation updates as part of feature development</li> <li>Feedback Collection: Add feedback mechanism to documentation pages</li> <li>Usage Analytics: Track documentation usage to identify improvement areas</li> <li>Automated Testing: Integrate documentation verification into CI/CD pipeline</li> </ol>"},{"location":"enhancement-plan/","title":"Maily Enhancement Plan","text":"<p>Last Updated: March 6, 2023</p>"},{"location":"enhancement-plan/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Enhancement Strategy</li> <li>Gap Analysis</li> <li>Implementation Roadmap</li> <li>Modernization Initiatives</li> <li>App Router Migration</li> <li>AI Capabilities Enhancement</li> <li>Infrastructure Scalability</li> <li>Performance Optimization</li> <li>Accessibility Improvements</li> <li>Internationalization</li> <li>Technical Tools &amp; References</li> <li>Implementation Tracking</li> <li>Enhancement Metrics</li> <li>Future Directions</li> </ol>"},{"location":"enhancement-plan/#overview","title":"Overview","text":"<p>This comprehensive enhancement plan consolidates all initiatives aimed at improving the Maily platform. It serves as the definitive source of truth for ongoing and planned enhancements, combining technical roadmaps, implementation details, and success metrics.</p>"},{"location":"enhancement-plan/#enhancement-vision","title":"Enhancement Vision","text":"<p>Our enhancements are guided by four key principles:</p> <ol> <li>Performance First: Optimizing load times, rendering performance, and backend efficiency</li> <li>Future-Proof Architecture: Adopting modern frameworks and practices for long-term maintainability</li> <li>Accessibility &amp; Inclusion: Ensuring the platform is usable by everyone</li> <li>Developer Experience: Improving tooling and processes for faster, more reliable development</li> </ol>"},{"location":"enhancement-plan/#enhancement-strategy","title":"Enhancement Strategy","text":"<p>The enhancement strategy follows a phased approach:</p>"},{"location":"enhancement-plan/#phase-1-foundation-completed","title":"Phase 1: Foundation (Completed)","text":"<ul> <li>Core architecture assessment</li> <li>Technical debt identification</li> <li>Enhancement prioritization</li> <li>Initial tooling setup</li> </ul>"},{"location":"enhancement-plan/#phase-2-modernization-current","title":"Phase 2: Modernization (Current)","text":"<ul> <li>App Router migration</li> <li>AI capabilities enhancement</li> <li>Infrastructure scalability improvements</li> <li>Frontend performance optimization</li> </ul>"},{"location":"enhancement-plan/#phase-3-experience-upcoming","title":"Phase 3: Experience (Upcoming)","text":"<ul> <li>Accessibility compliance</li> <li>Internationalization support</li> <li>Advanced personalization</li> <li>Enhanced analytics</li> </ul>"},{"location":"enhancement-plan/#phase-4-innovation-planned","title":"Phase 4: Innovation (Planned)","text":"<ul> <li>Cross-channel campaign integration</li> <li>Predictive optimization</li> <li>Enhanced collaboration features</li> <li>Advanced automation workflows</li> </ul>"},{"location":"enhancement-plan/#gap-analysis","title":"Gap Analysis","text":"<p>Our comprehensive analysis identified the following key gaps in the current platform:</p>"},{"location":"enhancement-plan/#technical-gaps","title":"Technical Gaps","text":"<ol> <li>Architecture Limitations</li> <li>Pages Router constraints on modern React features</li> <li>Limited server component utilization</li> <li> <p>Sub-optimal data fetching patterns</p> </li> <li> <p>Performance Issues</p> </li> <li>Inefficient client-side rendering</li> <li>Excessive JavaScript payload</li> <li>Unoptimized image handling</li> <li> <p>Database query inefficiencies</p> </li> <li> <p>Scalability Concerns</p> </li> <li>Limited horizontal scaling for certain services</li> <li>Monolithic components in critical paths</li> <li>Resource contention during peak loads</li> </ol>"},{"location":"enhancement-plan/#user-experience-gaps","title":"User Experience Gaps","text":"<ol> <li>Accessibility Shortcomings</li> <li>Insufficient keyboard navigation</li> <li>Missing ARIA attributes</li> <li>Low color contrast in certain areas</li> <li> <p>Inconsistent focus management</p> </li> <li> <p>Internationalization Limitations</p> </li> <li>Hardcoded English text throughout the application</li> <li>Date, time, and number formatting issues</li> <li>Limited support for right-to-left languages</li> <li> <p>Single-language content management</p> </li> <li> <p>Feature Gaps</p> </li> <li>Limited AI-powered content generation</li> <li>Basic audience segmentation capabilities</li> <li>Minimal cross-channel coordination</li> <li>Limited collaboration features</li> </ol>"},{"location":"enhancement-plan/#implementation-roadmap","title":"Implementation Roadmap","text":"<p>Our implementation follows a sprint-based approach, with each sprint focused on specific enhancement areas:</p>"},{"location":"enhancement-plan/#sprint-1-security-compliance-completed","title":"Sprint 1: Security &amp; Compliance (Completed)","text":"<ul> <li>Enhanced authentication system</li> <li>Role-based access controls</li> <li>Audit logging implementation</li> <li>Compliance documentation</li> </ul>"},{"location":"enhancement-plan/#sprint-2-infrastructure-completed","title":"Sprint 2: Infrastructure (Completed)","text":"<ul> <li>Kubernetes deployment optimization</li> <li>Database performance tuning</li> <li>Caching layer implementation</li> <li>Monitoring instrumentation</li> </ul>"},{"location":"enhancement-plan/#sprint-3-aiml-implementation-completed","title":"Sprint 3: AI/ML Implementation (Completed)","text":"<ul> <li>AI service architecture</li> <li>Content generation models</li> <li>Audience segmentation algorithms</li> <li>Performance prediction features</li> </ul>"},{"location":"enhancement-plan/#sprint-4-app-router-migration-completed","title":"Sprint 4: App Router Migration (Completed)","text":"<ul> <li>Core page migration</li> <li>Server component implementation</li> <li>Data fetching optimization</li> <li>Route handler conversion</li> </ul>"},{"location":"enhancement-plan/#sprint-5-monitoring-implementation-completed","title":"Sprint 5: Monitoring Implementation (Completed)","text":"<ul> <li>Real-time performance monitoring</li> <li>Error tracking enhancements</li> <li>User behavior analytics</li> <li>System health dashboards</li> </ul>"},{"location":"enhancement-plan/#sprint-6-uxaccessibility-in-progress","title":"Sprint 6: UX/Accessibility (In Progress)","text":"<ul> <li>Screen reader compatibility</li> <li>Keyboard navigation improvements</li> <li>Focus management enhancement</li> <li>Color contrast adjustments</li> </ul>"},{"location":"enhancement-plan/#sprint-7-internationalization-in-progress","title":"Sprint 7: Internationalization (In Progress)","text":"<ul> <li>Translation infrastructure</li> <li>Locale-aware formatting</li> <li>Right-to-left support</li> <li>Multi-language content management</li> </ul>"},{"location":"enhancement-plan/#sprint-8-advanced-analytics-planned","title":"Sprint 8: Advanced Analytics (Planned)","text":"<ul> <li>Enhanced reporting dashboard</li> <li>Custom report builder</li> <li>Predictive analytics</li> <li>Comparative benchmarking</li> </ul>"},{"location":"enhancement-plan/#sprint-9-collaboration-features-planned","title":"Sprint 9: Collaboration Features (Planned)","text":"<ul> <li>Team workspace implementation</li> <li>Approval workflows</li> <li>In-app commenting system</li> <li>Activity feed and notifications</li> </ul>"},{"location":"enhancement-plan/#modernization-initiatives","title":"Modernization Initiatives","text":""},{"location":"enhancement-plan/#app-router-migration","title":"App Router Migration","text":"<p>The migration from Next.js Pages Router to App Router enables modern React features and performance improvements. Key components include:</p>"},{"location":"enhancement-plan/#migration-approach","title":"Migration Approach","text":"<ol> <li>Analysis Phase (Completed)</li> <li>Full inventory of existing routes</li> <li>Data fetching pattern identification</li> <li>Component dependency mapping</li> <li> <p>Performance baseline establishment</p> </li> <li> <p>Core Migration (Completed)</p> </li> <li>Route structure reorganization</li> <li>Server component implementation</li> <li>Client component boundaries</li> <li> <p>API route conversion</p> </li> <li> <p>Optimization Phase (In Progress)</p> </li> <li>Parallel route implementation</li> <li>Intercepted routes for modal flows</li> <li>Route group organization</li> <li>Loading and error state enhancement</li> </ol>"},{"location":"enhancement-plan/#implementation-details","title":"Implementation Details","text":"<p>The migration follows these core principles:</p> <ul> <li>Server components for data-heavy sections</li> <li>Client components only where interactivity is required</li> <li>Streaming for improved loading experience</li> <li>Route handlers for API functionality</li> </ul> <pre><code>// Example App Router implementation\n// app/campaigns/[id]/page.tsx\nexport default async function CampaignPage({ params }: { params: { id: string } }) {\n  const campaign = await fetchCampaign(params.id);\n\n  return (\n    &lt;div className=\"campaign-container\"&gt;\n      &lt;CampaignHeader campaign={campaign} /&gt;\n      &lt;Suspense fallback={&lt;StatsSkeleton /&gt;}&gt;\n        &lt;CampaignStats campaignId={params.id} /&gt;\n      &lt;/Suspense&gt;\n      &lt;CampaignContent campaign={campaign} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"enhancement-plan/#ai-capabilities-enhancement","title":"AI Capabilities Enhancement","text":"<p>Our AI capabilities enhancement focuses on improving the intelligence and utility of AI-powered features:</p>"},{"location":"enhancement-plan/#key-ai-enhancements","title":"Key AI Enhancements","text":"<ol> <li>Content Generation</li> <li>Enhanced subject line generation</li> <li>Full email content creation</li> <li>Smart content suggestions</li> <li> <p>A/B test variant creation</p> </li> <li> <p>Audience Intelligence</p> </li> <li>Advanced segmentation algorithms</li> <li>Engagement prediction</li> <li>Churn risk identification</li> <li> <p>Customer journey mapping</p> </li> <li> <p>Optimization Features</p> </li> <li>Send time optimization</li> <li>Content personalization</li> <li>Image selection assistance</li> <li>Call-to-action optimization</li> </ol>"},{"location":"enhancement-plan/#infrastructure-scalability","title":"Infrastructure Scalability","text":"<p>Infrastructure improvements to support growing user demands and ensure reliability:</p>"},{"location":"enhancement-plan/#scalability-enhancements","title":"Scalability Enhancements","text":"<ol> <li>Kubernetes Optimization</li> <li>Pod autoscaling configuration</li> <li>Resource limit refinement</li> <li>Multi-region deployment</li> <li> <p>Service mesh implementation</p> </li> <li> <p>Database Performance</p> </li> <li>Read replica configuration</li> <li>Query optimization</li> <li>Index strategy refinement</li> <li> <p>Database partitioning</p> </li> <li> <p>Caching Strategy</p> </li> <li>Multi-level caching implementation</li> <li>Cache invalidation mechanisms</li> <li>Distributed caching architecture</li> <li>Cold start performance improvements</li> </ol>"},{"location":"enhancement-plan/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>Comprehensive monitoring to ensure system health and performance:</p> <ol> <li>Application Performance Monitoring</li> <li>Real-time performance tracking</li> <li>Error rate monitoring</li> <li>Transaction tracing</li> <li> <p>Resource utilization insights</p> </li> <li> <p>User Experience Monitoring</p> </li> <li>Core Web Vitals tracking</li> <li>User journey analysis</li> <li>Conversion funnel visualization</li> <li> <p>Segment-based performance analysis</p> </li> <li> <p>Infrastructure Monitoring</p> </li> <li>Cluster health metrics</li> <li>Node performance tracking</li> <li>Network traffic analysis</li> <li>Storage performance monitoring</li> </ol>"},{"location":"enhancement-plan/#performance-optimization","title":"Performance Optimization","text":"<p>Focused efforts to enhance frontend and backend performance:</p>"},{"location":"enhancement-plan/#frontend-performance","title":"Frontend Performance","text":"<ol> <li>Bundle Optimization</li> <li>Code splitting refinement</li> <li>Treeshaking improvement</li> <li>Dependency optimization</li> <li> <p>Runtime performance enhancement</p> </li> <li> <p>Rendering Strategy</p> </li> <li>Server component utilization</li> <li>Client-side hydration minimization</li> <li>Suspense boundary optimization</li> <li> <p>Progressive rendering implementation</p> </li> <li> <p>Asset Optimization</p> </li> <li>Image loading strategy</li> <li>Font loading optimization</li> <li>CSS delivery refinement</li> <li>Third-party script management</li> </ol>"},{"location":"enhancement-plan/#backend-performance","title":"Backend Performance","text":"<ol> <li>API Optimization</li> <li>Query consolidation</li> <li>Response sizing</li> <li>Batched operations</li> <li> <p>Asynchronous processing</p> </li> <li> <p>Database Efficiency</p> </li> <li>Query optimization</li> <li>Index refinement</li> <li>Connection pooling</li> <li>Caching integration</li> </ol>"},{"location":"enhancement-plan/#accessibility-improvements","title":"Accessibility Improvements","text":"<p>Comprehensive accessibility enhancements to meet WCAG 2.1 AA standards:</p>"},{"location":"enhancement-plan/#accessibility-features","title":"Accessibility Features","text":"<ol> <li>Keyboard Navigation</li> <li>Focusable elements</li> <li>Logical tab order</li> <li>Keyboard shortcuts</li> <li> <p>Focus trap management</p> </li> <li> <p>Screen Reader Support</p> </li> <li>ARIA label implementation</li> <li>Semantic HTML structure</li> <li>Alternative text</li> <li> <p>Live regions for dynamic content</p> </li> <li> <p>Visual Accessibility</p> </li> <li>Color contrast improvements</li> <li>Text sizing support</li> <li>Motion reduction options</li> <li>Visible focus indicators</li> </ol>"},{"location":"enhancement-plan/#internationalization","title":"Internationalization","text":"<p>Multi-language support and cultural adaptations:</p>"},{"location":"enhancement-plan/#i18n-implementation","title":"i18n Implementation","text":"<ol> <li>Translation Infrastructure</li> <li>Message extraction workflow</li> <li>Translation management system</li> <li>Dynamic language loading</li> <li> <p>Context-aware translations</p> </li> <li> <p>Localization Features</p> </li> <li>Date and time formatting</li> <li>Number and currency formatting</li> <li>Direction support (LTR/RTL)</li> <li>Cultural adaptation</li> </ol>"},{"location":"enhancement-plan/#technical-tools-references","title":"Technical Tools &amp; References","text":""},{"location":"enhancement-plan/#development-tools","title":"Development Tools","text":"<p>The enhancement process is supported by various tools and utilities:</p> <ol> <li>Analysis Tools</li> <li>Lighthouse for performance auditing</li> <li>Axe for accessibility testing</li> <li>Bundle analyzer for JavaScript optimization</li> <li> <p>Database query analyzers</p> </li> <li> <p>Development Utilities</p> </li> <li>Next.js middleware for auth and localization</li> <li>React Server Components patterns</li> <li>Suspense for data loading</li> <li> <p>Error boundary implementation</p> </li> <li> <p>Testing Tools</p> </li> <li>Jest for unit testing</li> <li>Playwright for end-to-end testing</li> <li>Storybook for component testing</li> <li>Vitest for frontend unit tests</li> </ol>"},{"location":"enhancement-plan/#reference-implementations","title":"Reference Implementations","text":"<p>Key patterns and reference implementations:</p> <ol> <li>Data Fetching Patterns</li> <li>Server component data fetching</li> <li>React Query integration</li> <li>SWR for client-side data</li> <li> <p>Suspense-compatible data loading</p> </li> <li> <p>State Management Approaches</p> </li> <li>Server state vs. client state</li> <li>Context API usage</li> <li>Redux implementation</li> <li> <p>Zustand for simple state</p> </li> <li> <p>Component Architecture</p> </li> <li>Atomic design principles</li> <li>Compound components</li> <li>Render props patterns</li> <li>Custom hooks</li> </ol>"},{"location":"enhancement-plan/#implementation-tracking","title":"Implementation Tracking","text":"<p>Progress tracking for enhancement initiatives:</p>"},{"location":"enhancement-plan/#completion-status","title":"Completion Status","text":"Enhancement Area Progress Estimated Completion App Router Migration 95% March 15, 2023 AI Capabilities 80% March 20, 2023 Infrastructure Scalability 85% March 18, 2023 Performance Optimization 75% March 25, 2023 Accessibility 60% April 10, 2023 Internationalization 55% April 15, 2023"},{"location":"enhancement-plan/#key-milestones","title":"Key Milestones","text":"<ul> <li>\u2705 Core architecture modernization complete</li> <li>\u2705 AI service infrastructure deployed</li> <li>\u2705 Database optimization implemented</li> <li>\u2705 Monitoring system enhanced</li> <li>\ud83d\udd04 Accessibility improvements in progress</li> <li>\ud83d\udd04 Translation system implementation ongoing</li> </ul>"},{"location":"enhancement-plan/#enhancement-metrics","title":"Enhancement Metrics","text":"<p>Key performance indicators to measure enhancement success:</p>"},{"location":"enhancement-plan/#technical-metrics","title":"Technical Metrics","text":"<ol> <li>Performance Metrics</li> <li>40% reduction in Time to Interactive</li> <li>65% improvement in Largest Contentful Paint</li> <li>50% reduction in Total Blocking Time</li> <li> <p>30% decrease in API response times</p> </li> <li> <p>Reliability Metrics</p> </li> <li>99.99% service availability</li> <li>80% reduction in error rates</li> <li>75% decrease in deployment failures</li> <li>60% reduction in incident resolution time</li> </ol>"},{"location":"enhancement-plan/#user-experience-metrics","title":"User Experience Metrics","text":"<ol> <li>Engagement Metrics</li> <li>25% increase in session duration</li> <li>40% reduction in bounce rate</li> <li>35% improvement in feature adoption</li> <li> <p>30% increase in user retention</p> </li> <li> <p>Satisfaction Metrics</p> </li> <li>45% improvement in NPS score</li> <li>60% reduction in support tickets</li> <li>50% increase in positive feedback</li> <li>40% improvement in task completion rate</li> </ol>"},{"location":"enhancement-plan/#future-directions","title":"Future Directions","text":"<p>Looking beyond the current enhancement plan:</p>"},{"location":"enhancement-plan/#future-initiatives","title":"Future Initiatives","text":"<ol> <li>Advanced Personalization</li> <li>Individual-level content customization</li> <li>Behavioral-based automation</li> <li>Predictive content optimization</li> <li> <p>Cross-channel personalization</p> </li> <li> <p>Collaboration Enhancements</p> </li> <li>Real-time collaborative editing</li> <li>Enhanced approval workflows</li> <li>Team performance analytics</li> <li> <p>Advanced permission models</p> </li> <li> <p>Integration Ecosystem</p> </li> <li>Expanded third-party integrations</li> <li>Custom integration framework</li> <li>Developer API enhancements</li> <li> <p>Webhook infrastructure improvements</p> </li> <li> <p>Emerging Technologies</p> </li> <li>Generative AI content creation</li> <li>Predictive analytics enhancement</li> <li>Voice interface capabilities</li> <li>Augmented reality previews</li> </ol> <p>This enhancement plan is maintained by the Maily Engineering Team. For questions or suggestions, contact engineering@maily.com.</p>"},{"location":"enhancement-tools-reference/","title":"Maily Enhancement Tools Reference","text":"<p>This document provides detailed information about the recommended tools and technologies for enhancing the Maily platform, including their features, benefits, and integration points.</p>"},{"location":"enhancement-tools-reference/#1-security-compliance-tools","title":"1. Security &amp; Compliance Tools","text":""},{"location":"enhancement-tools-reference/#11-container-security-scanning","title":"1.1 Container Security Scanning","text":""},{"location":"enhancement-tools-reference/#trivy","title":"Trivy","text":"<ul> <li>Description: A comprehensive vulnerability scanner for containers and other artifacts</li> <li>Features:</li> <li>Detects vulnerabilities in container images</li> <li>Scans filesystem for vulnerabilities</li> <li>Detects misconfigurations in Kubernetes, Terraform, and more</li> <li>Integration Point: GitHub Actions workflow for CI/CD pipeline</li> <li>Documentation: https://aquasecurity.github.io/trivy/</li> </ul>"},{"location":"enhancement-tools-reference/#snyk","title":"Snyk","text":"<ul> <li>Description: Security platform for finding and fixing vulnerabilities in dependencies</li> <li>Features:</li> <li>Scans dependencies for known vulnerabilities</li> <li>Provides remediation advice</li> <li>Monitors repositories for new vulnerabilities</li> <li>Integration Point: GitHub Actions workflow for CI/CD pipeline</li> <li>Documentation: https://docs.snyk.io/</li> </ul>"},{"location":"enhancement-tools-reference/#owasp-zap","title":"OWASP ZAP","text":"<ul> <li>Description: Web application security scanner</li> <li>Features:</li> <li>Automated scanning for vulnerabilities</li> <li>API scanning</li> <li>Active and passive scanning modes</li> <li>Integration Point: GitHub Actions workflow for CI/CD pipeline</li> <li>Documentation: https://www.zaproxy.org/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#sonarqube","title":"SonarQube","text":"<ul> <li>Description: Static code analysis tool for code quality and security</li> <li>Features:</li> <li>Detects code smells, bugs, and vulnerabilities</li> <li>Enforces coding standards</li> <li>Tracks code coverage</li> <li>Integration Point: GitHub Actions workflow for CI/CD pipeline</li> <li>Documentation: https://docs.sonarqube.org/</li> </ul>"},{"location":"enhancement-tools-reference/#12-secrets-management","title":"1.2 Secrets Management","text":""},{"location":"enhancement-tools-reference/#hashicorp-vault","title":"HashiCorp Vault","text":"<ul> <li>Description: Secrets management, encryption, and privileged access management</li> <li>Features:</li> <li>Dynamic secrets generation</li> <li>Encryption as a service</li> <li>Leasing and renewal of secrets</li> <li>Integration Point: Kubernetes via Vault Kubernetes Auth Method</li> <li>Documentation: https://developer.hashicorp.com/vault/docs</li> </ul>"},{"location":"enhancement-tools-reference/#13-policy-enforcement","title":"1.3 Policy Enforcement","text":""},{"location":"enhancement-tools-reference/#open-policy-agent-opa","title":"Open Policy Agent (OPA)","text":"<ul> <li>Description: Policy-based control for cloud native environments</li> <li>Features:</li> <li>Unified policy language (Rego)</li> <li>Decoupled policy from code</li> <li>Extensible policy framework</li> <li>Integration Point: Kubernetes via OPA Gatekeeper</li> <li>Documentation: https://www.openpolicyagent.org/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#kyverno","title":"Kyverno","text":"<ul> <li>Description: Kubernetes-native policy management</li> <li>Features:</li> <li>No new language to learn (uses YAML)</li> <li>Validates, mutates, and generates resources</li> <li>Policy reports for compliance</li> <li>Integration Point: Kubernetes as an admission controller</li> <li>Documentation: https://kyverno.io/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#14-authentication-authorization","title":"1.4 Authentication &amp; Authorization","text":""},{"location":"enhancement-tools-reference/#auth0","title":"Auth0","text":"<ul> <li>Description: Identity platform for authentication and authorization</li> <li>Features:</li> <li>Single sign-on</li> <li>Multi-factor authentication</li> <li>Social login</li> <li>Integration Point: API and frontend via Auth0 SDKs</li> <li>Documentation: https://auth0.com/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#2-infrastructure-scalability-tools","title":"2. Infrastructure &amp; Scalability Tools","text":""},{"location":"enhancement-tools-reference/#21-multi-region-deployment","title":"2.1 Multi-Region Deployment","text":""},{"location":"enhancement-tools-reference/#aws-app-mesh","title":"AWS App Mesh","text":"<ul> <li>Description: Service mesh for microservices</li> <li>Features:</li> <li>Traffic routing</li> <li>Service discovery</li> <li>Observability</li> <li>Integration Point: EKS via App Mesh Controller for Kubernetes</li> <li>Documentation: https://docs.aws.amazon.com/app-mesh/</li> </ul>"},{"location":"enhancement-tools-reference/#aws-global-accelerator","title":"AWS Global Accelerator","text":"<ul> <li>Description: Networking service for global traffic management</li> <li>Features:</li> <li>Anycast IP addresses</li> <li>Traffic distribution</li> <li>Health checking</li> <li>Integration Point: AWS infrastructure via Terraform</li> <li>Documentation: https://docs.aws.amazon.com/global-accelerator/</li> </ul>"},{"location":"enhancement-tools-reference/#22-edge-computing","title":"2.2 Edge Computing","text":""},{"location":"enhancement-tools-reference/#cloudflare-workers","title":"Cloudflare Workers","text":"<ul> <li>Description: Serverless execution environment at the edge</li> <li>Features:</li> <li>JavaScript/WebAssembly runtime</li> <li>Low latency</li> <li>Global distribution</li> <li>Integration Point: API edge caching layer</li> <li>Documentation: https://developers.cloudflare.com/workers/</li> </ul>"},{"location":"enhancement-tools-reference/#cloudflare-kv","title":"Cloudflare KV","text":"<ul> <li>Description: Key-value storage at the edge</li> <li>Features:</li> <li>Low-latency access</li> <li>Global distribution</li> <li>Eventual consistency</li> <li>Integration Point: Cloudflare Workers</li> <li>Documentation: https://developers.cloudflare.com/workers/runtime-apis/kv/</li> </ul>"},{"location":"enhancement-tools-reference/#23-database-optimization","title":"2.3 Database Optimization","text":""},{"location":"enhancement-tools-reference/#pgbouncer","title":"PgBouncer","text":"<ul> <li>Description: Connection pooler for PostgreSQL</li> <li>Features:</li> <li>Connection pooling</li> <li>Query caching</li> <li>Connection limiting</li> <li>Integration Point: PostgreSQL deployment</li> <li>Documentation: https://www.pgbouncer.org/usage.html</li> </ul>"},{"location":"enhancement-tools-reference/#vitess","title":"Vitess","text":"<ul> <li>Description: Database clustering system for horizontal scaling of MySQL/PostgreSQL</li> <li>Features:</li> <li>Horizontal sharding</li> <li>Connection pooling</li> <li>Query routing</li> <li>Integration Point: Database deployment</li> <li>Documentation: https://vitess.io/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#24-caching-strategy","title":"2.4 Caching Strategy","text":""},{"location":"enhancement-tools-reference/#redis-cluster","title":"Redis Cluster","text":"<ul> <li>Description: Distributed implementation of Redis</li> <li>Features:</li> <li>Horizontal scaling</li> <li>Automatic sharding</li> <li>Linear scalability</li> <li>Integration Point: Backend services via Redis client</li> <li>Documentation: https://redis.io/docs/management/scaling/</li> </ul>"},{"location":"enhancement-tools-reference/#redis-sentinel","title":"Redis Sentinel","text":"<ul> <li>Description: High availability for Redis</li> <li>Features:</li> <li>Monitoring</li> <li>Automatic failover</li> <li>Configuration provider</li> <li>Integration Point: Redis Cluster deployment</li> <li>Documentation: https://redis.io/docs/management/sentinel/</li> </ul>"},{"location":"enhancement-tools-reference/#3-ai-ml-tools","title":"3. AI &amp; ML Tools","text":""},{"location":"enhancement-tools-reference/#31-model-versioning-registry","title":"3.1 Model Versioning &amp; Registry","text":""},{"location":"enhancement-tools-reference/#weights-biases","title":"Weights &amp; Biases","text":"<ul> <li>Description: MLOps platform for experiment tracking</li> <li>Features:</li> <li>Experiment tracking</li> <li>Model registry</li> <li>Dataset versioning</li> <li>Integration Point: AI service via Python SDK</li> <li>Documentation: https://docs.wandb.ai/</li> </ul>"},{"location":"enhancement-tools-reference/#dvc-data-version-control","title":"DVC (Data Version Control)","text":"<ul> <li>Description: Version control system for ML projects</li> <li>Features:</li> <li>Data versioning</li> <li>Model versioning</li> <li>Pipeline tracking</li> <li>Integration Point: AI service via Python SDK</li> <li>Documentation: https://dvc.org/doc</li> </ul>"},{"location":"enhancement-tools-reference/#32-ai-observability","title":"3.2 AI Observability","text":""},{"location":"enhancement-tools-reference/#arize-ai","title":"Arize AI","text":"<ul> <li>Description: ML observability platform</li> <li>Features:</li> <li>Model performance monitoring</li> <li>Data drift detection</li> <li>Explainability</li> <li>Integration Point: AI service via Python SDK</li> <li>Documentation: https://docs.arize.com/</li> </ul>"},{"location":"enhancement-tools-reference/#langfuse","title":"Langfuse","text":"<ul> <li>Description: Observability and analytics for LLM applications</li> <li>Features:</li> <li>Tracing</li> <li>Prompt management</li> <li>Cost tracking</li> <li>Integration Point: AI service via Python SDK (already integrated)</li> <li>Documentation: https://langfuse.com/docs</li> </ul>"},{"location":"enhancement-tools-reference/#33-advanced-ai-models","title":"3.3 Advanced AI Models","text":""},{"location":"enhancement-tools-reference/#anthropic-claude-3-opus","title":"Anthropic Claude 3 Opus","text":"<ul> <li>Description: Advanced large language model</li> <li>Features:</li> <li>Advanced reasoning</li> <li>Long context window</li> <li>Multimodal capabilities</li> <li>Integration Point: AI service via API</li> <li>Documentation: https://docs.anthropic.com/claude/</li> </ul>"},{"location":"enhancement-tools-reference/#stability-ai","title":"Stability AI","text":"<ul> <li>Description: Image generation models</li> <li>Features:</li> <li>High-quality image generation</li> <li>Style control</li> <li>Text-to-image capabilities</li> <li>Integration Point: AI service via API</li> <li>Documentation: https://platform.stability.ai/docs/api-reference</li> </ul>"},{"location":"enhancement-tools-reference/#34-ai-cost-management","title":"3.4 AI Cost Management","text":""},{"location":"enhancement-tools-reference/#helicone","title":"Helicone","text":"<ul> <li>Description: LLM observability and cost management platform</li> <li>Features:</li> <li>Cost tracking</li> <li>Request caching</li> <li>Rate limiting</li> <li>Integration Point: AI service via API proxy</li> <li>Documentation: https://docs.helicone.ai/</li> </ul>"},{"location":"enhancement-tools-reference/#litellm","title":"LiteLLM","text":"<ul> <li>Description: LLM proxy for routing and cost optimization</li> <li>Features:</li> <li>Model routing</li> <li>Fallback handling</li> <li>Cost tracking</li> <li>Integration Point: AI service via Python SDK</li> <li>Documentation: https://docs.litellm.ai/</li> </ul>"},{"location":"enhancement-tools-reference/#4-developer-experience-tools","title":"4. Developer Experience Tools","text":""},{"location":"enhancement-tools-reference/#41-frontend-framework","title":"4.1 Frontend Framework","text":""},{"location":"enhancement-tools-reference/#nextjs-app-router","title":"Next.js App Router","text":"<ul> <li>Description: React framework with new routing system</li> <li>Features:</li> <li>Server components</li> <li>Streaming</li> <li>Nested layouts</li> <li>Integration Point: Frontend application</li> <li>Documentation: https://nextjs.org/docs</li> </ul>"},{"location":"enhancement-tools-reference/#42-testing","title":"4.2 Testing","text":""},{"location":"enhancement-tools-reference/#vitest","title":"Vitest","text":"<ul> <li>Description: Fast unit testing framework</li> <li>Features:</li> <li>Fast execution</li> <li>ESM support</li> <li>Watch mode</li> <li>Integration Point: Frontend and backend tests</li> <li>Documentation: https://vitest.dev/guide/</li> </ul>"},{"location":"enhancement-tools-reference/#playwright","title":"Playwright","text":"<ul> <li>Description: End-to-end testing framework</li> <li>Features:</li> <li>Cross-browser testing</li> <li>Mobile testing</li> <li>Visual testing</li> <li>Integration Point: End-to-end tests</li> <li>Documentation: https://playwright.dev/docs/intro</li> </ul>"},{"location":"enhancement-tools-reference/#msw-mock-service-worker","title":"MSW (Mock Service Worker)","text":"<ul> <li>Description: API mocking library</li> <li>Features:</li> <li>Request interception</li> <li>Response mocking</li> <li>Integration with testing frameworks</li> <li>Integration Point: Frontend and backend tests</li> <li>Documentation: https://mswjs.io/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#43-cicd","title":"4.3 CI/CD","text":""},{"location":"enhancement-tools-reference/#github-actions","title":"GitHub Actions","text":"<ul> <li>Description: CI/CD platform integrated with GitHub</li> <li>Features:</li> <li>Workflow automation</li> <li>Matrix builds</li> <li>Reusable workflows</li> <li>Integration Point: GitHub repository</li> <li>Documentation: https://docs.github.com/en/actions</li> </ul>"},{"location":"enhancement-tools-reference/#argocd","title":"ArgoCD","text":"<ul> <li>Description: GitOps continuous delivery tool for Kubernetes</li> <li>Features:</li> <li>Declarative GitOps</li> <li>Automated sync</li> <li>Rollback capabilities</li> <li>Integration Point: Kubernetes cluster</li> <li>Documentation: https://argo-cd.readthedocs.io/</li> </ul>"},{"location":"enhancement-tools-reference/#44-documentation","title":"4.4 Documentation","text":""},{"location":"enhancement-tools-reference/#docusaurus","title":"Docusaurus","text":"<ul> <li>Description: Documentation website generator</li> <li>Features:</li> <li>Markdown support</li> <li>Versioning</li> <li>Search</li> <li>Integration Point: Documentation site</li> <li>Documentation: https://docusaurus.io/docs</li> </ul>"},{"location":"enhancement-tools-reference/#swagger","title":"Swagger","text":"<ul> <li>Description: API documentation tool</li> <li>Features:</li> <li>OpenAPI specification</li> <li>Interactive documentation</li> <li>Code generation</li> <li>Integration Point: API documentation</li> <li>Documentation: https://swagger.io/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#5-monitoring-observability-tools","title":"5. Monitoring &amp; Observability Tools","text":""},{"location":"enhancement-tools-reference/#51-distributed-tracing","title":"5.1 Distributed Tracing","text":""},{"location":"enhancement-tools-reference/#opentelemetry","title":"OpenTelemetry","text":"<ul> <li>Description: Observability framework</li> <li>Features:</li> <li>Distributed tracing</li> <li>Metrics collection</li> <li>Context propagation</li> <li>Integration Point: Backend services</li> <li>Documentation: https://opentelemetry.io/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#grafana-tempo","title":"Grafana Tempo","text":"<ul> <li>Description: Distributed tracing backend</li> <li>Features:</li> <li>Trace visualization</li> <li>Integration with Grafana</li> <li>High-scale trace storage</li> <li>Integration Point: Monitoring infrastructure</li> <li>Documentation: https://grafana.com/docs/tempo/latest/</li> </ul>"},{"location":"enhancement-tools-reference/#52-metrics-collection","title":"5.2 Metrics Collection","text":""},{"location":"enhancement-tools-reference/#prometheus","title":"Prometheus","text":"<ul> <li>Description: Monitoring system and time series database</li> <li>Features:</li> <li>Metrics collection</li> <li>Alerting</li> <li>PromQL query language</li> <li>Integration Point: Backend services</li> <li>Documentation: https://prometheus.io/docs/</li> </ul>"},{"location":"enhancement-tools-reference/#grafana","title":"Grafana","text":"<ul> <li>Description: Observability platform</li> <li>Features:</li> <li>Dashboards</li> <li>Alerting</li> <li>Data visualization</li> <li>Integration Point: Monitoring infrastructure</li> <li>Documentation: https://grafana.com/docs/grafana/latest/</li> </ul>"},{"location":"enhancement-tools-reference/#53-alerting","title":"5.3 Alerting","text":""},{"location":"enhancement-tools-reference/#alertmanager","title":"Alertmanager","text":"<ul> <li>Description: Alerting system for Prometheus</li> <li>Features:</li> <li>Alert grouping</li> <li>Routing</li> <li>Silencing</li> <li>Integration Point: Prometheus</li> <li>Documentation: https://prometheus.io/docs/alerting/latest/alertmanager/</li> </ul>"},{"location":"enhancement-tools-reference/#pagerduty","title":"PagerDuty","text":"<ul> <li>Description: Incident management platform</li> <li>Features:</li> <li>On-call scheduling</li> <li>Escalation policies</li> <li>Incident response</li> <li>Integration Point: Alertmanager</li> <li>Documentation: https://support.pagerduty.com/docs</li> </ul>"},{"location":"enhancement-tools-reference/#54-log-management","title":"5.4 Log Management","text":""},{"location":"enhancement-tools-reference/#grafana-loki","title":"Grafana Loki","text":"<ul> <li>Description: Log aggregation system</li> <li>Features:</li> <li>Log storage</li> <li>Log querying</li> <li>Integration with Grafana</li> <li>Integration Point: Backend services</li> <li>Documentation: https://grafana.com/docs/loki/latest/</li> </ul>"},{"location":"enhancement-tools-reference/#6-user-experience-tools","title":"6. User Experience Tools","text":""},{"location":"enhancement-tools-reference/#61-accessibility","title":"6.1 Accessibility","text":""},{"location":"enhancement-tools-reference/#axe","title":"Axe","text":"<ul> <li>Description: Accessibility testing engine</li> <li>Features:</li> <li>Automated testing</li> <li>WCAG compliance</li> <li>Integration with testing frameworks</li> <li>Integration Point: Frontend tests</li> <li>Documentation: https://github.com/dequelabs/axe-core</li> </ul>"},{"location":"enhancement-tools-reference/#react-aria","title":"React Aria","text":"<ul> <li>Description: Library of accessible UI primitives</li> <li>Features:</li> <li>Accessible components</li> <li>Keyboard navigation</li> <li>Screen reader support</li> <li>Integration Point: Frontend components</li> <li>Documentation: https://react-spectrum.adobe.com/react-aria/</li> </ul>"},{"location":"enhancement-tools-reference/#62-internationalization","title":"6.2 Internationalization","text":""},{"location":"enhancement-tools-reference/#next-intl","title":"next-intl","text":"<ul> <li>Description: Internationalization library for Next.js</li> <li>Features:</li> <li>Message formatting</li> <li>Pluralization</li> <li>Date and number formatting</li> <li>Integration Point: Frontend application</li> <li>Documentation: https://next-intl-docs.vercel.app/</li> </ul>"},{"location":"enhancement-tools-reference/#crowdin","title":"Crowdin","text":"<ul> <li>Description: Translation management platform</li> <li>Features:</li> <li>Translation management</li> <li>Collaboration</li> <li>Integration with CI/CD</li> <li>Integration Point: Translation workflow</li> <li>Documentation: https://support.crowdin.com/</li> </ul>"},{"location":"enhancement-tools-reference/#63-performance","title":"6.3 Performance","text":""},{"location":"enhancement-tools-reference/#lighthouse","title":"Lighthouse","text":"<ul> <li>Description: Web performance testing tool</li> <li>Features:</li> <li>Performance scoring</li> <li>Accessibility testing</li> <li>Best practices</li> <li>Integration Point: CI/CD pipeline</li> <li>Documentation: https://developer.chrome.com/docs/lighthouse/</li> </ul>"},{"location":"enhancement-tools-reference/#webpack-bundle-analyzer","title":"Webpack Bundle Analyzer","text":"<ul> <li>Description: Webpack plugin for bundle analysis</li> <li>Features:</li> <li>Bundle visualization</li> <li>Size analysis</li> <li>Optimization suggestions</li> <li>Integration Point: Frontend build process</li> <li>Documentation: https://github.com/webpack-contrib/webpack-bundle-analyzer</li> </ul>"},{"location":"frontend-apps/","title":"Maily Frontend Applications","text":"<p>Last updated: March 4, 2025</p>"},{"location":"frontend-apps/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Application Architecture</li> <li>Core Applications</li> <li>Marketing Dashboard</li> <li>Email Campaign Manager</li> <li>Audience Manager</li> <li>Analytics Platform</li> <li>Supporting Applications</li> <li>Admin Portal</li> <li>Design System Showcase</li> <li>Extension Marketplace</li> <li>Developer Portal</li> <li>Development Workflow</li> <li>Deployment Strategy</li> <li>Performance Optimization</li> <li>Accessibility Compliance</li> </ul>"},{"location":"frontend-apps/#overview","title":"Overview","text":"<p>Maily's frontend ecosystem consists of several Next.js applications designed to provide specialized functionality for different user roles and use cases. This document provides comprehensive documentation for all frontend applications within the Maily platform.</p> <p>Our applications are built on a shared foundation of UI components, utilities, and services, providing a consistent user experience while maintaining separation of concerns between different functional areas.</p>"},{"location":"frontend-apps/#application-architecture","title":"Application Architecture","text":"<p>All Maily frontend applications follow a consistent architectural pattern:</p>"},{"location":"frontend-apps/#technology-stack","title":"Technology Stack","text":"<ul> <li>Framework: Next.js 14+ with App Router</li> <li>UI Library: React 18+</li> <li>State Management: React Context API, Zustand, and React Query</li> <li>Styling: Tailwind CSS with CSS Modules</li> <li>API Communication: GraphQL with Apollo Client</li> <li>Form Management: React Hook Form with Zod validation</li> <li>Internationalization: next-intl</li> <li>Testing: Vitest, React Testing Library, and Playwright</li> </ul>"},{"location":"frontend-apps/#architectural-principles","title":"Architectural Principles","text":"<ol> <li>Component-Driven Development: Building interfaces from small, reusable components</li> <li>Server-First Approach: Leveraging React Server Components for performance</li> <li>Progressive Enhancement: Ensuring functionality with and without JavaScript</li> <li>Responsive Design: Supporting all device types and screen sizes</li> <li>Accessibility First: Ensuring WCAG 2.1 AA compliance from the beginning</li> <li>Performance Budgets: Setting and enforcing strict performance metrics</li> <li>Type Safety: Comprehensive TypeScript typing throughout the codebase</li> </ol>"},{"location":"frontend-apps/#folder-structure","title":"Folder Structure","text":"<p>All applications follow a standardized project structure: <pre><code>\u251c\u2500\u2500 app/                  # Next.js App Router structure\n\u2502   \u251c\u2500\u2500 [locale]/         # Internationalization root\n\u2502   \u2502   \u251c\u2500\u2500 layout.tsx    # Root layout with providers\n\u2502   \u2502   \u251c\u2500\u2500 page.tsx      # Home page\n\u2502   \u2502   \u251c\u2500\u2500 (routes)/     # Grouped routes\n\u251c\u2500\u2500 components/           # Shared components\n\u2502   \u251c\u2500\u2500 ui/               # Primitive UI components\n\u2502   \u251c\u2500\u2500 features/         # Feature-specific components\n\u2502   \u251c\u2500\u2500 layouts/          # Layout components\n\u251c\u2500\u2500 lib/                  # Shared utilities\n\u2502   \u251c\u2500\u2500 api/              # API client and hooks\n\u2502   \u251c\u2500\u2500 utils/            # Utility functions\n\u2502   \u251c\u2500\u2500 hooks/            # Custom hooks\n\u251c\u2500\u2500 public/               # Static assets\n\u251c\u2500\u2500 styles/               # Global styles\n\u251c\u2500\u2500 middleware.ts         # Next.js middleware\n\u251c\u2500\u2500 next.config.js        # Next.js configuration\n\u251c\u2500\u2500 package.json          # Dependencies and scripts\n</code></pre></p>"},{"location":"frontend-apps/#core-applications","title":"Core Applications","text":""},{"location":"frontend-apps/#marketing-dashboard","title":"Marketing Dashboard","text":"<p>Purpose: Centralized dashboard for monitoring and managing marketing activities.</p> <p>URL: https://dashboard.maily.example.com</p> <p>Primary Users: Marketing managers, campaign managers, and content creators</p> <p>Key Features: - Dashboard Overview: KPI summary and activity feeds - Campaign Management: Campaign creation, editing, and scheduling - Content Calendar: Visual calendar of scheduled campaigns - Team Collaboration: Commenting, approval workflows, and task assignments - Performance Metrics: Real-time and historical campaign performance - AI Insights: AI-generated recommendations and content suggestions</p> <p>Technical Details: - Authentication: JWT-based authentication with session management - Authorization: Role-based access control (Admin, Editor, Viewer) - Key Integrations:   - Analytics Service for performance data   - AI Service for content recommendations   - Email Service for campaign delivery   - Audience Service for targeting</p> <p>Development Status: Production (v3.2.1)</p> <p>Deployment Strategy: Weekly releases on Tuesdays with daily hotfix capability</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/charts</code> - <code>@maily/api-client</code> - <code>@maily/hooks</code> - <code>@maily/email-editor</code></p> <p>Key Routes: - <code>/dashboard</code>: Main dashboard view - <code>/campaigns</code>: Campaign listing and management - <code>/campaigns/[id]</code>: Campaign detail and editing - <code>/calendar</code>: Content calendar view - <code>/analytics</code>: Performance analytics - <code>/templates</code>: Email template management</p> <p>State Management: - Global app state with Zustand - Server state with React Query - Form state with React Hook Form - UI state with local React state</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#email-campaign-manager","title":"Email Campaign Manager","text":"<p>Purpose: Specialized application for creating, managing, and analyzing email campaigns.</p> <p>URL: https://campaigns.maily.example.com</p> <p>Primary Users: Email marketers, content creators, and campaign managers</p> <p>Key Features: - Campaign Creation: Multi-step campaign creation workflow - Email Editor: WYSIWYG editor with AI assistance - Template Management: Library of reusable templates - A/B Testing: Create and analyze variant performance - Automated Workflows: Multi-touch email sequences - Preview &amp; Testing: Device preview and spam testing - Performance Analysis: Deep campaign performance analytics</p> <p>Technical Details: - Authentication: Shared authentication with Marketing Dashboard - Authorization: Campaign-level permission model - Key Integrations:   - Email Service for campaign delivery   - AI Service for content generation   - Analytics Service for performance tracking   - Audience Service for list management</p> <p>Development Status: Production (v2.8.3)</p> <p>Deployment Strategy: Bi-weekly releases with automated smoke testing</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/forms</code> - <code>@maily/email-editor</code> - <code>@maily/api-client</code> - <code>@maily/charts</code></p> <p>Key Routes: - <code>/campaigns</code>: Campaign listing - <code>/campaigns/new</code>: Campaign creation wizard - <code>/campaigns/[id]</code>: Campaign details and editing - <code>/campaigns/[id]/analytics</code>: Campaign-specific analytics - <code>/templates</code>: Template management - <code>/templates/[id]</code>: Template editor - <code>/automations</code>: Automated workflow management</p> <p>State Management: - Campaign editor state with custom Zustand store - API data with React Query - Complex form state with React Hook Form and Zod validation</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#audience-manager","title":"Audience Manager","text":"<p>Purpose: Advanced audience segmentation and management platform.</p> <p>URL: https://audience.maily.example.com</p> <p>Primary Users: Marketing strategists, audience managers, and data analysts</p> <p>Key Features: - Contact Management: Importing, exporting, and managing contacts - Segment Builder: Visual segment creation with complex criteria - Audience Insights: Demographic and behavioral analytics - List Management: Static and dynamic list creation - Subscription Management: Preference centers and opt-out management - Data Enrichment: AI-powered contact data enhancement - Compliance Tools: GDPR, CCPA, and CAN-SPAM compliance utilities</p> <p>Technical Details: - Authentication: Shared authentication with core apps - Authorization: Data-level access control - Key Integrations:   - Audience Service for contact data   - Analytics Service for behavioral data   - AI Service for segmentation assistance   - Multiple import/export connectors</p> <p>Development Status: Production (v2.4.0)</p> <p>Deployment Strategy: Monthly releases with feature flags for gradual rollout</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/forms</code> - <code>@maily/charts</code> - <code>@maily/api-client</code> - <code>@maily/hooks</code></p> <p>Key Routes: - <code>/contacts</code>: Contact database management - <code>/segments</code>: Segment listing and management - <code>/segments/builder</code>: Visual segment builder - <code>/lists</code>: List management - <code>/imports</code>: Data import wizards - <code>/compliance</code>: Compliance tools and reports - <code>/insights</code>: Audience analytics and insights</p> <p>State Management: - Segment builder uses custom reducer pattern - Complex filters state with specialized store - Form handling with React Hook Form</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#analytics-platform","title":"Analytics Platform","text":"<p>Purpose: Comprehensive analytics and reporting platform for marketing performance.</p> <p>URL: https://analytics.maily.example.com</p> <p>Primary Users: Marketing analysts, business intelligence teams, and marketing managers</p> <p>Key Features: - Performance Dashboards: Customizable metric dashboards - Campaign Analytics: Detailed campaign performance metrics - Audience Analytics: Contact engagement and demographic data - Funnel Analysis: Conversion path analysis and optimization - Goal Tracking: Custom goal definition and tracking - Report Builder: Customizable report generation - Data Export: Export and integration with other analytics tools - Predictive Analytics: AI-powered performance forecasting</p> <p>Technical Details: - Authentication: Shared authentication with core apps - Authorization: Dashboard and report-level permissions - Key Integrations:   - Analytics Service for data retrieval   - Email Service for campaign data   - Audience Service for contact data   - AI Service for predictions and insights</p> <p>Development Status: Production (v2.1.2)</p> <p>Deployment Strategy: Monthly releases with preview environment for testing</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/charts</code> - <code>@maily/api-client</code> - <code>@maily/hooks</code> - <code>@maily/utils</code></p> <p>Key Routes: - <code>/dashboards</code>: Dashboard listing and management - <code>/dashboards/[id]</code>: Individual dashboard view - <code>/reports</code>: Report management - <code>/reports/builder</code>: Custom report builder - <code>/campaigns</code>: Campaign performance analysis - <code>/audience</code>: Audience engagement analysis - <code>/goals</code>: Goal tracking and conversion analysis - <code>/export</code>: Data export and integration</p> <p>State Management: - Dashboard configuration with persistent state - Chart configuration with specialized stores - Data filtering with URL parameters for shareable states</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#supporting-applications","title":"Supporting Applications","text":""},{"location":"frontend-apps/#admin-portal","title":"Admin Portal","text":"<p>Purpose: Administrative control panel for platform configuration and management.</p> <p>URL: https://admin.maily.example.com</p> <p>Primary Users: Platform administrators, IT managers, and support staff</p> <p>Key Features: - User Management: User creation, permissions, and access control - Organization Settings: Organization-level configuration - Billing &amp; Subscription: Subscription management and billing - System Health: Platform health monitoring - Audit Logs: Security and activity audit logging - Integration Management: Third-party integration setup - Feature Configuration: Feature flag management</p> <p>Technical Details: - Authentication: Admin-specific authentication with MFA - Authorization: Admin role hierarchy - Key Integrations:   - Auth Service for user management   - Billing Service for subscription data   - Monitoring Service for health data   - All core services for configuration</p> <p>Development Status: Production (v1.9.0)</p> <p>Deployment Strategy: Monthly releases with extensive testing</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/forms</code> - <code>@maily/api-client</code> - <code>@maily/hooks</code> - <code>@maily/utils</code></p> <p>Key Routes: - <code>/users</code>: User management - <code>/organizations</code>: Organization management - <code>/billing</code>: Billing and subscription management - <code>/integrations</code>: Third-party integration management - <code>/settings</code>: System configuration - <code>/logs</code>: Audit and activity logs - <code>/health</code>: System health monitoring</p> <p>State Management: - Admin state with specialized Zustand store - Authentication state with secure storage - Configuration forms with React Hook Form</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#design-system-showcase","title":"Design System Showcase","text":"<p>Purpose: Interactive documentation of the Maily design system and component library.</p> <p>URL: https://design.maily.example.com</p> <p>Primary Users: UI developers, designers, and product managers</p> <p>Key Features: - Component Browser: Interactive component gallery - Design Tokens: Visual display of design tokens - Implementation Guidelines: Usage documentation - Theme Explorer: Theme visualization and customization - Accessibility Guidelines: Accessibility documentation - Code Playground: Live component editing environment - Pattern Library: Common UI patterns and compositions</p> <p>Technical Details: - Authentication: Optional login for team members - Authorization: Public read access, team-only editing - Key Integrations:   - Design system packages   - GitHub for code examples   - Figma for design references</p> <p>Development Status: Production (v1.5.0)</p> <p>Deployment Strategy: Continuous deployment from main branch</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/forms</code> - <code>@maily/charts</code> - <code>@maily/hooks</code> - <code>prism-react-renderer</code> - <code>react-live</code></p> <p>Key Routes: - <code>/components</code>: Component library - <code>/components/[id]</code>: Individual component documentation - <code>/foundations</code>: Design foundations - <code>/tokens</code>: Design token explorer - <code>/patterns</code>: UI pattern library - <code>/playground</code>: Interactive code playground - <code>/accessibility</code>: Accessibility guidelines</p> <p>State Management: - Simple React state for UI interactions - Code editor state with specialized store</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#extension-marketplace","title":"Extension Marketplace","text":"<p>Purpose: Marketplace for discovering, installing, and managing Maily extensions.</p> <p>URL: https://extensions.maily.example.com</p> <p>Primary Users: Maily customers, integration developers, and partners</p> <p>Key Features: - Extension Discovery: Browsing and searching extensions - Extension Installation: One-click installation flow - Developer Tools: Extension development tools - Documentation: Extension usage guides - Ratings &amp; Reviews: Community feedback system - Extension Management: Managing installed extensions - Submission Process: Extension submission and approval</p> <p>Technical Details: - Authentication: Shared authentication with core apps - Authorization: Organization-based installation rights - Key Integrations:   - Extension Service for registry   - Billing Service for paid extensions   - GitHub for developer resources</p> <p>Development Status: Beta (v0.9.2)</p> <p>Deployment Strategy: Monthly releases with partner previews</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/forms</code> - <code>@maily/api-client</code> - <code>@maily/hooks</code> - <code>@maily/utils</code></p> <p>Key Routes: - <code>/discover</code>: Extension discovery - <code>/extensions/[id]</code>: Extension details - <code>/installed</code>: Installed extensions - <code>/develop</code>: Developer resources - <code>/submit</code>: Extension submission - <code>/docs</code>: Documentation center - <code>/account</code>: Developer account management</p> <p>State Management: - Installation state with global store - Search filters with URL parameters - Form state with React Hook Form</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#developer-portal","title":"Developer Portal","text":"<p>Purpose: Documentation and tools for developers building on the Maily platform.</p> <p>URL: https://developers.maily.example.com</p> <p>Primary Users: External developers, integration partners, and API users</p> <p>Key Features: - API Documentation: Comprehensive API references - SDK Documentation: Client library documentation - Quickstart Guides: Getting started tutorials - Sample Applications: Working code examples - Authentication Guide: Authentication implementation - Webhook Configuration: Webhook setup and testing - API Explorer: Interactive API testing tool - Change Log: API version history and changes</p> <p>Technical Details: - Authentication: Developer-specific authentication - Authorization: API key management - Key Integrations:   - GitHub for documentation source   - API gateway for API explorer   - SDK repositories</p> <p>Development Status: Production (v1.3.0)</p> <p>Deployment Strategy: Documentation updates with content versioning</p> <p>App-Specific Dependencies: - <code>@maily/ui</code> - <code>@maily/api-client</code> - <code>swagger-ui-react</code> - <code>prism-react-renderer</code> - <code>nextra</code></p> <p>Key Routes: - <code>/docs</code>: Documentation home - <code>/docs/api</code>: API reference - <code>/docs/sdks</code>: SDK documentation - <code>/guides</code>: Implementation guides - <code>/examples</code>: Sample applications - <code>/explorer</code>: API explorer tool - <code>/changelog</code>: API change history - <code>/support</code>: Developer support resources</p> <p>State Management: - Documentation state with MDX - API explorer with specialized state management - Code examples with syntax highlighting</p> <p>Application Screenshots:</p> <p></p>"},{"location":"frontend-apps/#development-workflow","title":"Development Workflow","text":""},{"location":"frontend-apps/#local-development","title":"Local Development","text":"<p>To set up a local development environment for any Maily frontend application:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/maily/[app-name].git\ncd [app-name]\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Set up environment variables:    <pre><code>cp .env.example .env.local\n# Edit .env.local with appropriate values\n</code></pre></p> </li> <li> <p>Start the development server:    <pre><code>pnpm dev\n</code></pre></p> </li> <li> <p>Access the application at http://localhost:3000</p> </li> </ol>"},{"location":"frontend-apps/#testing-strategy","title":"Testing Strategy","text":"<p>All frontend applications implement a comprehensive testing strategy:</p> <ul> <li>Unit Tests: Individual component and utility testing</li> <li>Integration Tests: Component interaction testing</li> <li>End-to-End Tests: Critical user flow testing</li> <li>Visual Regression Tests: UI appearance testing</li> <li>Accessibility Tests: A11y compliance testing</li> <li>Performance Tests: Load time and interaction testing</li> </ul> <p>Test commands: <pre><code># Run unit and integration tests\npnpm test\n\n# Run end-to-end tests\npnpm test:e2e\n\n# Run visual regression tests\npnpm test:visual\n\n# Run accessibility tests\npnpm test:a11y\n\n# Run performance tests\npnpm test:performance\n</code></pre></p>"},{"location":"frontend-apps/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>All frontend applications use a standardized CI/CD pipeline:</p> <ol> <li>Continuous Integration:</li> <li>Code linting and formatting</li> <li>Type checking</li> <li>Unit and integration tests</li> <li>Build verification</li> <li> <p>Bundle size analysis</p> </li> <li> <p>Continuous Delivery:</p> </li> <li>Automated deployment to staging</li> <li>End-to-end tests in staging</li> <li>Accessibility compliance checks</li> <li>Performance testing</li> <li> <p>Smoke tests</p> </li> <li> <p>Continuous Deployment:</p> </li> <li>Manual promotion to production</li> <li>Automated smoke tests post-deployment</li> <li>Rollback capability</li> <li>Feature flag control</li> <li>Monitoring alerts</li> </ol>"},{"location":"frontend-apps/#deployment-strategy","title":"Deployment Strategy","text":""},{"location":"frontend-apps/#environments","title":"Environments","text":"<p>All frontend applications are deployed to multiple environments:</p> <ul> <li>Development: CI branch deployments for feature testing</li> <li>Staging: Pre-production environment for QA and testing</li> <li>Production: User-facing production environment</li> </ul>"},{"location":"frontend-apps/#deployment-mechanism","title":"Deployment Mechanism","text":"<ul> <li>Infrastructure: Kubernetes with ArgoCD</li> <li>Hosting: AWS with CloudFront CDN</li> <li>Container: Docker containers with CI builds</li> <li>Configuration: Environment-specific configuration injection</li> <li>Scaling: Horizontal pod scaling based on load</li> </ul>"},{"location":"frontend-apps/#release-strategy","title":"Release Strategy","text":"<ul> <li>Release Cadence: Varies by application (weekly to monthly)</li> <li>Hotfix Process: Critical fixes bypass standard cycle</li> <li>Feature Flags: New features controlled by flags</li> <li>Rollout Strategy: Incremental rollout with monitoring</li> <li>Rollback Process: Automated rollback on error thresholds</li> </ul>"},{"location":"frontend-apps/#performance-optimization","title":"Performance Optimization","text":"<p>All frontend applications implement performance best practices:</p>"},{"location":"frontend-apps/#core-web-vitals","title":"Core Web Vitals","text":"<ul> <li>LCP (Largest Contentful Paint): Target &lt; 2.5s (currently 1.2s)</li> <li>FID (First Input Delay): Target &lt; 100ms (currently 45ms)</li> <li>CLS (Cumulative Layout Shift): Target &lt; 0.1 (currently 0.05)</li> </ul>"},{"location":"frontend-apps/#optimization-techniques","title":"Optimization Techniques","text":"<ul> <li>Server Components: Leveraging React Server Components for reduced client JS</li> <li>Edge Computing: Deploying critical handlers to the edge</li> <li>Caching Strategy: Aggressive caching with revalidation</li> <li>Code Splitting: Route-based and component-based splitting</li> <li>Image Optimization: Using Next.js Image component with optimization</li> <li>Font Optimization: Self-hosted fonts with display swap</li> <li>Script Optimization: Third-party script loading optimization</li> <li>Static Generation: Pre-rendering where appropriate</li> </ul>"},{"location":"frontend-apps/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Real User Monitoring: Tracking real-world performance metrics</li> <li>Synthetic Monitoring: Regular performance testing</li> <li>Lighthouse CI: Performance regression prevention</li> <li>Bundle Analysis: Regular JS bundle size analysis</li> <li>Performance Budget: Enforced size and timing budgets</li> </ul>"},{"location":"frontend-apps/#accessibility-compliance","title":"Accessibility Compliance","text":"<p>All frontend applications maintain WCAG 2.1 AA compliance:</p>"},{"location":"frontend-apps/#accessibility-features","title":"Accessibility Features","text":"<ul> <li>Semantic HTML: Proper document structure</li> <li>Keyboard Navigation: Full keyboard control</li> <li>Screen Reader Support: ARIA attributes and label implementation</li> <li>Focus Management: Visible focus indicators and logical tab order</li> <li>Color Contrast: Minimum 4.5:1 contrast ratio</li> <li>Text Resizing: Support for 200% text size</li> <li>Reduced Motion: Support for prefers-reduced-motion</li> <li>Form Accessibility: Proper labeling and error states</li> <li>Alternative Text: Descriptive text for all images</li> </ul>"},{"location":"frontend-apps/#testing-and-monitoring","title":"Testing and Monitoring","text":"<ul> <li>Automated Testing: axe-core integration for automated testing</li> <li>Manual Testing: Regular audits with screen readers</li> <li>Accessibility Statement: Published accessibility commitment</li> <li>Feedback Mechanism: User feedback channel for accessibility issues</li> <li>Regular Audits: Quarterly professional accessibility audits</li> </ul>"},{"location":"frontend-packages/","title":"Frontend Packages Reference","text":"<p>Last updated: March 5, 2025</p>"},{"location":"frontend-packages/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Core Packages</li> <li>UI Component Library</li> <li>Hooks Library</li> <li>State Management</li> <li>Routing &amp; Navigation</li> <li>Feature Packages</li> <li>Email Editor</li> <li>Analytics Dashboard</li> <li>Campaign Manager</li> <li>Subscriber Management</li> <li>Utility Packages</li> <li>Validation &amp; Forms</li> <li>Internationalization</li> <li>Testing Utilities</li> <li>Date &amp; Time</li> <li>Development Workflow</li> <li>Dependencies &amp; Versioning</li> <li>Contributing</li> </ul>"},{"location":"frontend-packages/#overview","title":"Overview","text":"<p>The Maily frontend is built using a modular package architecture, organized into a monorepo structure using TurboRepo. This approach enables code sharing, consistent development practices, and independent versioning of packages.</p> <p>This reference document consolidates information about all frontend packages, providing a comprehensive guide for developers working with the frontend components of the Maily platform.</p>"},{"location":"frontend-packages/#core-packages","title":"Core Packages","text":""},{"location":"frontend-packages/#ui-component-library","title":"UI Component Library","text":"<p>Package: <code>@maily/ui</code> Repository: <code>packages/ui</code></p> <p>The UI Component Library provides reusable, accessible, and consistently styled React components. It serves as the foundation for the entire frontend UI, ensuring a cohesive design experience.</p>"},{"location":"frontend-packages/#key-components","title":"Key Components","text":"<ul> <li>Layout Components: <code>Container</code>, <code>Grid</code>, <code>Stack</code>, <code>Box</code></li> <li>Navigation Components: <code>Navbar</code>, <code>Sidebar</code>, <code>Breadcrumbs</code>, <code>Tabs</code></li> <li>Form Components: <code>Input</code>, <code>Select</code>, <code>Checkbox</code>, <code>RadioGroup</code>, <code>Switch</code>, <code>DatePicker</code></li> <li>Feedback Components: <code>Alert</code>, <code>Toast</code>, <code>Modal</code>, <code>Spinner</code></li> <li>Data Display: <code>Table</code>, <code>Card</code>, <code>Avatar</code>, <code>Badge</code>, <code>Tooltip</code></li> <li>Charts: <code>LineChart</code>, <code>BarChart</code>, <code>PieChart</code>, <code>AreaChart</code></li> </ul>"},{"location":"frontend-packages/#theme-system","title":"Theme System","text":"<p>The UI library uses a customizable theme system that supports:</p> <ul> <li>Color Modes: Light, dark, and high contrast</li> <li>Color Scales: Primary, secondary, accent, neutral</li> <li>Typography: Fonts, scales, and responsive adjustments</li> <li>Spacing: Consistent spacing scales</li> <li>Breakpoints: Standard responsive breakpoints</li> <li>Animations: Motion library for consistent animations</li> </ul>"},{"location":"frontend-packages/#usage-example","title":"Usage Example","text":"<pre><code>import {\n  Button,\n  Input,\n  Card,\n  Stack,\n  Heading,\n  Text\n} from '@maily/ui';\n\nfunction LoginForm() {\n  return (\n    &lt;Card variant=\"elevated\" padding=\"lg\"&gt;\n      &lt;Stack spacing=\"md\"&gt;\n        &lt;Heading size=\"lg\"&gt;Sign In&lt;/Heading&gt;\n        &lt;Text color=\"muted\"&gt;Enter your credentials to continue&lt;/Text&gt;\n\n        &lt;Input\n          label=\"Email\"\n          type=\"email\"\n          placeholder=\"you@example.com\"\n          required\n        /&gt;\n\n        &lt;Input\n          label=\"Password\"\n          type=\"password\"\n          placeholder=\"Your password\"\n          required\n        /&gt;\n\n        &lt;Button variant=\"primary\" size=\"lg\" width=\"full\"&gt;\n          Sign In\n        &lt;/Button&gt;\n      &lt;/Stack&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#accessibility","title":"Accessibility","text":"<p>All UI components are built with accessibility in mind:</p> <ul> <li>ARIA Attributes: Properly implemented ARIA roles and attributes</li> <li>Keyboard Navigation: Full keyboard support</li> <li>Focus Management: Visible focus indicators and logical focus order</li> <li>Screen Reader Support: Appropriate text alternatives and semantic markup</li> <li>Reduced Motion: Support for users with motion sensitivity</li> <li>Color Contrast: Meets WCAG AA standards for all text</li> </ul>"},{"location":"frontend-packages/#hooks-library","title":"Hooks Library","text":"<p>Package: <code>@maily/hooks</code> Repository: <code>packages/hooks</code></p> <p>The Hooks Library provides reusable React hooks that encapsulate common frontend logic, making it easier to implement complex behaviors consistently across the application.</p>"},{"location":"frontend-packages/#key-hooks","title":"Key Hooks","text":"<ul> <li>Data Fetching: <code>useQuery</code>, <code>useMutation</code>, <code>useInfiniteQuery</code></li> <li>Forms: <code>useForm</code>, <code>useField</code>, <code>useFormValidation</code></li> <li>UI: <code>useMediaQuery</code>, <code>useToast</code>, <code>useModal</code>, <code>useDisclosure</code></li> <li>Auth: <code>useAuth</code>, <code>usePermissions</code>, <code>useRole</code></li> <li>Features: <code>useCampaign</code>, <code>useTemplate</code>, <code>useSubscribers</code></li> <li>Utilities: <code>useDebounce</code>, <code>useThrottle</code>, <code>useLocalStorage</code>, <code>useEventListener</code></li> </ul>"},{"location":"frontend-packages/#usage-example_1","title":"Usage Example","text":"<pre><code>import { useQuery, useMutation } from '@maily/hooks';\nimport { Campaign } from '@maily/types';\n\nfunction CampaignList() {\n  // Fetch campaigns with automatic loading states and error handling\n  const {\n    data: campaigns,\n    isLoading,\n    error\n  } = useQuery&lt;Campaign[]&gt;('/api/campaigns');\n\n  // Create a mutation function for deleting campaigns\n  const {\n    mutate: deleteCampaign,\n    isLoading: isDeleting\n  } = useMutation('/api/campaigns', {\n    method: 'DELETE',\n    onSuccess: () =&gt; {\n      // Refresh campaigns after deletion\n      refetchCampaigns();\n    }\n  });\n\n  if (isLoading) return &lt;Spinner /&gt;;\n  if (error) return &lt;ErrorMessage error={error} /&gt;;\n\n  return (\n    &lt;Table&gt;\n      {/* Table implementation */}\n    &lt;/Table&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#state-management","title":"State Management","text":"<p>Package: <code>@maily/state</code> Repository: <code>packages/state</code></p> <p>The State Management package provides tools for managing global and local state across the application. It includes both client and server state management solutions.</p>"},{"location":"frontend-packages/#key-features","title":"Key Features","text":"<ul> <li>Global State: Global application state management</li> <li>Server State: Server state with caching, background updates, and optimistic UI</li> <li>Form State: Complex form state management</li> <li>Persistence: State persistence to localStorage</li> <li>Performance: Optimized rerenders and performance monitoring</li> <li>Dev Tools: Development tools for debugging state changes</li> </ul>"},{"location":"frontend-packages/#implementation-details","title":"Implementation Details","text":"<p>The package uses a combination of technologies:</p> <ul> <li>Zustand: For global UI state</li> <li>React Query: For server state</li> <li>Form Libraries: For form state</li> <li>Immer: For immutable state updates</li> <li>Local Storage: For state persistence</li> </ul>"},{"location":"frontend-packages/#usage-example_2","title":"Usage Example","text":"<pre><code>import { useAppStore } from '@maily/state';\nimport { Button } from '@maily/ui';\n\nfunction ThemeToggle() {\n  const { theme, setTheme } = useAppStore(state =&gt; ({\n    theme: state.theme,\n    setTheme: state.setTheme\n  }));\n\n  return (\n    &lt;Button\n      variant=\"ghost\"\n      onClick={() =&gt; setTheme(theme === 'light' ? 'dark' : 'light')}\n    &gt;\n      {theme === 'light' ? 'Dark Mode' : 'Light Mode'}\n    &lt;/Button&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#routing-navigation","title":"Routing &amp; Navigation","text":"<p>Package: <code>@maily/router</code> Repository: <code>packages/router</code></p> <p>The Routing &amp; Navigation package provides utilities for implementing consistent navigation across the application, including route definitions, guards, and transitions.</p>"},{"location":"frontend-packages/#key-features_1","title":"Key Features","text":"<ul> <li>Route Definitions: Type-safe route definitions</li> <li>Route Guards: Authentication and permission-based route guards</li> <li>Route Transitions: Smooth transitions between routes</li> <li>Deep Linking: Support for deep linking</li> <li>URL Parameters: Type-safe URL parameter handling</li> <li>History Management: Browser history management utilities</li> </ul>"},{"location":"frontend-packages/#usage-example_3","title":"Usage Example","text":"<pre><code>import { Route, Routes, Link, useParams } from '@maily/router';\nimport { requireAuth } from '@maily/auth';\n\n// Define routes with authentication guards\nconst routes = [\n  {\n    path: '/campaigns',\n    element: &lt;CampaignList /&gt;,\n    guard: requireAuth\n  },\n  {\n    path: '/campaigns/:id',\n    element: &lt;CampaignDetail /&gt;,\n    guard: requireAuth\n  },\n  {\n    path: '/login',\n    element: &lt;Login /&gt;\n  }\n];\n\nfunction Navigation() {\n  return (\n    &lt;nav&gt;\n      &lt;Link to=\"/campaigns\"&gt;Campaigns&lt;/Link&gt;\n      &lt;Link to=\"/subscribers\"&gt;Subscribers&lt;/Link&gt;\n    &lt;/nav&gt;\n  );\n}\n\nfunction CampaignDetail() {\n  // Type-safe params\n  const { id } = useParams&lt;{ id: string }&gt;();\n\n  // Rest of component\n}\n</code></pre>"},{"location":"frontend-packages/#feature-packages","title":"Feature Packages","text":""},{"location":"frontend-packages/#email-editor","title":"Email Editor","text":"<p>Package: <code>@maily/email-editor</code> Repository: <code>packages/email-editor</code></p> <p>The Email Editor package provides a comprehensive WYSIWYG editor for creating and editing email templates with drag-and-drop functionality.</p>"},{"location":"frontend-packages/#key-features_2","title":"Key Features","text":"<ul> <li>Block-Based Editor: Drag-and-drop block-based editing</li> <li>Responsive Design: Mobile and desktop preview modes</li> <li>Templates: Pre-built templates and template management</li> <li>Personalization: Dynamic personalization tags insertion</li> <li>Media Management: Image and media library integration</li> <li>Code View: HTML and CSS code editing mode</li> <li>AI Integration: AI-assisted content generation</li> </ul>"},{"location":"frontend-packages/#usage-example_4","title":"Usage Example","text":"<pre><code>import { EmailEditor, useEditorState } from '@maily/email-editor';\nimport { Button, Stack } from '@maily/ui';\n\nfunction EmailTemplateEditor({ templateId }) {\n  const {\n    editorState,\n    setContent,\n    saveTemplate,\n    isLoading\n  } = useEditorState(templateId);\n\n  return (\n    &lt;Stack spacing=\"md\"&gt;\n      &lt;div className=\"editor-container\"&gt;\n  &lt;EmailEditor\n          value={editorState.content}\n          onChange={setContent}\n          mediaLibrary={true}\n          personalizationTokens={true}\n          aiAssistant={true}\n        /&gt;\n      &lt;/div&gt;\n\n      &lt;Button\n        onClick={() =&gt; saveTemplate()}\n        disabled={isLoading}\n      &gt;\n        Save Template\n      &lt;/Button&gt;\n    &lt;/Stack&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#analytics-dashboard","title":"Analytics Dashboard","text":"<p>Package: <code>@maily/analytics</code> Repository: <code>packages/analytics</code></p> <p>The Analytics Dashboard package provides components and utilities for visualizing and analyzing email marketing data.</p>"},{"location":"frontend-packages/#key-features_3","title":"Key Features","text":"<ul> <li>Campaign Performance: Campaign performance visualizations</li> <li>Subscriber Insights: Subscriber growth and engagement analytics</li> <li>Email Metrics: Open rates, click rates, and conversion tracking</li> <li>Revenue Tracking: Revenue attribution and ROI calculation</li> <li>Interactive Charts: Interactive data visualizations</li> <li>Export Tools: Data export and reporting tools</li> <li>AI Insights: AI-generated insights and recommendations</li> </ul>"},{"location":"frontend-packages/#usage-example_5","title":"Usage Example","text":"<pre><code>import {\n  PerformanceOverview,\n  MetricCard,\n  CampaignComparisonChart\n} from '@maily/analytics';\nimport { Grid } from '@maily/ui';\n\nfunction DashboardPage() {\n  return (\n    &lt;div&gt;\n      &lt;PerformanceOverview period=\"last30Days\" /&gt;\n\n      &lt;Grid columns={3} gap=\"md\"&gt;\n    &lt;MetricCard\n      title=\"Open Rate\"\n          value=\"24.8%\"\n          trend=\"+2.1%\"\n          trendDirection=\"up\"\n    /&gt;\n    &lt;MetricCard\n      title=\"Click Rate\"\n          value=\"3.2%\"\n          trend=\"-0.5%\"\n          trendDirection=\"down\"\n        /&gt;\n        &lt;MetricCard\n          title=\"Revenue\"\n          value=\"$12,384\"\n          trend=\"+15%\"\n          trendDirection=\"up\"\n        /&gt;\n      &lt;/Grid&gt;\n\n      &lt;CampaignComparisonChart campaigns={['camp-1', 'camp-2', 'camp-3']} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#campaign-manager","title":"Campaign Manager","text":"<p>Package: <code>@maily/campaigns</code> Repository: <code>packages/campaigns</code></p> <p>The Campaign Manager package provides components and utilities for creating, scheduling, and managing email campaigns.</p>"},{"location":"frontend-packages/#key-features_4","title":"Key Features","text":"<ul> <li>Campaign Creation: Step-by-step campaign creation flow</li> <li>Audience Selection: Audience and segment selection tools</li> <li>Scheduling: Campaign scheduling and delivery options</li> <li>A/B Testing: A/B test creation and analysis</li> <li>Preview &amp; Testing: Email preview and test sending</li> <li>Campaign Status: Campaign status monitoring</li> <li>Performance Tracking: Real-time performance tracking</li> </ul>"},{"location":"frontend-packages/#usage-example_6","title":"Usage Example","text":"<pre><code>import {\n  CampaignCreator,\n  CampaignList,\n  CampaignDetail\n} from '@maily/campaigns';\nimport { Tabs } from '@maily/ui';\n\nfunction CampaignsPage() {\n  return (\n    &lt;Tabs&gt;\n      &lt;Tabs.Tab label=\"All Campaigns\"&gt;\n        &lt;CampaignList status=\"all\" /&gt;\n      &lt;/Tabs.Tab&gt;\n      &lt;Tabs.Tab label=\"Draft\"&gt;\n        &lt;CampaignList status=\"draft\" /&gt;\n      &lt;/Tabs.Tab&gt;\n      &lt;Tabs.Tab label=\"Scheduled\"&gt;\n        &lt;CampaignList status=\"scheduled\" /&gt;\n      &lt;/Tabs.Tab&gt;\n      &lt;Tabs.Tab label=\"Sent\"&gt;\n        &lt;CampaignList status=\"sent\" /&gt;\n      &lt;/Tabs.Tab&gt;\n      &lt;Tabs.Tab label=\"Create New\"&gt;\n        &lt;CampaignCreator /&gt;\n      &lt;/Tabs.Tab&gt;\n    &lt;/Tabs&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#subscriber-management","title":"Subscriber Management","text":"<p>Package: <code>@maily/subscribers</code> Repository: <code>packages/subscribers</code></p> <p>The Subscriber Management package provides components and utilities for managing subscribers, segments, and subscriber data.</p>"},{"location":"frontend-packages/#key-features_5","title":"Key Features","text":"<ul> <li>Subscriber CRUD: Subscriber creation, reading, updating, and deletion</li> <li>List Management: Subscriber list management</li> <li>Segmentation: Dynamic and static segmentation tools</li> <li>Import/Export: Subscriber import and export tools</li> <li>Profile Viewer: Subscriber profile viewing and editing</li> <li>Activity Tracking: Subscriber activity tracking</li> <li>Preference Management: Subscriber preference management</li> </ul>"},{"location":"frontend-packages/#usage-example_7","title":"Usage Example","text":"<pre><code>import {\n  SubscriberList,\n  SegmentBuilder,\n  ImportTool\n} from '@maily/subscribers';\nimport { Tabs } from '@maily/ui';\n\nfunction SubscribersPage() {\n  return (\n    &lt;Tabs&gt;\n      &lt;Tabs.Tab label=\"All Subscribers\"&gt;\n        &lt;SubscriberList /&gt;\n      &lt;/Tabs.Tab&gt;\n      &lt;Tabs.Tab label=\"Segments\"&gt;\n        &lt;SegmentBuilder /&gt;\n      &lt;/Tabs.Tab&gt;\n      &lt;Tabs.Tab label=\"Import\"&gt;\n        &lt;ImportTool /&gt;\n      &lt;/Tabs.Tab&gt;\n    &lt;/Tabs&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#utility-packages","title":"Utility Packages","text":""},{"location":"frontend-packages/#validation-forms","title":"Validation &amp; Forms","text":"<p>Package: <code>@maily/validation</code> Repository: <code>packages/validation</code></p> <p>The Validation &amp; Forms package provides tools for form validation, schema definition, and form state management.</p>"},{"location":"frontend-packages/#key-features_6","title":"Key Features","text":"<ul> <li>Schema Validation: Schema-based validation</li> <li>Form Generation: Form generation from schemas</li> <li>Error Handling: Consistent error handling and display</li> <li>Field Types: Support for all common field types</li> <li>Custom Validation: Custom validation rules</li> <li>Conditional Logic: Conditional form logic</li> </ul>"},{"location":"frontend-packages/#usage-example_8","title":"Usage Example","text":"<pre><code>import { createSchema, useValidatedForm, Field } from '@maily/validation';\nimport { Button, Stack } from '@maily/ui';\n\n// Define a schema for campaign creation\nconst campaignSchema = createSchema({\n  name: {\n    type: 'string',\n    required: true,\n    min: 3,\n    max: 100\n  },\n  subject: {\n    type: 'string',\n    required: true,\n    max: 150\n  },\n  fromEmail: {\n    type: 'string',\n    required: true,\n    format: 'email'\n  },\n  scheduledFor: {\n    type: 'date',\n    required: false,\n    min: 'now'\n  }\n});\n\nfunction CampaignForm({ onSubmit }) {\n  const {\n    values,\n    errors,\n    handleChange,\n    handleSubmit,\n    isValid\n  } = useValidatedForm({\n    schema: campaignSchema,\n    initialValues: {\n      name: '',\n      subject: '',\n      fromEmail: '',\n      scheduledFor: null\n    }\n  });\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;Stack spacing=\"md\"&gt;\n        &lt;Field\n          name=\"name\"\n          label=\"Campaign Name\"\n          value={values.name}\n          onChange={handleChange}\n          error={errors.name}\n        /&gt;\n\n        &lt;Field\n          name=\"subject\"\n          label=\"Email Subject\"\n          value={values.subject}\n          onChange={handleChange}\n          error={errors.subject}\n        /&gt;\n\n        &lt;Field\n          name=\"fromEmail\"\n          label=\"From Email\"\n          type=\"email\"\n          value={values.fromEmail}\n          onChange={handleChange}\n          error={errors.fromEmail}\n        /&gt;\n\n        &lt;Field\n          name=\"scheduledFor\"\n          label=\"Schedule For\"\n          type=\"datetime\"\n          value={values.scheduledFor}\n          onChange={handleChange}\n          error={errors.scheduledFor}\n        /&gt;\n\n        &lt;Button type=\"submit\" disabled={!isValid}&gt;\n          Create Campaign\n        &lt;/Button&gt;\n      &lt;/Stack&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#internationalization","title":"Internationalization","text":"<p>Package: <code>@maily/i18n</code> Repository: <code>packages/i18n</code></p> <p>The Internationalization package provides tools for translating the application into multiple languages and implementing locale-specific formatting.</p>"},{"location":"frontend-packages/#key-features_7","title":"Key Features","text":"<ul> <li>Translation: Text translation for multiple languages</li> <li>Pluralization: Support for pluralization rules</li> <li>Date/Time Formatting: Locale-specific date and time formatting</li> <li>Number Formatting: Locale-specific number formatting</li> <li>RTL Support: Support for right-to-left languages</li> <li>Language Detection: Automatic language detection</li> <li>Message Extraction: Automated message extraction from code</li> </ul>"},{"location":"frontend-packages/#usage-example_9","title":"Usage Example","text":"<pre><code>import { useTranslation, FormattedDate, FormattedNumber } from '@maily/i18n';\nimport { Text, Stack } from '@maily/ui';\n\nfunction CampaignStats({ campaign }) {\n  const { t } = useTranslation('campaigns');\n\n  return (\n    &lt;Stack spacing=\"sm\"&gt;\n      &lt;Text&gt;{t('stats.sent')}: {campaign.sentCount}&lt;/Text&gt;\n\n      &lt;Text&gt;\n        {t('stats.openRate')}:\n        &lt;FormattedNumber\n          value={campaign.openRate}\n          style=\"percent\"\n          maximumFractionDigits={1}\n        /&gt;\n      &lt;/Text&gt;\n\n      &lt;Text&gt;\n        {t('stats.sentDate')}:\n        &lt;FormattedDate\n          value={campaign.sentAt}\n          year=\"numeric\"\n          month=\"long\"\n          day=\"numeric\"\n        /&gt;\n      &lt;/Text&gt;\n\n      &lt;Text&gt;\n        {t('stats.revenue')}:\n        &lt;FormattedNumber\n          value={campaign.revenue}\n          style=\"currency\"\n          currency=\"USD\"\n        /&gt;\n      &lt;/Text&gt;\n    &lt;/Stack&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-packages/#testing-utilities","title":"Testing Utilities","text":"<p>Package: <code>@maily/testing</code> Repository: <code>packages/testing</code></p> <p>The Testing Utilities package provides tools for testing React components, hooks, and utilities consistently across the application.</p>"},{"location":"frontend-packages/#key-features_8","title":"Key Features","text":"<ul> <li>Component Testing: Utilities for testing React components</li> <li>Hook Testing: Utilities for testing React hooks</li> <li>Mocking: Consistent mocking utilities</li> <li>Test Data: Test data generators</li> <li>Visual Testing: Visual regression testing tools</li> <li>Accessibility Testing: Accessibility testing utilities</li> <li>Performance Testing: Component performance testing</li> </ul>"},{"location":"frontend-packages/#usage-example_10","title":"Usage Example","text":"<pre><code>import { render, screen, userEvent, waitFor } from '@maily/testing';\nimport { SubscriberForm } from '../SubscriberForm';\nimport { mockSubscriber, mockSubmitHandler } from './mocks';\n\ndescribe('SubscriberForm', () =&gt; {\n  it('submits the form with valid data', async () =&gt; {\n    // Render the component with test utilities\n    render(\n      &lt;SubscriberForm\n        initialData={mockSubscriber}\n        onSubmit={mockSubmitHandler}\n      /&gt;\n    );\n\n    // Interact with the form\n    await userEvent.type(\n      screen.getByLabelText('Email'),\n      'new-email@example.com'\n    );\n\n    await userEvent.click(screen.getByRole('button', { name: 'Save' }));\n\n    // Assert the expected behavior\n    await waitFor(() =&gt; {\n      expect(mockSubmitHandler).toHaveBeenCalledWith({\n        ...mockSubscriber,\n        email: 'new-email@example.com'\n      });\n    });\n  });\n\n  it('displays validation errors for invalid data', async () =&gt; {\n    // Test validation error case\n  });\n});\n</code></pre>"},{"location":"frontend-packages/#date-time","title":"Date &amp; Time","text":"<p>Package: <code>@maily/date-time</code> Repository: <code>packages/date-time</code></p> <p>The Date &amp; Time package provides utilities for working with dates, times, and timezones consistently across the application.</p>"},{"location":"frontend-packages/#key-features_9","title":"Key Features","text":"<ul> <li>Formatting: Consistent date and time formatting</li> <li>Parsing: Date and time parsing from various formats</li> <li>Timezone Handling: Timezone-aware date and time manipulation</li> <li>Relative Times: Relative time calculations and formatting</li> <li>Date Math: Date arithmetic and calculations</li> <li>Calendar Utilities: Calendar-related utilities</li> <li>Date Selection: Date selection and range selection utilities</li> </ul>"},{"location":"frontend-packages/#usage-example_11","title":"Usage Example","text":"<p>```tsx import { formatDate, parseDate, getRelativeTime, addDays } from '@maily/date-time';</p> <p>function DateDisplay({ isoString, timezone = 'America/New_York' }) {   // Parse the ISO string   const date = parseDate(isoString);</p> <p>// Format for display in the user's timezone   const formatted = formatDate(date, {     format: 'full',     timezone   });</p> <p>// Get the relative time (e.g., \"2 days ago\")   const relative = getRelativeTime(date);</p> <p>// Calculate a date in the future   const nextWeek = addDays(date, 7);   const nextWeekFormatted = formatDate(nextWeek, {     format: 'medium'   });</p> <pre><code> return (\n&lt;div&gt;\n  &lt;div&gt;Formatted: {formatted}&lt;/div&gt;\n  &lt;div&gt;Relative: {relative}&lt;/div&gt;\n  &lt;div&gt;Next week: {nextWeekFormatted}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>); } ```</p>"},{"location":"frontend-packages/#development-workflow","title":"Development Workflow","text":"<p>The development workflow for frontend packages follows these key principles:</p> <ol> <li>Local Development: Run <code>npm run dev</code> to start the development server</li> <li>Testing: Write unit tests for all components with <code>npm run test</code></li> <li>Building: Build packages with <code>npm run build</code></li> <li>Documentation: Document components in Storybook with <code>npm run storybook</code></li> <li>Versioning: Use changesets for versioning with <code>npm run changeset</code></li> </ol>"},{"location":"frontend-packages/#dependencies-versioning","title":"Dependencies &amp; Versioning","text":"<p>Frontend packages use a consistent set of dependencies:</p> <ul> <li>React: v18.2.0 for UI components</li> <li>TypeScript: v5.2.0 for type safety</li> <li>TailwindCSS: v3.3.0 for styling</li> <li>React Query: v5.0.0 for data fetching</li> <li>Zustand: v4.4.0 for state management</li> <li>Jest: v29.5.0 for testing</li> </ul> <p>All packages follow semantic versioning and use Changesets for version management.</p>"},{"location":"frontend-packages/#contributing","title":"Contributing","text":"<p>When contributing to frontend packages:</p> <ol> <li>Follow the code style guidelines</li> <li>Ensure all tests pass before submitting PR</li> <li>Document components and hooks with JSDoc comments</li> <li>Create Storybook stories for UI components</li> <li>Update the changelog using Changesets</li> </ol>"},{"location":"glossary-and-faq/","title":"Maily Glossary and FAQ","text":"<p>Last updated: March 4, 2025</p>"},{"location":"glossary-and-faq/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Frequently Asked Questions</li> <li>General Questions</li> <li>Technical Questions</li> <li>AI Capabilities</li> <li>Email Features</li> <li>Analytics and Reporting</li> <li>Integration and Extensibility</li> <li>Account and Billing</li> <li>Support and Resources</li> <li>Performance and Scalability</li> <li>Future of Maily</li> <li>Glossary</li> <li>A</li> <li>B</li> <li>C</li> <li>D</li> <li>E</li> <li>F</li> <li>G</li> <li>H</li> <li>I</li> <li>K</li> <li>L</li> <li>M</li> <li>O</li> <li>P</li> <li>R</li> <li>S</li> <li>T</li> <li>U</li> <li>V</li> <li>W</li> <li>Z</li> </ul>"},{"location":"glossary-and-faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"glossary-and-faq/#general-questions","title":"General Questions","text":""},{"location":"glossary-and-faq/#what-is-maily","title":"What is Maily?","text":"<p>Maily is an AI-driven email marketing platform designed to help businesses create, manage, and optimize email campaigns with advanced targeting, personalization, and analytics capabilities.</p>"},{"location":"glossary-and-faq/#what-makes-maily-different-from-other-email-marketing-platforms","title":"What makes Maily different from other email marketing platforms?","text":"<p>Maily differentiates itself through its advanced AI capabilities, including content generation, audience segmentation, send time optimization, and engagement prediction. Additionally, its modern architecture provides exceptional performance, scalability, and developer experience.</p>"},{"location":"glossary-and-faq/#what-types-of-businesses-is-maily-designed-for","title":"What types of businesses is Maily designed for?","text":"<p>Maily is designed for businesses of all sizes, from startups to enterprises, that need sophisticated email marketing capabilities. It's particularly well-suited for businesses that send high volumes of emails and need advanced personalization and analytics.</p>"},{"location":"glossary-and-faq/#is-maily-available-in-multiple-languages","title":"Is Maily available in multiple languages?","text":"<p>Yes, the Maily user interface is available in 12 languages, including English, Spanish, French, German, Japanese, Chinese, Arabic, and more. The platform also supports right-to-left (RTL) languages.</p>"},{"location":"glossary-and-faq/#technical-questions","title":"Technical Questions","text":""},{"location":"glossary-and-faq/#what-technologies-does-maily-use","title":"What technologies does Maily use?","text":"<p>Maily is built using a modern technology stack, including Next.js App Router for the frontend, GraphQL with Apollo Server for the API, PostgreSQL and Redis for data storage, and Kubernetes for orchestration. For AI capabilities, Maily uses Anthropic Claude 3, Stability AI, and custom-trained ML models. See our Tech Stack document for more details.</p>"},{"location":"glossary-and-faq/#is-maily-built-on-a-microservices-architecture","title":"Is Maily built on a microservices architecture?","text":"<p>Yes, Maily employs a microservices architecture with clearly defined service boundaries. This architecture enables independent scaling, deployment, and development of different components of the platform.</p>"},{"location":"glossary-and-faq/#how-does-maily-handle-data-security","title":"How does Maily handle data security?","text":"<p>Maily implements a comprehensive security strategy, including a zero trust architecture, mutual TLS for service communication, WAF rules, runtime application self-protection, and advanced authorization. All personally identifiable information (PII) is encrypted at rest and in transit.</p>"},{"location":"glossary-and-faq/#how-does-maily-ensure-compliance-with-privacy-regulations","title":"How does Maily ensure compliance with privacy regulations?","text":"<p>Maily is designed to be compliant with major privacy regulations including GDPR, CCPA, and CAN-SPAM. The platform provides features for consent management, data subject access requests, and the right to be forgotten.</p>"},{"location":"glossary-and-faq/#can-maily-be-self-hosted","title":"Can Maily be self-hosted?","text":"<p>Currently, Maily is offered primarily as a SaaS solution. However, for enterprise customers with specific requirements, we do offer a dedicated deployment option. Contact our sales team for more information.</p>"},{"location":"glossary-and-faq/#what-is-the-uptime-guarantee-for-maily","title":"What is the uptime guarantee for Maily?","text":"<p>Maily offers a 99.99% uptime SLA for all paid plans. Our multi-region deployment and resilient architecture help ensure high availability.</p>"},{"location":"glossary-and-faq/#ai-capabilities","title":"AI Capabilities","text":""},{"location":"glossary-and-faq/#what-ai-models-does-maily-use","title":"What AI models does Maily use?","text":"<p>Maily leverages several AI models, including Anthropic Claude 3 (Opus, Sonnet, and Haiku variants) for natural language tasks, custom-trained models for engagement prediction and segmentation, and Stability AI for image generation.</p>"},{"location":"glossary-and-faq/#how-does-maily-generate-email-content","title":"How does Maily generate email content?","text":"<p>Maily's content generation is powered by a RAG (Retrieval-Augmented Generation) system that combines Anthropic Claude 3 with domain-specific knowledge about email marketing best practices and your brand guidelines. The system can generate complete emails, suggest improvements to existing content, and create subject lines.</p>"},{"location":"glossary-and-faq/#can-maily-generate-images-for-emails","title":"Can Maily generate images for emails?","text":"<p>Yes, Maily can generate custom images for email campaigns based on text prompts. This feature is powered by Stability AI and integrates seamlessly with the email editor.</p>"},{"location":"glossary-and-faq/#how-accurate-are-mailys-engagement-predictions","title":"How accurate are Maily's engagement predictions?","text":"<p>Maily's engagement prediction models are regularly benchmarked against actual results and currently achieve an average accuracy of 97.3% in predicting open rates and 92.8% in predicting click-through rates.</p>"},{"location":"glossary-and-faq/#does-mailys-ai-require-training-on-my-data","title":"Does Maily's AI require training on my data?","text":"<p>No, Maily's core AI capabilities work out of the box without requiring training on your specific data. However, as you use the platform, the AI will learn from your campaigns' performance to provide more tailored recommendations and predictions.</p>"},{"location":"glossary-and-faq/#email-features","title":"Email Features","text":""},{"location":"glossary-and-faq/#what-types-of-email-campaigns-can-i-create-with-maily","title":"What types of email campaigns can I create with Maily?","text":"<p>Maily supports various campaign types, including one-time sends, recurring sends, automated triggers, multi-stage workflows, A/B tests, and personalized campaigns based on user behavior and preferences.</p>"},{"location":"glossary-and-faq/#how-does-maily-handle-email-deliverability","title":"How does Maily handle email deliverability?","text":"<p>Maily employs several strategies to maximize deliverability, including IP warming, reputation management, DKIM/SPF/DMARC authentication, bounce handling, and spam content analysis. These measures help ensure your emails reach recipients' inboxes.</p>"},{"location":"glossary-and-faq/#can-maily-send-transactional-emails","title":"Can Maily send transactional emails?","text":"<p>Yes, Maily provides a transactional email API for sending time-sensitive, operational emails such as password resets, order confirmations, and account notifications. These are sent through dedicated IP addresses to maintain high deliverability.</p>"},{"location":"glossary-and-faq/#what-email-template-system-does-maily-use","title":"What email template system does Maily use?","text":"<p>Maily uses MJML (Mailjet Markup Language) for creating responsive email templates that render correctly across different email clients and devices. The platform includes a visual email editor that generates MJML code behind the scenes.</p>"},{"location":"glossary-and-faq/#what-is-the-maximum-number-of-emails-i-can-send","title":"What is the maximum number of emails I can send?","text":"<p>Maily's infrastructure is designed to handle high volumes of emails. Standard plans include various sending limits, and enterprise plans can be customized to support virtually any volume requirement.</p>"},{"location":"glossary-and-faq/#analytics-and-reporting","title":"Analytics and Reporting","text":""},{"location":"glossary-and-faq/#what-metrics-does-maily-track","title":"What metrics does Maily track?","text":"<p>Maily tracks comprehensive email performance metrics, including opens, clicks, conversions, bounces, unsubscribes, spam reports, and revenue attribution. The platform also provides advanced analytics like heat maps, geographical distribution, and device breakdowns.</p>"},{"location":"glossary-and-faq/#can-i-create-custom-reports-in-maily","title":"Can I create custom reports in Maily?","text":"<p>Yes, Maily's custom reporting engine allows you to build and schedule reports based on any combination of metrics tracked in the platform. Reports can be viewed in the dashboard or exported in various formats.</p>"},{"location":"glossary-and-faq/#does-maily-support-ab-testing","title":"Does Maily support A/B testing?","text":"<p>Yes, Maily provides robust A/B testing capabilities. You can test different subject lines, content, sending times, and sender names. The platform automatically distributes emails among test groups and can automatically select the winning variant based on your chosen metric.</p>"},{"location":"glossary-and-faq/#how-does-maily-handle-tracking-in-light-of-privacy-changes","title":"How does Maily handle tracking in light of privacy changes?","text":"<p>Maily has adapted to privacy changes like Apple's Mail Privacy Protection by implementing multiple tracking methods beyond pixel tracking, including link click tracking, interaction events, and engagement modeling to provide accurate reporting.</p>"},{"location":"glossary-and-faq/#integration-and-extensibility","title":"Integration and Extensibility","text":""},{"location":"glossary-and-faq/#does-maily-integrate-with-crm-systems","title":"Does Maily integrate with CRM systems?","text":"<p>Yes, Maily offers native integrations with popular CRM systems such as Salesforce, HubSpot, and Microsoft Dynamics. These integrations enable bi-directional data synchronization to keep your email marketing aligned with your customer relationship management.</p>"},{"location":"glossary-and-faq/#can-maily-integrate-with-my-e-commerce-platform","title":"Can Maily integrate with my e-commerce platform?","text":"<p>Yes, Maily integrates with major e-commerce platforms including Shopify, WooCommerce, Magento, and BigCommerce. These integrations enable features like abandoned cart emails, product recommendation campaigns, and purchase-based segmentation.</p>"},{"location":"glossary-and-faq/#does-maily-offer-a-public-api","title":"Does Maily offer a public API?","text":"<p>Yes, Maily provides a comprehensive GraphQL API that enables you to perform virtually any action available in the user interface. This API is well-documented and includes client libraries for popular programming languages.</p>"},{"location":"glossary-and-faq/#can-i-extend-mailys-functionality","title":"Can I extend Maily's functionality?","text":"<p>Enterprise customers can access Maily's extension framework, which allows for the development of custom plugins to extend the platform's functionality. This framework is documented in our developer portal.</p>"},{"location":"glossary-and-faq/#account-and-billing","title":"Account and Billing","text":""},{"location":"glossary-and-faq/#what-plans-does-maily-offer","title":"What plans does Maily offer?","text":"<p>Maily offers several pricing tiers, including Starter, Professional, Scale, and Enterprise plans. Each plan includes different features, sending volumes, and levels of support. Custom plans are also available for specific requirements.</p>"},{"location":"glossary-and-faq/#how-is-maily-billed","title":"How is Maily billed?","text":"<p>Maily is offered as a subscription service with monthly or annual billing options. Annual subscriptions include a discount. Billing is based on your chosen plan and any add-ons or additional services you select.</p>"},{"location":"glossary-and-faq/#can-i-upgrade-or-downgrade-my-plan","title":"Can I upgrade or downgrade my plan?","text":"<p>Yes, you can upgrade your plan at any time, with the new pricing taking effect immediately. Downgrades take effect at the end of your current billing cycle. Both can be managed from your account settings.</p>"},{"location":"glossary-and-faq/#what-payment-methods-do-you-accept","title":"What payment methods do you accept?","text":"<p>Maily accepts credit cards, PayPal, and bank transfers (for annual plans). Enterprise customers may also arrange for invoicing with net terms.</p>"},{"location":"glossary-and-faq/#support-and-resources","title":"Support and Resources","text":""},{"location":"glossary-and-faq/#what-customer-support-options-are-available","title":"What customer support options are available?","text":"<p>Support options vary by plan. All customers have access to our knowledge base and community forum. Professional plans and above include email support, while Scale and Enterprise plans add phone support and dedicated account management.</p>"},{"location":"glossary-and-faq/#does-maily-offer-training","title":"Does Maily offer training?","text":"<p>Yes, Maily provides various training resources, including documentation, video tutorials, webinars, and a certification program. Enterprise customers also receive customized onboarding and training sessions.</p>"},{"location":"glossary-and-faq/#how-often-is-maily-updated","title":"How often is Maily updated?","text":"<p>Maily follows a continuous deployment model, with minor updates released weekly and major feature releases typically occurring monthly. All updates are deployed with zero downtime.</p>"},{"location":"glossary-and-faq/#where-can-i-find-documentation","title":"Where can I find documentation?","text":"<p>Comprehensive documentation is available in our online knowledge base, accessible from the Help menu in the Maily dashboard. This includes user guides, API documentation, best practices, and troubleshooting information.</p>"},{"location":"glossary-and-faq/#performance-and-scalability","title":"Performance and Scalability","text":""},{"location":"glossary-and-faq/#how-fast-is-the-maily-platform","title":"How fast is the Maily platform?","text":"<p>Maily is designed for high performance, with an average API response time of 87ms (p95) and a Time to Interactive of 1.7s for the web interface. The platform leverages edge computing, caching, and optimized database queries to ensure responsiveness.</p>"},{"location":"glossary-and-faq/#how-does-maily-handle-high-traffic-volumes","title":"How does Maily handle high traffic volumes?","text":"<p>Maily's architecture is designed to scale automatically based on demand. The platform employs horizontal scaling for stateless services, connection pooling for databases, and caching strategies to handle traffic spikes and maintain performance under load.</p>"},{"location":"glossary-and-faq/#what-is-mailys-approach-to-reliability","title":"What is Maily's approach to reliability?","text":"<p>Maily achieves 99.995% uptime through multi-region deployment, automated failover, comprehensive monitoring, and a resilient architecture. The platform includes circuit breakers, rate limiting, and graceful degradation strategies to maintain service availability.</p>"},{"location":"glossary-and-faq/#future-of-maily","title":"Future of Maily","text":""},{"location":"glossary-and-faq/#what-features-are-on-mailys-roadmap","title":"What features are on Maily's roadmap?","text":"<p>Maily's near-term roadmap includes advanced analytics and reporting capabilities, full microservices architecture implementation, enhanced collaboration features, advanced enterprise features, a marketplace for extensions, and advanced ML capabilities. See our Modernization Roadmap for more details.</p>"},{"location":"glossary-and-faq/#how-does-maily-handle-feature-requests","title":"How does Maily handle feature requests?","text":"<p>Feature requests can be submitted through the feedback form in the Maily dashboard. Our product team regularly reviews these requests and incorporates them into our roadmap planning process. Enterprise customers can also work directly with their account managers for specific feature needs.</p>"},{"location":"glossary-and-faq/#is-maily-committed-to-accessibility","title":"Is Maily committed to accessibility?","text":"<p>Yes, accessibility is a core commitment for Maily. The platform complies with WCAG AA standards, is regularly tested with assistive technologies, and our development team receives ongoing training in accessibility best practices.</p>"},{"location":"glossary-and-faq/#how-is-maily-addressing-sustainability","title":"How is Maily addressing sustainability?","text":"<p>Maily is working to minimize its environmental impact through efficient infrastructure design, optimized compute resource usage, and partnerships with cloud providers that use renewable energy. We also have internal sustainability initiatives for our operations and offices.</p>"},{"location":"glossary-and-faq/#glossary","title":"Glossary","text":""},{"location":"glossary-and-faq/#a","title":"A","text":""},{"location":"glossary-and-faq/#ab-testing","title":"A/B Testing","text":"<p>A method of comparing two or more variations of an email campaign to determine which performs better. Maily's A/B testing framework automatically distributes emails among test groups and selects the winning variant based on predefined metrics.</p>"},{"location":"glossary-and-faq/#accessibility-a11y","title":"Accessibility (a11y)","text":"<p>The practice of designing and developing the Maily platform so that people with disabilities can use it effectively. Maily implements WCAG AA standards throughout the platform.</p>"},{"location":"glossary-and-faq/#ai-orchestrator","title":"AI Orchestrator","text":"<p>A component of Maily's Enhanced AI Service that coordinates the flow of requests between different AI models and services, ensuring optimal performance and cost management.</p>"},{"location":"glossary-and-faq/#audience","title":"Audience","text":"<p>A defined group of email recipients with shared characteristics, behaviors, or preferences. In Maily, audiences can be static (manually created) or dynamic (rule-based).</p>"},{"location":"glossary-and-faq/#app-router","title":"App Router","text":"<p>The Next.js routing system used in Maily's frontend. Enables advanced features like React Server Components, server actions, parallel routes, and intercepting routes.</p>"},{"location":"glossary-and-faq/#auth-provider","title":"Auth Provider","text":"<p>An authentication system that verifies user identity. Maily supports multiple auth providers through NextAuth.js and Auth0, including email/password, Google, Microsoft, and SAML.</p>"},{"location":"glossary-and-faq/#b","title":"B","text":""},{"location":"glossary-and-faq/#bounce","title":"Bounce","text":"<p>An email that couldn't be delivered to the recipient's inbox. Maily distinguishes between hard bounces (permanent failure) and soft bounces (temporary failure).</p>"},{"location":"glossary-and-faq/#batch-processing","title":"Batch Processing","text":"<p>A method of processing data in groups rather than individually, often used in Maily's backend services for efficiency when handling large volumes of emails.</p>"},{"location":"glossary-and-faq/#c","title":"C","text":""},{"location":"glossary-and-faq/#campaign","title":"Campaign","text":"<p>A coordinated series of emails sent to an audience with a specific goal. Campaigns in Maily can be one-time sends, recurring sends, or complex multi-stage workflows.</p>"},{"location":"glossary-and-faq/#client-component","title":"Client Component","text":"<p>A React component in Maily's frontend that runs on the client side (browser). Used for interactive elements that require client-side JavaScript.</p>"},{"location":"glossary-and-faq/#content-security-policy-csp","title":"Content Security Policy (CSP)","text":"<p>A security standard implemented in Maily that helps prevent cross-site scripting (XSS) attacks by controlling which resources can be loaded.</p>"},{"location":"glossary-and-faq/#cqrs-command-query-responsibility-segregation","title":"CQRS (Command Query Responsibility Segregation)","text":"<p>A design pattern used in Maily's microservices architecture that separates read operations from write operations, improving performance and scalability.</p>"},{"location":"glossary-and-faq/#custom-reporting-engine","title":"Custom Reporting Engine","text":"<p>Maily's flexible reporting system that allows users to build and schedule custom reports based on any metric tracked in the platform.</p>"},{"location":"glossary-and-faq/#d","title":"D","text":""},{"location":"glossary-and-faq/#dashboard","title":"Dashboard","text":"<p>The main interface in Maily where users can view key metrics, recent activity, and quick access to common functions.</p>"},{"location":"glossary-and-faq/#data-loader","title":"Data Loader","text":"<p>A pattern used in Maily's GraphQL API to efficiently batch and cache database queries, reducing the number of database round trips.</p>"},{"location":"glossary-and-faq/#dynamic-segment","title":"Dynamic Segment","text":"<p>An audience segment in Maily that updates automatically based on predefined rules and conditions, ensuring that the segment always contains the most relevant recipients.</p>"},{"location":"glossary-and-faq/#distributed-tracing","title":"Distributed Tracing","text":"<p>A method used in Maily for monitoring and troubleshooting requests as they flow through various microservices, implemented with OpenTelemetry and Grafana Tempo.</p>"},{"location":"glossary-and-faq/#dvc-data-version-control","title":"DVC (Data Version Control)","text":"<p>A tool used in Maily's AI pipeline to track changes to machine learning models and datasets, ensuring reproducibility and rollback capabilities.</p>"},{"location":"glossary-and-faq/#e","title":"E","text":""},{"location":"glossary-and-faq/#edge-computing","title":"Edge Computing","text":"<p>Computing that takes place close to the physical location where data is being processed. Maily uses Cloudflare Workers for edge functions to improve performance globally.</p>"},{"location":"glossary-and-faq/#email-template","title":"Email Template","text":"<p>A predefined email layout in Maily that can be customized with content, images, and personalization tokens. Templates support responsive design through MJML.</p>"},{"location":"glossary-and-faq/#engagement-prediction","title":"Engagement Prediction","text":"<p>Maily's AI feature that predicts how likely a recipient is to open, click, or convert from an email, allowing for better segmentation and targeting.</p>"},{"location":"glossary-and-faq/#enhanced-ai-service","title":"Enhanced AI Service","text":"<p>Maily's advanced AI system that powers content generation, audience segmentation, send time optimization, and subject line optimization, built on Anthropic Claude 3 and other AI technologies.</p>"},{"location":"glossary-and-faq/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>An architectural pattern used in Maily where components communicate through events, improving resilience and enabling complex workflows.</p>"},{"location":"glossary-and-faq/#f","title":"F","text":""},{"location":"glossary-and-faq/#feature-store","title":"Feature Store","text":"<p>A centralized repository for ML features in Maily, implemented with Feast. It stores, manages, and serves features for training and inference.</p>"},{"location":"glossary-and-faq/#feature-flag","title":"Feature Flag","text":"<p>A technique used in Maily to enable or disable features without deploying new code, allowing for gradual rollouts, A/B testing, and quick rollbacks.</p>"},{"location":"glossary-and-faq/#funnel-analysis","title":"Funnel Analysis","text":"<p>A reporting feature in Maily that tracks how users move through a sequence of email interactions, helping identify points of drop-off.</p>"},{"location":"glossary-and-faq/#g","title":"G","text":""},{"location":"glossary-and-faq/#gdpr-general-data-protection-regulation","title":"GDPR (General Data Protection Regulation)","text":"<p>EU data protection regulation that Maily fully complies with, providing features for consent management, data export, and the right to be forgotten.</p>"},{"location":"glossary-and-faq/#graphql","title":"GraphQL","text":"<p>The query language and runtime used for Maily's API, providing flexible, efficient, and powerful alternatives to REST endpoints.</p>"},{"location":"glossary-and-faq/#h","title":"H","text":""},{"location":"glossary-and-faq/#heat-map","title":"Heat Map","text":"<p>A visual representation in Maily analytics that uses colors to show which parts of an email received the most clicks.</p>"},{"location":"glossary-and-faq/#helm-chart","title":"Helm Chart","text":"<p>A package format used to deploy Maily components in Kubernetes environments, containing all necessary Kubernetes resources.</p>"},{"location":"glossary-and-faq/#helicone","title":"Helicone","text":"<p>A tool integrated with Maily's Enhanced AI Service for monitoring and optimizing AI costs across providers.</p>"},{"location":"glossary-and-faq/#i","title":"I","text":""},{"location":"glossary-and-faq/#i18n-internationalization","title":"i18n (Internationalization)","text":"<p>The process of designing Maily to support multiple languages and regions. Maily supports 12 languages with both LTR and RTL text directions.</p>"},{"location":"glossary-and-faq/#image-generation","title":"Image Generation","text":"<p>An AI feature in Maily that can create custom images for email campaigns based on text prompts, powered by Stability AI.</p>"},{"location":"glossary-and-faq/#intercepting-routes","title":"Intercepting Routes","text":"<p>A Next.js App Router feature used in Maily to create modal interfaces without losing the context of the current page.</p>"},{"location":"glossary-and-faq/#k","title":"K","text":""},{"location":"glossary-and-faq/#kafka","title":"Kafka","text":"<p>The event streaming platform used in Maily's backend for reliable, high-throughput, low-latency communication between services.</p>"},{"location":"glossary-and-faq/#kubernetes","title":"Kubernetes","text":"<p>The container orchestration system used to deploy and manage Maily's microservices in production environments.</p>"},{"location":"glossary-and-faq/#l","title":"L","text":""},{"location":"glossary-and-faq/#langfuse","title":"Langfuse","text":"<p>The observability platform integrated with Maily's Enhanced AI Service for monitoring, tracking, and evaluating AI model performance.</p>"},{"location":"glossary-and-faq/#litellm","title":"LiteLLM","text":"<p>The model routing layer in Maily's Enhanced AI Service that provides a unified interface to multiple LLM providers.</p>"},{"location":"glossary-and-faq/#loki","title":"Loki","text":"<p>The log aggregation system used in Maily for collecting and querying logs from all services.</p>"},{"location":"glossary-and-faq/#m","title":"M","text":""},{"location":"glossary-and-faq/#microservices","title":"Microservices","text":"<p>The architectural style where Maily is divided into small, independently deployable services organized around business capabilities.</p>"},{"location":"glossary-and-faq/#model-registry","title":"Model Registry","text":"<p>A component of Maily's ML infrastructure that stores and versions machine learning models, ensuring reproducibility and governance.</p>"},{"location":"glossary-and-faq/#mjml","title":"MJML","text":"<p>The responsive email framework used in Maily to create email templates that render correctly across email clients.</p>"},{"location":"glossary-and-faq/#multi-stage-email-workflow","title":"Multi-stage Email Workflow","text":"<p>A campaign type in Maily where recipients receive different emails based on their interactions with previous emails in the sequence.</p>"},{"location":"glossary-and-faq/#o","title":"O","text":""},{"location":"glossary-and-faq/#observability","title":"Observability","text":"<p>The practice of measuring the internal state of Maily's systems through logs, metrics, and traces to understand and troubleshoot behavior.</p>"},{"location":"glossary-and-faq/#opentelemetry","title":"OpenTelemetry","text":"<p>The open-source framework used in Maily for collecting and exporting telemetry data (logs, metrics, and traces) to observability backends.</p>"},{"location":"glossary-and-faq/#open-rate","title":"Open Rate","text":"<p>The percentage of recipients who opened an email. Maily tracks opens using pixel tracking and interaction events.</p>"},{"location":"glossary-and-faq/#p","title":"P","text":""},{"location":"glossary-and-faq/#parallel-routes","title":"Parallel Routes","text":"<p>A Next.js App Router feature used in Maily to render multiple pages in the same view, useful for complex dashboard layouts.</p>"},{"location":"glossary-and-faq/#personalization","title":"Personalization","text":"<p>The process of customizing email content based on recipient data. Maily supports basic (name, company) and advanced (behavioral, predictive) personalization.</p>"},{"location":"glossary-and-faq/#progressive-web-app-pwa","title":"Progressive Web App (PWA)","text":"<p>A web application that provides a mobile app-like experience. Maily's web interface is built as a PWA for improved mobile usability.</p>"},{"location":"glossary-and-faq/#pothos","title":"Pothos","text":"<p>The code-first GraphQL schema builder used in Maily's API layer for type-safe schema development.</p>"},{"location":"glossary-and-faq/#r","title":"R","text":""},{"location":"glossary-and-faq/#rag-retrieval-augmented-generation","title":"RAG (Retrieval-Augmented Generation)","text":"<p>An AI technique used in Maily where the AI model retrieves relevant information from a knowledge base before generating content, improving accuracy and relevance.</p>"},{"location":"glossary-and-faq/#react-server-component-rsc","title":"React Server Component (RSC)","text":"<p>A type of React component used in Maily that renders on the server, reducing JavaScript bundle size and enabling direct database access.</p>"},{"location":"glossary-and-faq/#retention-analysis","title":"Retention Analysis","text":"<p>A reporting feature in Maily that tracks how well campaigns keep subscribers engaged over time.</p>"},{"location":"glossary-and-faq/#redis","title":"Redis","text":"<p>The in-memory data store used in Maily for caching, session management, and real-time features.</p>"},{"location":"glossary-and-faq/#s","title":"S","text":""},{"location":"glossary-and-faq/#segmentation","title":"Segmentation","text":"<p>The process of dividing an email audience into smaller groups based on specific criteria. Maily supports basic (demographic) and advanced (behavioral, predictive) segmentation.</p>"},{"location":"glossary-and-faq/#server-action","title":"Server Action","text":"<p>A Next.js feature used in Maily for handling form submissions and data mutations directly on the server without API endpoints.</p>"},{"location":"glossary-and-faq/#streaming","title":"Streaming","text":"<p>A technique used in Maily where the server sends HTML incrementally, allowing browsers to start rendering before the entire response is complete.</p>"},{"location":"glossary-and-faq/#suspense","title":"Suspense","text":"<p>A React feature used in Maily for declarative data fetching and loading states, improving user experience during data loading.</p>"},{"location":"glossary-and-faq/#send-time-optimization","title":"Send Time Optimization","text":"<p>An AI feature in Maily that determines the optimal time to send emails to each recipient based on their past engagement patterns.</p>"},{"location":"glossary-and-faq/#service-mesh","title":"Service Mesh","text":"<p>A dedicated infrastructure layer in Maily's microservices architecture for handling service-to-service communication with advanced features like traffic control and observability.</p>"},{"location":"glossary-and-faq/#t","title":"T","text":""},{"location":"glossary-and-faq/#template-fragment","title":"Template Fragment","text":"<p>Reusable pieces of email content in Maily that can be shared across multiple templates, such as headers, footers, or product showcases.</p>"},{"location":"glossary-and-faq/#tenant","title":"Tenant","text":"<p>A customer organization in Maily's multi-tenant architecture. Each tenant's data is logically isolated while sharing the same infrastructure.</p>"},{"location":"glossary-and-faq/#turborepo","title":"Turborepo","text":"<p>The build system used for Maily's monorepo, providing fast incremental builds and caching.</p>"},{"location":"glossary-and-faq/#u","title":"U","text":""},{"location":"glossary-and-faq/#user-journey","title":"User Journey","text":"<p>The sequence of touchpoints a user has with email campaigns. Maily provides visualization and analysis tools to optimize these journeys.</p>"},{"location":"glossary-and-faq/#user-behavior-tracking","title":"User Behavior Tracking","text":"<p>A feature in Maily that monitors how users interact with sent emails, capturing opens, clicks, and other engagement metrics.</p>"},{"location":"glossary-and-faq/#v","title":"V","text":""},{"location":"glossary-and-faq/#vault","title":"Vault","text":"<p>The secure secret management system used in Maily for storing and accessing sensitive information like API keys and credentials.</p>"},{"location":"glossary-and-faq/#vitest","title":"Vitest","text":"<p>The testing framework used for Maily's frontend unit and integration tests.</p>"},{"location":"glossary-and-faq/#w","title":"W","text":""},{"location":"glossary-and-faq/#weights-biases-wb","title":"Weights &amp; Biases (W&amp;B)","text":"<p>The experiment tracking platform used in Maily's ML pipeline for versioning, visualizing, and comparing model training runs.</p>"},{"location":"glossary-and-faq/#websockets","title":"WebSockets","text":"<p>The technology used in Maily for real-time updates in the dashboard and collaborative features.</p>"},{"location":"glossary-and-faq/#wcag-web-content-accessibility-guidelines","title":"WCAG (Web Content Accessibility Guidelines)","text":"<p>The accessibility standards implemented in Maily to ensure usability for people with disabilities.</p>"},{"location":"glossary-and-faq/#z","title":"Z","text":""},{"location":"glossary-and-faq/#zero-trust-architecture","title":"Zero Trust Architecture","text":"<p>The security model implemented in Maily where no user or service is inherently trusted, and verification is required from everyone trying to access resources.</p>"},{"location":"glossary-and-faq/#zustand","title":"Zustand","text":"<p>The state management library used in Maily's frontend for client-side global state.</p>"},{"location":"glossary-and-faq/#zod","title":"Zod","text":"<p>The schema validation library used in Maily for form validation and API input validation.</p>"},{"location":"implementation-history/","title":"Maily Implementation History","text":"<p>Last updated: March 4, 2025</p>"},{"location":"implementation-history/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Implementation Timeline</li> <li>Sprint 1: Security &amp; Compliance</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Sprint 2: Infrastructure</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Sprint 3: AI/ML Implementation</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Sprint 4: App Router Migration</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Sprint 5: Monitoring &amp; Observability</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Sprint 6: UX &amp; Accessibility</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Sprint 7: Internationalization</li> <li>Objectives</li> <li>Implementation Details</li> <li>Outcomes</li> <li>Future Sprints</li> <li>Lessons Learned</li> <li>Key Performance Indicators</li> </ul>"},{"location":"implementation-history/#overview","title":"Overview","text":"<p>This document provides a comprehensive record of all implementation sprints for the Maily platform enhancement initiative. It chronicles the evolution of the platform from its original state to the current implementation, highlighting key achievements, challenges, and lessons learned during each sprint.</p> <p>The enhancement initiative aimed to modernize the Maily platform with the following high-level goals:</p> <ol> <li>Implement advanced AI capabilities</li> <li>Improve platform security and compliance</li> <li>Enhance infrastructure scalability and resilience</li> <li>Modernize the frontend architecture</li> <li>Improve developer experience</li> <li>Enhance user experience and accessibility</li> <li>Add internationalization support</li> </ol> <p>This document serves as the historical record of our journey toward these goals, organized by implementation sprints.</p>"},{"location":"implementation-history/#implementation-timeline","title":"Implementation Timeline","text":"Sprint Focus Area Start Date End Date Status Sprint 1 Security &amp; Compliance 2025-01-01 2025-01-15 Completed Sprint 2 Infrastructure 2025-01-16 2025-01-31 Completed Sprint 3 AI/ML Implementation 2025-02-01 2025-02-15 Completed Sprint 4 App Router Migration 2025-02-16 2025-02-29 Completed Sprint 5 Monitoring &amp; Observability 2025-03-01 2025-03-15 Completed Sprint 6 UX &amp; Accessibility 2025-03-16 2025-03-31 Completed Sprint 7 Internationalization 2025-04-01 2025-04-15 Completed Sprint 8 Performance Optimization 2025-04-16 2025-04-30 Planned Sprint 9 Mobile Experience 2025-05-01 2025-05-15 Planned"},{"location":"implementation-history/#sprint-1-security-compliance","title":"Sprint 1: Security &amp; Compliance","text":""},{"location":"implementation-history/#sprint-1-objectives","title":"Sprint 1 Objectives","text":"<ul> <li>Implement Zero Trust security architecture</li> <li>Enhance authentication and authorization mechanisms</li> <li>Implement data encryption at rest and in transit</li> <li>Develop compliance documentation for GDPR and CCPA</li> <li>Establish security monitoring and alerting</li> </ul>"},{"location":"implementation-history/#sprint-1-implementation-details","title":"Sprint 1 Implementation Details","text":""},{"location":"implementation-history/#zero-trust-implementation","title":"Zero Trust Implementation","text":"<p>We implemented a comprehensive Zero Trust architecture with the following components:</p> <ol> <li>Identity-based Access Control:</li> <li>Implemented AWS IAM Identity Center for SSO</li> <li>Added multi-factor authentication for all users</li> <li> <p>Established just-in-time access for privileged actions</p> </li> <li> <p>Network Security:</p> </li> <li>Implemented network microsegmentation using AWS Security Groups and NACLs</li> <li>Deployed Istio service mesh with mutual TLS for service-to-service communication</li> <li> <p>Established strict egress controls for all services</p> </li> <li> <p>Data Protection:</p> </li> <li>Implemented envelope encryption for all sensitive data</li> <li>Deployed AWS KMS for key management</li> <li>Established key rotation procedures</li> </ol>"},{"location":"implementation-history/#authentication-enhancements","title":"Authentication Enhancements","text":"<ul> <li>Migrated from JWT-based authentication to OpenID Connect</li> <li>Implemented session management with configurable timeouts</li> <li>Added device fingerprinting for suspicious login detection</li> <li>Established IP-based access controls with geofencing</li> </ul>"},{"location":"implementation-history/#compliance-implementation","title":"Compliance Implementation","text":"<ul> <li>Developed comprehensive data inventory and classification</li> <li>Implemented data subject rights management system</li> <li>Created privacy policy and consent management</li> <li>Established data retention and deletion procedures</li> <li>Implemented automated compliance scanning</li> </ul>"},{"location":"implementation-history/#sprint-1-outcomes","title":"Sprint 1 Outcomes","text":""},{"location":"implementation-history/#key-achievements","title":"Key Achievements","text":"<ul> <li>Successfully implemented Zero Trust architecture across all platform components</li> <li>Achieved 100% encryption of data at rest and in transit</li> <li>Completed documentation for GDPR and CCPA compliance</li> <li>Established comprehensive security monitoring with automated alerting</li> <li>Passed third-party security assessment with no critical findings</li> </ul>"},{"location":"implementation-history/#metrics","title":"Metrics","text":"<ul> <li>Security posture improved by 78% according to AWS SecurityHub secure score</li> <li>Authentication success rate increased to 99.97% (from 99.8%)</li> <li>Reduced unauthorized access attempts by 92%</li> <li>Mean time to detect (MTTD) security incidents reduced from hours to minutes</li> </ul>"},{"location":"implementation-history/#challenges-solutions","title":"Challenges &amp; Solutions","text":"Challenge Solution Performance impact of mTLS Optimized Envoy proxy configuration and implemented connection pooling Key management complexity Developed automated key rotation and implemented key hierarchies User experience with MFA Implemented risk-based authentication to balance security with usability"},{"location":"implementation-history/#sprint-2-infrastructure","title":"Sprint 2: Infrastructure","text":""},{"location":"implementation-history/#sprint-2-objectives","title":"Sprint 2 Objectives","text":"<ul> <li>Migrate to Kubernetes-based infrastructure</li> <li>Implement infrastructure as code (IaC)</li> <li>Enhance scalability and resilience</li> <li>Implement multi-region capability</li> <li>Establish disaster recovery procedures</li> </ul>"},{"location":"implementation-history/#sprint-2-implementation-details","title":"Sprint 2 Implementation Details","text":""},{"location":"implementation-history/#kubernetes-migration","title":"Kubernetes Migration","text":"<ul> <li>Deployed Amazon EKS for Kubernetes orchestration</li> <li>Implemented node groups for different workload types</li> <li>Containerized all services with optimized Dockerfiles</li> <li>Deployed Helm charts for application components</li> <li>Implemented resource requests and limits for all containers</li> </ul>"},{"location":"implementation-history/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>Established Terraform modules for all infrastructure components</li> <li>Implemented GitOps workflow using ArgoCD</li> <li>Created CI/CD pipeline for infrastructure changes</li> <li>Implemented policy-as-code using OPA Gatekeeper</li> <li>Established infrastructure testing framework</li> </ul>"},{"location":"implementation-history/#scalability-enhancements","title":"Scalability Enhancements","text":"<ul> <li>Implemented Horizontal Pod Autoscaler for all services</li> <li>Deployed Cluster Autoscaler for node scaling</li> <li>Implemented database read replicas for read scaling</li> <li>Established connection pooling for database access</li> <li>Implemented distributed caching with Redis</li> </ul>"},{"location":"implementation-history/#disaster-recovery","title":"Disaster Recovery","text":"<ul> <li>Established cross-region replication for critical data</li> <li>Implemented automated backup procedures</li> <li>Created disaster recovery runbooks</li> <li>Conducted failover testing</li> <li>Implemented chaos engineering practices</li> </ul>"},{"location":"implementation-history/#sprint-2-outcomes","title":"Sprint 2 Outcomes","text":""},{"location":"implementation-history/#key-achievements_1","title":"Key Achievements","text":"<ul> <li>Successfully migrated all services to Kubernetes</li> <li>Established fully automated infrastructure provisioning</li> <li>Achieved 99.99% platform availability</li> <li>Reduced infrastructure costs by 32%</li> <li>Implemented cross-region disaster recovery with RPO &lt;15 minutes</li> </ul>"},{"location":"implementation-history/#metrics_1","title":"Metrics","text":"<ul> <li>Deployment frequency increased by 300% (from weekly to multiple times per day)</li> <li>Mean time to recovery (MTTR) reduced from hours to minutes</li> <li>Infrastructure provisioning time reduced from days to hours</li> <li>Horizontal scaling response time reduced from minutes to seconds</li> </ul>"},{"location":"implementation-history/#challenges-solutions_1","title":"Challenges &amp; Solutions","text":"Challenge Solution Stateful workload management in Kubernetes Implemented StatefulSets with proper PVCs and backup strategies Networking complexity Deployed service mesh (Istio) for traffic management Configuration management Implemented External Secrets Operator for secrets management Cluster upgrades Established blue/green deployment strategy for cluster upgrades"},{"location":"implementation-history/#sprint-3-aiml-implementation","title":"Sprint 3: AI/ML Implementation","text":""},{"location":"implementation-history/#sprint-3-objectives","title":"Sprint 3 Objectives","text":"<ul> <li>Develop Enhanced AI Service (EAS)</li> <li>Implement content generation capabilities</li> <li>Develop audience segmentation models</li> <li>Implement subject line optimization</li> <li>Create AI observability framework</li> <li>Integrate with Anthropic Claude 3 and Stability AI</li> </ul>"},{"location":"implementation-history/#sprint-3-implementation-details","title":"Sprint 3 Implementation Details","text":""},{"location":"implementation-history/#enhanced-ai-service-architecture","title":"Enhanced AI Service Architecture","text":"<ul> <li>Designed microservice architecture for AI capabilities</li> <li>Implemented AI Orchestrator for request routing</li> <li>Deployed RAG Pipeline for knowledge-enhanced generation</li> <li>Established model registry and versioning</li> <li>Implemented feature store for ML features</li> </ul>"},{"location":"implementation-history/#content-generation","title":"Content Generation","text":"<ul> <li>Integrated Anthropic Claude 3 Opus for high-quality content</li> <li>Implemented custom prompt engineering system</li> <li>Developed brand voice fine-tuning</li> <li>Created content templates and guidelines</li> <li>Implemented feedback loop for continuous improvement</li> </ul>"},{"location":"implementation-history/#audience-segmentation","title":"Audience Segmentation","text":"<ul> <li>Developed customer clustering algorithms</li> <li>Implemented engagement prediction models</li> <li>Created propensity modeling for conversion likelihood</li> <li>Established incremental learning pipeline</li> <li>Implemented model explanation capabilities</li> </ul>"},{"location":"implementation-history/#subject-line-optimization","title":"Subject Line Optimization","text":"<ul> <li>Developed multi-variant subject line generator</li> <li>Created performance prediction model</li> <li>Implemented A/B testing framework</li> <li>Integrated with email campaign system</li> <li>Established performance tracking</li> </ul>"},{"location":"implementation-history/#ai-observability","title":"AI Observability","text":"<ul> <li>Implemented comprehensive AI logging</li> <li>Established model performance monitoring</li> <li>Created cost tracking and optimization</li> <li>Developed model drift detection</li> <li>Implemented explainability tools</li> </ul>"},{"location":"implementation-history/#sprint-3-outcomes","title":"Sprint 3 Outcomes","text":""},{"location":"implementation-history/#key-achievements_2","title":"Key Achievements","text":"<ul> <li>Successfully launched Enhanced AI Service with 99.9% availability</li> <li>Deployed content generation with high user satisfaction (4.7/5)</li> <li>Implemented audience segmentation with 23.7% lift in engagement</li> <li>Delivered subject line optimization with 19.7% open rate improvement</li> <li>Established comprehensive AI observability framework</li> </ul>"},{"location":"implementation-history/#metrics_2","title":"Metrics","text":"<ul> <li>Content generation reduced campaign creation time by 76 minutes on average</li> <li>Audience segmentation increased revenue per recipient by 17.8%</li> <li>Subject line optimization improved open rates by 19.7%</li> <li>AI-powered campaigns showed 14.3% higher engagement than human-created ones</li> <li>Achieved prediction accuracy of 97.3% for open rate forecasting</li> </ul>"},{"location":"implementation-history/#challenges-solutions_2","title":"Challenges &amp; Solutions","text":"Challenge Solution Model latency for real-time features Implemented model quantization and caching strategies Prompt injection attacks Developed input validation and sanitization pipeline Cost management for AI inference Implemented tiered model selection based on use case Brand voice consistency Created fine-tuning system with brand guidelines Data privacy concerns Implemented anonymization and minimization techniques"},{"location":"implementation-history/#sprint-4-app-router-migration","title":"Sprint 4: App Router Migration","text":""},{"location":"implementation-history/#sprint-4-objectives","title":"Sprint 4 Objectives","text":"<ul> <li>Migrate from Next.js Pages Router to App Router</li> <li>Implement React Server Components</li> <li>Enhance frontend performance</li> <li>Improve SEO capabilities</li> <li>Implement streaming and progressive rendering</li> </ul>"},{"location":"implementation-history/#sprint-4-implementation-details","title":"Sprint 4 Implementation Details","text":""},{"location":"implementation-history/#app-router-architecture","title":"App Router Architecture","text":"<ul> <li>Redesigned routing structure for App Router</li> <li>Implemented nested layouts</li> <li>Created loading and error boundaries</li> <li>Established server-side rendering strategy</li> <li>Implemented parallel routes for complex UI</li> </ul>"},{"location":"implementation-history/#react-server-components","title":"React Server Components","text":"<ul> <li>Identified and converted appropriate components to RSCs</li> <li>Established clear client/server component boundaries</li> <li>Implemented server actions for form handling</li> <li>Created data fetching patterns</li> <li>Reduced client JavaScript bundle size</li> </ul>"},{"location":"implementation-history/#performance-enhancements","title":"Performance Enhancements","text":"<ul> <li>Implemented streaming HTML response</li> <li>Established selective hydration</li> <li>Created Suspense boundaries for progressive loading</li> <li>Optimized image loading with next/image</li> <li>Implemented font optimization</li> </ul>"},{"location":"implementation-history/#seo-improvements","title":"SEO Improvements","text":"<ul> <li>Created metadata API implementation</li> <li>Established canonical URL strategy</li> <li>Implemented structured data (JSON-LD)</li> <li>Added OpenGraph and Twitter card metadata</li> <li>Created dynamic sitemap generation</li> </ul>"},{"location":"implementation-history/#sprint-4-outcomes","title":"Sprint 4 Outcomes","text":""},{"location":"implementation-history/#key-achievements_3","title":"Key Achievements","text":"<ul> <li>Successfully migrated 100% of pages to App Router</li> <li>Implemented React Server Components for all data-fetching components</li> <li>Reduced client-side JavaScript by 47%</li> <li>Improved Core Web Vitals across all pages</li> <li>Enhanced SEO capabilities with dynamic metadata</li> </ul>"},{"location":"implementation-history/#metrics_3","title":"Metrics","text":"<ul> <li>First Contentful Paint improved by 42% (1.2s \u2192 0.7s)</li> <li>Time to Interactive reduced by 38% (3.4s \u2192 2.1s)</li> <li>Largest Contentful Paint improved by 45% (2.2s \u2192 1.2s)</li> <li>JavaScript bundle size reduced by 47%</li> <li>Server response time reduced by 35%</li> </ul>"},{"location":"implementation-history/#challenges-solutions_3","title":"Challenges &amp; Solutions","text":"Challenge Solution State management complexity Implemented server-centric architecture with minimal client state Third-party library compatibility Created compatibility layer and migrated to RSC-compatible libraries Data fetching patterns Established clear patterns for server vs. client data fetching TypeScript integration Enhanced type definitions for RSC-specific patterns Developer learning curve Created comprehensive internal documentation and training"},{"location":"implementation-history/#sprint-5-monitoring-observability","title":"Sprint 5: Monitoring &amp; Observability","text":""},{"location":"implementation-history/#sprint-5-objectives","title":"Sprint 5 Objectives","text":"<ul> <li>Implement comprehensive monitoring infrastructure</li> <li>Establish distributed tracing</li> <li>Create centralized logging system</li> <li>Develop business and technical dashboards</li> <li>Implement alerting and incident management</li> </ul>"},{"location":"implementation-history/#sprint-5-implementation-details","title":"Sprint 5 Implementation Details","text":""},{"location":"implementation-history/#monitoring-infrastructure","title":"Monitoring Infrastructure","text":"<ul> <li>Deployed Prometheus for metrics collection</li> <li>Implemented Grafana for visualization</li> <li>Established alerting with AlertManager</li> <li>Created custom exporters for business metrics</li> <li>Implemented SLO/SLI tracking</li> </ul>"},{"location":"implementation-history/#distributed-tracing","title":"Distributed Tracing","text":"<ul> <li>Implemented OpenTelemetry instrumentation</li> <li>Deployed Tempo for trace storage and querying</li> <li>Created trace sampling strategy</li> <li>Established context propagation across services</li> <li>Implemented trace visualization in Grafana</li> </ul>"},{"location":"implementation-history/#centralized-logging","title":"Centralized Logging","text":"<ul> <li>Deployed Loki for log aggregation</li> <li>Implemented structured logging format</li> <li>Created log filtering and search capabilities</li> <li>Established log retention policies</li> <li>Implemented PII scrubbing for logs</li> </ul>"},{"location":"implementation-history/#dashboards-alerting","title":"Dashboards &amp; Alerting","text":"<ul> <li>Created executive-level business dashboards</li> <li>Implemented technical dashboards for services</li> <li>Established service-level dashboards</li> <li>Created on-call rotation and escalation policies</li> <li>Implemented PagerDuty integration</li> </ul>"},{"location":"implementation-history/#sprint-5-outcomes","title":"Sprint 5 Outcomes","text":""},{"location":"implementation-history/#key-achievements_4","title":"Key Achievements","text":"<ul> <li>Established comprehensive observability platform</li> <li>Implemented end-to-end distributed tracing</li> <li>Created centralized logging with full text search</li> <li>Deployed business and technical dashboards</li> <li>Established alerting and incident management procedures</li> </ul>"},{"location":"implementation-history/#metrics_4","title":"Metrics","text":"<ul> <li>Reduced mean time to detection (MTTD) by 73%</li> <li>Improved mean time to resolution (MTTR) by 61%</li> <li>Increased trace coverage to 97% of services</li> <li>Reduced false positive alerts by 82%</li> <li>Improved incident response time by 68%</li> </ul>"},{"location":"implementation-history/#challenges-solutions_4","title":"Challenges &amp; Solutions","text":"Challenge Solution Observability data volume Implemented intelligent sampling and compression Alert fatigue Created tiered alerting system with proper thresholds Correlation across telemetry types Implemented unified observability platform with Grafana Performance impact of instrumentation Optimized instrumentation and sampling rates Data retention costs Established tiered storage strategy for hot/warm/cold data"},{"location":"implementation-history/#sprint-6-ux-accessibility","title":"Sprint 6: UX &amp; Accessibility","text":""},{"location":"implementation-history/#sprint-6-objectives","title":"Sprint 6 Objectives","text":"<ul> <li>Implement accessibility improvements (WCAG 2.1 AA)</li> <li>Enhance user interface design</li> <li>Improve user experience flows</li> <li>Create design system</li> <li>Implement advanced UI patterns</li> </ul>"},{"location":"implementation-history/#sprint-6-implementation-details","title":"Sprint 6 Implementation Details","text":""},{"location":"implementation-history/#accessibility-improvements","title":"Accessibility Improvements","text":"<ul> <li>Conducted comprehensive accessibility audit</li> <li>Implemented semantic HTML structure</li> <li>Enhanced keyboard navigation</li> <li>Added proper ARIA attributes</li> <li>Improved color contrast throughout the application</li> <li>Implemented focus management</li> </ul>"},{"location":"implementation-history/#design-system","title":"Design System","text":"<ul> <li>Created atomic design component library</li> <li>Implemented design tokens for consistency</li> <li>Established component documentation</li> <li>Created visual regression testing</li> <li>Implemented theming capabilities</li> </ul>"},{"location":"implementation-history/#user-experience-enhancements","title":"User Experience Enhancements","text":"<ul> <li>Redesigned critical user flows</li> <li>Implemented progressive disclosure patterns</li> <li>Enhanced form design and validation</li> <li>Created empty states and error handling</li> <li>Improved loading states and feedback</li> </ul>"},{"location":"implementation-history/#advanced-ui-patterns","title":"Advanced UI Patterns","text":"<ul> <li>Implemented virtualized lists for large datasets</li> <li>Created advanced filtering and sorting</li> <li>Developed drag-and-drop interfaces</li> <li>Implemented inline editing capabilities</li> <li>Enhanced data visualization components</li> </ul>"},{"location":"implementation-history/#sprint-6-outcomes","title":"Sprint 6 Outcomes","text":""},{"location":"implementation-history/#key-achievements_5","title":"Key Achievements","text":"<ul> <li>Achieved WCAG 2.1 AA compliance across all pages</li> <li>Created comprehensive design system with 47 components</li> <li>Redesigned key user flows with positive user testing results</li> <li>Implemented advanced UI patterns for improved productivity</li> <li>Established visual regression testing for UI components</li> </ul>"},{"location":"implementation-history/#metrics_5","title":"Metrics","text":"<ul> <li>Accessibility score improved from 68% to 97%</li> <li>User task completion rate increased by 28%</li> <li>User satisfaction score improved from 3.8/5 to 4.6/5</li> <li>Average task completion time reduced by 37%</li> <li>Support tickets related to UI issues decreased by 64%</li> </ul>"},{"location":"implementation-history/#challenges-solutions_5","title":"Challenges &amp; Solutions","text":"Challenge Solution Balancing accessibility with complex UI Implemented progressive enhancement approach Design system adoption Created comprehensive documentation and developer tools Performance of complex UI components Implemented virtualization and code splitting Maintaining consistency Established design reviews and automation tools Backward compatibility Created migration path with support for legacy patterns"},{"location":"implementation-history/#sprint-7-internationalization","title":"Sprint 7: Internationalization","text":""},{"location":"implementation-history/#sprint-7-objectives","title":"Sprint 7 Objectives","text":"<ul> <li>Implement internationalization (i18n) framework</li> <li>Add support for 12 languages</li> <li>Create translation workflow</li> <li>Implement right-to-left (RTL) support</li> <li>Enhance localization capabilities</li> </ul>"},{"location":"implementation-history/#sprint-7-implementation-details","title":"Sprint 7 Implementation Details","text":""},{"location":"implementation-history/#internationalization-framework","title":"Internationalization Framework","text":"<ul> <li>Implemented next-intl for i18n support</li> <li>Created message extraction pipeline</li> <li>Established translation management system</li> <li>Implemented language detection and selection</li> <li>Created i18n testing framework</li> </ul>"},{"location":"implementation-history/#multi-language-support","title":"Multi-language Support","text":"<ul> <li>Added support for 12 languages:</li> <li>English (US/UK)</li> <li>Spanish</li> <li>French</li> <li>German</li> <li>Japanese</li> <li>Chinese (Simplified/Traditional)</li> <li>Arabic</li> <li>Portuguese</li> <li>Italian</li> <li>Hindi</li> <li> <p>Russian</p> </li> <li> <p>Implemented locale-specific formatting for:</p> </li> <li>Dates and times</li> <li>Numbers and currencies</li> <li>Addresses and phone numbers</li> </ul>"},{"location":"implementation-history/#rtl-support","title":"RTL Support","text":"<ul> <li>Created bidirectional (BiDi) text support</li> <li>Implemented RTL-aware layout system</li> <li>Enhanced component library with RTL support</li> <li>Created RTL testing framework</li> <li>Implemented language-specific styling</li> </ul>"},{"location":"implementation-history/#translation-workflow","title":"Translation Workflow","text":"<ul> <li>Established translation management system</li> <li>Created automated translation extraction</li> <li>Implemented translation review process</li> <li>Added context and descriptions for translators</li> <li>Created continuous integration for translations</li> </ul>"},{"location":"implementation-history/#sprint-7-outcomes","title":"Sprint 7 Outcomes","text":""},{"location":"implementation-history/#key-achievements_6","title":"Key Achievements","text":"<ul> <li>Successfully implemented i18n support across the platform</li> <li>Added support for 12 languages including RTL languages</li> <li>Created efficient translation workflow with automation</li> <li>Implemented locale-specific formatting</li> <li>Established comprehensive testing for i18n features</li> </ul>"},{"location":"implementation-history/#metrics_6","title":"Metrics","text":"<ul> <li>Platform usage in non-English locales increased by 34%</li> <li>User satisfaction in non-English markets improved by 47%</li> <li>Translation efficiency improved by 68% with new workflow</li> <li>Reduced i18n-related bugs by 87%</li> <li>Decreased time-to-market for new languages by 73%</li> </ul>"},{"location":"implementation-history/#challenges-solutions_6","title":"Challenges &amp; Solutions","text":"Challenge Solution Context-aware translations Added detailed context notes and visual references RTL layout issues Implemented logical properties and RTL-aware components Translation management Created custom translation management system Dynamic content translation Implemented server-side translation for dynamic content Performance impact Created optimized loading for language packs"},{"location":"implementation-history/#future-sprints","title":"Future Sprints","text":""},{"location":"implementation-history/#sprint-8-performance-optimization-planned","title":"Sprint 8: Performance Optimization (Planned)","text":"<ul> <li>Implement advanced caching strategies</li> <li>Enhance API performance</li> <li>Optimize database queries</li> <li>Improve frontend performance</li> <li>Implement performance monitoring and budgets</li> </ul>"},{"location":"implementation-history/#sprint-9-mobile-experience-planned","title":"Sprint 9: Mobile Experience (Planned)","text":"<ul> <li>Enhance responsive design</li> <li>Implement mobile-specific features</li> <li>Create native app integration</li> <li>Develop offline capabilities</li> <li>Optimize for mobile networks</li> </ul>"},{"location":"implementation-history/#lessons-learned","title":"Lessons Learned","text":"<p>Throughout the implementation sprints, we've gained valuable insights and lessons:</p>"},{"location":"implementation-history/#technical-lessons","title":"Technical Lessons","text":"<ol> <li>Start with Strong Architecture: Investing time in architectural design pays dividends throughout implementation.</li> <li>Incremental Migration: Breaking large migrations into smaller steps reduces risk and improves success rates.</li> <li>Automated Testing: Comprehensive test coverage enabled faster iterations and confident changes.</li> <li>Documentation First: Documenting decisions and designs before implementation improved clarity and alignment.</li> <li>Performance Budgets: Setting explicit performance targets early helped maintain focus on optimization.</li> </ol>"},{"location":"implementation-history/#process-lessons","title":"Process Lessons","text":"<ol> <li>Cross-functional Teams: Combining engineering, design, and product in sprint teams improved outcomes.</li> <li>User Feedback Loops: Regular user testing throughout sprints led to better user experience.</li> <li>Flexible Scope Management: Adapting scope based on discoveries during sprints improved quality.</li> <li>Technical Debt Management: Allocating time specifically for addressing technical debt prevented accumulation.</li> <li>Knowledge Sharing: Regular tech talks and documentation updates improved team capability.</li> </ol>"},{"location":"implementation-history/#key-performance-indicators","title":"Key Performance Indicators","text":"<p>The implementation sprints have delivered significant improvements across key performance indicators:</p> Metric Before After Improvement Page Load Time 3.4s 1.2s 65% API Response Time 245ms 87ms 64% Deployment Frequency Weekly Daily 500% Change Failure Rate 18% 4.3% 76% Mean Time to Recovery 4.2 hours 22 minutes 91% User Satisfaction 3.7/5 4.8/5 30% Platform Availability 99.8% 99.997% 0.197% Developer Productivity Baseline +37% 37% Campaign Creation Time 124 minutes 48 minutes 61% Email Engagement Rate 14.2% 22.1% 56%"},{"location":"infrastructure-handbook/","title":"Maily Infrastructure Handbook","text":"<p>Last updated: March 4, 2025</p>"},{"location":"infrastructure-handbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Cloud Infrastructure</li> <li>Architecture</li> <li>Environments</li> <li>Cost Management</li> <li>Kubernetes Platform</li> <li>Cluster Architecture</li> <li>Cluster Operations</li> <li>Resource Management</li> <li>Configuration Management</li> <li>Security</li> <li>Database Infrastructure</li> <li>PostgreSQL</li> <li>Redis</li> <li>ClickHouse</li> <li>Backup &amp; Recovery</li> <li>Networking</li> <li>Service Mesh</li> <li>Ingress &amp; Load Balancing</li> <li>Network Security</li> <li>DNS &amp; Certificate Management</li> <li>Observability</li> <li>Monitoring</li> <li>Logging</li> <li>Tracing</li> <li>Alerting</li> <li>Dashboards</li> <li>CI/CD Pipeline</li> <li>Build Pipeline</li> <li>Deployment Pipeline</li> <li>GitOps Workflow</li> <li>Testing Strategy</li> <li>Security &amp; Compliance</li> <li>Infrastructure Security</li> <li>Access Management</li> <li>Secret Management</li> <li>Audit &amp; Compliance</li> <li>Disaster Recovery</li> <li>Backup Strategy</li> <li>Recovery Procedures</li> <li>Business Continuity</li> <li>Operations Runbook</li> <li>Common Procedures</li> <li>Incident Response</li> <li>Capacity Planning</li> <li>Change Management</li> </ul>"},{"location":"infrastructure-handbook/#overview","title":"Overview","text":"<p>The Maily platform is built on modern cloud-native infrastructure designed for scalability, reliability, and security. This handbook provides comprehensive information about our infrastructure design, operations, and best practices.</p> <p>Our infrastructure follows these key principles:</p> <ul> <li>Cloud-Native: Designed for cloud environments with containerization and orchestration</li> <li>Infrastructure as Code: All infrastructure defined and managed through code</li> <li>GitOps: Declarative configuration that follows the Git workflow</li> <li>Zero Trust Security: Comprehensive security model that trusts no one by default</li> <li>Observability: Extensive monitoring, logging, and alerting</li> <li>Automation: Automated provisioning, scaling, and recovery</li> <li>Multi-Region: High availability across geographic regions</li> </ul>"},{"location":"infrastructure-handbook/#cloud-infrastructure","title":"Cloud Infrastructure","text":""},{"location":"infrastructure-handbook/#architecture","title":"Architecture","text":"<p>Maily's cloud infrastructure is built primarily on AWS with a multi-region approach:</p>"},{"location":"infrastructure-handbook/#primary-cloud-provider-aws","title":"Primary Cloud Provider: AWS","text":"<p>The platform leverages the following AWS services:</p> <ul> <li>Compute: EKS for Kubernetes orchestration</li> <li>Storage: S3 for object storage, EBS for block storage</li> <li>Database: Aurora PostgreSQL for relational data, ElastiCache for Redis</li> <li>Networking: VPC, Transit Gateway, NLB, ALB</li> <li>Security: IAM, KMS, WAF, Shield, SecurityHub</li> <li>Observability: CloudWatch, X-Ray</li> <li>Content Delivery: CloudFront for edge caching</li> </ul>"},{"location":"infrastructure-handbook/#multi-region-strategy","title":"Multi-Region Strategy","text":"<p>Maily operates in multiple AWS regions for high availability and compliance:</p> <ul> <li>Primary Regions:</li> <li>US East (N. Virginia) - us-east-1</li> <li>Europe (Ireland) - eu-west-1</li> <li> <p>Asia Pacific (Tokyo) - ap-northeast-1</p> </li> <li> <p>Disaster Recovery Regions:</p> </li> <li>US West (Oregon) - us-west-2</li> <li>Europe (Frankfurt) - eu-central-1</li> <li> <p>Asia Pacific (Singapore) - ap-southeast-1</p> </li> <li> <p>Region Selection Criteria:</p> </li> <li>Service availability</li> <li>Performance characteristics</li> <li>Regulatory requirements</li> <li>Disaster recovery considerations</li> <li>Cost optimization</li> </ul>"},{"location":"infrastructure-handbook/#edge-computing","title":"Edge Computing","text":"<ul> <li>Cloudflare Workers for edge functions</li> <li>Regional edge caching for static assets</li> <li>Dynamic edge routing for user traffic</li> <li>Edge security with WAF and DDoS protection</li> </ul>"},{"location":"infrastructure-handbook/#environments","title":"Environments","text":"<p>Maily maintains multiple environments for development, testing, and production:</p>"},{"location":"infrastructure-handbook/#environment-separation","title":"Environment Separation","text":"<ul> <li>Development: Developer sandbox environments</li> <li>Testing: QA and integration test environments</li> <li>Staging: Pre-production environment</li> <li>Production: Customer-facing environment</li> </ul> <p>Each environment has: - Separate AWS accounts for strong isolation - Consistent infrastructure configuration through IaC - Appropriate scaling for the environment's purpose - Data isolation and security controls</p>"},{"location":"infrastructure-handbook/#environment-promotion","title":"Environment Promotion","text":"<p>Code and configuration follow a promotion process: 1. Development \u2192 Testing \u2192 Staging \u2192 Production 2. Automated testing at each stage 3. Manual approval gates for critical transitions 4. Automated rollback capabilities</p>"},{"location":"infrastructure-handbook/#consistency-across-environments","title":"Consistency Across Environments","text":"<ul> <li>Infrastructure as Code ensures environment parity</li> <li>Terraform modules for reusable components</li> <li>Containerization for consistent deployments</li> <li>Configuration management through ConfigMaps and Secrets</li> </ul>"},{"location":"infrastructure-handbook/#cost-management","title":"Cost Management","text":"<p>Strategies and tools for optimizing cloud infrastructure costs:</p>"},{"location":"infrastructure-handbook/#cost-optimization-practices","title":"Cost Optimization Practices","text":"<ul> <li>Reserved Instances: For predictable workloads</li> <li>Savings Plans: For flexible compute usage</li> <li>Spot Instances: For fault-tolerant workloads</li> <li>Rightsizing: Regular resource optimization</li> <li>Autoscaling: Scale based on demand</li> <li>Storage Tiering: Data lifecycle management</li> </ul>"},{"location":"infrastructure-handbook/#cost-allocation","title":"Cost Allocation","text":"<ul> <li>Resource tagging strategy</li> <li>Business unit allocation</li> <li>Environment-based reporting</li> <li>Feature-based cost attribution</li> <li>Tenant cost analysis</li> </ul>"},{"location":"infrastructure-handbook/#monitoring-reporting","title":"Monitoring &amp; Reporting","text":"<ul> <li>Daily cost reports</li> <li>Budget alerts and notifications</li> <li>Anomaly detection</li> <li>Cost optimization recommendations</li> <li>Long-term trend analysis</li> <li>Chargeback/showback reporting</li> </ul>"},{"location":"infrastructure-handbook/#kubernetes-platform","title":"Kubernetes Platform","text":""},{"location":"infrastructure-handbook/#cluster-architecture","title":"Cluster Architecture","text":"<p>Maily uses Kubernetes as the core platform for running containerized applications:</p>"},{"location":"infrastructure-handbook/#cluster-design","title":"Cluster Design","text":"<ul> <li>Control Plane: AWS EKS-managed Kubernetes</li> <li>Data Plane: Self-managed node groups with EC2</li> <li>Node Types:</li> <li>General purpose (m5, m6i)</li> <li>Compute optimized (c5, c6i)</li> <li>Memory optimized (r5, r6i)</li> <li>GPU instances for AI workloads (g4dn)</li> </ul>"},{"location":"infrastructure-handbook/#high-availability","title":"High Availability","text":"<ul> <li>Multi-AZ control plane</li> <li>Worker nodes distributed across AZs</li> <li>Stateful workloads with appropriate PDBs</li> <li>Anti-affinity rules for critical services</li> <li>Pod disruption budgets</li> <li>Topology spread constraints</li> </ul>"},{"location":"infrastructure-handbook/#networking","title":"Networking","text":"<ul> <li>AWS VPC CNI for pod networking</li> <li>NetworkPolicy for microsegmentation</li> <li>Calico for extended network policies</li> <li>Service Mesh (Istio) for service-to-service communication</li> <li>External-DNS for automatic DNS management</li> <li>Cert-Manager for certificate automation</li> </ul>"},{"location":"infrastructure-handbook/#storage","title":"Storage","text":"<ul> <li>EBS CSI driver for persistent volumes</li> <li>S3 CSI driver for object storage</li> <li>StorageClasses for different performance tiers</li> <li>PersistentVolumeClaims for stateful workloads</li> <li>Volume snapshots for backup</li> </ul>"},{"location":"infrastructure-handbook/#cluster-operations","title":"Cluster Operations","text":"<p>Tools and processes for managing Kubernetes clusters:</p>"},{"location":"infrastructure-handbook/#provisioning","title":"Provisioning","text":"<ul> <li>Terraform for cluster creation and infrastructure</li> <li>eksctl for cluster bootstrapping</li> <li>AWS IAM for authentication</li> <li>IRSA (IAM Roles for Service Accounts)</li> </ul>"},{"location":"infrastructure-handbook/#management-tools","title":"Management Tools","text":"<ul> <li>kubectl for CLI management</li> <li>k9s for interactive management</li> <li>Lens for GUI management</li> <li>Custom internal admin dashboard</li> <li>Rancher for multi-cluster management</li> </ul>"},{"location":"infrastructure-handbook/#upgrade-strategy","title":"Upgrade Strategy","text":"<ul> <li>Control plane upgrades (managed by AWS)</li> <li>Node group rolling upgrades</li> <li>Blue/green deployment for major version upgrades</li> <li>Workload compatibility testing</li> <li>Canary upgrades for critical components</li> </ul>"},{"location":"infrastructure-handbook/#maintenance","title":"Maintenance","text":"<ul> <li>Node draining procedures</li> <li>Cluster-autoscaler for automatic scaling</li> <li>Node problem detector for health monitoring</li> <li>Automated node recycling</li> <li>Certificate rotation</li> <li>Periodic security scanning</li> </ul>"},{"location":"infrastructure-handbook/#resource-management","title":"Resource Management","text":"<p>Strategies for optimizing Kubernetes resource utilization:</p>"},{"location":"infrastructure-handbook/#resource-allocation","title":"Resource Allocation","text":"<ul> <li>CPU and memory requests/limits</li> <li>Quality of Service (QoS) classes</li> <li>ResourceQuotas for namespaces</li> <li>LimitRanges for default limits</li> <li>Vertical Pod Autoscaler for rightsizing</li> <li>Horizontal Pod Autoscaler for scaling</li> </ul>"},{"location":"infrastructure-handbook/#namespaces","title":"Namespaces","text":"<ul> <li>Logical separation by service</li> <li>Resource isolation</li> <li>RBAC boundaries</li> <li>Network policy enforcement</li> <li>Tenant isolation for multi-tenant services</li> </ul>"},{"location":"infrastructure-handbook/#autoscaling","title":"Autoscaling","text":"<ul> <li>Horizontal Pod Autoscaler</li> <li>Vertical Pod Autoscaler</li> <li>Cluster Autoscaler</li> <li>Karpenter for advanced node provisioning</li> <li>Custom metrics adapters</li> <li>Event-driven scaling with KEDA</li> </ul>"},{"location":"infrastructure-handbook/#configuration-management","title":"Configuration Management","text":"<p>Managing application configuration in Kubernetes:</p>"},{"location":"infrastructure-handbook/#configmaps-and-secrets","title":"ConfigMaps and Secrets","text":"<ul> <li>Environment-specific configurations</li> <li>Secret encryption with AWS KMS</li> <li>External Secrets Operator for AWS Secrets Manager integration</li> <li>Config versioning and rollback</li> <li>Secret rotation procedures</li> </ul>"},{"location":"infrastructure-handbook/#custom-resources","title":"Custom Resources","text":"<ul> <li>Custom Resource Definitions (CRDs)</li> <li>Operators for managing complex applications</li> <li>Service Catalog for provisioning</li> <li>Helm charts for deployment</li> </ul>"},{"location":"infrastructure-handbook/#gitops","title":"GitOps","text":"<ul> <li>ArgoCD for declarative deployments</li> <li>Configuration drift detection</li> <li>Automated reconciliation</li> <li>Deployment promotion across environments</li> <li>GitOps workflow integration with CI/CD</li> </ul>"},{"location":"infrastructure-handbook/#security","title":"Security","text":"<p>Kubernetes-specific security controls:</p>"},{"location":"infrastructure-handbook/#pod-security","title":"Pod Security","text":"<ul> <li>Pod Security Standards</li> <li>Security Context constraints</li> <li>Read-only file systems</li> <li>Non-root containers</li> <li>Privilege restriction</li> <li>Capability limitations</li> </ul>"},{"location":"infrastructure-handbook/#rbac","title":"RBAC","text":"<ul> <li>Role-based access control</li> <li>Service Accounts for pod identity</li> <li>ClusterRoles and Roles</li> <li>Least privilege principle</li> <li>Regular access review</li> </ul>"},{"location":"infrastructure-handbook/#network-policy","title":"Network Policy","text":"<ul> <li>Default deny policy</li> <li>Service-to-service restrictions</li> <li>Egress control</li> <li>Namespace isolation</li> <li>Cilium for layer 7 policies</li> <li>Istio authorization policies</li> </ul>"},{"location":"infrastructure-handbook/#image-security","title":"Image Security","text":"<ul> <li>Private container registry</li> <li>Image scanning with Trivy</li> <li>Vulnerability management</li> <li>Signing and verification</li> <li>Admission control with OPA Gatekeeper</li> <li>Image pull policies</li> </ul>"},{"location":"infrastructure-handbook/#database-infrastructure","title":"Database Infrastructure","text":""},{"location":"infrastructure-handbook/#postgresql","title":"PostgreSQL","text":"<p>Primary relational database used by Maily:</p>"},{"location":"infrastructure-handbook/#deployment","title":"Deployment","text":"<ul> <li>AWS Aurora PostgreSQL</li> <li>Multi-AZ deployment</li> <li>Read replicas for scaling reads</li> <li>Connection pooling with PgBouncer</li> <li>Performance Insights for monitoring</li> </ul>"},{"location":"infrastructure-handbook/#high-availability_1","title":"High Availability","text":"<ul> <li>Automatic failover</li> <li>Cross-region replication</li> <li>Point-in-time recovery</li> <li>99.99% SLA target</li> <li>Regular restore testing</li> </ul>"},{"location":"infrastructure-handbook/#performance","title":"Performance","text":"<ul> <li>Instance sizing guidelines</li> <li>Query optimization practices</li> <li>Index management</li> <li>Partitioning strategy</li> <li>Vacuum and maintenance</li> <li>Query performance monitoring</li> </ul>"},{"location":"infrastructure-handbook/#security_1","title":"Security","text":"<ul> <li>IAM authentication</li> <li>TLS encryption</li> <li>Data at rest encryption</li> <li>Network isolation</li> <li>Audit logging</li> </ul>"},{"location":"infrastructure-handbook/#redis","title":"Redis","text":"<p>In-memory database for caching and real-time features:</p>"},{"location":"infrastructure-handbook/#deployment_1","title":"Deployment","text":"<ul> <li>AWS ElastiCache for Redis</li> <li>Redis Cluster for sharding</li> <li>Multi-AZ replication</li> <li>Node types and sizing</li> <li>Parameter groups</li> </ul>"},{"location":"infrastructure-handbook/#use-cases","title":"Use Cases","text":"<ul> <li>Session cache</li> <li>API response cache</li> <li>Rate limiting</li> <li>Distributed locking</li> <li>Pub/Sub messaging</li> <li>Leaderboards and counters</li> </ul>"},{"location":"infrastructure-handbook/#operations","title":"Operations","text":"<ul> <li>Monitoring memory usage</li> <li>Eviction policies</li> <li>Backup configuration</li> <li>Cluster scaling</li> <li>Client configuration</li> </ul>"},{"location":"infrastructure-handbook/#security_2","title":"Security","text":"<ul> <li>Authentication</li> <li>In-transit encryption</li> <li>VPC isolation</li> <li>Reserved memory</li> </ul>"},{"location":"infrastructure-handbook/#clickhouse","title":"ClickHouse","text":"<p>Columnar database for analytics workloads:</p>"},{"location":"infrastructure-handbook/#deployment_2","title":"Deployment","text":"<ul> <li>Self-hosted on Kubernetes</li> <li>High availability configuration</li> <li>Storage configuration</li> <li>Resource allocation</li> <li>Query performance optimization</li> </ul>"},{"location":"infrastructure-handbook/#data-management","title":"Data Management","text":"<ul> <li>Table schema design</li> <li>Materialized views</li> <li>Data partitioning</li> <li>TTL policies</li> <li>Compression settings</li> <li>Data import/export</li> </ul>"},{"location":"infrastructure-handbook/#integration","title":"Integration","text":"<ul> <li>Data ingestion pipeline</li> <li>Kafka integration</li> <li>Scheduled ETL jobs</li> <li>Reporting tool integration</li> <li>Query federation</li> </ul>"},{"location":"infrastructure-handbook/#performance_1","title":"Performance","text":"<ul> <li>Query optimization techniques</li> <li>Caching strategies</li> <li>Distribution optimization</li> <li>Resource monitoring</li> <li>Query profiling</li> </ul>"},{"location":"infrastructure-handbook/#backup-recovery","title":"Backup &amp; Recovery","text":"<p>Comprehensive data protection strategy:</p>"},{"location":"infrastructure-handbook/#backup-strategy","title":"Backup Strategy","text":"<ul> <li>Database backup automation</li> <li>Full and incremental backups</li> <li>Point-in-time recovery capabilities</li> <li>Cross-region replication</li> <li>Retention policies</li> <li>Backup verification</li> </ul>"},{"location":"infrastructure-handbook/#restore-procedures","title":"Restore Procedures","text":"<ul> <li>Full database restore process</li> <li>Single table restore process</li> <li>Point-in-time recovery</li> <li>Cross-environment restoration</li> <li>Disaster recovery testing</li> </ul>"},{"location":"infrastructure-handbook/#data-lifecycle","title":"Data Lifecycle","text":"<ul> <li>Data archiving strategy</li> <li>Historical data management</li> <li>Legal hold implementation</li> <li>Compliance requirements</li> <li>Data purging processes</li> </ul>"},{"location":"infrastructure-handbook/#networking_1","title":"Networking","text":""},{"location":"infrastructure-handbook/#service-mesh","title":"Service Mesh","text":"<p>Istio service mesh implementation for service-to-service communication:</p>"},{"location":"infrastructure-handbook/#architecture_1","title":"Architecture","text":"<ul> <li>Control plane configuration</li> <li>Data plane proxies (Envoy)</li> <li>Multi-cluster mesh</li> <li>Gateway configuration</li> <li>Sidecar injection</li> </ul>"},{"location":"infrastructure-handbook/#traffic-management","title":"Traffic Management","text":"<ul> <li>Virtual services</li> <li>Destination rules</li> <li>Request routing</li> <li>Circuit breaking</li> <li>Fault injection</li> <li>Traffic shifting for canary deployments</li> <li>Timeouts and retries</li> </ul>"},{"location":"infrastructure-handbook/#security_3","title":"Security","text":"<ul> <li>mTLS communication</li> <li>Certificate management</li> <li>Authorization policies</li> <li>Authentication policies</li> <li>Trust domain configuration</li> <li>Workload identity</li> </ul>"},{"location":"infrastructure-handbook/#observability","title":"Observability","text":"<ul> <li>Metrics collection</li> <li>Distributed tracing integration</li> <li>Access logging</li> <li>Visualization with Kiali</li> <li>Service dashboard</li> </ul>"},{"location":"infrastructure-handbook/#ingress-load-balancing","title":"Ingress &amp; Load Balancing","text":"<p>External traffic management and load balancing:</p>"},{"location":"infrastructure-handbook/#ingress-controllers","title":"Ingress Controllers","text":"<ul> <li>Istio Gateway</li> <li>AWS Application Load Balancer integration</li> <li>Traffic routing rules</li> <li>Rate limiting</li> <li>WebSocket support</li> <li>HTTP/2 and gRPC support</li> </ul>"},{"location":"infrastructure-handbook/#load-balancing","title":"Load Balancing","text":"<ul> <li>Client-side load balancing</li> <li>Server-side load balancing</li> <li>Session affinity</li> <li>Health checks</li> <li>Connection draining</li> <li>Load balancing algorithms</li> </ul>"},{"location":"infrastructure-handbook/#edge-services","title":"Edge Services","text":"<ul> <li>API Gateway</li> <li>CDN integration</li> <li>Edge caching</li> <li>Bot protection</li> <li>DDoS mitigation</li> </ul>"},{"location":"infrastructure-handbook/#global-load-balancing","title":"Global Load Balancing","text":"<ul> <li>Multi-region routing</li> <li>Latency-based routing</li> <li>Geolocation-based routing</li> <li>Health-based routing</li> <li>Disaster recovery failover</li> </ul>"},{"location":"infrastructure-handbook/#network-security","title":"Network Security","text":"<p>Defense-in-depth network security strategy:</p>"},{"location":"infrastructure-handbook/#perimeter-security","title":"Perimeter Security","text":"<ul> <li>Web Application Firewall (WAF)</li> <li>DDoS protection</li> <li>API gateway security</li> <li>Rate limiting</li> <li>Bot protection</li> <li>IP allowlisting</li> </ul>"},{"location":"infrastructure-handbook/#network-segmentation","title":"Network Segmentation","text":"<ul> <li>VPC design</li> <li>Network ACLs</li> <li>Security groups</li> <li>Transit Gateway configuration</li> <li>VPC peering</li> <li>Network isolation</li> </ul>"},{"location":"infrastructure-handbook/#data-flow-security","title":"Data Flow Security","text":"<ul> <li>TLS everywhere</li> <li>Mutual TLS for internal traffic</li> <li>Certificate management</li> <li>TLS version and cipher control</li> <li>Perfect forward secrecy</li> <li>Certificate transparency</li> </ul>"},{"location":"infrastructure-handbook/#intrusion-detection","title":"Intrusion Detection","text":"<ul> <li>Network flow logs</li> <li>Traffic monitoring</li> <li>Anomaly detection</li> <li>Threat intelligence integration</li> <li>Security incident response</li> </ul>"},{"location":"infrastructure-handbook/#dns-certificate-management","title":"DNS &amp; Certificate Management","text":"<p>DNS infrastructure and TLS certificate automation:</p>"},{"location":"infrastructure-handbook/#dns-architecture","title":"DNS Architecture","text":"<ul> <li>Route 53 for DNS management</li> <li>Private DNS zones</li> <li>Split-horizon DNS</li> <li>Multi-region DNS strategy</li> <li>DNS-based service discovery</li> <li>External-DNS for Kubernetes integration</li> </ul>"},{"location":"infrastructure-handbook/#certificate-management","title":"Certificate Management","text":"<ul> <li>Cert-Manager for automation</li> <li>Let's Encrypt integration</li> <li>Certificate issuance workflow</li> <li>Expiration monitoring</li> <li>Renewal automation</li> <li>Certificate revocation procedures</li> </ul>"},{"location":"infrastructure-handbook/#domain-management","title":"Domain Management","text":"<ul> <li>Domain registration process</li> <li>Domain security controls</li> <li>Domain transfer procedure</li> <li>Subdomain delegation</li> <li>DNS record management</li> <li>CAA records</li> </ul>"},{"location":"infrastructure-handbook/#observability_1","title":"Observability","text":""},{"location":"infrastructure-handbook/#monitoring","title":"Monitoring","text":"<p>Infrastructure and application monitoring:</p>"},{"location":"infrastructure-handbook/#metrics-collection","title":"Metrics Collection","text":"<ul> <li>Prometheus for metrics collection</li> <li>CloudWatch integration</li> <li>Custom metrics</li> <li>Service-level metrics</li> <li>Node-level metrics</li> <li>Container metrics</li> <li>Business metrics</li> </ul>"},{"location":"infrastructure-handbook/#metric-types","title":"Metric Types","text":"<ul> <li>Resource utilization (CPU, memory, disk, network)</li> <li>Application metrics (requests, latency, errors)</li> <li>Business metrics (users, transactions, revenue)</li> <li>SLI/SLO metrics</li> <li>Derived and calculated metrics</li> </ul>"},{"location":"infrastructure-handbook/#implementation","title":"Implementation","text":"<ul> <li>Prometheus Operator</li> <li>ServiceMonitor resources</li> <li>PodMonitor resources</li> <li>Metric relabeling</li> <li>Long-term storage with Thanos</li> <li>Federation for multi-cluster</li> </ul>"},{"location":"infrastructure-handbook/#health-checking","title":"Health Checking","text":"<ul> <li>Readiness probes</li> <li>Liveness probes</li> <li>Startup probes</li> <li>External health checks</li> <li>Synthetic monitoring</li> <li>Black box monitoring</li> </ul>"},{"location":"infrastructure-handbook/#logging","title":"Logging","text":"<p>Centralized logging strategy:</p>"},{"location":"infrastructure-handbook/#log-collection","title":"Log Collection","text":"<ul> <li>Fluent Bit for container logs</li> <li>Vector for log processing</li> <li>Application logs</li> <li>System logs</li> <li>Audit logs</li> <li>Network logs</li> <li>Security logs</li> </ul>"},{"location":"infrastructure-handbook/#storage-retention","title":"Storage &amp; Retention","text":"<ul> <li>Loki for log storage</li> <li>CloudWatch Logs integration</li> <li>Log retention policies</li> <li>Log archiving to S3</li> <li>Cost optimization strategy</li> <li>Compliance requirements</li> </ul>"},{"location":"infrastructure-handbook/#analysis","title":"Analysis","text":"<ul> <li>Log querying with LogQL</li> <li>Log visualization in Grafana</li> <li>Pattern extraction</li> <li>Correlation with metrics and traces</li> <li>Anomaly detection</li> <li>AI-powered log analysis</li> </ul>"},{"location":"infrastructure-handbook/#implementation_1","title":"Implementation","text":"<ul> <li>Structured logging format</li> <li>Log levels and filtering</li> <li>PII handling in logs</li> <li>Log aggregation</li> <li>Log forwarding rules</li> <li>Multi-tenant logging</li> </ul>"},{"location":"infrastructure-handbook/#tracing","title":"Tracing","text":"<p>Distributed tracing for request flow visibility:</p>"},{"location":"infrastructure-handbook/#tracing-implementation","title":"Tracing Implementation","text":"<ul> <li>OpenTelemetry for instrumentation</li> <li>Tempo for trace storage</li> <li>Jaeger UI for visualization</li> <li>Trace sampling strategy</li> <li>Trace context propagation</li> <li>Integration with service mesh</li> </ul>"},{"location":"infrastructure-handbook/#key-features","title":"Key Features","text":"<ul> <li>End-to-end request tracing</li> <li>Service dependency mapping</li> <li>Latency analysis</li> <li>Error tracking</li> <li>Cross-service correlation</li> <li>Resource attribution</li> </ul>"},{"location":"infrastructure-handbook/#integration-points","title":"Integration Points","text":"<ul> <li>Application instrumentation</li> <li>API gateway integration</li> <li>Database query tracing</li> <li>External service calls</li> <li>Asynchronous processing</li> <li>Batch job tracing</li> </ul>"},{"location":"infrastructure-handbook/#alerting","title":"Alerting","text":"<p>Alert management and incident notification:</p>"},{"location":"infrastructure-handbook/#alert-configuration","title":"Alert Configuration","text":"<ul> <li>Alertmanager setup</li> <li>Alert rules in Prometheus</li> <li>Alert severity levels</li> <li>Alert grouping and routing</li> <li>Alert suppression</li> <li>Alert templates</li> </ul>"},{"location":"infrastructure-handbook/#notification-channels","title":"Notification Channels","text":"<ul> <li>PagerDuty integration</li> <li>Slack notifications</li> <li>Email alerts</li> <li>SMS notifications</li> <li>Webhook integration</li> <li>Escalation policies</li> </ul>"},{"location":"infrastructure-handbook/#alert-management","title":"Alert Management","text":"<ul> <li>Alert silencing</li> <li>Alert acknowledgment</li> <li>Alert history</li> <li>Recurring alert analysis</li> <li>Noise reduction strategies</li> <li>Alert SLAs</li> </ul>"},{"location":"infrastructure-handbook/#on-call-procedures","title":"On-Call Procedures","text":"<ul> <li>On-call rotation</li> <li>Escalation paths</li> <li>Incident response procedures</li> <li>Runbook integration</li> <li>Post-mortem process</li> <li>Knowledge sharing</li> </ul>"},{"location":"infrastructure-handbook/#dashboards","title":"Dashboards","text":"<p>Visualization and reporting for monitoring data:</p>"},{"location":"infrastructure-handbook/#dashboard-platform","title":"Dashboard Platform","text":"<ul> <li>Grafana for visualization</li> <li>Dashboard organization</li> <li>Dashboard versioning</li> <li>Dashboard as code</li> <li>Access control</li> <li>Annotation support</li> </ul>"},{"location":"infrastructure-handbook/#standard-dashboards","title":"Standard Dashboards","text":"<ul> <li>Platform overview</li> <li>Kubernetes cluster dashboards</li> <li>Node dashboards</li> <li>Application dashboards</li> <li>Service dashboards</li> <li>Business metrics dashboards</li> <li>Cost dashboards</li> </ul>"},{"location":"infrastructure-handbook/#dashboard-design","title":"Dashboard Design","text":"<ul> <li>Information hierarchy</li> <li>Visual design principles</li> <li>Consistent layout and navigation</li> <li>Performance considerations</li> <li>Mobile-friendly design</li> <li>Templating and variables</li> </ul>"},{"location":"infrastructure-handbook/#sharing-reporting","title":"Sharing &amp; Reporting","text":"<ul> <li>Dashboard sharing</li> <li>Snapshot creation</li> <li>Scheduled reports</li> <li>Alert annotations</li> <li>Dashboard embedding</li> <li>PDF export</li> </ul>"},{"location":"infrastructure-handbook/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"infrastructure-handbook/#build-pipeline","title":"Build Pipeline","text":"<p>Building and packaging application code:</p>"},{"location":"infrastructure-handbook/#ci-infrastructure","title":"CI Infrastructure","text":"<ul> <li>GitHub Actions for CI</li> <li>Self-hosted runners</li> <li>Parallelization strategy</li> <li>Caching mechanism</li> <li>Matrix builds</li> <li>Resource allocation</li> </ul>"},{"location":"infrastructure-handbook/#build-process","title":"Build Process","text":"<ul> <li>Code checkout</li> <li>Dependency installation</li> <li>Compilation and bundling</li> <li>Static analysis</li> <li>Unit testing</li> <li>Code coverage</li> <li>Build artifacts</li> </ul>"},{"location":"infrastructure-handbook/#container-builds","title":"Container Builds","text":"<ul> <li>Dockerfile optimization</li> <li>Multi-stage builds</li> <li>Layer caching</li> <li>Image scanning</li> <li>Image signing</li> <li>Image tagging strategy</li> <li>Image registry</li> </ul>"},{"location":"infrastructure-handbook/#quality-gates","title":"Quality Gates","text":"<ul> <li>Code quality checks</li> <li>Security scanning</li> <li>License compliance</li> <li>Dependency analysis</li> <li>Performance checks</li> <li>Accessibility checks</li> </ul>"},{"location":"infrastructure-handbook/#deployment-pipeline","title":"Deployment Pipeline","text":"<p>Automated application deployment:</p>"},{"location":"infrastructure-handbook/#cd-infrastructure","title":"CD Infrastructure","text":"<ul> <li>ArgoCD for GitOps</li> <li>Environment promotion</li> <li>Deployment approval workflow</li> <li>Rollback capabilities</li> <li>Deployment history</li> <li>Configuration drift detection</li> </ul>"},{"location":"infrastructure-handbook/#deployment-strategies","title":"Deployment Strategies","text":"<ul> <li>Rolling updates</li> <li>Blue/green deployments</li> <li>Canary deployments</li> <li>Feature flags</li> <li>Progressive delivery</li> <li>Deployment windows</li> </ul>"},{"location":"infrastructure-handbook/#release-management","title":"Release Management","text":"<ul> <li>Semantic versioning</li> <li>Release branching strategy</li> <li>Changelog generation</li> <li>Release notes</li> <li>Artifact promotion</li> <li>Release certification</li> </ul>"},{"location":"infrastructure-handbook/#post-deployment","title":"Post-Deployment","text":"<ul> <li>Smoke testing</li> <li>Integration testing</li> <li>Performance testing</li> <li>Chaos testing</li> <li>Monitoring verification</li> <li>User acceptance testing</li> </ul>"},{"location":"infrastructure-handbook/#gitops-workflow","title":"GitOps Workflow","text":"<p>Using Git as the source of truth for infrastructure and applications:</p>"},{"location":"infrastructure-handbook/#gitops-principles","title":"GitOps Principles","text":"<ul> <li>Declarative configuration</li> <li>Version controlled changes</li> <li>Automated application</li> <li>Continuous reconciliation</li> <li>Drift detection</li> <li>Self-healing systems</li> </ul>"},{"location":"infrastructure-handbook/#repository-structure","title":"Repository Structure","text":"<ul> <li>Monorepo vs. polyrepo approach</li> <li>Application code organization</li> <li>Infrastructure code organization</li> <li>Configuration management</li> <li>Environment-specific configuration</li> <li>Secrets management</li> </ul>"},{"location":"infrastructure-handbook/#workflow","title":"Workflow","text":"<ul> <li>Feature branch workflow</li> <li>Pull request process</li> <li>Code review requirements</li> <li>CI integration</li> <li>Merge strategies</li> <li>Atomic commits</li> </ul>"},{"location":"infrastructure-handbook/#implementation_2","title":"Implementation","text":"<ul> <li>ArgoCD for GitOps</li> <li>Application definitions</li> <li>Project structure</li> <li>Sync policies</li> <li>Health checks</li> <li>Resource hooks</li> </ul>"},{"location":"infrastructure-handbook/#testing-strategy","title":"Testing Strategy","text":"<p>Comprehensive testing throughout the deployment pipeline:</p>"},{"location":"infrastructure-handbook/#test-types","title":"Test Types","text":"<ul> <li>Unit tests</li> <li>Integration tests</li> <li>End-to-end tests</li> <li>Performance tests</li> <li>Security tests</li> <li>Chaos tests</li> <li>Compliance tests</li> </ul>"},{"location":"infrastructure-handbook/#test-environments","title":"Test Environments","text":"<ul> <li>Local development testing</li> <li>CI environment testing</li> <li>Staging environment testing</li> <li>Production testing</li> <li>Feature branch environments</li> <li>Preview environments</li> </ul>"},{"location":"infrastructure-handbook/#test-automation","title":"Test Automation","text":"<ul> <li>Test framework selection</li> <li>Test parallelization</li> <li>Test data management</li> <li>Test reporting</li> <li>Flaky test handling</li> <li>Test coverage requirements</li> </ul>"},{"location":"infrastructure-handbook/#specialized-testing","title":"Specialized Testing","text":"<ul> <li>Load testing with k6</li> <li>Chaos testing with Chaos Mesh</li> <li>API contract testing</li> <li>Synthetic monitoring</li> <li>Visual regression testing</li> <li>Accessibility testing</li> </ul>"},{"location":"infrastructure-handbook/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"infrastructure-handbook/#infrastructure-security","title":"Infrastructure Security","text":"<p>Security controls at the infrastructure level:</p>"},{"location":"infrastructure-handbook/#cloud-security","title":"Cloud Security","text":"<ul> <li>AWS security best practices</li> <li>Account structure and isolation</li> <li>IAM roles and policies</li> <li>Service control policies</li> <li>Guard rails and compliance checks</li> <li>Security Hub integration</li> </ul>"},{"location":"infrastructure-handbook/#compute-security","title":"Compute Security","text":"<ul> <li>AMI hardening</li> <li>OS patching strategy</li> <li>Host-based intrusion detection</li> <li>Endpoint protection</li> <li>Container security</li> <li>Kubernetes security</li> </ul>"},{"location":"infrastructure-handbook/#network-security_1","title":"Network Security","text":"<ul> <li>Zero trust networking</li> <li>Microsegmentation</li> <li>Ingress/egress filtering</li> <li>DDoS protection</li> <li>TLS enforcement</li> <li>Network monitoring</li> </ul>"},{"location":"infrastructure-handbook/#data-security","title":"Data Security","text":"<ul> <li>Encryption at rest</li> <li>Encryption in transit</li> <li>Key management</li> <li>Data classification</li> <li>Data loss prevention</li> <li>Backup encryption</li> </ul>"},{"location":"infrastructure-handbook/#access-management","title":"Access Management","text":"<p>Identity and access management strategy:</p>"},{"location":"infrastructure-handbook/#identity-management","title":"Identity Management","text":"<ul> <li>AWS IAM</li> <li>Single sign-on (SSO)</li> <li>Multi-factor authentication</li> <li>Directory services</li> <li>User lifecycle management</li> <li>Just-in-time access</li> </ul>"},{"location":"infrastructure-handbook/#access-controls","title":"Access Controls","text":"<ul> <li>Role-based access control</li> <li>Attribute-based access control</li> <li>Least privilege principle</li> <li>Separation of duties</li> <li>Privileged access management</li> <li>Access certification</li> </ul>"},{"location":"infrastructure-handbook/#federation","title":"Federation","text":"<ul> <li>SAML federation</li> <li>OpenID Connect</li> <li>External identity providers</li> <li>Identity federation</li> <li>Cross-account access</li> <li>Federation governance</li> </ul>"},{"location":"infrastructure-handbook/#implementation_3","title":"Implementation","text":"<ul> <li>AWS SSO</li> <li>Kubernetes RBAC</li> <li>Database access control</li> <li>Application-level permissions</li> <li>Service account management</li> <li>Emergency access procedures</li> </ul>"},{"location":"infrastructure-handbook/#secret-management","title":"Secret Management","text":"<p>Secure management of credentials and secrets:</p>"},{"location":"infrastructure-handbook/#secret-storage","title":"Secret Storage","text":"<ul> <li>AWS Secrets Manager</li> <li>External Secrets Operator</li> <li>HashiCorp Vault integration</li> <li>Secret encryption</li> <li>Secret rotation</li> <li>Secret versioning</li> </ul>"},{"location":"infrastructure-handbook/#secret-access","title":"Secret Access","text":"<ul> <li>IAM-based authorization</li> <li>Service principal authentication</li> <li>Just-in-time access</li> <li>Secret access auditing</li> <li>Access request workflow</li> <li>Temporary credentials</li> </ul>"},{"location":"infrastructure-handbook/#secret-operations","title":"Secret Operations","text":"<ul> <li>Secret creation process</li> <li>Secret rotation automation</li> <li>Secret expiration</li> <li>Secret backup and recovery</li> <li>Cross-environment secrets</li> <li>Secret migration</li> </ul>"},{"location":"infrastructure-handbook/#implementation_4","title":"Implementation","text":"<ul> <li>Application secret integration</li> <li>Kubernetes integration</li> <li>CI/CD pipeline integration</li> <li>Local development secrets</li> <li>Secret scanning in code</li> <li>Secure secret sharing</li> </ul>"},{"location":"infrastructure-handbook/#audit-compliance","title":"Audit &amp; Compliance","text":"<p>Monitoring and enforcing security compliance:</p>"},{"location":"infrastructure-handbook/#audit-trail","title":"Audit Trail","text":"<ul> <li>AWS CloudTrail</li> <li>Control plane auditing</li> <li>Data plane auditing</li> <li>Application audit logs</li> <li>Database audit logs</li> <li>User activity monitoring</li> </ul>"},{"location":"infrastructure-handbook/#compliance-controls","title":"Compliance Controls","text":"<ul> <li>GDPR compliance</li> <li>SOC 2 compliance</li> <li>ISO 27001 compliance</li> <li>PCI DSS compliance</li> <li>HIPAA compliance (where applicable)</li> <li>Regional compliance requirements</li> </ul>"},{"location":"infrastructure-handbook/#security-posture","title":"Security Posture","text":"<ul> <li>Continuous compliance monitoring</li> <li>Vulnerability management</li> <li>Security assessment</li> <li>Penetration testing</li> <li>Bug bounty program</li> <li>Security metrics and reporting</li> </ul>"},{"location":"infrastructure-handbook/#governance","title":"Governance","text":"<ul> <li>Security policies and standards</li> <li>Policy enforcement</li> <li>Compliance reporting</li> <li>Risk management</li> <li>Exception management</li> <li>Security awareness training</li> </ul>"},{"location":"infrastructure-handbook/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"infrastructure-handbook/#backup-strategy_1","title":"Backup Strategy","text":"<p>Data backup and retention strategy:</p>"},{"location":"infrastructure-handbook/#backup-types","title":"Backup Types","text":"<ul> <li>Database backups</li> <li>File system backups</li> <li>Configuration backups</li> <li>Full and incremental backups</li> <li>Snapshot-based backups</li> <li>Continuous backup</li> </ul>"},{"location":"infrastructure-handbook/#backup-infrastructure","title":"Backup Infrastructure","text":"<ul> <li>AWS Backup</li> <li>Velero for Kubernetes</li> <li>PostgreSQL WAL archiving</li> <li>S3 cross-region replication</li> <li>Database read replica backups</li> <li>Third-party backup solutions</li> </ul>"},{"location":"infrastructure-handbook/#retention-lifecycle","title":"Retention &amp; Lifecycle","text":"<ul> <li>Backup retention schedule</li> <li>Backup storage tiering</li> <li>Archival strategy</li> <li>Compliance requirements</li> <li>Cost optimization</li> <li>Backup metadata</li> </ul>"},{"location":"infrastructure-handbook/#validation","title":"Validation","text":"<ul> <li>Backup verification</li> <li>Restoration testing</li> <li>Backup consistency checking</li> <li>Recovery time validation</li> <li>Recovery point validation</li> <li>Backup security validation</li> </ul>"},{"location":"infrastructure-handbook/#recovery-procedures","title":"Recovery Procedures","text":"<p>Processes for recovering from different failure scenarios:</p>"},{"location":"infrastructure-handbook/#recovery-scenarios","title":"Recovery Scenarios","text":"<ul> <li>Single service failure</li> <li>Database failure</li> <li>Region failure</li> <li>Data corruption</li> <li>Security incident</li> <li>Natural disaster</li> </ul>"},{"location":"infrastructure-handbook/#recovery-procedures_1","title":"Recovery Procedures","text":"<ul> <li>Service restoration</li> <li>Database point-in-time recovery</li> <li>Cross-region recovery</li> <li>Kubernetes cluster recovery</li> <li>Data reconstruction</li> <li>Partial service recovery</li> </ul>"},{"location":"infrastructure-handbook/#recovery-coordination","title":"Recovery Coordination","text":"<ul> <li>Incident command structure</li> <li>Communication plan</li> <li>Stakeholder notification</li> <li>Progress tracking</li> <li>Decision making authority</li> <li>External communication</li> </ul>"},{"location":"infrastructure-handbook/#runbooks","title":"Runbooks","text":"<ul> <li>Service-specific recovery procedures</li> <li>Database recovery procedures</li> <li>Regional failover procedures</li> <li>DNS failover procedures</li> <li>Data restoration procedures</li> <li>Verification procedures</li> </ul>"},{"location":"infrastructure-handbook/#business-continuity","title":"Business Continuity","text":"<p>Ensuring continuous operation during disruptions:</p>"},{"location":"infrastructure-handbook/#continuity-planning","title":"Continuity Planning","text":"<ul> <li>Business impact analysis</li> <li>Recovery time objectives (RTO)</li> <li>Recovery point objectives (RPO)</li> <li>Service tier priorities</li> <li>Critical service identification</li> <li>Minimum viable operation</li> </ul>"},{"location":"infrastructure-handbook/#resilience-strategies","title":"Resilience Strategies","text":"<ul> <li>Multi-region active/active</li> <li>Multi-region active/passive</li> <li>Regional isolation</li> <li>Service isolation</li> <li>Graceful degradation</li> <li>Traffic shifting</li> </ul>"},{"location":"infrastructure-handbook/#testing-validation","title":"Testing &amp; Validation","text":"<ul> <li>Disaster recovery drills</li> <li>Table-top exercises</li> <li>Chaos engineering</li> <li>Game days</li> <li>Cross-team coordination</li> <li>Lessons learned</li> </ul>"},{"location":"infrastructure-handbook/#documentation","title":"Documentation","text":"<ul> <li>Disaster recovery plan</li> <li>Business continuity plan</li> <li>Contact information</li> <li>Escalation procedures</li> <li>External dependencies</li> <li>Recovery success criteria</li> </ul>"},{"location":"infrastructure-handbook/#operations-runbook","title":"Operations Runbook","text":""},{"location":"infrastructure-handbook/#common-procedures","title":"Common Procedures","text":"<p>Standardized procedures for routine operations:</p>"},{"location":"infrastructure-handbook/#service-management","title":"Service Management","text":"<ul> <li>Service deployment</li> <li>Service updates</li> <li>Service rollback</li> <li>Service scaling</li> <li>Service decommissioning</li> <li>Maintenance windows</li> </ul>"},{"location":"infrastructure-handbook/#database-operations","title":"Database Operations","text":"<ul> <li>Database provisioning</li> <li>Database scaling</li> <li>Parameter tuning</li> <li>Index management</li> <li>Query optimization</li> <li>Maintenance procedures</li> </ul>"},{"location":"infrastructure-handbook/#kubernetes-operations","title":"Kubernetes Operations","text":"<ul> <li>Cluster provisioning</li> <li>Cluster upgrades</li> <li>Node group management</li> <li>Resource quota management</li> <li>Namespace management</li> <li>CRD and operator management</li> </ul>"},{"location":"infrastructure-handbook/#network-operations","title":"Network Operations","text":"<ul> <li>DNS management</li> <li>Certificate management</li> <li>Network policy updates</li> <li>Service mesh configuration</li> <li>Load balancer management</li> <li>Firewall rule management</li> </ul>"},{"location":"infrastructure-handbook/#incident-response","title":"Incident Response","text":"<p>Processes for handling service disruptions:</p>"},{"location":"infrastructure-handbook/#incident-classification","title":"Incident Classification","text":"<ul> <li>Severity levels</li> <li>Impact assessment</li> <li>Urgency determination</li> <li>Incident types</li> <li>Escalation criteria</li> <li>Notification thresholds</li> </ul>"},{"location":"infrastructure-handbook/#response-process","title":"Response Process","text":"<ul> <li>Detection and alerting</li> <li>Incident declaration</li> <li>Response team assembly</li> <li>Investigation process</li> <li>Mitigation steps</li> <li>Resolution verification</li> <li>Incident closure</li> </ul>"},{"location":"infrastructure-handbook/#communication","title":"Communication","text":"<ul> <li>Status page updates</li> <li>Customer communication</li> <li>Internal communication</li> <li>Escalation communication</li> <li>Executive updates</li> <li>Post-incident reporting</li> </ul>"},{"location":"infrastructure-handbook/#post-mortem","title":"Post-Mortem","text":"<ul> <li>Root cause analysis</li> <li>Contributing factors</li> <li>Timeline reconstruction</li> <li>Impact assessment</li> <li>Corrective actions</li> <li>Preventive measures</li> </ul>"},{"location":"infrastructure-handbook/#capacity-planning","title":"Capacity Planning","text":"<p>Forecasting and managing infrastructure capacity:</p>"},{"location":"infrastructure-handbook/#monitoring-forecasting","title":"Monitoring &amp; Forecasting","text":"<ul> <li>Capacity metrics</li> <li>Growth trend analysis</li> <li>Seasonal pattern identification</li> <li>Forecasting models</li> <li>Capacity thresholds</li> <li>Utilization targets</li> </ul>"},{"location":"infrastructure-handbook/#scaling-strategies","title":"Scaling Strategies","text":"<ul> <li>Horizontal scaling</li> <li>Vertical scaling</li> <li>Auto-scaling configuration</li> <li>Manual scaling procedures</li> <li>Pre-emptive scaling</li> <li>Scheduled scaling</li> </ul>"},{"location":"infrastructure-handbook/#resource-optimization","title":"Resource Optimization","text":"<ul> <li>Rightsizing guidelines</li> <li>Resource allocation review</li> <li>Cost optimization</li> <li>Efficiency metrics</li> <li>Workload placement</li> <li>Reserved capacity management</li> </ul>"},{"location":"infrastructure-handbook/#planning-process","title":"Planning Process","text":"<ul> <li>Quarterly capacity review</li> <li>Annual capacity planning</li> <li>Event-based capacity planning</li> <li>Capacity request workflow</li> <li>Approval thresholds</li> <li>Implementation timeline</li> </ul>"},{"location":"infrastructure-handbook/#change-management","title":"Change Management","text":"<p>Processes for managing infrastructure and configuration changes:</p>"},{"location":"infrastructure-handbook/#change-types","title":"Change Types","text":"<ul> <li>Standard changes</li> <li>Normal changes</li> <li>Emergency changes</li> <li>Change categories</li> <li>Risk assessment</li> <li>Impact assessment</li> </ul>"},{"location":"infrastructure-handbook/#change-process","title":"Change Process","text":"<ul> <li>Change request</li> <li>Change review</li> <li>Change approval</li> <li>Implementation planning</li> <li>Testing requirements</li> <li>Rollback planning</li> <li>Post-implementation review</li> </ul>"},{"location":"infrastructure-handbook/#change-calendar","title":"Change Calendar","text":"<ul> <li>Change freeze periods</li> <li>Maintenance windows</li> <li>Release coordination</li> <li>Change conflict detection</li> <li>Change scheduling</li> <li>Change prioritization</li> </ul>"},{"location":"infrastructure-handbook/#automation","title":"Automation","text":"<ul> <li>CI/CD pipeline integration</li> <li>Automated testing</li> <li>Automated approval for low-risk changes</li> <li>Change tracking</li> <li>Change metrics</li> <li>Compliance verification</li> </ul>"},{"location":"infrastructure-reference/","title":"Infrastructure Reference","text":"<p>Last updated: March 5, 2025</p>"},{"location":"infrastructure-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Cloud Architecture</li> <li>AWS Account Structure</li> <li>Network Architecture</li> <li>Security Groups and IAM</li> <li>Multi-region Strategy</li> <li>Compute Resources</li> <li>Kubernetes Clusters</li> <li>Container Orchestration</li> <li>Serverless Functions</li> <li>EC2 Instances</li> <li>Data Storage</li> <li>Databases</li> <li>Object Storage</li> <li>Caching</li> <li>Message Queues</li> <li>Content Delivery</li> <li>CDN Configuration</li> <li>Edge Computing</li> <li>Domain and DNS Management</li> <li>Networking</li> <li>VPC Configuration</li> <li>Load Balancers</li> <li>API Gateway</li> <li>Transit Gateway</li> <li>Security Infrastructure</li> <li>Encryption</li> <li>Certificate Management</li> <li>WAF and DDoS Protection</li> <li>Secrets Management</li> <li>Monitoring Infrastructure</li> <li>Logging Architecture</li> <li>Metrics Collection</li> <li>Alerting Infrastructure</li> <li>Dashboards</li> <li>DevOps Tooling</li> <li>CI/CD Pipeline</li> <li>Infrastructure as Code</li> <li>Configuration Management</li> <li>Disaster Recovery Infrastructure</li> <li>Backup Systems</li> <li>Recovery Infrastructure</li> <li>Scaling Infrastructure</li> <li>Auto Scaling Configuration</li> <li>Load Testing Infrastructure</li> <li>Cost Management</li> <li>Resource Tagging</li> <li>Budget Alerts</li> <li>Cost Optimization</li> <li>Development Environments</li> <li>Local Infrastructure</li> <li>Staging Environment</li> <li>Preview Environments</li> <li>Appendix</li> <li>Infrastructure Diagrams</li> <li>Resource Inventory</li> <li>Version History</li> </ul>"},{"location":"infrastructure-reference/#overview","title":"Overview","text":"<p>This Infrastructure Reference consolidates information about the Maily platform's underlying infrastructure, serving as the definitive source of truth for all infrastructure components. It combines previously separate documentation into a comprehensive guide that describes the cloud resources, configuration, patterns, and management practices that support the Maily application.</p> <p>The Maily infrastructure follows these key principles:</p> <ol> <li>Infrastructure as Code: All infrastructure is defined and managed through code</li> <li>Security by Default: Security is embedded throughout the infrastructure stack</li> <li>Elasticity: Resources scale automatically based on demand</li> <li>Resilience: Infrastructure is designed to withstand component failures</li> <li>Observability: Comprehensive monitoring and logging across all components</li> </ol>"},{"location":"infrastructure-reference/#cloud-architecture","title":"Cloud Architecture","text":""},{"location":"infrastructure-reference/#aws-account-structure","title":"AWS Account Structure","text":"<p>Maily uses a multi-account AWS structure for security isolation and resource management:</p> Account Purpose Access Management Centralized billing, auditing, and control Admin team only Security Security tools, logging, monitoring Security team Development Development and testing resources Development team Staging Pre-production environment DevOps and QA teams Production Customer-facing services Limited operations access Data Data lakes and analytics Data team and automated processes <p>All accounts are managed through AWS Organizations with centralized policies and Service Control Policies (SCPs) to enforce security guardrails.</p>"},{"location":"infrastructure-reference/#network-architecture","title":"Network Architecture","text":"<p>The core network architecture consists of:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          VPC (10.0.0.0/16)                     \u2502\n\u2502                                                                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502  \u2502 Public      \u2502   \u2502 Application \u2502   \u2502 Database    \u2502          \u2502\n\u2502  \u2502 Subnet      \u2502   \u2502 Subnet      \u2502   \u2502 Subnet      \u2502          \u2502\n\u2502  \u2502 10.0.0.0/24 \u2502   \u2502 10.0.1.0/24 \u2502   \u2502 10.0.2.0/24 \u2502          \u2502\n\u2502  \u2502             \u2502   \u2502             \u2502   \u2502             \u2502          \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502          \u2502\n\u2502  \u2502 \u2502Internet \u2502 \u2502   \u2502 \u2502 EKS     \u2502 \u2502   \u2502 \u2502 RDS     \u2502 \u2502          \u2502\n\u2502  \u2502 \u2502Gateway  \u2502 \u2502   \u2502 \u2502Cluster  \u2502 \u2502   \u2502 \u2502Database \u2502 \u2502          \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2502        \u2502                                                       \u2502\n\u2502        \u2502                                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502  \u2502 NAT         \u2502   \u2502 Service     \u2502   \u2502 Elasticache \u2502          \u2502\n\u2502  \u2502 Gateway     \u2502   \u2502 Subnet      \u2502   \u2502 Subnet      \u2502          \u2502\n\u2502  \u2502             \u2502   \u2502 10.0.3.0/24 \u2502   \u2502 10.0.4.0/24 \u2502          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502             \u2502   \u2502             \u2502          \u2502\n\u2502                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502          \u2502\n\u2502                    \u2502 \u2502 Lambda  \u2502 \u2502   \u2502 \u2502 Redis   \u2502 \u2502          \u2502\n\u2502                    \u2502 \u2502Functions\u2502 \u2502   \u2502 \u2502Cluster  \u2502 \u2502          \u2502\n\u2502                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502          \u2502\n\u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Each AWS region contains at least three availability zones with subnet distribution across all zones for high availability.</p>"},{"location":"infrastructure-reference/#security-groups-and-iam","title":"Security Groups and IAM","text":"<p>Security groups follow the principle of least privilege:</p> Security Group Purpose Inbound Access Outbound Access ALB-SG Application Load Balancer HTTP/HTTPS from Internet Application tier only App-SG Application services ALB-SG only Database, Redis, SQS DB-SG Database instances App-SG only None Redis-SG Cache instances App-SG only None Bastion-SG Management access VPN CIDR only All internal resources <p>IAM roles are assigned to services rather than using credentials:</p> <pre><code>resource \"aws_iam_role\" \"app_role\" {\n  name = \"app-role\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      }\n    ]\n  })\n}\n</code></pre>"},{"location":"infrastructure-reference/#multi-region-strategy","title":"Multi-region Strategy","text":"<p>Maily uses a multi-region strategy for resilience and global performance:</p> Region Role Failover Priority us-east-1 Primary - us-west-2 DR/Failover 1 eu-west-1 Data Residency/Performance 2 <p>Data replication strategy: - Databases: Continuous replication with RDS Multi-AZ and Cross-Region Read Replicas - Object Storage: S3 Cross-Region Replication - Configuration: Deployed to all regions through CI/CD</p>"},{"location":"infrastructure-reference/#compute-resources","title":"Compute Resources","text":""},{"location":"infrastructure-reference/#kubernetes-clusters","title":"Kubernetes Clusters","text":"<p>Maily uses Amazon EKS for container orchestration:</p> Cluster Purpose Size Version production-main Primary production workloads 20-50 nodes v1.28 production-batch Batch processing workloads 5-30 nodes v1.28 staging Pre-production testing 5-10 nodes v1.28 development Feature development 3-5 nodes v1.29 <p>Node types and configurations: - General purpose: m6g.2xlarge (8 vCPU, 32 GiB) - CPU optimized: c6g.4xlarge (16 vCPU, 32 GiB) - Memory optimized: r6g.2xlarge (8 vCPU, 64 GiB)</p> <p>All nodes use Amazon Linux 2023 and are provisioned through auto-scaling groups with mixed instance types for cost optimization.</p>"},{"location":"infrastructure-reference/#container-orchestration","title":"Container Orchestration","text":"<p>Kubernetes resources are managed using:</p> <ol> <li>Helm charts for application deployment</li> <li>Kustomize for environment-specific configurations</li> <li>ArgoCD for GitOps deployment workflow</li> </ol> <p>Key Kubernetes add-ons: - AWS Load Balancer Controller for ALB/NLB integration - External DNS for automatic DNS management - Cert-Manager for certificate automation - Prometheus and Grafana for monitoring - Elastic Stack for logging</p> <pre><code># Example Helm values for production\nreplicaCount: 3\nresources:\n  limits:\n    cpu: 1000m\n    memory: 2Gi\n  requests:\n    cpu: 500m\n    memory: 1Gi\nautoscaling:\n  enabled: true\n  minReplicas: 3\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n</code></pre>"},{"location":"infrastructure-reference/#serverless-functions","title":"Serverless Functions","text":"<p>Lambda functions are used for event-driven processing:</p> Function Purpose Runtime Memory Timeout email-processor Process incoming emails Node.js 20 1024 MB 60s image-resizer Resize uploaded images Node.js 20 2048 MB 30s notification-sender Send push notifications Python 3.11 512 MB 30s report-generator Generate scheduled reports Python 3.11 1024 MB 300s <p>Serverless resources are defined using AWS SAM templates:</p> <pre><code>AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nResources:\n  EmailProcessor:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: ./email-processor/\n      Handler: index.handler\n      Runtime: nodejs20.x\n      Architectures:\n        - arm64\n      MemorySize: 1024\n      Timeout: 60\n      Events:\n        SQSEvent:\n          Type: SQS\n          Properties:\n            Queue: !GetAtt EmailQueue.Arn\n            BatchSize: 10\n</code></pre>"},{"location":"infrastructure-reference/#ec2-instances","title":"EC2 Instances","text":"<p>While most workloads run in Kubernetes or serverless, some specialized instances are used:</p> Instance Purpose Type Count AMI Bastion Secure SSH access t4g.small 2 Amazon Linux 2023 Jenkins CI/CD server m6g.xlarge 2 Custom hardened AMI Analytics Data processing r6g.2xlarge 3 Custom data AMI <p>EC2 instance management: - Provisioned through Terraform - Configured with SSM for passwordless access - Patched automatically through AWS Systems Manager - Backed up using AWS Backup</p>"},{"location":"infrastructure-reference/#data-storage","title":"Data Storage","text":""},{"location":"infrastructure-reference/#databases","title":"Databases","text":"<p>Maily uses multiple database technologies for different use cases:</p> Database Type Purpose Size Scaling Strategy Primary DB PostgreSQL 15 (RDS) Transactional data 8 vCPU, 64GB RAM Vertical + Read Replicas Analytics DB PostgreSQL 15 (RDS) Reporting data 16 vCPU, 128GB RAM Vertical Document Store MongoDB Atlas Flexible schema data M30 Cluster Horizontal sharding Time Series Amazon Timestream Metrics and events On-demand Automatic <p>PostgreSQL databases use the following configuration: - Multi-AZ deployment for high availability - Storage autoscaling enabled (starting at 500GB, max 4TB) - Performance Insights enabled - Daily snapshots retained for 30 days - Parameter groups optimized for workload</p> <p>Connection pooling is implemented using PgBouncer: <pre><code>pool_mode = transaction\nmax_client_conn = 5000\ndefault_pool_size = 100\nreserve_pool_size = 20\nreserve_pool_timeout = 5\n</code></pre></p>"},{"location":"infrastructure-reference/#object-storage","title":"Object Storage","text":"<p>S3 buckets are used for various types of storage:</p> Bucket Purpose Lifecycle Versioning Encryption maily-app-assets Static assets 1 year expiry for older versions Enabled SSE-S3 maily-user-uploads User uploaded content Transition to IA after 30 days Enabled SSE-KMS maily-email-artifacts Email templates and assets No expiration Enabled SSE-KMS maily-analytics-exports Analytics data exports 90 days expiration Disabled SSE-S3 maily-logs Application logs 30 days in S3, then Glacier for 1 year Disabled SSE-S3 maily-backups Database backups 30 days in S3, then Glacier for 6 months Enabled SSE-KMS <p>S3 bucket policy enforces: - HTTPS only access - Server-side encryption - Proper CORS configuration - Access logging enabled</p>"},{"location":"infrastructure-reference/#caching","title":"Caching","text":"<p>Multi-layer caching strategy:</p> Cache Technology Purpose Size TTL Application Cache Redis (ElastiCache) Application data 2 node cluster (cache.m6g.large) Varies by data type Session Store Redis (ElastiCache) User sessions 3 node cluster (cache.m6g.large) 24 hours CDN Cache CloudFront Static assets N/A 24 hours API Cache API Gateway API responses N/A 5 minutes Database Cache RDS Read Replicas Read scaling 2 replicas Real-time <p>Redis cache configuration: - Multi-AZ enabled - Automatic failover - Encryption in-transit and at-rest - Dedicated subnet group</p>"},{"location":"infrastructure-reference/#message-queues","title":"Message Queues","text":"<p>Asynchronous processing uses SQS queues:</p> Queue Purpose Type Retention DLQ mail-delivery Email sending queue Standard 4 days Yes analytics-events Event tracking Standard 14 days Yes webhook-delivery External webhooks FIFO 4 days Yes task-processing Background tasks Standard 7 days Yes <p>Queue configuration includes: - Dead letter queues for all queues - Visibility timeout tuned to processing time - Encryption with AWS KMS - CloudWatch alarms on queue depth</p>"},{"location":"infrastructure-reference/#content-delivery","title":"Content Delivery","text":""},{"location":"infrastructure-reference/#cdn-configuration","title":"CDN Configuration","text":"<p>CloudFront distribution for content delivery:</p> Distribution Origin Cache Policy Security Static Assets S3 (maily-app-assets) 24-hour TTL, compress TLS 1.2+, HSTS API Edge API Gateway 5-minute TTL for safe methods TLS 1.2+, WAF User Content S3 (maily-user-uploads) 1-hour TTL, validate tokens TLS 1.2+, signed URLs <p>CloudFront is configured with: - Custom domain with ACM certificate - Modern TLS configuration - Geographic restrictions where needed - Origin shield enabled in us-east-1 - Real-time logs to Kinesis Data Firehose</p>"},{"location":"infrastructure-reference/#edge-computing","title":"Edge Computing","text":"<p>CloudFront functions for lightweight edge processing:</p> Function Purpose Trigger url-rewriter Handle URL normalization Viewer request auth-validator Validate authentication tokens Viewer request response-headers Add security headers Viewer response analytics-injector Add analytics script Viewer response <p>Lambda@Edge for complex edge processing:</p> Function Purpose Trigger image-transformer Dynamic image transformations Origin request a-b-tester A/B testing logic Viewer request geo-router Geographic routing Viewer request cache-controller Dynamic cache control Origin response"},{"location":"infrastructure-reference/#domain-and-dns-management","title":"Domain and DNS Management","text":"<p>DNS is managed through Route 53:</p> Domain Type Routing Policy Health Check maily.io Apex Failover Yes www.maily.io CNAME Failover Yes api.maily.io A (Alias) Latency Yes app.maily.io A (Alias) Weighted Yes docs.maily.io CNAME Simple No *.user.maily.io A (Alias) Latency Yes <p>Domain configuration includes: - Automatic certificate renewal through ACM - DNSSEC enabled - CAA records set - Monitoring of DNS resolution</p>"},{"location":"infrastructure-reference/#networking","title":"Networking","text":""},{"location":"infrastructure-reference/#vpc-configuration","title":"VPC Configuration","text":"<p>Each environment uses a dedicated VPC with the following design:</p> VPC CIDR Subnets NAT Gateways Production 10.0.0.0/16 3 public, 9 private 3 (one per AZ) Staging 10.1.0.0/16 3 public, 6 private 1 Development 10.2.0.0/16 3 public, 3 private 1 <p>Subnet allocation: - Public subnets: 10.x.0.0/24, 10.x.1.0/24, 10.x.2.0/24 - App subnets: 10.x.10.0/24, 10.x.11.0/24, 10.x.12.0/24 - DB subnets: 10.x.20.0/24, 10.x.21.0/24, 10.x.22.0/24 - Service subnets: 10.x.30.0/24, 10.x.31.0/24, 10.x.32.0/24</p> <p>Network ACLs are configured for additional security beyond security groups: <pre><code># Example NACL rules for Application Subnets\n100 ALLOW TCP 80,443 FROM 0.0.0.0/0\n110 ALLOW TCP 22 FROM Bastion-SG\n120 ALLOW TCP 1024-65535 FROM 0.0.0.0/0\n* DENY ALL ALL FROM 0.0.0.0/0\n</code></pre></p>"},{"location":"infrastructure-reference/#load-balancers","title":"Load Balancers","text":"<p>Application Load Balancers (ALB) distribute traffic:</p> Load Balancer Type Target Groups SSL Policy External ALB Internet-facing Web, API ELBSecurityPolicy-TLS13-1-2-2021-06 Internal ALB Internal Services, Admin ELBSecurityPolicy-TLS13-1-2-2021-06 NLB Network TCP Services N/A <p>Load balancer configuration: - HTTP to HTTPS redirection - WebSockets enabled for real-time features - Access logs enabled and stored in S3 - WAF integration on external ALBs - Cross-zone load balancing enabled</p>"},{"location":"infrastructure-reference/#api-gateway","title":"API Gateway","text":"<p>API Gateway serves as the primary API entry point:</p> API Type Endpoint Type Authorizers Main API REST Regional Cognito, Lambda, IAM Admin API REST Private IAM Webhook API HTTP Regional Lambda WebSocket API WebSocket Regional Lambda <p>API Gateway configuration: - Custom domain names with ACM certificates - Request validation using JSON Schema - Throttling and quota limits - Usage plans for API consumers - Detailed CloudWatch logging</p>"},{"location":"infrastructure-reference/#transit-gateway","title":"Transit Gateway","text":"<p>AWS Transit Gateway connects multiple VPCs and on-premises networks:</p> Attachment Type CIDR Route Table Production VPC VPC 10.0.0.0/16 Production Staging VPC VPC 10.1.0.0/16 Non-Production Development VPC VPC 10.2.0.0/16 Non-Production Corporate Network VPN 172.16.0.0/16 Corporate <p>Transit Gateway route tables segregate traffic: - Production route table can access all networks - Non-Production can access non-production and corporate - Corporate can access all networks</p>"},{"location":"infrastructure-reference/#security-infrastructure","title":"Security Infrastructure","text":""},{"location":"infrastructure-reference/#encryption","title":"Encryption","text":"<p>Data encryption strategy:</p> Data Type Encryption Method Key Management Rotation Data at Rest AWS KMS Customer managed keys Annually Data in Transit TLS 1.2+ ACM certificates Automatically Database RDS Encryption Customer managed keys Annually Secrets Secrets Manager AWS managed keys Automatically Backups AWS Backup Customer managed keys Annually <p>KMS key policies follow least privilege: <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Enable IAM User Permissions\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::123456789012:root\"\n      },\n      \"Action\": \"kms:*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"Allow service-role use of the key\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::123456789012:role/app-role\"\n      },\n      \"Action\": [\n        \"kms:Decrypt\",\n        \"kms:GenerateDataKey*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"infrastructure-reference/#certificate-management","title":"Certificate Management","text":"<p>TLS certificates are managed through ACM:</p> Certificate Domains Renewal Validation Wildcard *.maily.io Automatic DNS Apex maily.io Automatic DNS Internal *.internal.maily.io Automatic DNS User Content *.user.maily.io Automatic DNS <p>Certificate best practices: - Minimum TLS 1.2 enforced - Modern cipher suites only - OCSP stapling enabled - CAA records configured - Certificate transparency logging</p>"},{"location":"infrastructure-reference/#waf-and-ddos-protection","title":"WAF and DDoS Protection","text":"<p>Web Application Firewall (WAF) protection:</p> Protection Rule Sets Rate Limits Integration Points AWS WAF AWS Core, OWASP Top 10 10,000 rpm CloudFront, ALB Rate-Based Rules Geographic Restrictions 5,000 rpm per IP CloudFront, ALB Bot Control Standard protection - CloudFront Shield Advanced DDoS protection - CloudFront, ALB, Global Accelerator <p>WAF rules include: - SQL injection protection - Cross-site scripting (XSS) protection - Path traversal detection - Remote code execution prevention - Geographic blocks for high-risk countries - Known bad IP reputation lists</p>"},{"location":"infrastructure-reference/#secrets-management","title":"Secrets Management","text":"<p>Secrets are managed through AWS Secrets Manager:</p> Secret Type Rotation Access Control Monitoring Database Credentials 30 days IAM roles CloudTrail API Keys 90 days IAM roles CloudTrail Service Accounts 90 days IAM roles CloudTrail Certificates Automatic IAM roles CloudTrail <p>Secret access pattern: - Services fetch secrets at startup - Secrets are cached with refresh on rotation - Secret access is logged and monitored - Alerts triggered on unusual access patterns</p>"},{"location":"infrastructure-reference/#monitoring-infrastructure","title":"Monitoring Infrastructure","text":""},{"location":"infrastructure-reference/#logging-architecture","title":"Logging Architecture","text":"<p>Centralized logging architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Application  \u2502    \u2502 CloudWatch   \u2502    \u2502 Elasticsearch \u2502\n\u2502 Logs         \u2502\u2500\u2500\u2500\u25ba\u2502 Logs         \u2502\u2500\u2500\u2500\u25ba\u2502 Service     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2                   \u25b2                  \u25b2\n       \u2502                   \u2502                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Container    \u2502    \u2502 Lambda       \u2502    \u2502 Firehose    \u2502\n\u2502 Logs         \u2502    \u2502 Logs         \u2502    \u2502 Delivery    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Log streams and retention: - Application logs: 30 days in CloudWatch, 1 year in S3 - Security logs: 90 days in CloudWatch, 7 years in S3 - Infrastructure logs: 14 days in CloudWatch, 90 days in S3 - Access logs: 30 days in CloudWatch, 1 year in S3</p> <p>Log analytics tools: - Elasticsearch Service for search and analysis - CloudWatch Logs Insights for ad-hoc queries - Kibana dashboards for visualization - Automated log scanning for security events</p>"},{"location":"infrastructure-reference/#metrics-collection","title":"Metrics Collection","text":"<p>Multi-level metrics collection:</p> Level Tool Collection Interval Retention Infrastructure CloudWatch 1 minute 15 days Container Prometheus 15 seconds 15 days Application Custom metrics 1 minute 15 days Business Custom metrics 5 minutes 90 days <p>Key metrics collected: - Resource utilization (CPU, memory, disk, network) - Request rates, latencies, and error rates - Business process completion rates - Custom application metrics - SLI metrics for SLO tracking</p>"},{"location":"infrastructure-reference/#alerting-infrastructure","title":"Alerting Infrastructure","text":"<p>Alert management infrastructure:</p> Component Tool Purpose Alert Generation CloudWatch Alarms Trigger alerts based on metrics Alert Aggregation AWS SNS Distribute alerts to multiple destinations Alert Processing Lambda Deduplicate and enrich alerts Alert Delivery PagerDuty Notify on-call personnel Alert Management PagerDuty Manage escalations and scheduling <p>Alert configuration: - Composite alarms to reduce noise - Different thresholds for different environments - Auto-resolution of resolved issues - Alert throttling to prevent storms - Contextual information linked to dashboards</p>"},{"location":"infrastructure-reference/#dashboards","title":"Dashboards","text":"<p>Operational dashboards infrastructure:</p> Dashboard Tool Purpose Audience System Health Grafana Overall system status Operations Performance Datadog Detailed performance metrics Engineering Business QuickSight Business metrics Executive Security CloudWatch Security events Security <p>Dashboard best practices: - Consistent layout and design - Clear visualization of thresholds - Linked runbooks for troubleshooting - Single-sign-on access control - Regular review and updates</p>"},{"location":"infrastructure-reference/#devops-tooling","title":"DevOps Tooling","text":""},{"location":"infrastructure-reference/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Continuous integration and delivery pipeline:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Source     \u2502   \u2502 Build      \u2502   \u2502 Test       \u2502   \u2502 Deploy     \u2502\n\u2502 GitHub     \u2502\u2500\u2500\u25ba\u2502 CodeBuild  \u2502\u2500\u2500\u25ba\u2502 CodeBuild  \u2502\u2500\u2500\u25ba\u2502 ArgoCD     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Pipeline stages: - Source: Code checkout from GitHub - Build: Compile, lint, security scan - Test: Unit tests, integration tests - Deploy: Automated deployment through ArgoCD</p> <p>Release process automation: - Automatic versioning - Changelog generation - Release notes publication - Deployment tracking</p>"},{"location":"infrastructure-reference/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Infrastructure management tools:</p> Tool Purpose Repository Terraform Core infrastructure infrastructure/terraform AWS CDK Application infrastructure infrastructure/cdk Helm Kubernetes resources kubernetes/helm AWS SAM Serverless resources serverless <p>Infrastructure as Code best practices: - State stored in S3 with DynamoDB locking - Modular design with reusable modules - Comprehensive automated testing - Drift detection and prevention - Documentation generated from code</p>"},{"location":"infrastructure-reference/#configuration-management","title":"Configuration Management","text":"<p>Configuration management approach:</p> Level Tool Storage Access Infrastructure Terraform Git + S3 CI/CD Application Parameter Store AWS Parameter Store IAM roles Secrets Secrets Manager AWS Secrets Manager IAM roles Runtime Config AppConfig AWS AppConfig IAM roles <p>Configuration deployment: - Environment-specific configurations - Feature flags for runtime toggles - Configuration validation before deployment - Audit trail of configuration changes - Automated rollback for configuration issues</p>"},{"location":"infrastructure-reference/#disaster-recovery-infrastructure","title":"Disaster Recovery Infrastructure","text":""},{"location":"infrastructure-reference/#backup-systems","title":"Backup Systems","text":"<p>Comprehensive backup infrastructure:</p> Data Type Backup Service Schedule Retention RDS Databases Automated Backups + AWS Backup Daily full, 5-minute transaction logs 30 days EBS Volumes AWS Backup Daily 30 days S3 Data Versioning + Cross-Region Replication Continuous 30 days (versions) EFS Filesystems AWS Backup Daily 30 days DynamoDB Point-in-Time Recovery + AWS Backup Continuous + Weekly 35 days PITR, 1 year backups <p>Backup management: - Centralized management through AWS Backup - Automated testing of critical backups - Encryption of all backups - Cross-region/cross-account backup copies - Regular backup audit and testing</p>"},{"location":"infrastructure-reference/#recovery-infrastructure","title":"Recovery Infrastructure","text":"<p>Disaster recovery resources:</p> Component Primary Region DR Region Replication Compute us-east-1 us-west-2 AMIs copied, EKS config replicated Databases us-east-1 us-west-2 Continuous via read replicas Storage us-east-1 us-west-2 S3 cross-region replication DNS Global Global Route 53 failover records <p>Recovery automation: - Infrastructure recovery scripts - Database promotion automation - DNS failover automation - Load balancer failover scripts - Recovery testing framework</p>"},{"location":"infrastructure-reference/#scaling-infrastructure","title":"Scaling Infrastructure","text":""},{"location":"infrastructure-reference/#auto-scaling-configuration","title":"Auto Scaling Configuration","text":"<p>Automatic scaling resources:</p> Resource Scaling Type Min Max Metrics EKS Node Groups EC2 Auto Scaling 3 50 CPU, Memory, Custom Application Pods Kubernetes HPA 3 30 CPU, Memory, Custom RDS Instances Aurora Auto Scaling 1 5 CPU, Connections Lambda Functions Concurrent Executions 1 1000 Invocations <p>Auto scaling policies: - Target tracking for predictable workloads - Step scaling for rapid response - Scheduled scaling for known patterns - Cooldown periods to prevent thrashing - Gradual scale-in to prevent disruption</p>"},{"location":"infrastructure-reference/#load-testing-infrastructure","title":"Load Testing Infrastructure","text":"<p>Infrastructure for performance testing:</p> Component Tool Capacity Use Case Load Generation Locust Up to 100,000 concurrent users API load testing Synthetic Monitoring CloudWatch Synthetics 1-minute frequency Continuous monitoring Performance Analysis CloudWatch Evidently A/B testing Feature performance Chaos Engineering AWS Fault Injection Service Controlled failures Resilience testing <p>Load testing environment: - Isolated test environment that mirrors production - Automated load tests as part of CI/CD - Performance regression detection - Capacity planning simulations</p>"},{"location":"infrastructure-reference/#cost-management","title":"Cost Management","text":""},{"location":"infrastructure-reference/#resource-tagging","title":"Resource Tagging","text":"<p>Comprehensive tagging strategy:</p> Tag Purpose Example Required Environment Identify environment production, staging Yes Service Identify service api, frontend, worker Yes Owner Team responsible platform-team, data-team Yes CostCenter Billing allocation marketing, engineering Yes Project Associated project user-auth-revamp No <p>Tag enforcement: - AWS Organization Tag Policies - Terraform provider configuration - CI/CD validation - Regular compliance auditing</p>"},{"location":"infrastructure-reference/#budget-alerts","title":"Budget Alerts","text":"<p>Cost management alerts:</p> Budget Threshold Notification Recipients Total AWS Spend 80%, 90%, 100% Email, Slack Finance, Engineering Leads Per-Service Spend 120% of forecast Email, Slack Service Owners Per-Project Spend 80%, 100% Email, Slack Project Managers Unusual Activity Anomaly detection Email, Slack Engineering Leads <p>Budget configuration: - Monthly budgets aligned with fiscal periods - Forecasted budgets based on historical trends - Anomaly detection for unusual spending - Detailed cost attribution reports</p>"},{"location":"infrastructure-reference/#cost-optimization","title":"Cost Optimization","text":"<p>Infrastructure cost optimization:</p> Strategy Implementation Savings Reserved Instances 1-year and 3-year commitments ~40% Savings Plans Compute Savings Plans ~20% Spot Instances Non-critical workloads ~70% Autoscaling Based on demand ~25% Storage Lifecycle Intelligent tiering ~30% <p>Optimization tools: - AWS Cost Explorer - AWS Compute Optimizer - CloudWatch metrics for resource utilization - Custom cost analysis scripts - Monthly optimization reviews</p>"},{"location":"infrastructure-reference/#development-environments","title":"Development Environments","text":""},{"location":"infrastructure-reference/#local-infrastructure","title":"Local Infrastructure","text":"<p>Developer environment infrastructure:</p> Component Tool Purpose Container Engine Docker Desktop Local containers Kubernetes Minikube or K3d Local Kubernetes Database Docker containers Local data storage AWS Services LocalStack AWS service emulation Secrets dotenv files Local secrets <p>Local development best practices: - Docker Compose for service orchestration - Volume mounts for fast feedback - Database seeding scripts - Configuration parity with production - Documentation for environment setup</p>"},{"location":"infrastructure-reference/#staging-environment","title":"Staging Environment","text":"<p>Staging environment configuration:</p> Aspect Configuration Differences from Production Scale Approximately 25% of production Smaller instance sizes, fewer replicas Data Anonymized copy of production Personal data obfuscated Access CI/CD, developers (read), DevOps (admin) More permissive access Features All features, including unreleased Feature flags enabled Monitoring Full monitoring stack Fewer alerts, lower priority <p>Staging refresh process: - Weekly refresh from production - Automated data anonymization - Configuration updates to match production - Load testing on staging before production deployment</p>"},{"location":"infrastructure-reference/#preview-environments","title":"Preview Environments","text":"<p>Ephemeral environment infrastructure:</p> Feature Implementation Lifecycle PR Environments EKS Namespaces Created with PR, deleted on merge Demo Environments Complete stack Created on demand, expires after 7 days Feature Environments Shared infrastructure, isolated services Created for feature testing, expires after 3 days <p>Preview environment tooling: - Automatic DNS provisioning - Isolated database instances - Access controls via GitHub authentication - Resource quotas to limit costs - Automatic cleanup of expired environments</p>"},{"location":"infrastructure-reference/#appendix","title":"Appendix","text":""},{"location":"infrastructure-reference/#infrastructure-diagrams","title":"Infrastructure Diagrams","text":"<p>Detailed architecture diagrams are maintained in draw.io format in the following locations: - High-level architecture: <code>/docs/diagrams/infrastructure-overview.drawio</code> - Network architecture: <code>/docs/diagrams/network-architecture.drawio</code> - Data flow: <code>/docs/diagrams/data-flow-architecture.drawio</code> - Security architecture: <code>/docs/diagrams/security-architecture.drawio</code> - CI/CD pipeline: <code>/docs/diagrams/cicd-pipeline.drawio</code></p>"},{"location":"infrastructure-reference/#resource-inventory","title":"Resource Inventory","text":"<p>An automated resource inventory is maintained through AWS Config and custom scripts:</p> Resource Type Count Location Tool EC2 Instances 75 AWS Config AWS Resource Explorer RDS Instances 12 AWS Config AWS Resource Explorer S3 Buckets 25 AWS Config AWS Resource Explorer Lambda Functions 35 AWS Config AWS Resource Explorer EKS Clusters 4 AWS Config AWS Resource Explorer <p>Inventory reports are generated weekly and stored in S3.</p>"},{"location":"infrastructure-reference/#version-history","title":"Version History","text":"Version Date Author Changes 1.0 2025-01-15 DevOps Team Initial consolidated version 1.1 2025-02-10 DevOps Team Added multi-region strategy 1.2 2025-03-01 DevOps Team Updated cost management section 1.3 2025-03-05 DevOps Team Added new database cluster details"},{"location":"integration-guide/","title":"Maily Integration Guide","text":"<p>Last Updated: March 6, 2023</p>"},{"location":"integration-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>API Integration</li> <li>Authentication</li> <li>Rate Limits</li> <li>Error Handling</li> <li>API Versioning</li> <li>Core Endpoints</li> <li>Campaigns API</li> <li>Subscribers API</li> <li>Templates API</li> <li>Analytics API</li> <li>SDK Integrations</li> <li>JavaScript SDK</li> <li>Python SDK</li> <li>PHP SDK</li> <li>Ruby SDK</li> <li>Webhook Events</li> <li>Event Structure</li> <li>Event Types</li> <li>Webhook Security</li> <li>Retries and Failures</li> <li>Single Sign-On</li> <li>SAML Integration</li> <li>OAuth 2.0</li> <li>JWT Authentication</li> <li>Third-Party Integrations</li> <li>CRM Integrations</li> <li>E-commerce Platforms</li> <li>Analytics Services</li> <li>Content Management Systems</li> <li>Nango Integration Platform</li> <li>AI Integration</li> <li>Architecture Overview</li> <li>Core Components</li> <li>AI Features Implementation</li> <li>Integration Points</li> <li>Custom Integrations</li> <li>ETL Processes</li> <li>Custom Data Import</li> <li>Data Export Options</li> <li>Implementation Best Practices</li> <li>Security Considerations</li> <li>Troubleshooting</li> <li>Continuous Integration<ul> <li>Testing Integration Points</li> <li>CI/CD Pipeline Integration</li> </ul> </li> </ol>"},{"location":"integration-guide/#overview","title":"Overview","text":"<p>This guide serves as the comprehensive reference for integrating with the Maily platform. It consolidates all integration-related documentation and provides developers with the tools, information, and best practices needed to build robust connections with Maily.</p> <p>The Maily platform offers multiple integration methods to accommodate different use cases and technical requirements. Whether you're implementing simple API calls, setting up webhooks, or building complex custom integrations, this guide provides the necessary details and examples.</p>"},{"location":"integration-guide/#api-integration","title":"API Integration","text":""},{"location":"integration-guide/#authentication","title":"Authentication","text":"<p>All API requests to the Maily platform require authentication. We support two primary authentication methods:</p>"},{"location":"integration-guide/#api-key-authentication","title":"API Key Authentication","text":"<p>The most common method for server-to-server integrations. API keys can be generated in the Maily dashboard under Settings &gt; API.</p> <pre><code>curl -X GET \"https://api.maily.com/v1/campaigns\" \\\n  -H \"Authorization: Bearer your-api-key\"\n</code></pre> <p>API keys should be kept secure and never exposed in client-side code.</p>"},{"location":"integration-guide/#oauth-20-authentication","title":"OAuth 2.0 Authentication","text":"<p>For applications acting on behalf of users, OAuth 2.0 authentication is recommended. This requires registering your application in the Maily dashboard.</p> <pre><code>// Redirect users to the Maily authorization URL\nconst authUrl = `https://app.maily.com/oauth/authorize?client_id=${clientId}&amp;redirect_uri=${redirectUri}&amp;response_type=code&amp;scope=read_campaigns,write_subscribers`;\n</code></pre> <p>After the user grants permission, exchange the authorization code for an access token:</p> <pre><code>const response = await fetch('https://api.maily.com/oauth/token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    grant_type: 'authorization_code',\n    client_id: clientId,\n    client_secret: clientSecret,\n    code: authorizationCode,\n    redirect_uri: redirectUri\n  })\n});\n\nconst { access_token, refresh_token, expires_in } = await response.json();\n</code></pre>"},{"location":"integration-guide/#rate-limits","title":"Rate Limits","text":"<p>To ensure platform stability and fair usage, the Maily API implements rate limiting:</p> Plan Rate Limit Basic 60 requests per minute Professional 300 requests per minute Enterprise 1,000 requests per minute <p>Rate limit headers are included in all API responses:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 58\nX-RateLimit-Reset: 1615293600\n</code></pre> <p>If you exceed the rate limit, the API will respond with a <code>429 Too Many Requests</code> status code.</p>"},{"location":"integration-guide/#error-handling","title":"Error Handling","text":"<p>The Maily API uses standard HTTP status codes and returns detailed error messages in JSON format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"invalid_parameter\",\n    \"message\": \"The subscriber email address is invalid\",\n    \"param\": \"email\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre> <p>Common error codes include:</p> Status Code Description 400 Bad Request - Invalid parameters 401 Unauthorized - Authentication failed 403 Forbidden - Insufficient permissions 404 Not Found - Resource doesn't exist 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Server-side issue <p>For robust integration, implement proper error handling and retry logic with exponential backoff for rate limits and temporary errors.</p>"},{"location":"integration-guide/#api-versioning","title":"API Versioning","text":"<p>The Maily API uses date-based versioning to ensure backward compatibility:</p> <pre><code>https://api.maily.com/v1/campaigns\n</code></pre> <p>Major versions are incremented when backward-incompatible changes are introduced. We maintain support for previous versions for at least 12 months after a new version is released.</p> <p>Version deprecation notices are sent via email and displayed in the dashboard at least 3 months before end-of-life.</p>"},{"location":"integration-guide/#core-endpoints","title":"Core Endpoints","text":""},{"location":"integration-guide/#campaigns-api","title":"Campaigns API","text":"<p>The Campaigns API allows you to create, manage, and monitor email campaigns programmatically.</p>"},{"location":"integration-guide/#list-campaigns","title":"List Campaigns","text":"<pre><code>GET /v1/campaigns\n</code></pre> <p>Query parameters:</p> Parameter Description status Filter by campaign status (draft, scheduled, active, completed) limit Number of campaigns to return (default: 25, max: 100) offset Pagination offset sort Sort field and direction (e.g., created_at:desc) <p>Response example:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"camp_12345\",\n      \"name\": \"Welcome Series\",\n      \"status\": \"active\",\n      \"subject\": \"Welcome to Maily!\",\n      \"created_at\": \"2023-03-01T12:00:00Z\",\n      \"scheduled_at\": \"2023-03-02T08:00:00Z\",\n      \"stats\": {\n        \"recipients\": 1250,\n        \"opens\": 420,\n        \"clicks\": 65\n      }\n    },\n    // More campaigns...\n  ],\n  \"meta\": {\n    \"total\": 18,\n    \"limit\": 25,\n    \"offset\": 0\n  }\n}\n</code></pre>"},{"location":"integration-guide/#create-campaign","title":"Create Campaign","text":"<pre><code>POST /v1/campaigns\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"name\": \"Product Launch\",\n  \"subject\": \"Introducing Our New Product\",\n  \"template_id\": \"tmpl_67890\",\n  \"segment_id\": \"seg_12345\",\n  \"schedule\": {\n    \"send_at\": \"2023-03-15T09:00:00Z\",\n    \"time_zone\": \"America/New_York\"\n  },\n  \"settings\": {\n    \"from_name\": \"Marketing Team\",\n    \"from_email\": \"marketing@example.com\",\n    \"reply_to\": \"support@example.com\"\n  },\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello {{name}}&lt;/h1&gt;&lt;p&gt;Check out our new product!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"Hello {{name}}, Check out our new product!\"\n  }\n}\n</code></pre>"},{"location":"integration-guide/#get-campaign","title":"Get Campaign","text":"<pre><code>GET /v1/campaigns/:id\n</code></pre>"},{"location":"integration-guide/#update-campaign","title":"Update Campaign","text":"<pre><code>PATCH /v1/campaigns/:id\n</code></pre>"},{"location":"integration-guide/#delete-campaign","title":"Delete Campaign","text":"<pre><code>DELETE /v1/campaigns/:id\n</code></pre>"},{"location":"integration-guide/#campaign-actions","title":"Campaign Actions","text":"<pre><code>POST /v1/campaigns/:id/send    # Send a draft campaign\nPOST /v1/campaigns/:id/pause   # Pause an active campaign\nPOST /v1/campaigns/:id/resume  # Resume a paused campaign\nPOST /v1/campaigns/:id/cancel  # Cancel a scheduled campaign\nPOST /v1/campaigns/:id/duplicate  # Duplicate a campaign\n</code></pre>"},{"location":"integration-guide/#subscribers-api","title":"Subscribers API","text":"<p>The Subscribers API enables managing contact lists and subscriber data.</p>"},{"location":"integration-guide/#list-subscribers","title":"List Subscribers","text":"<pre><code>GET /v1/subscribers\n</code></pre> <p>Query parameters:</p> Parameter Description segment_id Filter by segment status Filter by status (active, unsubscribed, bounced) email Search by email address limit Number of subscribers to return (default: 25, max: 100) offset Pagination offset"},{"location":"integration-guide/#createupdate-subscriber","title":"Create/Update Subscriber","text":"<pre><code>POST /v1/subscribers\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"email\": \"user@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"status\": \"active\",\n  \"custom_fields\": {\n    \"company\": \"Acme Inc\",\n    \"industry\": \"Technology\",\n    \"plan_level\": \"premium\"\n  },\n  \"tags\": [\"new-user\", \"product-interest-a\"]\n}\n</code></pre>"},{"location":"integration-guide/#bulk-operations","title":"Bulk Operations","text":"<pre><code>POST /v1/subscribers/batch\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"subscribers\": [\n    {\n      \"email\": \"user1@example.com\",\n      \"first_name\": \"Jane\"\n    },\n    {\n      \"email\": \"user2@example.com\",\n      \"first_name\": \"Bob\"\n    }\n  ],\n  \"update_existing\": true\n}\n</code></pre>"},{"location":"integration-guide/#subscriber-actions","title":"Subscriber Actions","text":"<pre><code>POST /v1/subscribers/:id/unsubscribe  # Unsubscribe a subscriber\nPOST /v1/subscribers/:id/resubscribe  # Resubscribe a subscriber\n</code></pre>"},{"location":"integration-guide/#templates-api","title":"Templates API","text":"<p>The Templates API allows managing email templates programmatically.</p>"},{"location":"integration-guide/#list-templates","title":"List Templates","text":"<pre><code>GET /v1/templates\n</code></pre>"},{"location":"integration-guide/#create-template","title":"Create Template","text":"<pre><code>POST /v1/templates\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"name\": \"Monthly Newsletter\",\n  \"category\": \"newsletters\",\n  \"content\": {\n    \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Monthly Update&lt;/h1&gt;{{content}}&lt;/body&gt;&lt;/html&gt;\",\n    \"text\": \"Monthly Update\\n\\n{{content}}\"\n  },\n  \"variables\": [\"content\", \"user_name\", \"products\"]\n}\n</code></pre>"},{"location":"integration-guide/#template-operations","title":"Template Operations","text":"<pre><code>GET /v1/templates/:id          # Get template details\nPATCH /v1/templates/:id        # Update template\nDELETE /v1/templates/:id       # Delete template\nPOST /v1/templates/:id/test    # Send test email\n</code></pre>"},{"location":"integration-guide/#analytics-api","title":"Analytics API","text":"<p>The Analytics API provides access to campaign performance data.</p>"},{"location":"integration-guide/#campaign-analytics","title":"Campaign Analytics","text":"<pre><code>GET /v1/analytics/campaigns/:id\n</code></pre> <p>Query parameters:</p> Parameter Description start_date Start date for analytics (ISO format) end_date End date for analytics (ISO format) metrics Comma-separated list of metrics (opens, clicks, bounces, etc.) interval Interval for time-series data (hourly, daily, weekly) <p>Response example:</p> <pre><code>{\n  \"campaign\": {\n    \"id\": \"camp_12345\",\n    \"name\": \"Product Announcement\"\n  },\n  \"summary\": {\n    \"recipients\": 5000,\n    \"delivered\": 4950,\n    \"opens\": 1850,\n    \"unique_opens\": 1420,\n    \"clicks\": 650,\n    \"unique_clicks\": 520,\n    \"bounces\": 50,\n    \"unsubscribes\": 15\n  },\n  \"rates\": {\n    \"delivery_rate\": 99.0,\n    \"open_rate\": 37.0,\n    \"click_rate\": 13.0,\n    \"bounce_rate\": 1.0,\n    \"unsubscribe_rate\": 0.3\n  },\n  \"timeline\": [\n    {\n      \"date\": \"2023-03-01T00:00:00Z\",\n      \"opens\": 950,\n      \"clicks\": 320\n    },\n    // More timeline data...\n  ]\n}\n</code></pre>"},{"location":"integration-guide/#subscriber-analytics","title":"Subscriber Analytics","text":"<pre><code>GET /v1/analytics/subscribers/:id\n</code></pre> <p>Response includes engagement history, campaign interactions, and activity timeline.</p>"},{"location":"integration-guide/#sdk-integrations","title":"SDK Integrations","text":""},{"location":"integration-guide/#javascript-sdk","title":"JavaScript SDK","text":"<p>The Maily JavaScript SDK provides a convenient way to integrate with the Maily API from browser or Node.js applications.</p>"},{"location":"integration-guide/#installation","title":"Installation","text":"<pre><code>npm install @maily/sdk\n# or\nyarn add @maily/sdk\n</code></pre>"},{"location":"integration-guide/#usage","title":"Usage","text":"<pre><code>import { MailyClient } from '@maily/sdk';\n\n// Initialize the client\nconst maily = new MailyClient({\n  apiKey: 'your-api-key',\n  version: 'v1'\n});\n\n// Create a subscriber\nasync function addSubscriber() {\n  try {\n    const subscriber = await maily.subscribers.create({\n      email: 'user@example.com',\n      first_name: 'John',\n      last_name: 'Doe',\n      custom_fields: {\n        company: 'Acme Inc'\n      }\n    });\n\n    console.log('Subscriber created:', subscriber.id);\n  } catch (error) {\n    console.error('Error creating subscriber:', error.message);\n  }\n}\n\n// Get campaign analytics\nasync function getCampaignStats(campaignId) {\n  try {\n    const stats = await maily.analytics.getCampaign(campaignId, {\n      metrics: ['opens', 'clicks', 'bounces'],\n      interval: 'daily'\n    });\n\n    console.log('Campaign stats:', stats);\n  } catch (error) {\n    console.error('Error fetching stats:', error.message);\n  }\n}\n</code></pre>"},{"location":"integration-guide/#python-sdk","title":"Python SDK","text":""},{"location":"integration-guide/#installation_1","title":"Installation","text":"<pre><code>pip install maily-sdk\n</code></pre>"},{"location":"integration-guide/#usage_1","title":"Usage","text":"<pre><code>from maily import MailyClient\n\n# Initialize the client\nmaily = MailyClient(api_key='your-api-key')\n\n# Create a campaign\ncampaign = maily.campaigns.create(\n    name=\"Product Announcement\",\n    subject=\"Exciting News About Our Product\",\n    template_id=\"tmpl_12345\",\n    segment_id=\"seg_67890\",\n    content={\n        \"html\": \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello {{name}}&lt;/h1&gt;&lt;p&gt;We have news!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\",\n        \"text\": \"Hello {{name}}, We have news!\"\n    },\n    schedule={\n        \"send_at\": \"2023-04-01T09:00:00Z\",\n        \"time_zone\": \"UTC\"\n    }\n)\n\nprint(f\"Campaign created with ID: {campaign.id}\")\n\n# List subscribers\nsubscribers = maily.subscribers.list(limit=50, status=\"active\")\nfor subscriber in subscribers.data:\n    print(f\"{subscriber.email}: {subscriber.status}\")\n</code></pre>"},{"location":"integration-guide/#php-sdk","title":"PHP SDK","text":""},{"location":"integration-guide/#installation_2","title":"Installation","text":"<pre><code>composer require maily/maily-php\n</code></pre>"},{"location":"integration-guide/#usage_2","title":"Usage","text":"<pre><code>&lt;?php\nrequire 'vendor/autoload.php';\n\n$maily = new Maily\\MailyClient('your-api-key');\n\n// Get a list of templates\n$templates = $maily-&gt;templates-&gt;list([\n    'category' =&gt; 'newsletters',\n    'limit' =&gt; 25\n]);\n\nforeach ($templates-&gt;data as $template) {\n    echo $template-&gt;name . \"\\n\";\n}\n\n// Create a new segment\n$segment = $maily-&gt;segments-&gt;create([\n    'name' =&gt; 'Active Premium Users',\n    'description' =&gt; 'Users on premium plan who have been active in the last 30 days',\n    'filter' =&gt; [\n        'type' =&gt; 'and',\n        'conditions' =&gt; [\n            [\n                'field' =&gt; 'custom_fields.plan',\n                'operator' =&gt; 'equals',\n                'value' =&gt; 'premium'\n            ],\n            [\n                'field' =&gt; 'last_active_at',\n                'operator' =&gt; 'greater_than',\n                'value' =&gt; date('c', strtotime('-30 days'))\n            ]\n        ]\n    ]\n]);\n\necho \"Created segment with ID: \" . $segment-&gt;id;\n</code></pre>"},{"location":"integration-guide/#ruby-sdk","title":"Ruby SDK","text":""},{"location":"integration-guide/#installation_3","title":"Installation","text":"<pre><code>gem install maily-sdk\n</code></pre>"},{"location":"integration-guide/#usage_3","title":"Usage","text":"<pre><code>require 'maily'\n\n# Initialize the client\nmaily = Maily::Client.new(api_key: 'your-api-key')\n\n# Send a test email\nresponse = maily.campaigns.send_test(\n  campaign_id: 'camp_12345',\n  recipients: ['test@example.com'],\n  subject_line: 'Test: Product Announcement'\n)\n\nputs \"Test email sent: #{response.success}\"\n\n# Get analytics for multiple campaigns\nanalytics = maily.analytics.compare_campaigns(\n  campaign_ids: ['camp_12345', 'camp_67890'],\n  metrics: ['opens', 'clicks', 'conversions']\n)\n\nanalytics.data.each do |campaign|\n  puts \"#{campaign.name}: Open rate #{campaign.rates.open_rate}%\"\nend\n</code></pre>"},{"location":"integration-guide/#webhook-events","title":"Webhook Events","text":"<p>Webhooks allow your application to receive real-time notifications about events in the Maily platform.</p>"},{"location":"integration-guide/#event-structure","title":"Event Structure","text":"<p>All webhook events share a common structure:</p> <pre><code>{\n  \"id\": \"evt_1234567890\",\n  \"created_at\": \"2023-03-01T12:00:00Z\",\n  \"type\": \"campaign.sent\",\n  \"data\": {\n    // Event-specific data\n  }\n}\n</code></pre>"},{"location":"integration-guide/#event-types","title":"Event Types","text":""},{"location":"integration-guide/#campaign-events","title":"Campaign Events","text":"<ul> <li><code>campaign.created</code> - Campaign created</li> <li><code>campaign.updated</code> - Campaign updated</li> <li><code>campaign.sent</code> - Campaign sent</li> <li><code>campaign.completed</code> - Campaign delivery completed</li> <li><code>campaign.canceled</code> - Campaign canceled</li> </ul>"},{"location":"integration-guide/#subscriber-events","title":"Subscriber Events","text":"<ul> <li><code>subscriber.created</code> - New subscriber added</li> <li><code>subscriber.updated</code> - Subscriber data updated</li> <li><code>subscriber.unsubscribed</code> - Subscriber unsubscribed</li> <li><code>subscriber.bounced</code> - Email to subscriber bounced</li> <li><code>subscriber.complained</code> - Subscriber reported spam</li> </ul>"},{"location":"integration-guide/#email-events","title":"Email Events","text":"<ul> <li><code>email.sent</code> - Email sent</li> <li><code>email.delivered</code> - Email delivered</li> <li><code>email.opened</code> - Email opened</li> <li><code>email.clicked</code> - Link in email clicked</li> <li><code>email.bounced</code> - Email bounced</li> <li><code>email.dropped</code> - Email dropped (invalid address, etc.)</li> </ul>"},{"location":"integration-guide/#webhook-security","title":"Webhook Security","text":"<p>To ensure the security of webhook events, we sign all webhook payloads. The signature is included in the <code>X-Maily-Signature</code> header.</p> <pre><code>const crypto = require('crypto');\n\nfunction verifyWebhookSignature(payload, signature, secret) {\n  const expectedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(payload)\n    .digest('hex');\n\n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(expectedSignature)\n  );\n}\n\n// In your webhook handler\nfunction handleWebhook(req, res) {\n  const payload = req.body;\n  const signature = req.headers['x-maily-signature'];\n\n  if (!verifyWebhookSignature(JSON.stringify(payload), signature, webhookSecret)) {\n    return res.status(401).send('Invalid signature');\n  }\n\n  // Process the webhook event\n  const event = payload;\n  console.log(`Received event: ${event.type}`);\n\n  // Handle different event types\n  switch (event.type) {\n    case 'campaign.sent':\n      handleCampaignSent(event.data);\n      break;\n    case 'email.opened':\n      handleEmailOpened(event.data);\n      break;\n    // Handle other event types...\n  }\n\n  res.status(200).send('Webhook received');\n}\n</code></pre>"},{"location":"integration-guide/#retries-and-failures","title":"Retries and Failures","text":"<p>If your webhook endpoint returns a non-200 response or times out, we will retry the delivery using the following schedule:</p> <ul> <li>1st retry: 5 minutes after the initial attempt</li> <li>2nd retry: 30 minutes after the initial attempt</li> <li>3rd retry: 2 hours after the initial attempt</li> <li>4th retry: 6 hours after the initial attempt</li> <li>5th retry: 24 hours after the initial attempt</li> </ul> <p>After the 5th retry, the event will be marked as failed and will not be retried again.</p> <p>You can view failed webhook deliveries in the Maily dashboard and manually retry them if needed.</p>"},{"location":"integration-guide/#single-sign-on","title":"Single Sign-On","text":""},{"location":"integration-guide/#saml-integration","title":"SAML Integration","text":"<p>Maily supports SAML 2.0 for enterprise single sign-on integration.</p>"},{"location":"integration-guide/#configuration-steps","title":"Configuration Steps","text":"<ol> <li>Exchange Metadata</li> <li>Provide your Identity Provider (IdP) metadata to Maily</li> <li> <p>Download Maily's Service Provider (SP) metadata</p> </li> <li> <p>Configure IdP Settings</p> </li> <li>Entity ID: <code>https://auth.maily.com/saml2</code></li> <li>ACS URL: <code>https://auth.maily.com/saml2/acs</code></li> <li> <p>RelayState: Optional, for deep linking</p> </li> <li> <p>Attribute Mapping</p> </li> <li>Email: <code>email</code> or <code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress</code></li> <li>First Name: <code>firstName</code> or <code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname</code></li> <li>Last Name: <code>lastName</code> or <code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname</code></li> <li>Role: <code>role</code> or <code>http://schemas.microsoft.com/ws/2008/06/identity/claims/role</code></li> </ol>"},{"location":"integration-guide/#testing-and-troubleshooting","title":"Testing and Troubleshooting","text":"<ul> <li>Initiate a test login from the Maily dashboard</li> <li>Check IdP logs for authentication failures</li> <li>Verify certificate expiration dates</li> <li>Ensure clock synchronization between IdP and Maily</li> </ul>"},{"location":"integration-guide/#oauth-20","title":"OAuth 2.0","text":"<p>For applications that need to allow users to authorize access to their Maily account.</p>"},{"location":"integration-guide/#registration","title":"Registration","text":"<p>Register your application in the Maily dashboard to receive a client ID and secret.</p>"},{"location":"integration-guide/#authorization-flow","title":"Authorization Flow","text":"<ol> <li>Authorization Request</li> </ol> <pre><code>GET https://app.maily.com/oauth/authorize\n</code></pre> <p>Parameters: - <code>client_id</code>: Your application's client ID - <code>redirect_uri</code>: URL to redirect back to after authorization - <code>response_type</code>: Set to <code>code</code> - <code>scope</code>: Space-separated list of permissions - <code>state</code>: Random string to prevent CSRF attacks</p> <ol> <li>Token Exchange</li> </ol> <pre><code>POST https://api.maily.com/oauth/token\n</code></pre> <p>Request body: - <code>grant_type</code>: <code>authorization_code</code> - <code>client_id</code>: Your application's client ID - <code>client_secret</code>: Your application's client secret - <code>code</code>: The authorization code received - <code>redirect_uri</code>: Must match the original redirect URI</p> <p>Response:</p> <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 7200,\n  \"refresh_token\": \"def50200b97...\",\n  \"scope\": \"read_campaigns write_subscribers\"\n}\n</code></pre> <ol> <li>Using the Access Token</li> </ol> <pre><code>curl -X GET \"https://api.maily.com/v1/campaigns\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre> <ol> <li>Refreshing Tokens</li> </ol> <pre><code>POST https://api.maily.com/oauth/token\n</code></pre> <p>Request body: - <code>grant_type</code>: <code>refresh_token</code> - <code>client_id</code>: Your application's client ID - <code>client_secret</code>: Your application's client secret - <code>refresh_token</code>: The refresh token</p>"},{"location":"integration-guide/#jwt-authentication","title":"JWT Authentication","text":"<p>For server-to-server integrations, JWT authentication provides a stateless authentication mechanism.</p>"},{"location":"integration-guide/#creating-a-jwt","title":"Creating a JWT","text":"<pre><code>const jwt = require('jsonwebtoken');\n\nfunction generateJWT(apiKey, apiSecret) {\n  const now = Math.floor(Date.now() / 1000);\n\n  const payload = {\n    iss: apiKey,\n    iat: now,\n    exp: now + 300, // 5 minutes expiration\n    jti: randomUUID() // Unique token ID\n  };\n\n  return jwt.sign(payload, apiSecret, { algorithm: 'HS256' });\n}\n\n// Use the JWT for authentication\nconst token = generateJWT('api_key', 'api_secret');\n\nfetch('https://api.maily.com/v1/campaigns', {\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n});\n</code></pre>"},{"location":"integration-guide/#third-party-integrations","title":"Third-Party Integrations","text":""},{"location":"integration-guide/#crm-integrations","title":"CRM Integrations","text":"<p>Maily offers pre-built integrations with popular CRM platforms.</p>"},{"location":"integration-guide/#salesforce-integration","title":"Salesforce Integration","text":"<ol> <li>Authentication Setup</li> <li>Configure OAuth 2.0 between Maily and Salesforce</li> <li> <p>Grant appropriate permissions</p> </li> <li> <p>Data Synchronization</p> </li> <li>Leads and Contacts sync with Maily subscribers</li> <li>Campaign results sync back to Salesforce</li> <li> <p>Custom field mapping</p> </li> <li> <p>Automation</p> </li> <li>Trigger Maily campaigns from Salesforce workflows</li> <li>Update Salesforce based on email engagement</li> </ol>"},{"location":"integration-guide/#hubspot-integration","title":"HubSpot Integration","text":"<ol> <li>Connection Setup</li> <li>Authorize connection in Maily dashboard</li> <li> <p>Select data to synchronize</p> </li> <li> <p>Features</p> </li> <li>Two-way contact synchronization</li> <li>Campaign performance in HubSpot</li> <li>Engagement scoring</li> </ol>"},{"location":"integration-guide/#e-commerce-platforms","title":"E-commerce Platforms","text":""},{"location":"integration-guide/#shopify-integration","title":"Shopify Integration","text":"<ol> <li>Installation</li> <li>Install Maily app from Shopify App Store</li> <li> <p>Configure data permissions</p> </li> <li> <p>Capabilities</p> </li> <li>Customer sync with segmentation</li> <li>Order data for personalization</li> <li>Abandoned cart recovery campaigns</li> <li>Product recommendation blocks</li> </ol>"},{"location":"integration-guide/#woocommerce-integration","title":"WooCommerce Integration","text":"<ol> <li>Setup</li> <li>Install Maily plugin</li> <li> <p>API key configuration</p> </li> <li> <p>Features</p> </li> <li>Customer and order synchronization</li> <li>Product feeds</li> <li>Purchase-based campaign triggers</li> <li>Revenue attribution</li> </ol>"},{"location":"integration-guide/#analytics-services","title":"Analytics Services","text":""},{"location":"integration-guide/#google-analytics-integration","title":"Google Analytics Integration","text":"<ol> <li>Configuration</li> <li>Add tracking parameters to email links</li> <li> <p>UTM parameter customization</p> </li> <li> <p>Tracking Options</p> </li> <li>Campaign source/medium tracking</li> <li>Click event tracking</li> <li>Conversion attribution</li> </ol>"},{"location":"integration-guide/#segment-integration","title":"Segment Integration","text":"<ol> <li>Setup</li> <li>Configure Maily as a source in Segment</li> <li> <p>Map customer identity</p> </li> <li> <p>Features</p> </li> <li>Event streaming</li> <li>Audience syncing</li> <li>Cross-platform journey tracking</li> </ol>"},{"location":"integration-guide/#content-management-systems","title":"Content Management Systems","text":""},{"location":"integration-guide/#wordpress-integration","title":"WordPress Integration","text":"<ol> <li>Installation</li> <li>Install Maily WordPress plugin</li> <li> <p>Connect with API keys</p> </li> <li> <p>Features</p> </li> <li>Form integration</li> <li>Content synchronization</li> <li>Post-to-newsletter automation</li> </ol>"},{"location":"integration-guide/#nango-integration-platform","title":"Nango Integration Platform","text":"<p>Maily uses the Nango open-source API integration platform to enable seamless connection to third-party platforms like LinkedIn, Twitter, Gmail, and Outlook. This significantly reduces the development time and maintenance burden for multi-platform integrations.</p>"},{"location":"integration-guide/#benefits-of-nango-integration","title":"Benefits of Nango Integration","text":"<ol> <li>Streamlined OAuth Implementation: Handles complex OAuth flows for various platforms, reducing authentication code by 80-90%.</li> <li>Unified Token Management: Securely stores, encrypts, and automatically refreshes access tokens.</li> <li>Normalized API Access: Provides consistent interfaces across different platforms.</li> <li>Built-in Syncing: Handles data synchronization logic across platforms.</li> <li>Development Speed: Reduces integration development time by 40-50%.</li> </ol>"},{"location":"integration-guide/#architecture","title":"Architecture","text":"<p>The Nango integration in Maily consists of several components:</p> <ol> <li>Backend Services:</li> <li><code>NangoIntegrationService</code>: Core service for interacting with the Nango API</li> <li><code>PlatformIntegrationOrchestrator</code>: Orchestrates platform integrations using Nango and OctoTools</li> <li> <p><code>IdentityResolutionService</code>: Resolves identities across different platforms</p> </li> <li> <p>API Routes:</p> </li> <li><code>/api/integrations/connect</code>: Start the platform connection flow</li> <li><code>/api/integrations/callback</code>: Handle OAuth callbacks</li> <li><code>/api/integrations/connections</code>: List connected platforms</li> <li><code>/api/integrations/sync</code>: Trigger synchronization</li> <li><code>/api/integrations/{platform}</code>: Disconnect a platform</li> <li><code>/api/integrations/{platform}/{sync_type}/data</code>: Get synchronized data</li> </ol>"},{"location":"integration-guide/#supported-platforms","title":"Supported Platforms","text":"<ol> <li>LinkedIn</li> <li>Search for people, send messages, access connections</li> <li> <p>Synchronizes contacts, companies, and posts</p> </li> <li> <p>Twitter</p> </li> <li>Post tweets, search for tweets, access followers</li> <li> <p>Synchronizes followers and tweets</p> </li> <li> <p>Gmail</p> </li> <li>Send emails, search for emails, access contacts</li> <li> <p>Synchronizes contacts and messages</p> </li> <li> <p>Outlook</p> </li> <li>Send emails, search for emails, access contacts</li> <li>Synchronizes contacts and messages</li> </ol>"},{"location":"integration-guide/#identity-resolution","title":"Identity Resolution","text":"<p>The <code>IdentityResolutionService</code> provides cross-platform identity resolution, allowing Maily to:</p> <ol> <li>Match contacts across different platforms</li> <li>Create a unified view of contacts</li> <li>Assign confidence scores to matches</li> <li>Generate global identifiers for contacts</li> </ol>"},{"location":"integration-guide/#implementation","title":"Implementation","text":"<p>To implement Nango integration:</p> <pre><code>// Connect to a platform\nconst response = await fetch('/api/integrations/connect', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    platform: 'linkedin',\n    redirectUrl: window.location.href\n  })\n});\n\nconst { authUrl } = await response.json();\nwindow.location.href = authUrl;\n\n// After authentication, list connected platforms\nconst connections = await fetch('/api/integrations/connections').then(res =&gt; res.json());\n\n// Trigger a sync\nawait fetch('/api/integrations/sync', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    platform: 'linkedin',\n    syncType: 'contacts'\n  })\n});\n\n// Get synchronized data\nconst contacts = await fetch('/api/integrations/linkedin/contacts/data').then(res =&gt; res.json());\n</code></pre>"},{"location":"integration-guide/#ai-integration","title":"AI Integration","text":"<p>Maily's AI integration enables advanced capabilities throughout the platform, leveraging modern LLM technologies and custom AI services.</p>"},{"location":"integration-guide/#architecture-overview","title":"Architecture Overview","text":"<p>The AI integration architecture follows a layered approach:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              AI Orchestration           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Task Router    \u2502     Model Manager     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Chain Manager  \u2502   Retrieval System    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                 \u25b2\n          \u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Model Adapters             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 OpenAI  \u2502 Anthropic\u2502  Google  \u2502  Local   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                 \u25b2\n          \u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Knowledge Base             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Templates\u2502 Segments \u2502 Campaigns \u2502 Domain  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"integration-guide/#core-components","title":"Core Components","text":""},{"location":"integration-guide/#1-model-adapter-architecture","title":"1. Model Adapter Architecture","text":"<p>The model adapter architecture provides a unified interface to multiple LLM providers:</p> <ul> <li>Base Adapter Interface: Defines common methods for all LLMs</li> <li>Provider-Specific Adapters: Implements provider-specific functionality</li> <li>Fallback Chain: Creates fallback patterns for reliability</li> <li>Model Versioning: Tracks model versions for reproducibility</li> </ul> <p>Example implementation:</p> <pre><code>// Base adapter interface\ninterface LLMAdapter {\n  generate(prompt: string, options?: GenerationOptions): Promise&lt;string&gt;;\n  embedding(text: string): Promise&lt;number[]&gt;;\n  moderateContent(text: string): Promise&lt;ModerationResult&gt;;\n  streamGeneration(prompt: string, callback: (chunk: string) =&gt; void): Promise&lt;void&gt;;\n}\n\n// OpenAI implementation\nclass OpenAIAdapter implements LLMAdapter {\n  private client: OpenAIClient;\n  private modelName: string;\n\n  constructor(apiKey: string, modelName: string = 'gpt-4o') {\n    this.client = new OpenAIClient(apiKey);\n    this.modelName = modelName;\n  }\n\n  async generate(prompt: string, options?: GenerationOptions): Promise&lt;string&gt; {\n    // Implementation\n  }\n\n  // Other methods...\n}\n</code></pre>"},{"location":"integration-guide/#2-retrieval-augmented-generation-rag","title":"2. Retrieval Augmented Generation (RAG)","text":"<p>Implements RAG for domain-specific knowledge:</p> <ul> <li>Document Processing: Converts domain documents to embeddings</li> <li>Vector Database: Stores and queries embeddings efficiently</li> <li>Retrieval Strategies: Implements semantic search algorithms</li> <li>Generation with Context: Augments LLM prompts with retrieved context</li> </ul>"},{"location":"integration-guide/#3-ai-task-orchestration","title":"3. AI Task Orchestration","text":"<p>The AI orchestration system:</p> <ul> <li>Task Routing: Directs tasks to appropriate AI services</li> <li>Chain of Thought: Implements multi-step reasoning</li> <li>Human Feedback: Incorporates user feedback for improvement</li> <li>Result Validation: Verifies AI outputs for quality</li> </ul>"},{"location":"integration-guide/#ai-features-implementation","title":"AI Features Implementation","text":"<p>The AI integration provides several key features:</p> <ol> <li>Email Content Generation: Automatically generates subject lines and email content</li> <li>Audience Segmentation: Uses clustering for smart segmentation</li> <li>Engagement Prediction: Predicts email open and click rates</li> <li>Content Optimization: Suggests improvements to email content</li> <li>A/B Testing Automation: Automatically generates test variants</li> </ol>"},{"location":"integration-guide/#integration-points","title":"Integration Points","text":"<p>To integrate with Maily's AI capabilities:</p> <pre><code>// Generate email subject lines\nconst subjectLines = await fetch('/api/ai/generate/subject-lines', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    campaignInfo: {\n      name: 'Summer Sale',\n      products: ['Sunglasses', 'Beach towels'],\n      targetAudience: 'Young adults',\n      goal: 'Increase sales'\n    },\n    count: 5\n  })\n}).then(res =&gt; res.json());\n\n// Generate email body\nconst emailBody = await fetch('/api/ai/generate/email-body', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    template: 'promotional',\n    campaignInfo: {\n      name: 'Summer Sale',\n      products: ['Sunglasses', 'Beach towels'],\n      discount: '20%',\n      startDate: '2023-06-01',\n      endDate: '2023-06-15'\n    }\n  })\n}).then(res =&gt; res.json());\n\n// Get audience segmentation recommendations\nconst segments = await fetch('/api/ai/recommend/segments', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    subscriberData: 'csv_data_url',\n    segmentCount: 3\n  })\n}).then(res =&gt; res.json());\n</code></pre>"},{"location":"integration-guide/#custom-integrations","title":"Custom Integrations","text":""},{"location":"integration-guide/#etl-processes","title":"ETL Processes","text":"<p>For complex data integration scenarios, Maily supports ETL (Extract, Transform, Load) processes.</p>"},{"location":"integration-guide/#data-warehouse-integration","title":"Data Warehouse Integration","text":"<ol> <li>Export Options</li> <li>Scheduled data exports</li> <li>Real-time event streaming</li> <li> <p>Historical data dumps</p> </li> <li> <p>Compatible Systems</p> </li> <li>Snowflake</li> <li>Amazon Redshift</li> <li>Google BigQuery</li> <li> <p>Microsoft Azure Synapse</p> </li> <li> <p>Implementation Example</p> </li> </ol> <pre><code>import pandas as pd\nfrom maily import MailyClient\n\n# Initialize client\nmaily = MailyClient(api_key='your-api-key')\n\n# Extract campaign performance data\ncampaigns = maily.analytics.get_campaigns(\n    start_date='2023-01-01',\n    end_date='2023-03-01',\n    metrics=['opens', 'clicks', 'conversions']\n)\n\n# Transform data into tabular format\ncampaign_data = []\nfor campaign in campaigns.data:\n    for day in campaign.timeline:\n        campaign_data.append({\n            'campaign_id': campaign.id,\n            'campaign_name': campaign.name,\n            'date': day.date,\n            'opens': day.opens,\n            'clicks': day.clicks,\n            'conversions': day.conversions\n        })\n\n# Create DataFrame\ndf = pd.DataFrame(campaign_data)\n\n# Load to data warehouse (example for Snowflake)\nfrom snowflake.connector.pandas_tools import write_pandas\n\nwrite_pandas(\n    conn=snowflake_conn,\n    df=df,\n    table_name='CAMPAIGN_PERFORMANCE',\n    schema='MARKETING'\n)\n</code></pre>"},{"location":"integration-guide/#custom-data-import","title":"Custom Data Import","text":"<p>For importing data from custom sources.</p>"},{"location":"integration-guide/#batch-import-api","title":"Batch Import API","text":"<pre><code>POST /v1/imports\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"source\": \"custom\",\n  \"data_type\": \"subscribers\",\n  \"mapping\": {\n    \"email\": \"email_address\",\n    \"first_name\": \"first\",\n    \"last_name\": \"last\",\n    \"custom_fields.company\": \"organization\",\n    \"custom_fields.industry\": \"sector\"\n  },\n  \"options\": {\n    \"update_existing\": true,\n    \"skip_invalid\": true\n  },\n  \"data\": [\n    {\n      \"email_address\": \"john@example.com\",\n      \"first\": \"John\",\n      \"last\": \"Smith\",\n      \"organization\": \"Acme Inc\",\n      \"sector\": \"Technology\"\n    },\n    // More records...\n  ]\n}\n</code></pre>"},{"location":"integration-guide/#large-file-imports","title":"Large File Imports","text":"<p>For larger datasets:</p> <ol> <li>Request an upload URL</li> </ol> <pre><code>POST /v1/imports/file\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"filename\": \"subscribers.csv\",\n  \"mime_type\": \"text/csv\",\n  \"size\": 1048576,\n  \"data_type\": \"subscribers\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"upload_url\": \"https://uploads.maily.com/temp/abcdef123456\",\n  \"import_id\": \"imp_123456\"\n}\n</code></pre> <ol> <li>Upload the file</li> </ol> <pre><code>PUT https://uploads.maily.com/temp/abcdef123456\n</code></pre> <ol> <li>Configure and start the import</li> </ol> <pre><code>POST /v1/imports/imp_123456/start\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"mapping\": {\n    \"email\": \"Email Address\",\n    \"first_name\": \"First Name\",\n    \"last_name\": \"Last Name\"\n  },\n  \"options\": {\n    \"has_headers\": true,\n    \"update_existing\": true\n  }\n}\n</code></pre>"},{"location":"integration-guide/#data-export-options","title":"Data Export Options","text":"<p>Exporting data from Maily for use in external systems.</p>"},{"location":"integration-guide/#scheduled-exports","title":"Scheduled Exports","text":"<p>Configure regular data exports in the dashboard:</p> <ol> <li>Export Configuration</li> <li>Data type (subscribers, campaigns, events)</li> <li>Format (CSV, JSON)</li> <li>Delivery method (S3, SFTP, HTTP webhook)</li> <li> <p>Schedule (daily, weekly, monthly)</p> </li> <li> <p>Export Customization</p> </li> <li>Field selection</li> <li>Filtering criteria</li> <li>Date ranges</li> </ol>"},{"location":"integration-guide/#api-export","title":"API Export","text":"<pre><code>POST /v1/exports\n</code></pre> <p>Request body:</p> <pre><code>{\n  \"data_type\": \"subscribers\",\n  \"format\": \"csv\",\n  \"filters\": {\n    \"status\": \"active\",\n    \"segment_id\": \"seg_12345\"\n  },\n  \"fields\": [\n    \"email\",\n    \"first_name\",\n    \"last_name\",\n    \"created_at\",\n    \"custom_fields.company\"\n  ]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"export_id\": \"exp_67890\",\n  \"status\": \"processing\",\n  \"estimated_completion\": \"2023-03-01T12:30:00Z\"\n}\n</code></pre> <p>Check export status:</p> <pre><code>GET /v1/exports/exp_67890\n</code></pre> <p>Response when complete:</p> <pre><code>{\n  \"export_id\": \"exp_67890\",\n  \"status\": \"completed\",\n  \"rows_exported\": 15420,\n  \"size_bytes\": 3145728,\n  \"download_url\": \"https://exports.maily.com/exp_67890/data.csv\",\n  \"expires_at\": \"2023-03-08T12:00:00Z\"\n}\n</code></pre>"},{"location":"integration-guide/#implementation-best-practices","title":"Implementation Best Practices","text":""},{"location":"integration-guide/#api-integration_1","title":"API Integration","text":"<ol> <li>Implement proper error handling</li> <li>Catch and log errors</li> <li>Implement retries with exponential backoff</li> <li> <p>Handle rate limits gracefully</p> </li> <li> <p>Optimize request volume</p> </li> <li>Batch operations when possible</li> <li>Implement caching for frequently accessed data</li> <li> <p>Use webhooks for real-time updates instead of polling</p> </li> <li> <p>Secure your integration</p> </li> <li>Store API keys securely</li> <li>Implement HTTPS for all connections</li> <li>Validate webhook signatures</li> </ol>"},{"location":"integration-guide/#data-synchronization","title":"Data Synchronization","text":"<ol> <li>Implement idempotent operations</li> <li>Use unique identifiers for data records</li> <li>Handle duplicate data gracefully</li> <li> <p>Track synchronization status</p> </li> <li> <p>Optimize data transfer</p> </li> <li>Sync only changed data</li> <li>Implement delta updates</li> <li> <p>Use compression for large datasets</p> </li> <li> <p>Validate data integrity</p> </li> <li>Implement data validation before import</li> <li>Maintain audit logs of data changes</li> <li>Set up alerts for synchronization failures</li> </ol>"},{"location":"integration-guide/#security-considerations","title":"Security Considerations","text":""},{"location":"integration-guide/#api-security","title":"API Security","text":"<ol> <li>API Key Management</li> <li>Rotate keys regularly</li> <li>Use role-based access control</li> <li> <p>Implement the principle of least privilege</p> </li> <li> <p>Transport Security</p> </li> <li>Enforce TLS 1.2+ for all connections</li> <li>Implement certificate pinning for mobile apps</li> <li>Monitor for unusual API usage patterns</li> </ol>"},{"location":"integration-guide/#data-protection","title":"Data Protection","text":"<ol> <li>Personally Identifiable Information (PII)</li> <li>Minimize PII transfer when possible</li> <li>Implement encryption for sensitive data</li> <li> <p>Ensure compliance with data protection regulations</p> </li> <li> <p>Audit and Monitoring</p> </li> <li>Log access to sensitive data</li> <li>Implement alerting for suspicious activities</li> <li>Regular security reviews of integration points</li> </ol>"},{"location":"integration-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integration-guide/#common-issues","title":"Common Issues","text":"<ol> <li>Authentication Problems</li> <li>Verify API key is correct and active</li> <li>Check permissions and scopes</li> <li> <p>Ensure system clocks are synchronized for JWT</p> </li> <li> <p>Rate Limiting</p> </li> <li>Implement exponential backoff</li> <li>Distribute requests evenly</li> <li> <p>Consider upgrading plan for higher limits</p> </li> <li> <p>Data Synchronization Issues</p> </li> <li>Check field mappings</li> <li>Validate data formats</li> <li>Verify uniqueness constraints</li> </ol>"},{"location":"integration-guide/#logging-and-debugging","title":"Logging and Debugging","text":"<ol> <li>Request Logging</li> <li>Log request IDs from API responses</li> <li>Record request and response details</li> <li> <p>Monitor API response times</p> </li> <li> <p>Webhook Debugging</p> </li> <li>Use the webhook tester in the dashboard</li> <li>Set up logging for incoming webhooks</li> <li>Verify signature validation</li> </ol>"},{"location":"integration-guide/#support-resources","title":"Support Resources","text":"<ol> <li>Developer Support</li> <li>Email: dev-support@maily.com</li> <li>Status page: status.maily.com</li> <li> <p>Developer community: community.maily.com</p> </li> <li> <p>Documentation</p> </li> <li>API reference: docs.maily.com/api</li> <li>SDKs: docs.maily.com/sdks</li> <li>Integration examples: github.com/maily/examples</li> </ol>"},{"location":"integration-guide/#continuous-integration","title":"Continuous Integration","text":""},{"location":"integration-guide/#testing-integration-points","title":"Testing Integration Points","text":"<p>Integration testing is essential to ensure that all integration points work correctly together:</p> <ol> <li>API Integration Tests: Verify API endpoints function correctly</li> <li>Webhook Tests: Ensure webhook delivery and processing</li> <li>Third-Party Integration Tests: Validate connections with external services</li> <li>AI Integration Tests: Verify AI feature functionality</li> </ol> <p>Example integration test:</p> <pre><code>// Service integration test\ndescribe('Campaign API Integration', () =&gt; {\n  it('should create a campaign and trigger webhook events', async () =&gt; {\n    // Create campaign\n    const campaign = await api.createCampaign({\n      name: 'Test Campaign',\n      subject: 'Testing',\n      content: '&lt;p&gt;Test content&lt;/p&gt;'\n    });\n\n    // Verify campaign created\n    expect(campaign.id).toBeDefined();\n\n    // Verify webhook triggered\n    const webhookEvents = await getWebhookEvents();\n    const campaignCreatedEvent = webhookEvents.find(e =&gt;\n      e.type === 'campaign.created' &amp;&amp; e.data.id === campaign.id\n    );\n    expect(campaignCreatedEvent).toBeDefined();\n  });\n});\n</code></pre>"},{"location":"integration-guide/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":"<p>The Maily CI/CD pipeline is integrated with the development workflow:</p> <ol> <li>Automated Testing: Runs unit and integration tests for all integration points</li> <li>API Schema Validation: Ensures API changes maintain backward compatibility</li> <li>OAuth Flow Testing: Validates third-party authentication flows</li> <li>Security Scanning: Checks for vulnerabilities in integration code</li> </ol>"},{"location":"integration-guide/#appendix","title":"Appendix","text":""},{"location":"integration-guide/#api-schema-reference","title":"API Schema Reference","text":"<p>Complete OpenAPI specification is available at: https://api.maily.com/openapi.json</p>"},{"location":"integration-guide/#webhook-payload-examples","title":"Webhook Payload Examples","text":"<p>Comprehensive examples of all webhook event payloads are available in the Webhook Events section.</p>"},{"location":"integration-guide/#sdk-documentation","title":"SDK Documentation","text":"<p>Detailed documentation for all SDKs is available in their respective sections, with comprehensive code examples and implementation guidelines.</p> <p>This integration guide is maintained by the Maily Engineering Team. For questions or suggestions, contact engineering@maily.com.</p>"},{"location":"manual-cleanup-report-2025-02-26T19-48-26/","title":"Documentation Manual Cleanup Report","text":"<p>Generated: 2/26/2025, 9:48:26 PM</p>"},{"location":"manual-cleanup-report-2025-02-26T19-48-26/#summary","title":"Summary","text":"<ul> <li>Files kept: 30</li> <li>Files archived: 46</li> <li>Errors: 0</li> </ul>"},{"location":"manual-cleanup-report-2025-02-26T19-48-26/#files-kept","title":"Files Kept","text":"<ul> <li><code>ai-handbook.md</code></li> <li><code>ai-service-reference.md</code></li> <li><code>api-reference.md</code></li> <li><code>app-components.md</code></li> <li><code>architecture-handbook.md</code></li> <li><code>backend-apps.md</code></li> <li><code>backend-packages.md</code></li> <li><code>core-guide.md</code></li> <li><code>design-standards.md</code></li> <li><code>developer-features.md</code></li> <li><code>developer-guide.md</code></li> <li><code>documentation-consolidation-progress.md</code></li> <li><code>enhancement-plan.md</code></li> <li><code>enhancement-tools-reference.md</code></li> <li><code>frontend-apps.md</code></li> <li><code>frontend-packages.md</code></li> <li><code>glossary-and-faq.md</code></li> <li><code>implementation-history.md</code></li> <li><code>index.md</code></li> <li><code>infrastructure-handbook.md</code></li> <li><code>infrastructure-reference.md</code></li> <li><code>integration-guide.md</code></li> <li><code>modernization-roadmap.md</code></li> <li><code>operational-handbook.md</code></li> <li><code>operations-runbook.md</code></li> <li><code>security-compliance-handbook.md</code></li> <li><code>technical-reference.md</code></li> <li><code>testing-guide.md</code></li> <li><code>trust-infrastructure-handbook.md</code></li> <li><code>user-features.md</code></li> </ul>"},{"location":"manual-cleanup-report-2025-02-26T19-48-26/#archived-files","title":"Archived Files","text":"<ul> <li><code>MAILY-trust-infrastructure-implementation.md</code></li> <li><code>MAILY-trust-infrastructure-production-implementation.md</code></li> <li><code>accessibility-components-guide.md</code></li> <li><code>ai-capabilities-summary.md</code></li> <li><code>ai-integration.md</code></li> <li><code>ai-ml-implementation.md</code></li> <li><code>ai-ml-readme.md</code></li> <li><code>ai-ml-usage-guide.md</code></li> <li><code>api-architecture.md</code></li> <li><code>app-router-migration-guide.md</code></li> <li><code>architecture.md</code></li> <li><code>changelog.md</code></li> <li><code>deployment-guide.md</code></li> <li><code>deployment.md</code></li> <li><code>disaster-recovery.md</code></li> <li><code>documentation-consolidation-workflow.md</code></li> <li><code>documentation-inventory.md</code></li> <li><code>documentation-management-plan.md</code></li> <li><code>enhancement-analysis.md</code></li> <li><code>enhancement-implementation-plan.md</code></li> <li><code>enhancement-overview.md</code></li> <li><code>faq.md</code></li> <li><code>frontend-architecture.md</code></li> <li><code>glossary.md</code></li> <li><code>implementation-tracker.md</code></li> <li><code>infrastructure-implementation-summary.md</code></li> <li><code>infrastructure-scalability-implementation.md</code></li> <li><code>metadata-standardization.md</code></li> <li><code>monitoring-observability.md</code></li> <li><code>privacy-compliance.md</code></li> <li><code>security-compliance-architecture.md</code></li> <li><code>security-compliance-implementation.md</code></li> <li><code>sprint3-implementation-summary.md</code></li> <li><code>sprint4-implementation-summary.md</code></li> <li><code>sprint5-implementation-summary.md</code></li> <li><code>sprint6-implementation-plan.md</code></li> <li><code>sprint6-implementation-summary.md</code></li> <li><code>sprint7-implementation-plan.md</code></li> <li><code>sprint7-implementation-summary.md</code></li> <li><code>subscribers-implementation-summary.md</code></li> <li><code>tech-stack.md</code></li> <li><code>templates-implementation-summary.md</code></li> <li><code>trust-infrastructure-ai-agents-implementation.md</code></li> <li><code>trust-infrastructure-certificates-implementation.md</code></li> <li><code>trust-infrastructure-implementation-plan.md</code></li> <li><code>trust-infrastructure-token-implementation.md</code></li> </ul>"},{"location":"modernization-roadmap/","title":"Modernization Roadmap","text":"<p>Last Updated: March 5, 2024</p>"},{"location":"modernization-roadmap/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Modernization Strategy</li> <li>Technical Debt</li> <li>Architecture Evolution</li> <li>Infrastructure Modernization</li> <li>Technology Stack</li> <li>Success Metrics</li> </ul>"},{"location":"modernization-roadmap/#overview","title":"Overview","text":"<p>This document outlines our technical modernization strategy for the Maily platform. It serves as the definitive roadmap for our architectural evolution, technical debt remediation, and infrastructure modernization efforts.</p> <p>The modernization roadmap is designed to:</p> <ol> <li>Enhance platform scalability and performance</li> <li>Improve system reliability and maintainability</li> <li>Address technical debt across the codebase</li> <li>Support the growing feature set and user base</li> <li>Optimize development efficiency and delivery speed</li> <li>Reduce operational costs through infrastructure optimization</li> </ol> <p>This roadmap covers the next 18 months (2024-2025) and will be updated quarterly to reflect changing priorities and completed milestones.</p>"},{"location":"modernization-roadmap/#modernization-strategy","title":"Modernization Strategy","text":"<p>Our approach to modernization follows these core principles:</p>"},{"location":"modernization-roadmap/#strategic-principles","title":"Strategic Principles","text":"<ol> <li>Incremental Over Big-Bang: We prioritize incremental improvements over risky, large-scale rewrites</li> <li>Business Value Alignment: Modernization efforts must align with business objectives and user needs</li> <li>Continuous Delivery: Changes are delivered through our established CI/CD pipeline in small batches</li> <li>Measure, Then Optimize: Data-driven decisions based on performance metrics and user impact</li> <li>Future-Proofing: Designing for future scalability, not just current needs</li> <li>Developer Experience: Improving tooling and processes alongside the codebase</li> </ol>"},{"location":"modernization-roadmap/#modernization-phases","title":"Modernization Phases","text":"<p>Our modernization strategy is divided into three phases:</p>"},{"location":"modernization-roadmap/#phase-1-foundation-building-q1-q2-2024","title":"Phase 1: Foundation Building (Q1-Q2 2024)","text":"<ul> <li>Technical debt assessment and prioritization</li> <li>Establishing baseline performance metrics</li> <li>Infrastructure automation improvements</li> <li>Development workflow optimization</li> <li>Initial microservice decomposition planning</li> </ul>"},{"location":"modernization-roadmap/#phase-2-core-transformation-q3-q4-2024","title":"Phase 2: Core Transformation (Q3-Q4 2024)","text":"<ul> <li>Gradual migration to a microservice architecture</li> <li>Frontend modernization (React components, state management)</li> <li>Data layer optimization</li> <li>Comprehensive test automation</li> <li>Expanded observability implementation</li> </ul>"},{"location":"modernization-roadmap/#phase-3-platform-optimization-q1-q2-2025","title":"Phase 3: Platform Optimization (Q1-Q2 2025)","text":"<ul> <li>Complete microservice transformation</li> <li>Advanced AI/ML capabilities integration</li> <li>Real-time analytics infrastructure</li> <li>Edge computing integration</li> <li>Global infrastructure optimization</li> </ul>"},{"location":"modernization-roadmap/#technical-debt","title":"Technical Debt","text":"<p>We've cataloged our technical debt and prioritized remediation efforts based on impact and effort.</p>"},{"location":"modernization-roadmap/#current-technical-debt-assessment","title":"Current Technical Debt Assessment","text":"Area Debt Level Impact Complexity Priority API Architecture High Critical High P0 Frontend Codebase Medium High Medium P1 Database Schema Medium High High P1 Test Coverage High Medium Medium P1 Documentation Medium Medium Low P2 Build System Low Medium Medium P3 Legacy Integrations Medium Low High P3"},{"location":"modernization-roadmap/#high-priority-technical-debt-items","title":"High-Priority Technical Debt Items","text":""},{"location":"modernization-roadmap/#api-architecture-modernization","title":"API Architecture Modernization","text":"<p>Issue: Our monolithic API has grown organically, leading to tight coupling, inconsistent patterns, and scalability challenges.</p> <p>Impact: - Difficult to maintain and extend - Performance bottlenecks during peak usage - Long deployment cycles - Limited ability to scale specific components</p> <p>Remediation Plan: 1. Map domain boundaries and API dependencies (Q1 2024) 2. Implement API gateway pattern (Q2 2024) 3. Refactor high-traffic endpoints into microservices (Q2-Q3 2024) 4. Introduce consistent API standards and patterns (Q2 2024) 5. Implement comprehensive API monitoring (Q3 2024)</p> <p>Success Metrics: - 50% reduction in API response time for high-traffic endpoints - 75% reduction in deployment-related issues - Ability to scale individual services independently</p>"},{"location":"modernization-roadmap/#architecture-evolution","title":"Architecture Evolution","text":"<p>Our architecture will evolve from a monolithic application to a service-oriented architecture that enables greater scalability, resilience, and development velocity.</p>"},{"location":"modernization-roadmap/#current-architecture","title":"Current Architecture","text":"<p>The Maily platform currently operates as a monolithic application with the following characteristics:</p> <ul> <li>Single codebase for backend services</li> <li>Tightly coupled components</li> <li>Shared database with complex interdependencies</li> <li>Vertical scaling approach</li> <li>Limited separation of concerns</li> <li>Frontend and backend closely integrated</li> </ul>"},{"location":"modernization-roadmap/#target-architecture","title":"Target Architecture","text":"<p>We're transitioning to a service-oriented architecture with these key attributes:</p> <ul> <li>Domain-driven microservices</li> <li>API gateway for request routing and cross-cutting concerns</li> <li>Event-driven communication for asynchronous processes</li> <li>Polyglot persistence with service-appropriate databases</li> <li>Containerized services with orchestration</li> <li>Horizontal scaling capabilities</li> <li>Clear service boundaries and APIs</li> </ul>"},{"location":"modernization-roadmap/#transition-strategy","title":"Transition Strategy","text":"<p>Our approach to architectural evolution follows these steps:</p> <ol> <li>Domain Analysis (Q1 2024)</li> <li>Map current domain models and dependencies</li> <li>Identify bounded contexts</li> <li> <p>Define service boundaries</p> </li> <li> <p>API Gateway Implementation (Q2 2024)</p> </li> <li>Introduce API gateway as fa\u00e7ade to monolith</li> <li>Implement cross-cutting concerns (auth, logging, rate limiting)</li> <li> <p>Prepare for service routing</p> </li> <li> <p>Strangler Pattern Application (Q2-Q4 2024)</p> </li> <li>Incrementally extract services from the monolith</li> <li>Start with high-value, low-risk domains</li> <li> <p>Maintain backward compatibility</p> </li> <li> <p>Domain Service Migration (Q3 2024-Q2 2025)</p> </li> <li>Sequentially migrate domains to microservices</li> <li>Implement service-specific databases</li> <li>Establish service contracts</li> </ol>"},{"location":"modernization-roadmap/#migration-sequence","title":"Migration Sequence","text":"Domain Service Timeline Complexity Dependencies Email Delivery Q2 2024 Medium Auth Service Analytics Q3 2024 High Data Lake, Event Bus Campaign Management Q3-Q4 2024 High Email Delivery, Templates User Management Q4 2024 Medium Auth Service Audience Management Q4 2024-Q1 2025 High User Management, Analytics Template Management Q1 2025 Medium Asset Service, Email Delivery Reporting Q1-Q2 2025 High Analytics, Data Lake Automation Q2 2025 High All Services"},{"location":"modernization-roadmap/#event-driven-patterns","title":"Event-Driven Patterns","text":"<p>We'll implement event-driven patterns to enable asynchronous communication between services:</p> <ul> <li>Command Query Responsibility Segregation (CQRS)</li> <li>Event sourcing for critical data flows</li> <li>Message queues for reliable delivery</li> <li>Publish-subscribe patterns for notifications</li> <li>Saga patterns for distributed transactions</li> </ul>"},{"location":"modernization-roadmap/#infrastructure-modernization","title":"Infrastructure Modernization","text":"<p>Our infrastructure modernization plan will enhance scalability, reliability, and operational efficiency while reducing costs.</p>"},{"location":"modernization-roadmap/#current-infrastructure","title":"Current Infrastructure","text":"<p>The current Maily infrastructure consists of:</p> <ul> <li>Hosting: AWS EC2 instances with traditional deployment</li> <li>Orchestration: Limited containerization, manual scaling</li> <li>CI/CD: Jenkins pipelines with semi-automated deployments</li> <li>Monitoring: Basic metrics and logging with fragmented dashboards</li> <li>Backups: Scheduled database backups with manual verification</li> <li>Security: Perimeter-based security with limited automation</li> </ul>"},{"location":"modernization-roadmap/#target-infrastructure","title":"Target Infrastructure","text":"<p>Our modernized infrastructure will feature:</p> <ul> <li>Hosting: Container-based deployments on Kubernetes</li> <li>Orchestration: Full containerization with automated scaling</li> <li>CI/CD: GitOps workflows with automated testing and deployment</li> <li>Monitoring: Comprehensive observability platform with unified dashboards</li> <li>Backups: Automated, verified backup and restore capabilities</li> <li>Security: Zero-trust security model with automated compliance checks</li> </ul>"},{"location":"modernization-roadmap/#infrastructure-roadmap","title":"Infrastructure Roadmap","text":""},{"location":"modernization-roadmap/#containerization-q1-q2-2024","title":"Containerization (Q1-Q2 2024)","text":"<ul> <li>Convert all services to container-based deployment</li> <li>Implement Docker best practices</li> <li>Standardize base images and security scans</li> <li>Establish container registry and versioning strategy</li> </ul>"},{"location":"modernization-roadmap/#kubernetes-implementation-q2-q3-2024","title":"Kubernetes Implementation (Q2-Q3 2024)","text":"<ul> <li>Set up Kubernetes clusters for staging and production</li> <li>Implement namespace strategy and resource management</li> <li>Configure autoscaling and high availability</li> <li>Establish deployment strategies (blue/green, canary)</li> </ul>"},{"location":"modernization-roadmap/#observability-enhancement-q2-q4-2024","title":"Observability Enhancement (Q2-Q4 2024)","text":"<ul> <li>Implement distributed tracing</li> <li>Enhance logging with structured formats</li> <li>Deploy unified metrics collection and visualization</li> <li>Create service-level dashboards and alerts</li> <li>Implement user experience monitoring</li> </ul>"},{"location":"modernization-roadmap/#cicd-modernization-q3-2024","title":"CI/CD Modernization (Q3 2024)","text":"<ul> <li>Migrate to GitHub Actions for CI/CD</li> <li>Implement infrastructure as code (Terraform)</li> <li>Establish GitOps workflows</li> <li>Automate testing, security scanning, and deployments</li> <li>Enable deployment verification and automatic rollbacks</li> </ul>"},{"location":"modernization-roadmap/#security-hardening-q3-2024-q1-2025","title":"Security Hardening (Q3 2024-Q1 2025)","text":"<ul> <li>Implement zero-trust security model</li> <li>Deploy service mesh for secure service-to-service communication</li> <li>Enhance secrets management</li> <li>Automate security compliance checks</li> <li>Implement runtime threat detection</li> </ul>"},{"location":"modernization-roadmap/#global-infrastructure-q1-q2-2025","title":"Global Infrastructure (Q1-Q2 2025)","text":"<ul> <li>Deploy multi-region infrastructure</li> <li>Implement traffic routing and load balancing</li> <li>Establish data residency compliance</li> <li>Enable edge computing capabilities</li> <li>Optimize for global performance</li> </ul>"},{"location":"modernization-roadmap/#technology-stack","title":"Technology Stack","text":"<p>Our technology stack evolution supports the modernization roadmap and ensures we're using the right tools for each domain.</p>"},{"location":"modernization-roadmap/#current-technology-stack","title":"Current Technology Stack","text":"Category Technologies Backend Java 11, Spring Boot 2.5, Python (analytics) Frontend React 16, Redux, JavaScript, SCSS Databases PostgreSQL 12 (primary), Redis (caching), Elasticsearch (search) Infrastructure AWS (EC2, RDS, S3, CloudFront) CI/CD Jenkins, Maven, npm Monitoring ELK Stack, Prometheus, Grafana Containerization Docker (limited) Messaging Apache Kafka (limited use)"},{"location":"modernization-roadmap/#target-technology-stack","title":"Target Technology Stack","text":"Category Technologies Migration Timeline Backend Java 17, Spring Boot 3.0, Python 3.11, Go (for selected services) Q2 2024 - Q1 2025 Frontend React 18, Redux Toolkit, TypeScript, CSS Modules Q2 2024 - Q4 2024 Databases PostgreSQL 15, MongoDB, Redis (caching), Elasticsearch 8 Q3 2024 - Q1 2025 Infrastructure AWS (EKS, Aurora, S3, CloudFront, Lambda) Q2 2024 - Q4 2024 CI/CD GitHub Actions, Terraform, ArgoCD Q3 2024 Monitoring OpenTelemetry, Prometheus, Grafana, Loki Q3 2024 - Q4 2024 Containerization Docker, Kubernetes Q1 2024 - Q3 2024 Messaging Apache Kafka, AWS EventBridge Q3 2024 - Q1 2025 Security Vault, OPA, AWS WAF Q3 2024 - Q1 2025"},{"location":"modernization-roadmap/#technology-migration-strategy","title":"Technology Migration Strategy","text":"<p>Our approach to technology migration includes:</p> <ol> <li>Incremental Adoption: Gradually adopt new technologies in parallel with existing ones</li> <li>Proof of Concept: Test new technologies in non-critical components first</li> <li>Training &amp; Documentation: Ensure the team is trained on new technologies before widespread adoption</li> <li>Technical Spikes: Dedicated time for exploration and learning</li> <li>Backward Compatibility: Maintain compatibility during transition periods</li> </ol>"},{"location":"modernization-roadmap/#success-metrics","title":"Success Metrics","text":"<p>We'll measure the success of our modernization efforts using the following metrics:</p>"},{"location":"modernization-roadmap/#performance-metrics","title":"Performance Metrics","text":"Metric Current Target (Q4 2024) Target (Q2 2025) API Response Time (p95) 350ms 250ms 150ms Frontend Load Time 3.2s 2.5s 1.8s Database Query Time (p95) 180ms 120ms 80ms Email Processing Rate 50K/hour 100K/hour 250K/hour Batch Processing Time 45 min 30 min 15 min"},{"location":"modernization-roadmap/#reliability-metrics","title":"Reliability Metrics","text":"Metric Current Target (Q4 2024) Target (Q2 2025) System Uptime 99.9% 99.95% 99.99% Deployment Success Rate 92% 98% 99.5% Mean Time to Recovery 45 min 20 min 10 min Error Rate 0.5% 0.3% 0.1% Alert Noise Ratio 15% 8% 3%"},{"location":"modernization-roadmap/#developer-productivity-metrics","title":"Developer Productivity Metrics","text":"Metric Current Target (Q4 2024) Target (Q2 2025) Deployment Frequency 3x/week Daily Multiple/day Lead Time for Changes 5 days 2 days 1 day Build Pipeline Duration 25 min 15 min 8 min Code Review Cycle Time 24 hours 12 hours 6 hours Developer Onboarding Time 2 weeks 1 week 3 days"},{"location":"modernization-roadmap/#monitoring-reporting","title":"Monitoring &amp; Reporting","text":"<ul> <li>Quarterly modernization status reports</li> <li>Monthly metrics dashboards</li> <li>Automated performance and reliability monitoring</li> <li>Regular retrospectives on modernization progress</li> <li>Executive summaries for leadership team</li> </ul> <p>This modernization roadmap is maintained by the Maily Engineering Team. For questions or suggestions, contact engineering@maily.com.</p>"},{"location":"operational-handbook/","title":"Operational Handbook","text":"<p>Last updated: March 5, 2025</p>"},{"location":"operational-handbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Environment Management</li> <li>Environment Types</li> <li>Configuration Management</li> <li>Access Control</li> <li>Deployment</li> <li>Release Process</li> <li>Deployment Pipeline</li> <li>Rollback Procedures</li> <li>Feature Flags</li> <li>Monitoring</li> <li>System Metrics</li> <li>Application Metrics</li> <li>Business Metrics</li> <li>Alerting Strategy</li> <li>Dashboards</li> <li>Incident Management</li> <li>Severity Levels</li> <li>On-Call Procedures</li> <li>Incident Response</li> <li>Postmortem Process</li> <li>Database Operations</li> <li>Backup and Recovery</li> <li>Performance Tuning</li> <li>Migrations in Production</li> <li>Data Retention</li> <li>Security Operations</li> <li>Vulnerability Management</li> <li>Access Reviews</li> <li>Security Monitoring</li> <li>Incident Response</li> <li>Scaling and Capacity Planning</li> <li>Scaling Strategies</li> <li>Load Testing</li> <li>Resource Planning</li> <li>Routine Maintenance</li> <li>Scheduled Tasks</li> <li>Patch Management</li> <li>Dependency Updates</li> <li>Disaster Recovery</li> <li>Backup Strategy</li> <li>Recovery Procedures</li> <li>Business Continuity</li> <li>Compliance and Audit</li> <li>Compliance Requirements</li> <li>Audit Logging</li> <li>Retention Policies</li> <li>Documentation and Knowledge Management</li> <li>Runbooks</li> <li>Architecture Documentation</li> <li>Knowledge Base</li> <li>Appendix</li> <li>Tools and Services</li> <li>Contact Information</li> <li>Glossary</li> </ul>"},{"location":"operational-handbook/#overview","title":"Overview","text":"<p>This Operational Handbook serves as the comprehensive guide for operating and maintaining the Maily platform in production environments. It consolidates previously scattered operational documentation into a single source of truth for the operations team, DevOps engineers, and other stakeholders responsible for the platform's reliability, security, and performance.</p> <p>The handbook follows these key operational principles:</p> <ol> <li>Automation First: Automate repeated tasks wherever possible</li> <li>Infrastructure as Code: Manage all infrastructure through code</li> <li>Observability: Maintain comprehensive visibility into system behavior</li> <li>Security by Design: Embed security practices into all operations</li> <li>Continuous Improvement: Regularly review and enhance operational procedures</li> </ol>"},{"location":"operational-handbook/#environment-management","title":"Environment Management","text":""},{"location":"operational-handbook/#environment-types","title":"Environment Types","text":"<p>Maily uses the following environment types:</p> Environment Purpose Access Data Development Feature development All developers Anonymized sample data Staging Pre-release testing Engineering and QA Anonymized production clone Production Live customer instances Limited operator access Customer data DR Disaster recovery Automated systems and emergency access Replica of production"},{"location":"operational-handbook/#configuration-management","title":"Configuration Management","text":"<p>All environment configuration follows these principles:</p> <ol> <li>Environment Variables: All configuration is passed via environment variables</li> <li>Secret Management: Secrets are stored in AWS Secrets Manager</li> <li>Infrastructure as Code: Environment configuration is defined in Terraform</li> <li>Immutability: Configuration changes trigger new deployments instead of in-place changes</li> </ol> <p>Configuration values are managed in our hierarchical configuration system:</p> <pre><code>config/\n\u251c\u2500\u2500 base.json            # Base configuration\n\u251c\u2500\u2500 development.json     # Development overrides\n\u251c\u2500\u2500 staging.json         # Staging overrides\n\u2514\u2500\u2500 production.json      # Production overrides\n</code></pre> <p>Sensitive values are never committed to the repository and are instead referenced from the secrets manager:</p> <pre><code>// Example configuration entry\n{\n  \"database\": {\n    \"host\": \"${PGHOST}\",\n    \"port\": \"${PGPORT}\",\n    \"username\": \"${PGUSER}\",\n    \"password\": \"${SECRET:PGPASSWORD}\"\n  }\n}\n</code></pre>"},{"location":"operational-handbook/#access-control","title":"Access Control","text":"<p>Environment access follows the principle of least privilege:</p> Role Development Staging Production DR Developer Full Read-only None None DevOps Full Full Limited Emergency SRE Full Full Full Full Support None Read-only Read-only None <p>Production access requires: 1. Multi-factor authentication 2. Just-in-time access requests via PagerDuty 3. Session recording for audit purposes 4. Automatic access expiration after 4 hours</p>"},{"location":"operational-handbook/#deployment","title":"Deployment","text":""},{"location":"operational-handbook/#release-process","title":"Release Process","text":"<p>Maily follows a continuous delivery model with the following release cadence:</p> <ol> <li>Feature Releases: Bi-weekly on Tuesdays</li> <li>Patch Releases: As needed for critical fixes</li> <li>Major Releases: Quarterly with advance notice to customers</li> </ol> <p>The release process:</p> <ol> <li>Code is merged to <code>main</code> after passing all CI checks</li> <li>Release candidate is created and deployed to staging</li> <li>Automated and manual testing is performed on staging</li> <li>Release is scheduled and announced</li> <li>Progressive deployment to production regions</li> <li>Post-deployment verification</li> <li>Release retrospective</li> </ol>"},{"location":"operational-handbook/#deployment-pipeline","title":"Deployment Pipeline","text":"<p>Deployments are fully automated via our CI/CD pipeline:</p> <pre><code>graph TD\n    A[Code Merged to Main] --&gt; B[Build and Test]\n    B --&gt; C[Create Release Artifact]\n    C --&gt; D[Deploy to Staging]\n    D --&gt; E[Integration Tests]\n    E --&gt; F[Manual Approval]\n    F --&gt; G[Progressive Production Deployment]\n    G --&gt; H[Post-deployment Verification]\n    H --&gt; I[Release Complete]\n</code></pre> <p>Production deployments use a progressive rollout strategy: 1. Deploy to 5% of edge nodes 2. Monitor for 15 minutes 3. If metrics are stable, deploy to 25% 4. Monitor for another 15 minutes 5. If stable, deploy to remaining nodes 6. If issues detected, automatic rollback</p>"},{"location":"operational-handbook/#rollback-procedures","title":"Rollback Procedures","text":"<p>In case of deployment issues, use the following rollback procedures:</p> <ol> <li>Automated Rollback: The deployment pipeline automatically rolls back if error rates or latency exceed thresholds</li> <li>Manual Rollback: Run the rollback command:    <pre><code>ops deploy rollback --env=production --service=&lt;service_name&gt;\n</code></pre></li> <li>Database Rollback: For migrations, follow the database rollback procedure in the Database Operations section</li> </ol>"},{"location":"operational-handbook/#feature-flags","title":"Feature Flags","text":"<p>Maily uses feature flags to safely deploy changes:</p> <ol> <li>All significant features are behind feature flags</li> <li>Flags can be toggled per environment, per tenant, or per user</li> <li>Emergency kill switches exist for all core features</li> <li>Feature flags are managed through the admin portal or CLI:    <pre><code>ops flag enable --env=production --flag=new-email-editor --percentage=10\n</code></pre></li> </ol>"},{"location":"operational-handbook/#monitoring","title":"Monitoring","text":""},{"location":"operational-handbook/#system-metrics","title":"System Metrics","text":"<p>Core infrastructure metrics are collected via Datadog agents:</p> Metric Category Key Metrics Alert Thresholds Compute CPU, Memory, Disk, Network 80% utilization (warning), 90% (critical) Database Connections, Query performance, Locks 100 connections, 1s query time, lock waits &gt; 10s Cache Hit rate, Memory, Evictions &lt;80% hit rate, &gt;90% memory, any evictions Message Queue Queue depth, Processing time &gt;1000 messages, &gt;30s processing CDN Cache hit ratio, Bandwidth, Error rate &lt;90% hit rate, &gt;80% capacity, &gt;0.1% error"},{"location":"operational-handbook/#application-metrics","title":"Application Metrics","text":"<p>Application-specific metrics are collected via custom instrumentation:</p> Metric Description Alert Threshold Request Rate Requests per second Sustained 50% change from baseline Response Time Time to process requests p95 &gt; 500ms Error Rate Percentage of 5xx responses &gt;0.5% Active Users Concurrent users N/A (tracking only) Email Send Rate Emails sent per minute &gt;5000/minute (capacity planning) AI Processing Time Time for AI operations p95 &gt; 2s"},{"location":"operational-handbook/#business-metrics","title":"Business Metrics","text":"<p>Key business metrics are tracked for operational insight:</p> <ol> <li>Active users (daily, weekly, monthly)</li> <li>Email delivery rate and engagement</li> <li>Campaign creation and scheduling</li> <li>Subscriber growth and churn</li> <li>Premium feature usage</li> </ol>"},{"location":"operational-handbook/#alerting-strategy","title":"Alerting Strategy","text":"<p>Our alerting follows these principles:</p> <ol> <li>Actionable: Alerts should require human intervention</li> <li>Clear Ownership: Each alert has a defined owner</li> <li>Context: Alerts include sufficient context to begin troubleshooting</li> <li>Prioritized: Alerts are categorized by severity and impact</li> </ol> <p>Alert routing is configured in PagerDuty:</p> Priority Description Notification Response SLA P1 Service outage or data loss Call + SMS + Email 15 minutes P2 Degraded performance or partial outage SMS + Email 30 minutes P3 Non-critical component issue Email 4 hours P4 Warning or potential issue Email Next business day"},{"location":"operational-handbook/#dashboards","title":"Dashboards","text":"<p>Operational dashboards are maintained in Datadog and Grafana:</p> <ol> <li>Service Overview: High-level health of all services</li> <li>User Experience: Performance from user perspective</li> <li>Infrastructure: Detailed system metrics</li> <li>Business: Key business metrics</li> <li>Security: Security-related metrics and events</li> </ol> <p>Dashboard access is provided to: - Engineering team (all dashboards) - Product team (User Experience and Business dashboards) - Executive team (Business dashboard)</p>"},{"location":"operational-handbook/#incident-management","title":"Incident Management","text":""},{"location":"operational-handbook/#severity-levels","title":"Severity Levels","text":"<p>Incidents are classified by severity level:</p> Level Impact Example Response SEV-1 Critical service outage Production is down All-hands emergency SEV-2 Major functionality broken Emails not sending Immediate incident response SEV-3 Minor functionality affected Reporting delays Scheduled fix SEV-4 Cosmetic issues UI alignment problems Backlog item"},{"location":"operational-handbook/#on-call-procedures","title":"On-Call Procedures","text":"<p>The on-call rotation follows a weekly schedule:</p> <ol> <li>Primary on-call: Front-line response to all alerts</li> <li>Secondary on-call: Backup for primary and escalation point</li> <li>Engineering manager: Escalation for major incidents</li> </ol> <p>On-call handoff process: 1. Daily handover meetings at 4pm 2. Written handover notes documenting ongoing issues 3. Acknowledgment of handover by incoming on-call</p> <p>On-call tools: - PagerDuty for alerting and scheduling - Slack for communication - Zoom for incident calls - Incident response documentation in Notion</p>"},{"location":"operational-handbook/#incident-response","title":"Incident Response","text":"<p>The incident response process follows these steps:</p> <ol> <li>Acknowledge: Acknowledge the alert and begin investigation</li> <li>Assess: Determine the scope and impact of the incident</li> <li>Communicate: Post initial status to the incident channel</li> <li>Mitigate: Implement immediate mitigation steps</li> <li>Resolve: Fix the underlying issue</li> <li>Document: Record details for the postmortem</li> </ol> <p>For SEV-1 and SEV-2 incidents: 1. Create an incident channel in Slack (#incident-{date}-{short-description}) 2. Designate an Incident Commander (IC) 3. Designate a Communications Lead 4. Update status page within 15 minutes 5. Provide updates at least every 30 minutes</p>"},{"location":"operational-handbook/#postmortem-process","title":"Postmortem Process","text":"<p>After each SEV-1 or SEV-2 incident:</p> <ol> <li>Complete the postmortem template within 2 business days</li> <li>Include timeline, root cause, and action items</li> <li>Present in the weekly engineering meeting</li> <li>Track action items to completion</li> </ol> <p>The postmortem should be blameless and focus on: - What happened - Why it happened - How to prevent similar incidents - How to improve response</p>"},{"location":"operational-handbook/#database-operations","title":"Database Operations","text":""},{"location":"operational-handbook/#backup-and-recovery","title":"Backup and Recovery","text":"<p>Database backup strategy:</p> Database Backup Type Frequency Retention Primary (PostgreSQL) Full backup Daily 30 days Primary (PostgreSQL) Incremental Hourly 7 days Primary (PostgreSQL) Write-ahead logs Continuous 7 days Redis RDB snapshot Every 6 hours 7 days Document store Full backup Daily 30 days <p>Backup testing: 1. Monthly restoration test to staging environment 2. Quarterly disaster recovery simulation</p>"},{"location":"operational-handbook/#performance-tuning","title":"Performance Tuning","text":"<p>Database performance monitoring:</p> <ol> <li>Query performance is tracked via pgStatStatements</li> <li>Slow query log threshold is set to 100ms</li> <li>Weekly review of slow queries</li> <li>Monthly index optimization</li> </ol> <p>Production database guidelines: - Max connections: 500 - Statement timeout: 30s - Idle in transaction timeout: 5m - Maintenance window: Sundays 2-4 AM EST</p>"},{"location":"operational-handbook/#migrations-in-production","title":"Migrations in Production","text":"<p>Guidelines for production database migrations:</p> <ol> <li>All migrations must be backward compatible</li> <li>Large migrations should be split into smaller steps</li> <li>Add before remove (add columns/tables before removing them)</li> <li>Include a rollback plan for each migration</li> <li>Test migrations on a production clone before deployment</li> <li>Schedule high-risk migrations during maintenance windows</li> </ol> <p>Execution process: <pre><code># Pre-migration check\nops db check-migration --env=production\n\n# Apply migration\nops db migrate --env=production\n\n# Verify migration\nops db verify-migration --env=production\n</code></pre></p>"},{"location":"operational-handbook/#data-retention","title":"Data Retention","text":"<p>Data retention policies:</p> Data Type Retention Period Archival Strategy Customer data Indefinite Active database Email analytics 2 years Database \u2192 S3 System logs 90 days CloudWatch \u2192 S3 Audit logs 7 years Database \u2192 S3 Session data 30 days Redis \u2192 purged <p>Data purging jobs run weekly during low-traffic periods.</p>"},{"location":"operational-handbook/#security-operations","title":"Security Operations","text":""},{"location":"operational-handbook/#vulnerability-management","title":"Vulnerability Management","text":"<p>Security scanning process:</p> <ol> <li>Dependency Scanning: Automated in CI pipeline</li> <li>Container Scanning: Images scanned before deployment</li> <li>Infrastructure Scanning: Weekly cloud configuration audit</li> <li>Penetration Testing: Quarterly by external vendor</li> <li>Bug Bounty Program: Continuous via HackerOne</li> </ol> <p>Vulnerability response timeline:</p> Severity Response Time Remediation SLA Critical 24 hours 7 days High 48 hours 14 days Medium 1 week 30 days Low 2 weeks 90 days"},{"location":"operational-handbook/#access-reviews","title":"Access Reviews","text":"<p>Access control reviews:</p> <ol> <li>All production access is reviewed monthly</li> <li>Cloud IAM permissions reviewed quarterly</li> <li>Database access reviewed quarterly</li> <li>Service account permissions reviewed quarterly</li> </ol> <p>User access lifecycle: - Onboarding: Access granted based on role template - Role changes: Access adjusted within 1 business day - Offboarding: Access revoked immediately</p>"},{"location":"operational-handbook/#security-monitoring","title":"Security Monitoring","text":"<p>Security monitoring systems:</p> <ol> <li>SIEM: Datadog and CloudWatch Logs</li> <li>WAF: AWS WAF with custom rules</li> <li>Network Monitoring: VPC Flow Logs</li> <li>Endpoint Detection: CrowdStrike</li> <li>Identity Monitoring: Unusual login detection</li> </ol> <p>Key security alerts: - Multiple failed login attempts - Unusual access patterns - Configuration changes outside deployment windows - Sensitive data access - Privilege escalation</p>"},{"location":"operational-handbook/#incident-response_1","title":"Incident Response","text":"<p>Security incident response process:</p> <ol> <li>Containment: Isolate affected systems</li> <li>Investigation: Determine scope and impact</li> <li>Eradication: Remove threat and vulnerabilities</li> <li>Recovery: Restore systems to normal operation</li> <li>Lessons Learned: Update security controls</li> </ol> <p>For data breach incidents: 1. Engage legal team immediately 2. Prepare customer communication 3. Follow regulatory notification requirements 4. Document all actions taken</p>"},{"location":"operational-handbook/#scaling-and-capacity-planning","title":"Scaling and Capacity Planning","text":""},{"location":"operational-handbook/#scaling-strategies","title":"Scaling Strategies","text":"<p>Automatic scaling configurations:</p> Component Scaling Metric Min Max Scale Up Scale Down Web Tier CPU &amp; Request Count 3 30 &gt;70% CPU for 3m &lt;30% CPU for 10m API Tier CPU &amp; Queue Depth 5 50 &gt;60% CPU for 2m &lt;40% CPU for 10m Worker Tier Queue Depth 2 20 &gt;500 messages &lt;100 messages for 5m Database Connection Count &amp; CPU - - Manual scaling - <p>Scaling policies: 1. Scale out before scaling up 2. Maintain 30% headroom for unexpected traffic 3. Database scaling requires planned maintenance window</p>"},{"location":"operational-handbook/#load-testing","title":"Load Testing","text":"<p>Regular performance testing:</p> <ol> <li>Monthly load tests in staging environment</li> <li>Quarterly capacity tests</li> <li>Performance budget enforcement in CI</li> </ol> <p>Load test scenarios: - Normal peak traffic (2x average) - Marketing campaign launch (5x average) - Black Friday scenario (10x average) - Recovery from outage (connection storm)</p>"},{"location":"operational-handbook/#resource-planning","title":"Resource Planning","text":"<p>Capacity review process:</p> <ol> <li>Weekly usage trend analysis</li> <li>Monthly capacity planning meeting</li> <li>Quarterly infrastructure budget review</li> </ol> <p>Growth-driven scaling triggers: - Approaching 70% of provisioned capacity - Customer growth exceeding 10% month-over-month - New feature launches with significant resource needs</p>"},{"location":"operational-handbook/#routine-maintenance","title":"Routine Maintenance","text":""},{"location":"operational-handbook/#scheduled-tasks","title":"Scheduled Tasks","text":"<p>Regular maintenance schedule:</p> Task Frequency Timing Impact Database vacuum Weekly Sunday 2 AM EST None Log rotation Daily 1 AM EST None Certificate renewal Monthly First Sunday 3 AM EST Brief SSL handshake errors (&lt;1s) OS patching Monthly Second Sunday 2 AM EST Rolling restarts Infrastructure updates Quarterly Announced 2 weeks in advance Potential brief downtime"},{"location":"operational-handbook/#patch-management","title":"Patch Management","text":"<p>Security patch process:</p> <ol> <li>Critical patches applied within 24 hours after testing</li> <li>High-severity patches applied within 1 week</li> <li>Regular patches bundled into monthly maintenance</li> <li>All patches tested in staging before production</li> </ol> <p>OS and container updates: - Base images updated monthly - Automatic security patches for critical CVEs - Full rebuild of all images monthly</p>"},{"location":"operational-handbook/#dependency-updates","title":"Dependency Updates","text":"<p>Third-party dependency update strategy:</p> <ol> <li>Security updates applied immediately</li> <li>Minor version updates applied monthly</li> <li>Major version updates evaluated quarterly</li> </ol> <p>Frontend dependencies: - Updated with each release cycle - Breaking changes evaluated in staging</p> <p>Backend dependencies: - Updated during monthly maintenance - Database drivers tested extensively before updating</p>"},{"location":"operational-handbook/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"operational-handbook/#backup-strategy","title":"Backup Strategy","text":"<p>Data protection approach:</p> <ol> <li>Database: Point-in-time recovery for last 7 days</li> <li>Object storage: Cross-region replication</li> <li>Configuration: Version-controlled and backed up</li> <li>Machine images: Weekly snapshots retained for 30 days</li> </ol> <p>Recovery point objective (RPO): - Primary data: 15 minutes - Analytics data: 1 hour - Logs and metrics: 24 hours</p>"},{"location":"operational-handbook/#recovery-procedures","title":"Recovery Procedures","text":"<p>Disaster recovery runbooks:</p> <ol> <li> <p>Database Failure: Failover to read replica    <pre><code>ops db failover --env=production\n</code></pre></p> </li> <li> <p>Availability Zone Failure: Redirect traffic to functioning AZs    <pre><code>ops traffic shift --from=us-east-1a --to=us-east-1b,us-east-1c\n</code></pre></p> </li> <li> <p>Region Failure: Activate cross-region recovery    <pre><code>ops dr activate --region=us-west-2\n</code></pre></p> </li> <li> <p>Ransomware/Data Corruption: Restore from clean backups    <pre><code>ops restore --service=all --timestamp=\"2025-03-04T08:00:00Z\"\n</code></pre></p> </li> </ol> <p>Recovery time objectives (RTO): - Critical services: 1 hour - Non-critical services: 4 hours - Full system: 8 hours</p>"},{"location":"operational-handbook/#business-continuity","title":"Business Continuity","text":"<p>Business continuity planning:</p> <ol> <li>Annual tabletop exercises for major scenarios</li> <li>Quarterly review of recovery procedures</li> <li>Emergency contact list maintained in PagerDuty and printed copies</li> <li>Cross-training of personnel on critical recovery procedures</li> </ol> <p>Alternative operations modes: - Read-only mode for database issues - Essential services only mode for compute constraints - Manual processing pipeline for queue system issues</p>"},{"location":"operational-handbook/#compliance-and-audit","title":"Compliance and Audit","text":""},{"location":"operational-handbook/#compliance-requirements","title":"Compliance Requirements","text":"<p>Maily complies with the following standards:</p> <ol> <li>SOC 2 Type II</li> <li>GDPR</li> <li>CCPA</li> <li>ISO 27001</li> <li>HIPAA (for healthcare customers)</li> </ol> <p>Compliance responsibilities: - Engineering: Technical controls implementation - Security: Control effectiveness monitoring - Legal: Regulatory requirement tracking - Operations: Evidence collection and documentation</p>"},{"location":"operational-handbook/#audit-logging","title":"Audit Logging","text":"<p>Comprehensive audit logging:</p> System Events Logged Retention Authentication Login, logout, failures 1 year Authorization Access attempts, changes 1 year Data access PII access, exports, changes 7 years Configuration System setting changes 7 years Administration User/role management 7 years <p>Audit log protection: - Write-only access - Tamper-evident storage - Encryption at rest - Access limited to security team</p>"},{"location":"operational-handbook/#retention-policies","title":"Retention Policies","text":"<p>Data lifecycle management:</p> <ol> <li>Customer data: Retained per terms of service</li> <li>Employee data: Retained per HR policies</li> <li>Operational data: Retained per compliance requirements</li> <li>Backup data: Retained per backup strategy</li> </ol> <p>Deletion verification: - Automated verification of deletion - Certificate of destruction provided on request - Annual data purge verification audit</p>"},{"location":"operational-handbook/#documentation-and-knowledge-management","title":"Documentation and Knowledge Management","text":""},{"location":"operational-handbook/#runbooks","title":"Runbooks","text":"<p>Operational runbooks maintained for all critical systems:</p> <ol> <li>Service startup and shutdown</li> <li>Backup and restore</li> <li>Scaling procedures</li> <li>Failover processes</li> <li>Common troubleshooting scenarios</li> </ol> <p>Runbook format: - Step-by-step instructions - Required permissions - Expected outcomes - Verification steps - Known limitations</p>"},{"location":"operational-handbook/#architecture-documentation","title":"Architecture Documentation","text":"<p>System architecture documentation:</p> <ol> <li>High-level service map</li> <li>Data flow diagrams</li> <li>Network topology</li> <li>Security boundaries</li> <li>Integration points</li> </ol> <p>Documentation review cycle: - Updated with each architectural change - Reviewed monthly for accuracy - Full refresh quarterly</p>"},{"location":"operational-handbook/#knowledge-base","title":"Knowledge Base","text":"<p>Internal knowledge management:</p> <ol> <li>Operations wiki in Notion</li> <li>Troubleshooting guide with common issues</li> <li>Postmortem library</li> <li>Decision records for architectural changes</li> <li>Onboarding materials for operations team</li> </ol> <p>External documentation: - Status page with incident history - Developer documentation for API consumers - Self-service help center for customers</p>"},{"location":"operational-handbook/#appendix","title":"Appendix","text":""},{"location":"operational-handbook/#tools-and-services","title":"Tools and Services","text":"Category Tool Purpose Monitoring Datadog System and application monitoring Logs Datadog Logs Log aggregation and analysis Alerting PagerDuty Alert management and on-call scheduling CI/CD GitHub Actions Continuous integration and delivery Infrastructure Terraform Infrastructure as code Secrets AWS Secrets Manager Secret management Communication Slack Team communication Documentation Notion Knowledge management Incident Mgmt Statuspage External status communication"},{"location":"operational-handbook/#contact-information","title":"Contact Information","text":"<p>Note: This would contain actual contact details in the real document</p> Team Primary Contact Secondary Contact Escalation DevOps devops-lead@maily.io devops-team@maily.io cto@maily.io Security security-lead@maily.io security-team@maily.io ciso@maily.io Engineering eng-manager@maily.io eng-leads@maily.io cto@maily.io Executive - - ceo@maily.io"},{"location":"operational-handbook/#glossary","title":"Glossary","text":"<p>Note: This would contain a more extensive list in the real document</p> Term Definition RTO Recovery Time Objective - Maximum acceptable time to restore functionality RPO Recovery Point Objective - Maximum acceptable data loss period SLA Service Level Agreement - Contractual availability and performance targets SOC 2 Service Organization Control 2 - Security compliance framework WAF Web Application Firewall - Application-level network protection"},{"location":"operations-runbook/","title":"Maily Operations Runbook","text":"<p>Last updated: March 4, 2025</p>"},{"location":"operations-runbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Service Management</li> <li>Deployment Procedures</li> <li>Service Updates</li> <li>Rollback Procedures</li> <li>Version Management</li> <li>Monitoring &amp; Alerting</li> <li>Monitoring Infrastructure</li> <li>Alert Management</li> <li>Dashboards</li> <li>Troubleshooting</li> <li>Database Operations</li> <li>Backup &amp; Restore</li> <li>Performance Tuning</li> <li>Maintenance Tasks</li> <li>Migration Procedures</li> <li>Infrastructure Management</li> <li>Kubernetes Operations</li> <li>Network Management</li> <li>Storage Management</li> <li>Cloud Provider Operations</li> <li>Security Operations</li> <li>Access Management</li> <li>Certificate Management</li> <li>Secret Rotation</li> <li>Security Scanning</li> <li>Incident Response</li> <li>Incident Classification</li> <li>Incident Handling</li> <li>Communication Procedures</li> <li>Post-Incident Procedures</li> <li>Disaster Recovery</li> <li>Recovery Scenarios</li> <li>Recovery Procedures</li> <li>Testing &amp; Validation</li> <li>Business Continuity</li> <li>Scaling Procedures</li> <li>Horizontal Scaling</li> <li>Vertical Scaling</li> <li>Database Scaling</li> <li>Cloud Resource Scaling</li> <li>Maintenance Procedures</li> <li>Scheduled Maintenance</li> <li>Patch Management</li> <li>System Updates</li> <li>Maintenance Windows</li> <li>On-Call Procedures</li> <li>On-Call Rotation</li> <li>Escalation Procedures</li> <li>Severity Levels</li> <li>Communication Channels</li> </ul>"},{"location":"operations-runbook/#overview","title":"Overview","text":"<p>This Operations Runbook provides comprehensive procedures and guidelines for the operation, maintenance, and troubleshooting of the Maily platform. It serves as the primary reference for DevOps, SRE, and operations teams.</p> <p>The runbook adheres to these core operational principles:</p> <ul> <li>Automation First: Wherever possible, operations are automated to reduce manual effort and human error</li> <li>Infrastructure as Code: All infrastructure changes follow the IaC approach</li> <li>Immutable Infrastructure: Services are redeployed rather than modified in place</li> <li>Proactive Monitoring: Anticipating issues before they affect users</li> <li>Continuous Improvement: Regular review and refinement of operational procedures</li> </ul>"},{"location":"operations-runbook/#service-management","title":"Service Management","text":""},{"location":"operations-runbook/#deployment-procedures","title":"Deployment Procedures","text":""},{"location":"operations-runbook/#standard-deployment","title":"Standard Deployment","text":"<p>The deployment process uses GitOps methodology with ArgoCD:</p> <ol> <li>Code changes are merged to the main branch after passing all CI checks</li> <li>The deployment pipeline builds container images and tags them with Git SHA</li> <li>ArgoCD detects the change in the Git repository and synchronizes the applications</li> </ol> <pre><code># Manual deployment (if needed):\nargocd app sync maily-web\nargocd app sync maily-api\nargocd app sync maily-worker\n</code></pre>"},{"location":"operations-runbook/#deployment-verification","title":"Deployment Verification","text":"<p>After deployment, automated smoke tests verify the service health:</p> <ol> <li>HTTP health checks confirm services are responding</li> <li>Functional tests verify key workflows</li> <li>Metrics are checked for any anomalies</li> </ol> <pre><code># Manual verification:\nkubectl get pods -n maily-production\ncurl -s https://api.maily.example.com/health | jq\n# Run smoke tests:\npnpm test:smoke\n</code></pre>"},{"location":"operations-runbook/#release-cadence","title":"Release Cadence","text":"<ul> <li>Regular releases: Every two weeks (Sprint cadence)</li> <li>Hotfixes: As needed for critical issues</li> <li>Feature flags: Used to control rollout of new features</li> </ul>"},{"location":"operations-runbook/#service-updates","title":"Service Updates","text":""},{"location":"operations-runbook/#update-types","title":"Update Types","text":"<ul> <li>Minor Updates: Regular feature additions and bug fixes</li> <li>Major Updates: Significant architecture or interface changes</li> <li>Dependency Updates: Updates to libraries and dependencies</li> <li>Security Patches: Critical security fixes</li> </ul>"},{"location":"operations-runbook/#update-process","title":"Update Process","text":"<ol> <li>Create an update plan with rollback strategy</li> <li>Schedule update during appropriate maintenance window</li> <li>Deploy to staging environment first</li> <li>Verify functionality in staging</li> <li>Deploy to production using blue/green or canary strategy</li> <li>Monitor application performance and error rates</li> <li>Confirm update success or trigger rollback</li> </ol>"},{"location":"operations-runbook/#dependency-management","title":"Dependency Management","text":"<ul> <li>Dependencies are updated on a regular schedule</li> <li>Security patches are prioritized</li> <li>Dependency changes are tested thoroughly before deployment</li> <li>Major version upgrades undergo additional testing</li> </ul>"},{"location":"operations-runbook/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"operations-runbook/#rollback-criteria","title":"Rollback Criteria","text":"<p>Rollback should be initiated if any of these conditions are met: - Error rate increases above 1% - Latency increases by 100% or more - Critical business functionality is impaired - Security vulnerability is introduced</p>"},{"location":"operations-runbook/#rollback-process","title":"Rollback Process","text":"<ol> <li>Identify the need to rollback based on monitoring or manual verification</li> <li>Execute the rollback command to revert to previous stable version</li> </ol> <pre><code># Rollback using ArgoCD:\nargocd app history maily-api\nargocd app rollback maily-api &lt;VERSION&gt;\n\n# Rollback using Helm:\nhelm rollback maily-api &lt;REVISION&gt;\n</code></pre> <ol> <li>Verify system stability after rollback</li> <li>Notify stakeholders of the rollback</li> <li>Document the issue and create post-mortem</li> </ol>"},{"location":"operations-runbook/#rollback-testing","title":"Rollback Testing","text":"<p>Rollback procedures are tested regularly during non-production deployments to ensure reliability.</p>"},{"location":"operations-runbook/#version-management","title":"Version Management","text":""},{"location":"operations-runbook/#versioning-strategy","title":"Versioning Strategy","text":"<p>Maily uses semantic versioning (MAJOR.MINOR.PATCH): - MAJOR: Incompatible API changes - MINOR: New functionality in a backward compatible manner - PATCH: Backward compatible bug fixes</p>"},{"location":"operations-runbook/#version-tracking","title":"Version Tracking","text":"<ul> <li>Git tags mark released versions</li> <li>Container images are tagged with Git SHA and semantic version</li> <li>Version information is available in the application UI and API</li> <li>Release notes document changes in each version</li> </ul>"},{"location":"operations-runbook/#artifact-management","title":"Artifact Management","text":"<ul> <li>Container images are stored in ECR</li> <li>Helm charts are stored in Artifact Hub</li> <li>Build artifacts are stored in S3</li> <li>All artifacts have retention policies</li> </ul>"},{"location":"operations-runbook/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":""},{"location":"operations-runbook/#monitoring-infrastructure","title":"Monitoring Infrastructure","text":""},{"location":"operations-runbook/#components","title":"Components","text":"<p>The monitoring stack consists of: - Prometheus: Metrics collection and alerting - Grafana: Visualization and dashboards - Loki: Log aggregation - Tempo: Distributed tracing - OpenTelemetry: Instrumentation and data collection - AlertManager: Alert routing and notification</p>"},{"location":"operations-runbook/#health-checks","title":"Health Checks","text":"<p>Each service exposes health endpoints: - <code>/health</code>: Basic application health - <code>/health/ready</code>: Readiness check - <code>/health/live</code>: Liveness check - <code>/metrics</code>: Prometheus metrics</p> <pre><code># Check API health\ncurl -s https://api.maily.example.com/health | jq\n\n# Check database connectivity\nkubectl exec -it maily-api-pod-name -- curl localhost:8000/health/db\n</code></pre>"},{"location":"operations-runbook/#metrics-collection","title":"Metrics Collection","text":"<p>Key metrics collected include: - Request rate, error rate, and duration (RED) - Resource utilization (CPU, memory, disk, network) - Business metrics (users, campaigns, emails sent) - SLO/SLI metrics (availability, latency)</p>"},{"location":"operations-runbook/#alert-management","title":"Alert Management","text":""},{"location":"operations-runbook/#alert-configuration","title":"Alert Configuration","text":"<p>Alerts are defined in Prometheus using AlertManager:</p> <pre><code># Example alert rule\ngroups:\n- name: maily-api\n  rules:\n  - alert: HighErrorRate\n    expr: sum(rate(http_requests_total{job=\"maily-api\",status=~\"5..\"}[5m])) / sum(rate(http_requests_total{job=\"maily-api\"}[5m])) &gt; 0.01\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"High error rate on API\"\n      description: \"Error rate is {{ $value | humanizePercentage }} for the last 5 minutes\"\n</code></pre>"},{"location":"operations-runbook/#alert-severity-levels","title":"Alert Severity Levels","text":"<ul> <li>Critical: Immediate action required, customer impact</li> <li>Warning: Action required soon, potential impact</li> <li>Info: No immediate action, potential issue to watch</li> </ul>"},{"location":"operations-runbook/#response-times","title":"Response Times","text":"<ul> <li>Critical alerts: 15-minute response time, 24/7</li> <li>Warning alerts: 4-hour response time during business hours</li> <li>Info alerts: Next business day</li> </ul>"},{"location":"operations-runbook/#notification-channels","title":"Notification Channels","text":"<ul> <li>PagerDuty for critical alerts</li> <li>Slack for warning and info alerts</li> <li>Email for daily/weekly digests</li> <li>SMS for critical infrastructure failures</li> </ul>"},{"location":"operations-runbook/#dashboards","title":"Dashboards","text":""},{"location":"operations-runbook/#standard-dashboards","title":"Standard Dashboards","text":"<ul> <li>Overview: System-wide health and performance</li> <li>Service-Specific: Detailed metrics for each service</li> <li>Business Metrics: User activity and business KPIs</li> <li>SLO/SLI: Service level objectives and indicators</li> <li>Resource Usage: Infrastructure utilization</li> </ul>"},{"location":"operations-runbook/#dashboard-organization","title":"Dashboard Organization","text":"<ul> <li>Dashboards are organized by service and function</li> <li>Consistent layout and design across all dashboards</li> <li>All dashboards include links to related resources</li> <li>Dashboards are version controlled as code</li> </ul>"},{"location":"operations-runbook/#dashboard-access","title":"Dashboard Access","text":"<ul> <li>Read-only access provided to all engineering team members</li> <li>Edit access restricted to operations team</li> <li>Saved dashboard states available for incident review</li> </ul>"},{"location":"operations-runbook/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations-runbook/#common-issues","title":"Common Issues","text":""},{"location":"operations-runbook/#api-service-unavailable","title":"API Service Unavailable","text":"<ol> <li>Check pod status: <code>kubectl get pods -n maily-production</code></li> <li>Check logs: <code>kubectl logs -n maily-production deployment/maily-api</code></li> <li>Verify dependencies (database, Redis, etc.)</li> <li>Check for recent deployments or changes</li> </ol>"},{"location":"operations-runbook/#high-latency","title":"High Latency","text":"<ol> <li>Check database query performance</li> <li>Verify autoscaling is functioning</li> <li>Check for resource constraints</li> <li>Review recent code changes</li> <li>Check external service dependencies</li> </ol>"},{"location":"operations-runbook/#elevated-error-rates","title":"Elevated Error Rates","text":"<ol> <li>Identify error types in logs</li> <li>Check for recent deployments</li> <li>Verify configuration changes</li> <li>Check external dependencies</li> <li>Review recent data changes</li> </ol>"},{"location":"operations-runbook/#debugging-tools","title":"Debugging Tools","text":"<ul> <li>kubectl: Kubernetes management</li> <li>k9s: Interactive Kubernetes UI</li> <li>Grafana Explore: Ad-hoc query interface</li> <li>pgHero: Database performance monitoring</li> <li>New Relic APM: Application performance monitoring</li> </ul>"},{"location":"operations-runbook/#log-analysis","title":"Log Analysis","text":"<ul> <li>Centralized logging with Loki</li> <li>Structured JSON log format</li> <li>Correlation IDs for request tracing</li> <li>Log levels: ERROR, WARN, INFO, DEBUG</li> <li>Sensitive data is filtered from logs</li> </ul> <pre><code># Search logs for a specific request ID\nlogcli query '{app=\"maily-api\"}' | grep \"request_id=abc123\"\n\n# Get error logs from the past hour\nlogcli query '{app=\"maily-api\", level=\"error\"} | json' --since=1h\n</code></pre>"},{"location":"operations-runbook/#database-operations","title":"Database Operations","text":""},{"location":"operations-runbook/#backup-restore","title":"Backup &amp; Restore","text":""},{"location":"operations-runbook/#backup-procedures","title":"Backup Procedures","text":"<p>Daily Automated Backups <pre><code># AWS RDS Automated Backup Configuration\naws rds modify-db-instance \\\n  --db-instance-identifier maily-prod \\\n  --backup-retention-period 35 \\\n  --preferred-backup-window \"00:00-01:00\" \\\n  --copy-tags-to-snapshot \\\n  --deletion-protection \\\n  --apply-immediately\n</code></pre></p> <p>Backup Retention - Daily backups: 35 days retention - Weekly backups: 52 weeks retention - Monthly backups: 12 months retention - Cross-region replicas: Real-time replication</p>"},{"location":"operations-runbook/#restore-procedures","title":"Restore Procedures","text":"<p>Full Database Restore <pre><code># Restore from snapshot to new instance\naws rds restore-db-instance-from-db-snapshot \\\n  --db-instance-identifier maily-prod-restore \\\n  --db-snapshot-identifier rds:maily-prod-snapshot \\\n  --db-instance-class db.r5.xlarge\n\n# For point-in-time recovery\naws rds restore-db-instance-to-point-in-time \\\n  --source-db-instance-identifier maily-prod \\\n  --target-db-instance-identifier maily-prod-restore \\\n  --restore-time 2025-02-01T00:00:00Z\n</code></pre></p> <p>Table-Level Restore 1. Restore full database to temporary instance 2. Export specific table data 3. Import data to production database</p>"},{"location":"operations-runbook/#backup-verification","title":"Backup Verification","text":"<p>Automated daily verification: - Restore sample from backup to test instance - Run integrity checks - Verify data consistency - Clean up test instance</p>"},{"location":"operations-runbook/#performance-tuning","title":"Performance Tuning","text":""},{"location":"operations-runbook/#query-optimization","title":"Query Optimization","text":"<ul> <li>Slow query log analysis</li> <li>Index optimization</li> <li>Query rewriting</li> <li>Execution plan analysis</li> </ul> <pre><code>-- Enable slow query logging\nALTER SYSTEM SET log_min_duration_statement = 1000; -- 1 second\nALTER SYSTEM SET log_statement = 'none';\nSELECT pg_reload_conf();\n\n-- Find missing indexes\nSELECT\n  relname,\n  seq_scan - idx_scan AS missed_scans,\n  round(100 * seq_scan / GREATEST(seq_scan + idx_scan, 1))::numeric AS seq_pct,\n  seq_scan, idx_scan\nFROM pg_stat_user_tables\nWHERE seq_scan &gt; 0\nORDER BY missed_scans DESC;\n</code></pre>"},{"location":"operations-runbook/#connection-pooling","title":"Connection Pooling","text":"<p>PgBouncer is configured for connection pooling: - Pool mode: transaction - Default pool size: 20 - Max client connections: 1000</p> <pre><code># pgbouncer.ini\n[databases]\n* = host=maily-prod.example.com port=5432 dbname=maily\n\n[pgbouncer]\nlisten_addr = *\nlisten_port = 6432\nauth_type = md5\nauth_file = /etc/pgbouncer/userlist.txt\npool_mode = transaction\ndefault_pool_size = 20\nmax_client_conn = 1000\n</code></pre>"},{"location":"operations-runbook/#resource-allocation","title":"Resource Allocation","text":"<ul> <li>PostgreSQL parameter tuning</li> <li>Memory allocation optimization</li> <li>Disk I/O configuration</li> <li>Analyze query patterns</li> </ul> <pre><code># Key PostgreSQL parameters\nshared_buffers = 8GB  # 25% of available memory\nwork_mem = 64MB       # Complex query memory\nmaintenance_work_mem = 1GB  # Maintenance operations\neffective_cache_size = 24GB  # Estimate of disk cache\n</code></pre>"},{"location":"operations-runbook/#maintenance-tasks","title":"Maintenance Tasks","text":""},{"location":"operations-runbook/#regular-maintenance","title":"Regular Maintenance","text":"<ul> <li>VACUUM ANALYZE: Daily automated job</li> <li>Database statistics update: Daily</li> <li>Index maintenance: Weekly</li> <li>Storage cleanup: Monthly</li> </ul> <pre><code>-- Regular maintenance tasks\nVACUUM ANALYZE;\n\n-- Update optimizer statistics\nANALYZE VERBOSE;\n\n-- Rebuild indexes\nREINDEX TABLE users;\n\n-- Find and remove bloat\nSELECT schemaname, tablename,\n  pg_size_pretty(pg_table_size(schemaname || '.' || tablename)) as table_size,\n  pg_size_pretty(bloat_size) as bloat_size,\n  round(100 * bloat_size / pg_table_size(schemaname || '.' || tablename)) as bloat_percentage\nFROM (\n  -- Bloat estimation query\n  -- ...complex query omitted for brevity...\n) AS bloat_estimation\nWHERE bloat_percentage &gt; 20\nORDER BY bloat_percentage DESC;\n</code></pre>"},{"location":"operations-runbook/#health-checks_1","title":"Health Checks","text":"<p>Daily automated health checks: - Connection count monitoring - Lock monitoring - Transaction wraparound prevention - Replication lag monitoring</p> <pre><code>-- Check for long-running transactions\nSELECT pid, now() - pg_stat_activity.query_start AS duration, query\nFROM pg_stat_activity\nWHERE state = 'active' AND now() - pg_stat_activity.query_start &gt; interval '5 minutes'\nORDER BY duration DESC;\n\n-- Check for locks\nSELECT blocked_locks.pid AS blocked_pid,\n       blocked_activity.usename AS blocked_user,\n       blocking_locks.pid AS blocking_pid,\n       blocking_activity.usename AS blocking_user,\n       blocked_activity.query AS blocked_statement,\n       blocking_activity.query AS blocking_statement\nFROM pg_catalog.pg_locks blocked_locks\nJOIN pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid\nJOIN pg_catalog.pg_locks blocking_locks\n    ON blocking_locks.locktype = blocked_locks.locktype\n    AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE\n    AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation\n    AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page\n    AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple\n    AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid\n    AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid\n    AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid\n    AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid\n    AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid\n    AND blocking_locks.pid != blocked_locks.pid\nJOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid\nWHERE NOT blocked_locks.GRANTED;\n</code></pre>"},{"location":"operations-runbook/#migration-procedures","title":"Migration Procedures","text":""},{"location":"operations-runbook/#schema-migrations","title":"Schema Migrations","text":"<p>Migrations are handled using Alembic: 1. Development: Create migration in dev environment 2. Testing: Apply and test in staging environment 3. Production: Apply during low-traffic maintenance window</p> <pre><code># Generate new migration\nalembic revision --autogenerate -m \"Add user preferences table\"\n\n# Apply migration\nalembic upgrade head\n\n# Downgrade if needed\nalembic downgrade -1\n</code></pre>"},{"location":"operations-runbook/#large-data-migrations","title":"Large Data Migrations","text":"<p>For large tables or data transformations: 1. Create new table structure 2. Implement batch migration process 3. Validate data 4. Switch over to new structure 5. Clean up old data after verification period</p>"},{"location":"operations-runbook/#rollback-planning","title":"Rollback Planning","text":"<p>Every migration includes a rollback plan: - Reverse migrations defined in Alembic - Data backup before migration - Validation steps - Monitoring during migration</p>"},{"location":"operations-runbook/#infrastructure-management","title":"Infrastructure Management","text":""},{"location":"operations-runbook/#kubernetes-operations","title":"Kubernetes Operations","text":""},{"location":"operations-runbook/#cluster-management","title":"Cluster Management","text":"<pre><code># Get cluster status\nkubectl cluster-info\nkubectl get nodes\nkubectl top nodes\n\n# Node maintenance\nkubectl drain node-name --ignore-daemonsets\n# Perform maintenance\nkubectl uncordon node-name\n</code></pre>"},{"location":"operations-runbook/#deployment-management","title":"Deployment Management","text":"<pre><code># Get all deployments\nkubectl get deployments -A\n\n# Scale deployment\nkubectl scale deployment maily-api --replicas=5\n\n# Rollout status\nkubectl rollout status deployment/maily-api\n\n# Rollback deployment\nkubectl rollout undo deployment/maily-api\n</code></pre>"},{"location":"operations-runbook/#pod-management","title":"Pod Management","text":"<pre><code># View pods\nkubectl get pods -n maily-production\n\n# Pod details\nkubectl describe pod pod-name -n maily-production\n\n# Pod logs\nkubectl logs pod-name -n maily-production\n\n# Execute command in pod\nkubectl exec -it pod-name -n maily-production -- /bin/bash\n</code></pre>"},{"location":"operations-runbook/#resource-management","title":"Resource Management","text":"<ul> <li>Resource quotas are defined per namespace</li> <li>Pod resource requests and limits are enforced</li> <li>Horizontal Pod Autoscaler adjusts replica count</li> <li>Vertical Pod Autoscaler recommends resource adjustments</li> </ul> <pre><code># View resource quotas\nkubectl get resourcequota -n maily-production\n\n# View HPA\nkubectl get hpa -n maily-production\n\n# Check resource utilization\nkubectl top pods -n maily-production\n</code></pre>"},{"location":"operations-runbook/#network-management","title":"Network Management","text":""},{"location":"operations-runbook/#service-mesh","title":"Service Mesh","text":"<p>Istio service mesh provides: - Traffic management - Security (mTLS) - Observability - Policy enforcement</p> <pre><code># Check Istio gateways\nkubectl get gateway -A\n\n# Check virtual services\nkubectl get virtualservice -A\n\n# View service mesh metrics\nistioctl dashboard grafana\n</code></pre>"},{"location":"operations-runbook/#ingress-management","title":"Ingress Management","text":"<pre><code># View ingress resources\nkubectl get ingress -A\n\n# Edit ingress\nkubectl edit ingress maily-ingress -n maily-production\n\n# Check ingress controller status\nkubectl get pods -n ingress-nginx\n</code></pre>"},{"location":"operations-runbook/#network-policies","title":"Network Policies","text":"<p>Network policies control pod-to-pod communication:</p> <pre><code># View network policies\nkubectl get networkpolicy -A\n\n# Apply network policy\nkubectl apply -f network-policy.yaml\n</code></pre>"},{"location":"operations-runbook/#storage-management","title":"Storage Management","text":""},{"location":"operations-runbook/#volume-management","title":"Volume Management","text":"<pre><code># List persistent volumes\nkubectl get pv\n\n# List persistent volume claims\nkubectl get pvc -A\n\n# Check storage class\nkubectl get storageclass\n</code></pre>"},{"location":"operations-runbook/#backup-management","title":"Backup Management","text":"<ul> <li>EBS snapshots for persistent volumes</li> <li>S3 backup for configuration data</li> <li>Velero for Kubernetes resource backup</li> </ul> <pre><code># Create Velero backup\nvelero backup create maily-backup --include-namespaces maily-production\n\n# Restore from backup\nvelero restore create --from-backup maily-backup\n</code></pre>"},{"location":"operations-runbook/#storage-monitoring","title":"Storage Monitoring","text":"<ul> <li>Capacity monitoring</li> <li>I/O performance monitoring</li> <li>Growth trend analysis</li> <li>Automated alerts for storage issues</li> </ul>"},{"location":"operations-runbook/#cloud-provider-operations","title":"Cloud Provider Operations","text":""},{"location":"operations-runbook/#aws-operations","title":"AWS Operations","text":"<pre><code># List EC2 instances\naws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId,State.Name,InstanceType]' --output table\n\n# List EBS volumes\naws ec2 describe-volumes --query 'Volumes[].[VolumeId,Size,State]' --output table\n\n# View CloudWatch alarms\naws cloudwatch describe-alarms --state-value ALARM\n</code></pre>"},{"location":"operations-runbook/#cost-management","title":"Cost Management","text":"<ul> <li>Resource tagging enforced</li> <li>Cost allocation by team and service</li> <li>Budget alerts</li> <li>Regular cost optimization reviews</li> <li>Reserved instance optimization</li> </ul> <pre><code># Generate cost report\naws ce get-cost-and-usage \\\n  --time-period Start=2025-02-01,End=2025-03-01 \\\n  --granularity MONTHLY \\\n  --metrics \"BlendedCost\" \"UnblendedCost\" \"UsageQuantity\" \\\n  --group-by Type=DIMENSION,Key=SERVICE Type=TAG,Key=Environment\n</code></pre>"},{"location":"operations-runbook/#security-operations","title":"Security Operations","text":""},{"location":"operations-runbook/#access-management","title":"Access Management","text":""},{"location":"operations-runbook/#user-access","title":"User Access","text":"<ul> <li>AWS IAM for cloud resources</li> <li>Kubernetes RBAC for cluster access</li> <li>Database user management</li> <li>Scheduled access reviews</li> </ul> <pre><code># List IAM users\naws iam list-users\n\n# View user policies\naws iam list-attached-user-policies --user-name username\n\n# List Kubernetes RBAC bindings\nkubectl get clusterrolebindings\nkubectl get rolebindings -A\n</code></pre>"},{"location":"operations-runbook/#emergency-access","title":"Emergency Access","text":"<ul> <li>Break-glass accounts with enhanced logging</li> <li>Documented emergency access procedures</li> <li>Post-access review and auditing</li> </ul> <pre><code># Activate emergency access\naws iam attach-user-policy \\\n  --user-name emergency-admin \\\n  --policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n\n# Log emergency access\n./log-emergency-access.sh --user emergency-admin --reason \"Production database failure\"\n</code></pre>"},{"location":"operations-runbook/#certificate-management","title":"Certificate Management","text":""},{"location":"operations-runbook/#tls-certificate-rotation","title":"TLS Certificate Rotation","text":"<ul> <li>Automated certificate renewal with cert-manager</li> <li>30-day renewal before expiration</li> <li>Certificate status monitoring</li> </ul> <pre><code># Check certificate status\nkubectl get certificate -A\n\n# Force certificate renewal\nkubectl annotate certificate maily-cert -n maily-production cert-manager.io/renew=\"true\"\n</code></pre>"},{"location":"operations-runbook/#pki-management","title":"PKI Management","text":"<ul> <li>Internal CA for service mesh certificates</li> <li>Certificate validity monitoring</li> <li>Revocation procedures</li> <li>Key storage in secure vault</li> </ul>"},{"location":"operations-runbook/#secret-rotation","title":"Secret Rotation","text":""},{"location":"operations-runbook/#aws-secrets","title":"AWS Secrets","text":"<ul> <li>AWS Secrets Manager for credential storage</li> <li>Automatic rotation schedule</li> <li>Secret access audit logging</li> </ul> <pre><code># Rotate secret\naws secretsmanager rotate-secret \\\n  --secret-id arn:aws:secretsmanager:region:account:secret:maily-db-credentials\n\n# Check rotation status\naws secretsmanager describe-secret \\\n  --secret-id arn:aws:secretsmanager:region:account:secret:maily-db-credentials\n</code></pre>"},{"location":"operations-runbook/#kubernetes-secrets","title":"Kubernetes Secrets","text":"<ul> <li>External Secrets Operator for Kubernetes</li> <li>Secrets encrypted at rest</li> <li>Regular secret rotation</li> </ul> <pre><code># View external secrets\nkubectl get externalsecret -A\n\n# Rotate Kubernetes secret\nkubectl delete secret maily-api-secret\nkubectl create secret generic maily-api-secret --from-literal=api-key=\"$(openssl rand -hex 32)\"\n</code></pre>"},{"location":"operations-runbook/#security-scanning","title":"Security Scanning","text":""},{"location":"operations-runbook/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<ul> <li>Daily scans of container images</li> <li>Weekly scans of infrastructure</li> <li>Dependency vulnerability tracking</li> <li>Automated security patching</li> </ul> <pre><code># Scan container image\ntrivy image maily-api:latest\n\n# Scan Kubernetes infrastructure\nkube-bench\n</code></pre>"},{"location":"operations-runbook/#compliance-checking","title":"Compliance Checking","text":"<ul> <li>Regular compliance scans</li> <li>Configuration drift detection</li> <li>Remediation workflow</li> <li>Compliance reporting</li> </ul> <pre><code># Check AWS compliance\naws securityhub get-findings \\\n  --filters '{\"ComplianceStatus\":[{\"Value\":\"FAILED\",\"Comparison\":\"EQUALS\"}]}'\n</code></pre>"},{"location":"operations-runbook/#incident-response","title":"Incident Response","text":""},{"location":"operations-runbook/#incident-classification","title":"Incident Classification","text":""},{"location":"operations-runbook/#severity-levels","title":"Severity Levels","text":"<ul> <li>P1: Critical - Service unavailable, data loss</li> <li>P2: High - Degraded service, significant impact</li> <li>P3: Medium - Partial impact, workaround available</li> <li>P4: Low - Minor impact, no service disruption</li> </ul>"},{"location":"operations-runbook/#response-times_1","title":"Response Times","text":"Severity Response Time Resolution Target Update Frequency P1 15 minutes 4 hours 30 minutes P2 30 minutes 8 hours 1 hour P3 2 hours 24 hours 4 hours P4 8 hours 5 days 24 hours"},{"location":"operations-runbook/#incident-handling","title":"Incident Handling","text":""},{"location":"operations-runbook/#incident-process","title":"Incident Process","text":"<ol> <li>Detection &amp; Reporting</li> <li>Automatic via monitoring systems</li> <li>Manual via user reports</li> <li> <p>Documented in incident management system</p> </li> <li> <p>Triage &amp; Assessment</p> </li> <li>Determine severity and impact</li> <li>Assign incident commander</li> <li> <p>Form response team</p> </li> <li> <p>Investigation &amp; Diagnosis</p> </li> <li>Gather relevant logs and metrics</li> <li>Analyze system behavior</li> <li> <p>Identify root cause</p> </li> <li> <p>Mitigation &amp; Resolution</p> </li> <li>Implement immediate fixes</li> <li>Restore service</li> <li> <p>Verify resolution</p> </li> <li> <p>Post-Incident Review</p> </li> <li>Document timeline</li> <li>Identify root cause</li> <li>Develop action items</li> </ol>"},{"location":"operations-runbook/#incident-roles","title":"Incident Roles","text":"<ul> <li>Incident Commander: Coordinates response efforts</li> <li>Technical Lead: Directs technical investigation</li> <li>Communications Lead: Handles stakeholder updates</li> <li>Subject Matter Experts: Provide domain expertise</li> </ul>"},{"location":"operations-runbook/#communication-procedures","title":"Communication Procedures","text":""},{"location":"operations-runbook/#status-updates","title":"Status Updates","text":"<ul> <li>Status page updates for external communication</li> <li>Internal updates via Slack channel</li> <li>Executive briefings for major incidents</li> <li>Customer communications via email/support</li> </ul>"},{"location":"operations-runbook/#escalation-path","title":"Escalation Path","text":"<ol> <li>On-call engineer</li> <li>Engineering team lead</li> <li>Engineering manager</li> <li>CTO</li> <li>CEO (for critical incidents only)</li> </ol>"},{"location":"operations-runbook/#post-incident-procedures","title":"Post-Incident Procedures","text":""},{"location":"operations-runbook/#post-mortem-analysis","title":"Post-Mortem Analysis","text":"<ul> <li>Blameless post-mortem within 48 hours</li> <li>Timeline reconstruction</li> <li>Root cause analysis</li> <li>Contributing factors identification</li> <li>Documentation in knowledge base</li> </ul>"},{"location":"operations-runbook/#action-items","title":"Action Items","text":"<ul> <li>Specific, assignable improvements</li> <li>Technical and process changes</li> <li>Monitoring enhancements</li> <li>Training improvements</li> <li>Timeline for implementation</li> </ul>"},{"location":"operations-runbook/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"operations-runbook/#recovery-scenarios","title":"Recovery Scenarios","text":""},{"location":"operations-runbook/#infrastructure-failure","title":"Infrastructure Failure","text":"<ol> <li>Single AZ Failure</li> <li>Automatic failover to other AZs</li> <li>No manual intervention required</li> <li> <p>&lt;5 minute recovery time objective (RTO)</p> </li> <li> <p>Region Failure</p> </li> <li>Manual failover to backup region</li> <li>Data recovery from backups/replicas</li> <li> <p>&lt;1 hour RTO, &lt;15 minute RPO</p> </li> <li> <p>Cloud Provider Failure</p> </li> <li>Activation of disaster recovery plan</li> <li>Communication to all stakeholders</li> <li>&lt;4 hour RTO, &lt;1 hour RPO</li> </ol>"},{"location":"operations-runbook/#data-corruptionloss","title":"Data Corruption/Loss","text":"<ol> <li>Database Corruption</li> <li>Point-in-time recovery from backups</li> <li>Data validation procedures</li> <li> <p>&lt;1 hour RTO, &lt;5 minute RPO</p> </li> <li> <p>Accidental Data Deletion</p> </li> <li>Restore from backups</li> <li>Validation of restored data</li> <li>&lt;2 hour RTO, &lt;24 hour RPO</li> </ol>"},{"location":"operations-runbook/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"operations-runbook/#database-recovery","title":"Database Recovery","text":"<pre><code># Restore from snapshot\naws rds restore-db-instance-from-db-snapshot \\\n  --db-instance-identifier maily-prod-restored \\\n  --db-snapshot-identifier rds:maily-prod-2025-03-01 \\\n  --db-instance-class db.r5.xlarge \\\n  --no-publicly-accessible \\\n  --db-subnet-group-name maily-prod-subnet-group \\\n  --vpc-security-group-ids sg-12345\n\n# Point-in-time recovery\naws rds restore-db-instance-to-point-in-time \\\n  --source-db-instance-identifier maily-prod \\\n  --target-db-instance-identifier maily-prod-restored \\\n  --restore-time 2025-03-01T12:00:00Z\n</code></pre>"},{"location":"operations-runbook/#application-recovery","title":"Application Recovery","text":"<pre><code># Restore Kubernetes resources\nvelero restore create --from-backup maily-backup-2025-03-01 \\\n  --namespace-mappings maily-production:maily-recovery\n\n# Verify application health\nkubectl get pods -n maily-recovery\ncurl -s https://recovery.maily.example.com/health | jq\n</code></pre>"},{"location":"operations-runbook/#failover-procedures","title":"Failover Procedures","text":"<p>Multi-AZ Database Failover <pre><code># Manual failover if needed\naws rds reboot-db-instance \\\n  --db-instance-identifier maily-prod \\\n  --force-failover\n</code></pre></p> <p>Regional Failover <pre><code># Update DNS to point to backup region\naws route53 change-resource-record-sets \\\n  --hosted-zone-id Z123456789 \\\n  --change-batch file://failover-dns-changes.json\n\n# Promote replica to primary\naws rds promote-read-replica \\\n  --db-instance-identifier maily-prod-replica\n</code></pre></p>"},{"location":"operations-runbook/#testing-validation","title":"Testing &amp; Validation","text":""},{"location":"operations-runbook/#regular-dr-testing","title":"Regular DR Testing","text":"<ul> <li>Quarterly table-top exercises</li> <li>Semi-annual technical recovery drills</li> <li>Annual full disaster recovery simulation</li> <li>Documentation of test results and improvements</li> </ul>"},{"location":"operations-runbook/#validation-procedures","title":"Validation Procedures","text":"<ul> <li>Recovery time measurement</li> <li>Data integrity verification</li> <li>Application functionality testing</li> <li>Performance testing after recovery</li> </ul>"},{"location":"operations-runbook/#business-continuity","title":"Business Continuity","text":""},{"location":"operations-runbook/#critical-business-functions","title":"Critical Business Functions","text":"<ol> <li>Email Campaign Delivery</li> <li>User Authentication</li> <li>Analytics Dashboards</li> <li>Content Creation</li> <li>Subscription Management</li> </ol>"},{"location":"operations-runbook/#continuity-strategies","title":"Continuity Strategies","text":"<ul> <li>Multi-region application deployment</li> <li>Automatic failover for critical components</li> <li>Graceful degradation capabilities</li> <li>Manual workaround procedures</li> </ul>"},{"location":"operations-runbook/#scaling-procedures","title":"Scaling Procedures","text":""},{"location":"operations-runbook/#horizontal-scaling","title":"Horizontal Scaling","text":""},{"location":"operations-runbook/#kubernetes-scaling","title":"Kubernetes Scaling","text":"<pre><code># Manual scaling\nkubectl scale deployment maily-api --replicas=10\n\n# Configure Horizontal Pod Autoscaler\nkubectl autoscale deployment maily-api \\\n  --cpu-percent=70 \\\n  --min=3 \\\n  --max=20\n</code></pre>"},{"location":"operations-runbook/#application-scaling","title":"Application Scaling","text":"<ul> <li>Stateless design for horizontal scalability</li> <li>Load balancing across instances</li> <li>Session management via Redis</li> <li>Distributed caching</li> </ul>"},{"location":"operations-runbook/#vertical-scaling","title":"Vertical Scaling","text":""},{"location":"operations-runbook/#instance-sizing","title":"Instance Sizing","text":"<ul> <li>Regular resource utilization review</li> <li>Right-sizing of instances</li> <li>Performance testing for sizing decisions</li> </ul> <pre><code># Resize Kubernetes nodes\neksctl scale nodegroup --cluster=maily-cluster \\\n  --nodes=5 \\\n  --name=standard-workers\n\n# Change instance type (requires new node group)\neksctl create nodegroup --cluster=maily-cluster \\\n  --name=performance-workers \\\n  --node-type=c5.2xlarge \\\n  --nodes=3\n</code></pre>"},{"location":"operations-runbook/#database-scaling","title":"Database Scaling","text":""},{"location":"operations-runbook/#read-scaling","title":"Read Scaling","text":"<ul> <li>Read replicas for read-heavy workloads</li> <li>Connection pooling with PgBouncer</li> <li>Query optimization and caching</li> </ul> <pre><code># Create read replica\naws rds create-db-instance-read-replica \\\n  --db-instance-identifier maily-prod-read1 \\\n  --source-db-instance-identifier maily-prod \\\n  --db-instance-class db.r5.xlarge\n</code></pre>"},{"location":"operations-runbook/#write-scaling","title":"Write Scaling","text":"<ul> <li>Vertical scaling for write capacity</li> <li>Database sharding for extreme scale</li> <li>Write batching and optimization</li> </ul> <pre><code># Modify DB instance class\naws rds modify-db-instance \\\n  --db-instance-identifier maily-prod \\\n  --db-instance-class db.r5.2xlarge \\\n  --apply-immediately\n</code></pre>"},{"location":"operations-runbook/#cloud-resource-scaling","title":"Cloud Resource Scaling","text":""},{"location":"operations-runbook/#auto-scaling-groups","title":"Auto Scaling Groups","text":"<pre><code># Update auto scaling group\naws autoscaling update-auto-scaling-group \\\n  --auto-scaling-group-name maily-prod-asg \\\n  --min-size 5 \\\n  --max-size 20 \\\n  --desired-capacity 10\n</code></pre>"},{"location":"operations-runbook/#resource-provisioning","title":"Resource Provisioning","text":"<ul> <li>Terraform for infrastructure scaling</li> <li>Capacity planning based on growth forecasts</li> <li>Reserved instances for predictable workloads</li> </ul>"},{"location":"operations-runbook/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"operations-runbook/#scheduled-maintenance","title":"Scheduled Maintenance","text":""},{"location":"operations-runbook/#maintenance-schedule","title":"Maintenance Schedule","text":"<ul> <li>Regular maintenance window: Sundays 01:00-03:00 UTC</li> <li>Database maintenance: First Sunday of each month</li> <li>System updates: Second Sunday of each month</li> <li>Performance tuning: Ongoing as needed</li> </ul>"},{"location":"operations-runbook/#notification-process","title":"Notification Process","text":"<ul> <li>Maintenance calendar in operations portal</li> <li>Notification to stakeholders 7 days in advance</li> <li>Reminder 24 hours before maintenance</li> <li>Status updates during maintenance</li> <li>Completion notification</li> </ul>"},{"location":"operations-runbook/#patch-management","title":"Patch Management","text":""},{"location":"operations-runbook/#critical-patches","title":"Critical Patches","text":"<ul> <li>Security patches applied within 24 hours</li> <li>Emergency maintenance window if needed</li> <li>Verification in staging environment first</li> <li>Post-patch validation</li> </ul>"},{"location":"operations-runbook/#routine-patches","title":"Routine Patches","text":"<ul> <li>Weekly review of available patches</li> <li>Monthly application during maintenance window</li> <li>Full testing in staging environment</li> <li>Rollback plan for each patch</li> </ul>"},{"location":"operations-runbook/#system-updates","title":"System Updates","text":""},{"location":"operations-runbook/#operating-system-updates","title":"Operating System Updates","text":"<pre><code># AMI updates through pipeline\npacker build -var 'version=latest' ami.pkr.hcl\n\n# Deploy updated AMI\nterraform apply -var 'ami_id=ami-12345'\n</code></pre>"},{"location":"operations-runbook/#container-image-updates","title":"Container Image Updates","text":"<ul> <li>Base image updates monthly</li> <li>Security patches immediately</li> <li>Testing in CI/CD pipeline</li> <li>Automated vulnerability scanning</li> </ul>"},{"location":"operations-runbook/#maintenance-windows","title":"Maintenance Windows","text":""},{"location":"operations-runbook/#standard-windows","title":"Standard Windows","text":"<ul> <li>Production: Sundays 01:00-03:00 UTC</li> <li>Staging: Wednesdays 13:00-15:00 UTC</li> <li>Development: Any time with notification</li> </ul>"},{"location":"operations-runbook/#emergency-maintenance","title":"Emergency Maintenance","text":"<ul> <li>Requires approval from engineering leadership</li> <li>Minimum 1-hour notice when possible</li> <li>Full communication plan</li> <li>Post-maintenance review</li> </ul>"},{"location":"operations-runbook/#on-call-procedures","title":"On-Call Procedures","text":""},{"location":"operations-runbook/#on-call-rotation","title":"On-Call Rotation","text":""},{"location":"operations-runbook/#schedule","title":"Schedule","text":"<ul> <li>Weekly rotation (Monday 9:00 to Monday 9:00)</li> <li>Primary and secondary on-call engineers</li> <li>Specialized rotations for database, infrastructure</li> </ul>"},{"location":"operations-runbook/#handover-process","title":"Handover Process","text":"<ul> <li>Documented handover meeting</li> <li>Review of ongoing issues</li> <li>Knowledge transfer of recent changes</li> <li>Verification of monitoring and alerting</li> </ul>"},{"location":"operations-runbook/#escalation-procedures","title":"Escalation Procedures","text":""},{"location":"operations-runbook/#first-response","title":"First Response","text":"<ol> <li>Acknowledge alert within 5 minutes</li> <li>Begin initial investigation</li> <li>Update status page if customer impact</li> <li>Escalate if unable to resolve within SLA</li> </ol>"},{"location":"operations-runbook/#escalation-path_1","title":"Escalation Path","text":"<ol> <li>Primary on-call engineer</li> <li>Secondary on-call engineer</li> <li>Team lead or specialized on-call</li> <li>Engineering manager</li> <li>CTO/VP of Engineering</li> </ol>"},{"location":"operations-runbook/#severity-levels_1","title":"Severity Levels","text":""},{"location":"operations-runbook/#level-1-critical","title":"Level 1 (Critical)","text":"<ul> <li>Complete service outage</li> <li>Data loss or corruption</li> <li>Security breach</li> <li>Response: Immediate, 24/7</li> </ul>"},{"location":"operations-runbook/#level-2-high","title":"Level 2 (High)","text":"<ul> <li>Partial service outage</li> <li>Severe performance degradation</li> <li>Customer-impacting bugs</li> <li>Response: 30 minutes, 24/7</li> </ul>"},{"location":"operations-runbook/#level-3-medium","title":"Level 3 (Medium)","text":"<ul> <li>Non-critical component failure</li> <li>Moderate performance issues</li> <li>Workaround available</li> <li>Response: 2 hours, business hours</li> </ul>"},{"location":"operations-runbook/#level-4-low","title":"Level 4 (Low)","text":"<ul> <li>Minor issues</li> <li>Low impact bugs</li> <li>Cosmetic issues</li> <li>Response: Next business day</li> </ul>"},{"location":"operations-runbook/#communication-channels","title":"Communication Channels","text":""},{"location":"operations-runbook/#alert-notifications","title":"Alert Notifications","text":"<ul> <li>PagerDuty for alerting</li> <li>SMS for critical issues</li> <li>Email for non-critical issues</li> <li>Slack channel for team communication</li> </ul>"},{"location":"operations-runbook/#status-communication","title":"Status Communication","text":"<ul> <li>Status page for external communication</li> <li>Slack channels for internal updates</li> <li>Email for scheduled maintenance</li> <li>Video conferences for major incidents</li> </ul>"},{"location":"security-compliance-handbook/","title":"Maily Security &amp; Compliance Handbook","text":"<p>Last updated: March 4, 2025</p>"},{"location":"security-compliance-handbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Security Architecture</li> <li>Zero Trust Model</li> <li>Defense in Depth</li> <li>Threat Modeling</li> <li>Infrastructure Security</li> <li>Cloud Security</li> <li>Network Security</li> <li>Container Security</li> <li>Database Security</li> <li>Application Security</li> <li>Secure Development Lifecycle</li> <li>Authentication &amp; Authorization</li> <li>API Security</li> <li>Frontend Security</li> <li>Data Security</li> <li>Data Classification</li> <li>Encryption</li> <li>Data Loss Prevention</li> <li>Data Retention &amp; Disposal</li> <li>Identity &amp; Access Management</li> <li>User Access Management</li> <li>Privilege Management</li> <li>Multi-factor Authentication</li> <li>Single Sign-On</li> <li>Security Operations</li> <li>Vulnerability Management</li> <li>Security Monitoring</li> <li>Incident Response</li> <li>Security Testing</li> <li>Compliance Framework</li> <li>Regulatory Requirements</li> <li>Industry Standards</li> <li>Internal Policies</li> <li>Audit Management</li> <li>Privacy</li> <li>GDPR Compliance</li> <li>CCPA/CPRA Compliance</li> <li>Privacy by Design</li> <li>Data Subject Rights</li> <li>Risk Management</li> <li>Risk Assessment</li> <li>Control Framework</li> <li>Third-Party Risk Management</li> <li>Business Continuity</li> <li>Secure DevOps</li> <li>Pipeline Security</li> <li>Infrastructure as Code Security</li> <li>Container Registry Security</li> <li>Secret Management</li> <li>Security Awareness</li> <li>Training Program</li> <li>Phishing Simulation</li> <li>Security Champions</li> <li>Documentation</li> </ul>"},{"location":"security-compliance-handbook/#overview","title":"Overview","text":"<p>The Maily platform is built with security and privacy by design, implementing rigorous controls to protect customer data, ensure service integrity, and maintain compliance with relevant regulations. This handbook provides comprehensive information about our security architecture, controls, and compliance programs.</p> <p>Our security and compliance strategy is guided by these core principles:</p> <ul> <li>Zero Trust Architecture: Never trust, always verify</li> <li>Defense in Depth: Multiple layers of security controls</li> <li>Privacy by Design: Privacy considerations built into everything we do</li> <li>Least Privilege: Access limited to what is strictly necessary</li> <li>Continuous Improvement: Ongoing enhancement of security posture</li> <li>Transparency: Clear communication about security practices</li> </ul>"},{"location":"security-compliance-handbook/#security-architecture","title":"Security Architecture","text":""},{"location":"security-compliance-handbook/#zero-trust-model","title":"Zero Trust Model","text":"<p>Maily implements a comprehensive Zero Trust security model:</p>"},{"location":"security-compliance-handbook/#core-principles","title":"Core Principles","text":"<ul> <li>No implicit trust based on network location</li> <li>Authentication and authorization required for all access</li> <li>Least privilege enforcement for all resources</li> <li>Microsegmentation of network environments</li> <li>Continuous verification and validation</li> <li>Encryption of all data in transit and at rest</li> </ul>"},{"location":"security-compliance-handbook/#implementation","title":"Implementation","text":"<ul> <li>Identity-based access controls</li> <li>Granular authorization policies</li> <li>Just-in-time and just-enough access</li> <li>Continuous monitoring and validation</li> <li>Device trust evaluation</li> <li>Session-based access controls</li> </ul>"},{"location":"security-compliance-handbook/#trust-boundaries","title":"Trust Boundaries","text":"<ul> <li>Network boundaries with strict controls</li> <li>Application boundaries with API authentication</li> <li>Data boundaries with encryption</li> <li>Identity boundaries with MFA</li> <li>Cloud provider boundaries with dedicated tenancy</li> <li>Third-party integration boundaries with strict validation</li> </ul>"},{"location":"security-compliance-handbook/#defense-in-depth","title":"Defense in Depth","text":"<p>Multiple layers of security controls protecting the platform:</p>"},{"location":"security-compliance-handbook/#security-layers","title":"Security Layers","text":"<ul> <li>Physical security (cloud provider data centers)</li> <li>Network security (firewalls, NACL, security groups)</li> <li>Infrastructure security (hardened servers, containers)</li> <li>Application security (code scanning, dependency analysis)</li> <li>Data security (encryption, tokenization)</li> <li>Identity security (MFA, SSO, privileged access)</li> <li>Operational security (monitoring, alerting, response)</li> </ul>"},{"location":"security-compliance-handbook/#overlapping-controls","title":"Overlapping Controls","text":"<ul> <li>Preventative controls (block unauthorized access)</li> <li>Detective controls (identify security events)</li> <li>Corrective controls (address identified issues)</li> <li>Deterrent controls (discourage attempts)</li> <li>Recovery controls (restore systems and data)</li> <li>Compensating controls (mitigate control gaps)</li> </ul>"},{"location":"security-compliance-handbook/#resilience-strategy","title":"Resilience Strategy","text":"<ul> <li>Security redundancy in critical areas</li> <li>No single points of failure in security systems</li> <li>Secure fallback mechanisms</li> <li>Graceful degradation during attacks</li> <li>Robust recovery procedures</li> <li>Regular testing of security controls</li> </ul>"},{"location":"security-compliance-handbook/#threat-modeling","title":"Threat Modeling","text":"<p>Proactive identification and mitigation of security threats:</p>"},{"location":"security-compliance-handbook/#methodology","title":"Methodology","text":"<ul> <li>STRIDE threat modeling framework</li> <li>Attack surface analysis</li> <li>Threat intelligence integration</li> <li>Risk-based approach to prioritization</li> <li>Regular reassessment and validation</li> <li>Cross-functional involvement</li> </ul>"},{"location":"security-compliance-handbook/#areas-of-focus","title":"Areas of Focus","text":"<ul> <li>External attack vectors</li> <li>Insider threat scenarios</li> <li>Third-party and supply chain risks</li> <li>Social engineering and phishing</li> <li>Advanced persistent threats</li> <li>Novel attack techniques</li> </ul>"},{"location":"security-compliance-handbook/#mitigation-strategy","title":"Mitigation Strategy","text":"<ul> <li>Control mapping to identified threats</li> <li>Gap analysis and remediation</li> <li>Emerging threat monitoring</li> <li>Security architecture reviews</li> <li>Security requirements definition</li> <li>Attack scenario testing</li> </ul>"},{"location":"security-compliance-handbook/#infrastructure-security","title":"Infrastructure Security","text":""},{"location":"security-compliance-handbook/#cloud-security","title":"Cloud Security","text":"<p>Security measures for cloud infrastructure:</p>"},{"location":"security-compliance-handbook/#aws-security-controls","title":"AWS Security Controls","text":"<ul> <li>AWS Control Tower for account governance</li> <li>AWS Organizations with SCPs for guardrails</li> <li>AWS Config for compliance monitoring</li> <li>AWS Security Hub for unified security view</li> <li>AWS GuardDuty for threat detection</li> <li>AWS Inspector for vulnerability management</li> </ul>"},{"location":"security-compliance-handbook/#account-security","title":"Account Security","text":"<ul> <li>Multi-account strategy with separation of concerns</li> <li>Strict IAM policies and boundaries</li> <li>Centralized identity management</li> <li>Resource access controls</li> <li>CloudTrail audit logging</li> <li>AWS Key Management Service (KMS) for key management</li> </ul>"},{"location":"security-compliance-handbook/#cloud-security-posture-management","title":"Cloud Security Posture Management","text":"<ul> <li>Automated compliance scanning</li> <li>Resource misconfiguration detection</li> <li>Continuous security assessment</li> <li>Benchmarking against best practices</li> <li>Remediation workflows</li> <li>Security score tracking</li> </ul>"},{"location":"security-compliance-handbook/#network-security","title":"Network Security","text":"<p>Defense-in-depth network protection:</p>"},{"location":"security-compliance-handbook/#perimeter-defense","title":"Perimeter Defense","text":"<ul> <li>Web Application Firewall (AWS WAF)</li> <li>DDoS protection with AWS Shield Advanced</li> <li>Edge protection with Cloudflare</li> <li>API Gateway with request validation</li> <li>IP allow/deny lists</li> <li>Rate limiting and throttling</li> </ul>"},{"location":"security-compliance-handbook/#network-segmentation","title":"Network Segmentation","text":"<ul> <li>VPC design with private subnets</li> <li>Transit Gateway for controlled routing</li> <li>Network ACLs for subnet protection</li> <li>Security Groups for instance-level filtering</li> <li>VPC Endpoints for AWS service access</li> <li>Network isolation between environments</li> </ul>"},{"location":"security-compliance-handbook/#traffic-management","title":"Traffic Management","text":"<ul> <li>Encryption of all data in transit (TLS 1.2+)</li> <li>Mutual TLS for service-to-service communication</li> <li>SNI for certificate management</li> <li>Network traffic monitoring</li> <li>Anomaly detection</li> <li>Dynamic blocking of suspicious traffic</li> </ul>"},{"location":"security-compliance-handbook/#container-security","title":"Container Security","text":"<p>Security controls for containerized environments:</p>"},{"location":"security-compliance-handbook/#image-security","title":"Image Security","text":"<ul> <li>Minimal base images</li> <li>Vulnerability scanning with Trivy</li> <li>Software composition analysis</li> <li>Image signing and verification</li> <li>Image registry security</li> <li>Container image hardening</li> </ul>"},{"location":"security-compliance-handbook/#runtime-security","title":"Runtime Security","text":"<ul> <li>Pod Security Standards (restricted profile)</li> <li>Seccomp profiles for system call filtering</li> <li>AppArmor profiles for kernel-level controls</li> <li>Read-only file systems</li> <li>Non-root container execution</li> <li>Capability restriction</li> </ul>"},{"location":"security-compliance-handbook/#kubernetes-security","title":"Kubernetes Security","text":"<ul> <li>EKS security best practices</li> <li>Control plane security</li> <li>RBAC with least privilege</li> <li>Network Policy for micro-segmentation</li> <li>Admission controllers (OPA Gatekeeper)</li> <li>EKS security groups for pods</li> </ul>"},{"location":"security-compliance-handbook/#database-security","title":"Database Security","text":"<p>Protection of data storage systems:</p>"},{"location":"security-compliance-handbook/#postgresql-security","title":"PostgreSQL Security","text":"<ul> <li>Network isolation with private subnets</li> <li>IAM authentication</li> <li>TLS encryption for connections</li> <li>Encrypted storage</li> <li>Parameter group hardening</li> <li>Audit logging and monitoring</li> </ul>"},{"location":"security-compliance-handbook/#redis-security","title":"Redis Security","text":"<ul> <li>Auth token authentication</li> <li>In-transit encryption</li> <li>VPC isolation</li> <li>No direct internet access</li> <li>Redis ACLs for access control</li> <li>Memory usage monitoring</li> </ul>"},{"location":"security-compliance-handbook/#clickhouse-security","title":"ClickHouse Security","text":"<ul> <li>Authentication and access controls</li> <li>Data encryption</li> <li>Network isolation</li> <li>Query logging</li> <li>Resource limitations</li> <li>Secure configuration</li> </ul>"},{"location":"security-compliance-handbook/#general-database-controls","title":"General Database Controls","text":"<ul> <li>Database activity monitoring</li> <li>Query analysis for anomaly detection</li> <li>Automated backup encryption</li> <li>Schema-level access controls</li> <li>Connection pooling security</li> <li>Sensitive data discovery</li> </ul>"},{"location":"security-compliance-handbook/#application-security","title":"Application Security","text":""},{"location":"security-compliance-handbook/#secure-development-lifecycle","title":"Secure Development Lifecycle","text":"<p>Security throughout the software development process:</p>"},{"location":"security-compliance-handbook/#security-requirements","title":"Security Requirements","text":"<ul> <li>Security user stories and requirements</li> <li>Threat modeling for new features</li> <li>Security architecture reviews</li> <li>Regulatory compliance requirements</li> <li>Security acceptance criteria</li> <li>Data protection requirements</li> </ul>"},{"location":"security-compliance-handbook/#secure-coding","title":"Secure Coding","text":"<ul> <li>Secure coding guidelines</li> <li>Language-specific security practices</li> <li>Code security training</li> <li>Common vulnerability prevention</li> <li>Security-focused code reviews</li> <li>Security champion involvement</li> </ul>"},{"location":"security-compliance-handbook/#security-testing","title":"Security Testing","text":"<ul> <li>Static Application Security Testing (SAST)</li> <li>Dynamic Application Security Testing (DAST)</li> <li>Software Composition Analysis (SCA)</li> <li>Interactive Application Security Testing (IAST)</li> <li>Fuzz testing</li> <li>Manual security reviews</li> </ul>"},{"location":"security-compliance-handbook/#security-defect-management","title":"Security Defect Management","text":"<ul> <li>Security bug severity classification</li> <li>Remediation SLAs based on severity</li> <li>Vulnerability tracking and metrics</li> <li>Root cause analysis</li> <li>Security debt management</li> <li>Regression prevention</li> </ul>"},{"location":"security-compliance-handbook/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>User identity verification and access control:</p>"},{"location":"security-compliance-handbook/#authentication-methods","title":"Authentication Methods","text":"<ul> <li>Username/password with complexity requirements</li> <li>OAuth 2.0 / OpenID Connect</li> <li>SAML federation</li> <li>Multi-factor authentication</li> <li>API key authentication</li> <li>JWT-based authentication</li> </ul>"},{"location":"security-compliance-handbook/#account-security_1","title":"Account Security","text":"<ul> <li>Account lockout after failed attempts</li> <li>Password strength enforcement</li> <li>Credential rotation requirements</li> <li>Session management</li> <li>Secure credential storage</li> <li>Account recovery procedures</li> </ul>"},{"location":"security-compliance-handbook/#authorization-framework","title":"Authorization Framework","text":"<ul> <li>Role-Based Access Control (RBAC)</li> <li>Attribute-Based Access Control (ABAC)</li> <li>Permission management</li> <li>Dynamic authorization</li> <li>API-level authorization</li> <li>Resource-level permissions</li> </ul>"},{"location":"security-compliance-handbook/#implementation_1","title":"Implementation","text":"<ul> <li>JSON Web Tokens (JWT) with appropriate security</li> <li>Server-side session validation</li> <li>CSRF protection</li> <li>Secure cookie configuration</li> <li>Authorization header security</li> <li>Token revocation and expiration</li> </ul>"},{"location":"security-compliance-handbook/#api-security","title":"API Security","text":"<p>Protection of application programming interfaces:</p>"},{"location":"security-compliance-handbook/#api-design-security","title":"API Design Security","text":"<ul> <li>REST security best practices</li> <li>GraphQL security controls</li> <li>Input validation</li> <li>Output encoding</li> <li>Error handling security</li> <li>Resource-based authorization</li> </ul>"},{"location":"security-compliance-handbook/#api-gateway-security","title":"API Gateway Security","text":"<ul> <li>Authentication enforcement</li> <li>Rate limiting and throttling</li> <li>Input sanitization</li> <li>Request validation</li> <li>Response filtering</li> <li>API versioning security</li> </ul>"},{"location":"security-compliance-handbook/#api-specific-threats","title":"API-Specific Threats","text":"<ul> <li>Injection prevention</li> <li>Parameter tampering protection</li> <li>API enumeration prevention</li> <li>Excessive data exposure prevention</li> <li>Broken authentication mitigation</li> <li>Mass assignment prevention</li> </ul>"},{"location":"security-compliance-handbook/#monitoring-testing","title":"Monitoring &amp; Testing","text":"<ul> <li>API security testing</li> <li>API traffic monitoring</li> <li>Anomaly detection</li> <li>API documentation security</li> <li>Deprecation security</li> <li>API inventory management</li> </ul>"},{"location":"security-compliance-handbook/#frontend-security","title":"Frontend Security","text":"<p>Client-side application security:</p>"},{"location":"security-compliance-handbook/#browser-security","title":"Browser Security","text":"<ul> <li>Content Security Policy (CSP)</li> <li>Strict Transport Security (HSTS)</li> <li>Browser XSS protection</li> <li>Frame protection (X-Frame-Options)</li> <li>Referrer Policy</li> <li>Subresource Integrity</li> </ul>"},{"location":"security-compliance-handbook/#javascript-security","title":"JavaScript Security","text":"<ul> <li>Third-party script management</li> <li>DOM-based XSS prevention</li> <li>Client-side validation (with server-side enforcement)</li> <li>Secure localStorage/sessionStorage usage</li> <li>Framework-specific security controls</li> <li>SPA security considerations</li> </ul>"},{"location":"security-compliance-handbook/#mobile-security","title":"Mobile Security","text":"<ul> <li>Progressive Web App (PWA) security</li> <li>Mobile-specific security headers</li> <li>Touch/gesture security</li> <li>Biometric integration security</li> <li>App transport security</li> <li>Offline mode security</li> </ul>"},{"location":"security-compliance-handbook/#uiux-security","title":"UI/UX Security","text":"<ul> <li>Security messaging and indicators</li> <li>Permission request clarity</li> <li>Secure form design</li> <li>Sensitive action confirmation</li> <li>Security-related notifications</li> <li>Secure defaults</li> </ul>"},{"location":"security-compliance-handbook/#data-security","title":"Data Security","text":""},{"location":"security-compliance-handbook/#data-classification","title":"Data Classification","text":"<p>Categorization of data based on sensitivity:</p>"},{"location":"security-compliance-handbook/#classification-levels","title":"Classification Levels","text":"<ul> <li>Public: Information that can be freely disclosed</li> <li>Internal: Information for employee use only</li> <li>Confidential: Sensitive business information</li> <li>Restricted: Highly sensitive regulated data</li> <li>PII: Personally Identifiable Information</li> <li>PHI: Protected Health Information (where relevant)</li> </ul>"},{"location":"security-compliance-handbook/#data-identification","title":"Data Identification","text":"<ul> <li>Data discovery and classification tools</li> <li>Metadata tagging for classification</li> <li>Automated sensitive data detection</li> <li>Classification verification procedures</li> <li>Periodic data classification reviews</li> <li>User-driven classification</li> </ul>"},{"location":"security-compliance-handbook/#handling-requirements","title":"Handling Requirements","text":"<ul> <li>Storage requirements by classification</li> <li>Transmission requirements by classification</li> <li>Processing requirements by classification</li> <li>Access control requirements by classification</li> <li>Retention requirements by classification</li> <li>Incident response by classification</li> </ul>"},{"location":"security-compliance-handbook/#encryption","title":"Encryption","text":"<p>Protection of data through cryptographic methods:</p>"},{"location":"security-compliance-handbook/#encryption-standards","title":"Encryption Standards","text":"<ul> <li>AES-256 for symmetric encryption</li> <li>RSA-2048 or higher for asymmetric encryption</li> <li>TLS 1.2+ for transport encryption</li> <li>SHA-256 or higher for hashing</li> <li>bcrypt/Argon2 for password hashing</li> <li>Elliptic Curve cryptography for performance-sensitive operations</li> </ul>"},{"location":"security-compliance-handbook/#encryption-implementation","title":"Encryption Implementation","text":"<ul> <li>Encryption at rest for all data stores</li> <li>Encryption in transit for all communications</li> <li>Envelope encryption for key management</li> <li>Field-level encryption for sensitive data</li> <li>Client-side encryption options</li> <li>Tokenization for highly sensitive data</li> </ul>"},{"location":"security-compliance-handbook/#key-management","title":"Key Management","text":"<ul> <li>AWS KMS for key storage and rotation</li> <li>Strict key access controls</li> <li>Automated key rotation</li> <li>Separation of duties for key management</li> <li>Key backup and recovery procedures</li> <li>Cryptographic key inventory</li> </ul>"},{"location":"security-compliance-handbook/#data-loss-prevention","title":"Data Loss Prevention","text":"<p>Prevention of unauthorized data exfiltration:</p>"},{"location":"security-compliance-handbook/#dlp-controls","title":"DLP Controls","text":"<ul> <li>Content inspection and filtering</li> <li>Data classification-based policies</li> <li>Contextual analysis of data usage</li> <li>Pattern matching for sensitive data</li> <li>Behavioral analysis of data access</li> <li>Anomalous data transfer detection</li> </ul>"},{"location":"security-compliance-handbook/#dlp-implementation","title":"DLP Implementation","text":"<ul> <li>API gateway filtering</li> <li>Email content filtering</li> <li>Data export controls</li> <li>Endpoint DLP controls</li> <li>Cloud storage DLP</li> <li>Database activity monitoring</li> </ul>"},{"location":"security-compliance-handbook/#data-transfer-security","title":"Data Transfer Security","text":"<ul> <li>Secure file transfer protocols</li> <li>Large data transfer monitoring</li> <li>Data export approval workflows</li> <li>Secure external sharing controls</li> <li>Watermarking of sensitive documents</li> <li>Audit trails for all transfers</li> </ul>"},{"location":"security-compliance-handbook/#data-retention-disposal","title":"Data Retention &amp; Disposal","text":"<p>Lifecycle management of data:</p>"},{"location":"security-compliance-handbook/#retention-policies","title":"Retention Policies","text":"<ul> <li>Data retention schedule by data type</li> <li>Regulatory requirements mapping</li> <li>Business need justification</li> <li>Automated retention enforcement</li> <li>Legal hold procedures</li> <li>Retention exception management</li> </ul>"},{"location":"security-compliance-handbook/#secure-data-disposal","title":"Secure Data Disposal","text":"<ul> <li>Secure deletion methods</li> <li>Cryptographic erasure</li> <li>Hardware sanitization standards</li> <li>Media destruction procedures</li> <li>Third-party disposal verification</li> <li>Disposal certification</li> </ul>"},{"location":"security-compliance-handbook/#implementation_2","title":"Implementation","text":"<ul> <li>Automated archiving based on retention rules</li> <li>Database purging procedures</li> <li>Backup expiration enforcement</li> <li>User data lifecycle management</li> <li>Anonymization techniques</li> <li>Retention compliance reporting</li> </ul>"},{"location":"security-compliance-handbook/#identity-access-management","title":"Identity &amp; Access Management","text":""},{"location":"security-compliance-handbook/#user-access-management","title":"User Access Management","text":"<p>Lifecycle management of user access:</p>"},{"location":"security-compliance-handbook/#access-provisioning","title":"Access Provisioning","text":"<ul> <li>Role-based access provisioning</li> <li>Just-in-time access approval</li> <li>Self-service access requests</li> <li>Manager approval workflows</li> <li>Access certification</li> <li>Segregation of duties enforcement</li> </ul>"},{"location":"security-compliance-handbook/#account-lifecycle","title":"Account Lifecycle","text":"<ul> <li>Onboarding procedures</li> <li>Role changes and transfers</li> <li>Extended leave management</li> <li>Offboarding procedures</li> <li>Contractor/vendor access management</li> <li>Service account management</li> </ul>"},{"location":"security-compliance-handbook/#access-review","title":"Access Review","text":"<ul> <li>Quarterly access reviews</li> <li>Role membership validation</li> <li>Privileged access review</li> <li>Unused account detection</li> <li>Excessive rights identification</li> <li>Automated review workflows</li> </ul>"},{"location":"security-compliance-handbook/#implementation_3","title":"Implementation","text":"<ul> <li>AWS IAM Identity Center (SSO)</li> <li>SCIM provisioning</li> <li>HR integration for lifecycle events</li> <li>Automated deprovisioning</li> <li>Access reporting and analytics</li> <li>Emergency access procedures</li> </ul>"},{"location":"security-compliance-handbook/#privilege-management","title":"Privilege Management","text":"<p>Management of elevated access rights:</p>"},{"location":"security-compliance-handbook/#privileged-account-management","title":"Privileged Account Management","text":"<ul> <li>Just-in-time privileged access</li> <li>Privileged session monitoring</li> <li>Privileged account inventory</li> <li>Temporary privilege escalation</li> <li>Break-glass procedures</li> <li>Privileged task automation</li> </ul>"},{"location":"security-compliance-handbook/#separation-of-duties","title":"Separation of Duties","text":"<ul> <li>Critical function segregation</li> <li>Developer/operator separation</li> <li>Financial control separation</li> <li>Approval workflows</li> <li>Conflicting permissions detection</li> <li>Compensating controls documentation</li> </ul>"},{"location":"security-compliance-handbook/#least-privilege","title":"Least Privilege","text":"<ul> <li>Default deny stance</li> <li>Permission right-sizing</li> <li>Regular privilege review</li> <li>Permission usage analysis</li> <li>Time-bound permissions</li> <li>Task-based permission assignment</li> </ul>"},{"location":"security-compliance-handbook/#technical-controls","title":"Technical Controls","text":"<ul> <li>Privileged Access Management (PAM) solution</li> <li>Session recording for privileged activities</li> <li>Privileged command filtering</li> <li>Sudo replacement/enhancement</li> <li>Just-enough-admin (JEA) implementation</li> <li>Administrative bastion hosts</li> </ul>"},{"location":"security-compliance-handbook/#multi-factor-authentication","title":"Multi-factor Authentication","text":"<p>Additional authentication factors beyond passwords:</p>"},{"location":"security-compliance-handbook/#mfa-methods","title":"MFA Methods","text":"<ul> <li>Time-based one-time passwords (TOTP)</li> <li>Push notifications to authenticated devices</li> <li>Hardware security keys (FIDO2/WebAuthn)</li> <li>Biometric authentication</li> <li>Out-of-band SMS/voice (with risk mitigations)</li> <li>Email OTP (for lower-risk scenarios only)</li> </ul>"},{"location":"security-compliance-handbook/#mfa-implementation","title":"MFA Implementation","text":"<ul> <li>Enforced MFA for all user accounts</li> <li>Risk-based MFA challenges</li> <li>Step-up authentication for sensitive actions</li> <li>MFA for privileged operations</li> <li>Recovery procedures with validation</li> <li>Backup authentication methods</li> </ul>"},{"location":"security-compliance-handbook/#security-considerations","title":"Security Considerations","text":"<ul> <li>Phishing-resistant methods preferred</li> <li>Social engineering resistance</li> <li>SIM swapping mitigation</li> <li>MFA bombing protection</li> <li>NIST compliance</li> <li>Accessibility considerations</li> </ul>"},{"location":"security-compliance-handbook/#single-sign-on","title":"Single Sign-On","text":"<p>Unified authentication across services:</p>"},{"location":"security-compliance-handbook/#sso-implementation","title":"SSO Implementation","text":"<ul> <li>SAML 2.0 federation</li> <li>OpenID Connect federation</li> <li>AWS IAM Identity Center as primary IdP</li> <li>External IdP integrations</li> <li>Cross-domain authentication</li> <li>Identity provider redundancy</li> </ul>"},{"location":"security-compliance-handbook/#sso-security","title":"SSO Security","text":"<ul> <li>Session security controls</li> <li>Idle session timeout</li> <li>Maximum session duration</li> <li>Device context validation</li> <li>Geographic location validation</li> <li>Behavioral analytics integration</li> </ul>"},{"location":"security-compliance-handbook/#federation","title":"Federation","text":"<ul> <li>Enterprise identity provider integration</li> <li>Customer identity federation</li> <li>Social login security (if applicable)</li> <li>Federation-specific security controls</li> <li>Claims-based authorization</li> <li>Federation monitoring</li> </ul>"},{"location":"security-compliance-handbook/#security-operations","title":"Security Operations","text":""},{"location":"security-compliance-handbook/#vulnerability-management","title":"Vulnerability Management","text":"<p>Identification and remediation of security vulnerabilities:</p>"},{"location":"security-compliance-handbook/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<ul> <li>External perimeter scanning</li> <li>Internal infrastructure scanning</li> <li>Container image scanning</li> <li>Dependency vulnerability scanning</li> <li>Cloud configuration scanning</li> <li>Web application scanning</li> </ul>"},{"location":"security-compliance-handbook/#vulnerability-triage","title":"Vulnerability Triage","text":"<ul> <li>Severity assessment methodology</li> <li>Exploitability analysis</li> <li>Impact assessment</li> <li>Environment context consideration</li> <li>Remediation prioritization</li> <li>Vulnerability aging monitoring</li> </ul>"},{"location":"security-compliance-handbook/#patch-management","title":"Patch Management","text":"<ul> <li>Critical patch SLAs</li> <li>Patch testing process</li> <li>Automated patching where possible</li> <li>Manual patch validation</li> <li>Patch compliance reporting</li> <li>Out-of-band patching procedures</li> </ul>"},{"location":"security-compliance-handbook/#vulnerability-metrics","title":"Vulnerability Metrics","text":"<ul> <li>Mean time to remediate</li> <li>Vulnerability density</li> <li>Vulnerability aging</li> <li>Risk exposure score</li> <li>Patch compliance rate</li> <li>Vulnerability backlog</li> </ul>"},{"location":"security-compliance-handbook/#security-monitoring","title":"Security Monitoring","text":"<p>Continuous surveillance of security events:</p>"},{"location":"security-compliance-handbook/#detection-capabilities","title":"Detection Capabilities","text":"<ul> <li>Network intrusion detection</li> <li>Host-based intrusion detection</li> <li>Cloud security monitoring</li> <li>User behavior analytics</li> <li>Data loss prevention alerts</li> <li>Threat intelligence integration</li> </ul>"},{"location":"security-compliance-handbook/#security-information-and-event-management","title":"Security Information and Event Management","text":"<ul> <li>Centralized log collection</li> <li>Correlation rules and analytics</li> <li>Alert prioritization</li> <li>False positive reduction</li> <li>Investigation workflows</li> <li>Retention and archiving</li> </ul>"},{"location":"security-compliance-handbook/#monitoring-coverage","title":"Monitoring Coverage","text":"<ul> <li>Infrastructure monitoring</li> <li>Application monitoring</li> <li>Database activity monitoring</li> <li>Identity and access monitoring</li> <li>Endpoint monitoring</li> <li>Third-party integration monitoring</li> </ul>"},{"location":"security-compliance-handbook/#alert-management","title":"Alert Management","text":"<ul> <li>Alert severities and thresholds</li> <li>Alert routing and assignment</li> <li>Alert investigation procedures</li> <li>Alert escalation paths</li> <li>Alert metrics and tuning</li> <li>Alert fatigue mitigation</li> </ul>"},{"location":"security-compliance-handbook/#incident-response","title":"Incident Response","text":"<p>Handling of security incidents:</p>"},{"location":"security-compliance-handbook/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Incident classification matrix</li> <li>Roles and responsibilities</li> <li>Communication procedures</li> <li>Investigation process</li> <li>Containment strategies</li> <li>Eradication and recovery</li> </ul>"},{"location":"security-compliance-handbook/#response-team","title":"Response Team","text":"<ul> <li>Security incident response team</li> <li>On-call rotation</li> <li>Escalation procedures</li> <li>External support resources</li> <li>Management notification criteria</li> <li>Cross-functional coordination</li> </ul>"},{"location":"security-compliance-handbook/#incident-playbooks","title":"Incident Playbooks","text":"<ul> <li>Malware infection response</li> <li>Data breach response</li> <li>Account compromise response</li> <li>DDoS attack response</li> <li>Ransomware response</li> <li>Insider threat response</li> </ul>"},{"location":"security-compliance-handbook/#post-incident","title":"Post-Incident","text":"<ul> <li>Root cause analysis</li> <li>Lessons learned process</li> <li>Control improvement identification</li> <li>Metrics and reporting</li> <li>External communication</li> <li>Regulatory notification assessment</li> </ul>"},{"location":"security-compliance-handbook/#security-testing_1","title":"Security Testing","text":"<p>Proactive validation of security controls:</p>"},{"location":"security-compliance-handbook/#penetration-testing","title":"Penetration Testing","text":"<ul> <li>Annual external penetration testing</li> <li>Internal network penetration testing</li> <li>Application penetration testing</li> <li>API security testing</li> <li>Social engineering testing</li> <li>Red team exercises</li> </ul>"},{"location":"security-compliance-handbook/#automated-security-testing","title":"Automated Security Testing","text":"<ul> <li>CI/CD pipeline security testing</li> <li>Infrastructure as Code security testing</li> <li>Dynamic application security testing</li> <li>Continuous vulnerability scanning</li> <li>Fuzzing</li> <li>Attack surface monitoring</li> </ul>"},{"location":"security-compliance-handbook/#compliance-testing","title":"Compliance Testing","text":"<ul> <li>Control validation testing</li> <li>Configuration compliance testing</li> <li>Policy adherence testing</li> <li>Standards compliance testing</li> <li>Regulatory requirement testing</li> <li>Security baseline validation</li> </ul>"},{"location":"security-compliance-handbook/#security-exercises","title":"Security Exercises","text":"<ul> <li>Table-top scenarios</li> <li>Simulated incident response</li> <li>Disaster recovery testing</li> <li>Business continuity exercises</li> <li>Data breach simulation</li> <li>Ransomware recovery testing</li> </ul>"},{"location":"security-compliance-handbook/#compliance-framework","title":"Compliance Framework","text":""},{"location":"security-compliance-handbook/#regulatory-requirements","title":"Regulatory Requirements","text":"<p>Compliance with legal and industry regulations:</p>"},{"location":"security-compliance-handbook/#data-protection-regulations","title":"Data Protection Regulations","text":"<ul> <li>GDPR (European Union)</li> <li>CCPA/CPRA (California)</li> <li>LGPD (Brazil)</li> <li>PIPEDA (Canada)</li> <li>Other global privacy regulations</li> <li>US state privacy laws</li> </ul>"},{"location":"security-compliance-handbook/#industry-regulations","title":"Industry Regulations","text":"<ul> <li>SOC 2 (Security, Availability, Processing Integrity, Confidentiality, Privacy)</li> <li>ISO 27001 (Information Security Management)</li> <li>PCI DSS (if applicable for payment processing)</li> <li>HIPAA (if applicable for healthcare data)</li> <li>Industry-specific requirements</li> <li>Contractual compliance obligations</li> </ul>"},{"location":"security-compliance-handbook/#implementation_4","title":"Implementation","text":"<ul> <li>Regulatory requirement mapping</li> <li>Control framework alignment</li> <li>Gap assessment and remediation</li> <li>Continuous compliance monitoring</li> <li>Cross-regulatory harmonization</li> <li>Regulatory change management</li> </ul>"},{"location":"security-compliance-handbook/#industry-standards","title":"Industry Standards","text":"<p>Adherence to security best practices and standards:</p>"},{"location":"security-compliance-handbook/#security-standards","title":"Security Standards","text":"<ul> <li>NIST Cybersecurity Framework</li> <li>CIS Controls</li> <li>ISO 27001/27002</li> <li>OWASP Top 10</li> <li>SANS Top 25</li> <li>Cloud Security Alliance CCM</li> </ul>"},{"location":"security-compliance-handbook/#implementation-methodology","title":"Implementation Methodology","text":"<ul> <li>Standards selection and prioritization</li> <li>Maturity model adoption</li> <li>Control implementation</li> <li>Continuous improvement</li> <li>Benchmark against standards</li> <li>Adaptation to evolving standards</li> </ul>"},{"location":"security-compliance-handbook/#certification-management","title":"Certification Management","text":"<ul> <li>Certification scope definition</li> <li>Pre-assessment gap analysis</li> <li>Evidence collection</li> <li>Audit coordination</li> <li>Nonconformity management</li> <li>Certification maintenance</li> </ul>"},{"location":"security-compliance-handbook/#internal-policies","title":"Internal Policies","text":"<p>Organization-specific security requirements:</p>"},{"location":"security-compliance-handbook/#policy-framework","title":"Policy Framework","text":"<ul> <li>Information Security Policy</li> <li>Acceptable Use Policy</li> <li>Data Classification Policy</li> <li>Access Control Policy</li> <li>Secure Development Policy</li> <li>Incident Response Policy</li> <li>Business Continuity Policy</li> <li>Vendor Management Policy</li> </ul>"},{"location":"security-compliance-handbook/#policy-management","title":"Policy Management","text":"<ul> <li>Policy development process</li> <li>Policy review cycle</li> <li>Policy exception management</li> <li>Policy communication</li> <li>Policy training and awareness</li> <li>Policy compliance monitoring</li> </ul>"},{"location":"security-compliance-handbook/#implementation_5","title":"Implementation","text":"<ul> <li>Policy translation to controls</li> <li>Technical enforcement where possible</li> <li>Procedural implementation</li> <li>Compliance validation</li> <li>Policy effectiveness measurement</li> <li>Policy adaptation based on incidents</li> </ul>"},{"location":"security-compliance-handbook/#audit-management","title":"Audit Management","text":"<p>Validation of compliance through audits:</p>"},{"location":"security-compliance-handbook/#audit-program","title":"Audit Program","text":"<ul> <li>Internal audit schedule</li> <li>External audit coordination</li> <li>Continuous control monitoring</li> <li>Audit scope definition</li> <li>Evidence preparation</li> <li>Audit response procedures</li> </ul>"},{"location":"security-compliance-handbook/#audit-types","title":"Audit Types","text":"<ul> <li>Security control audits</li> <li>Compliance audits</li> <li>Technical configuration audits</li> <li>Process adherence audits</li> <li>Third-party audits</li> <li>Certification audits</li> </ul>"},{"location":"security-compliance-handbook/#findings-management","title":"Findings Management","text":"<ul> <li>Finding prioritization</li> <li>Remediation planning</li> <li>Finding verification</li> <li>Root cause analysis</li> <li>Remediation validation</li> <li>Audit metrics and reporting</li> </ul>"},{"location":"security-compliance-handbook/#privacy","title":"Privacy","text":""},{"location":"security-compliance-handbook/#gdpr-compliance","title":"GDPR Compliance","text":"<p>European Union General Data Protection Regulation compliance:</p>"},{"location":"security-compliance-handbook/#legal-basis-for-processing","title":"Legal Basis for Processing","text":"<ul> <li>Consent management</li> <li>Legitimate interest assessment</li> <li>Contractual necessity validation</li> <li>Legal obligation documentation</li> <li>Vital interest justification</li> <li>Public interest processing</li> </ul>"},{"location":"security-compliance-handbook/#data-subject-rights","title":"Data Subject Rights","text":"<ul> <li>Right to access implementation</li> <li>Right to rectification procedures</li> <li>Right to erasure (\"right to be forgotten\")</li> <li>Right to restriction of processing</li> <li>Right to data portability</li> <li>Right to object to processing</li> </ul>"},{"location":"security-compliance-handbook/#gdpr-technical-controls","title":"GDPR Technical Controls","text":"<ul> <li>Data protection by design implementation</li> <li>Data protection by default settings</li> <li>Processing records maintenance</li> <li>Data transfer mechanism compliance</li> <li>Risk assessment process</li> <li>Data Protection Impact Assessments</li> </ul>"},{"location":"security-compliance-handbook/#ccpacpra-compliance","title":"CCPA/CPRA Compliance","text":"<p>California Consumer Privacy Act and California Privacy Rights Act compliance:</p>"},{"location":"security-compliance-handbook/#consumer-rights","title":"Consumer Rights","text":"<ul> <li>Right to know implementation</li> <li>Right to delete procedures</li> <li>Right to opt-out of sale/sharing</li> <li>Right to correct inaccurate information</li> <li>Right to limit use of sensitive data</li> <li>Non-discrimination protection</li> </ul>"},{"location":"security-compliance-handbook/#business-obligations","title":"Business Obligations","text":"<ul> <li>Privacy notice requirements</li> <li>Service provider contract provisions</li> <li>Verification process for requests</li> <li>Sensitive data processing limitations</li> <li>Data retention limitations</li> <li>Security requirement implementation</li> </ul>"},{"location":"security-compliance-handbook/#implementation_6","title":"Implementation","text":"<ul> <li>Consumer request workflow</li> <li>Verification procedures</li> <li>Response timing compliance</li> <li>Request tracking system</li> <li>Staff training on requirements</li> <li>Compliance documentation</li> </ul>"},{"location":"security-compliance-handbook/#privacy-by-design","title":"Privacy by Design","text":"<p>Privacy considerations throughout product development:</p>"},{"location":"security-compliance-handbook/#design-principles","title":"Design Principles","text":"<ul> <li>Proactive privacy protection</li> <li>Privacy as the default setting</li> <li>Privacy embedded into design</li> <li>Full functionality with privacy</li> <li>End-to-end security</li> <li>Visibility and transparency</li> <li>User-centric approach</li> </ul>"},{"location":"security-compliance-handbook/#implementation_7","title":"Implementation","text":"<ul> <li>Privacy impact assessments</li> <li>Data flow mapping</li> <li>Minimization of data collection</li> <li>Purpose limitation enforcement</li> <li>Data quality maintenance</li> <li>Default privacy-preserving settings</li> </ul>"},{"location":"security-compliance-handbook/#technical-controls_1","title":"Technical Controls","text":"<ul> <li>Data anonymization capabilities</li> <li>Pseudonymization implementation</li> <li>Data minimization controls</li> <li>Consent management system</li> <li>Privacy preference management</li> <li>Privacy enhancing technologies</li> </ul>"},{"location":"security-compliance-handbook/#data-subject-rights_1","title":"Data Subject Rights","text":"<p>Management of individual privacy rights:</p>"},{"location":"security-compliance-handbook/#rights-management-system","title":"Rights Management System","text":"<ul> <li>Request intake process</li> <li>Identity verification</li> <li>Request tracking</li> <li>Processing workflow</li> <li>Response generation</li> <li>Compliance documentation</li> </ul>"},{"location":"security-compliance-handbook/#automation","title":"Automation","text":"<ul> <li>Self-service privacy portal</li> <li>Automated data retrieval</li> <li>Automated data correction</li> <li>Automated data deletion</li> <li>Workflow management</li> <li>Response templating</li> </ul>"},{"location":"security-compliance-handbook/#policies-and-procedures","title":"Policies and Procedures","text":"<ul> <li>Response time SLAs</li> <li>Verification requirements</li> <li>Exemption handling</li> <li>Extension criteria</li> <li>Denial justification</li> <li>Special request handling</li> </ul>"},{"location":"security-compliance-handbook/#risk-management","title":"Risk Management","text":""},{"location":"security-compliance-handbook/#risk-assessment","title":"Risk Assessment","text":"<p>Identification and evaluation of security risks:</p>"},{"location":"security-compliance-handbook/#risk-assessment-methodology","title":"Risk Assessment Methodology","text":"<ul> <li>Asset inventory and classification</li> <li>Threat identification</li> <li>Vulnerability assessment</li> <li>Impact analysis</li> <li>Likelihood determination</li> <li>Risk calculation and prioritization</li> </ul>"},{"location":"security-compliance-handbook/#assessment-types","title":"Assessment Types","text":"<ul> <li>Annual comprehensive risk assessment</li> <li>New system/application assessments</li> <li>Vendor risk assessments</li> <li>Change-triggered assessments</li> <li>Continuous monitoring assessments</li> <li>Scenario-based risk assessment</li> </ul>"},{"location":"security-compliance-handbook/#risk-treatment","title":"Risk Treatment","text":"<ul> <li>Risk acceptance criteria</li> <li>Risk mitigation planning</li> <li>Risk transfer options</li> <li>Risk avoidance strategies</li> <li>Residual risk management</li> <li>Risk treatment verification</li> </ul>"},{"location":"security-compliance-handbook/#control-framework","title":"Control Framework","text":"<p>Structured approach to security controls:</p>"},{"location":"security-compliance-handbook/#control-selection","title":"Control Selection","text":"<ul> <li>Control framework adoption (NIST, ISO, CIS)</li> <li>Control customization for the environment</li> <li>Control prioritization methodology</li> <li>Baseline security controls</li> <li>Enhanced security controls</li> <li>Domain-specific controls</li> </ul>"},{"location":"security-compliance-handbook/#control-categories","title":"Control Categories","text":"<ul> <li>Preventative controls</li> <li>Detective controls</li> <li>Corrective controls</li> <li>Deterrent controls</li> <li>Recovery controls</li> <li>Compensating controls</li> </ul>"},{"location":"security-compliance-handbook/#control-management","title":"Control Management","text":"<ul> <li>Control ownership assignment</li> <li>Control implementation tracking</li> <li>Control testing and validation</li> <li>Control effectiveness metrics</li> <li>Control exception management</li> <li>Control documentation</li> </ul>"},{"location":"security-compliance-handbook/#third-party-risk-management","title":"Third-Party Risk Management","text":"<p>Management of security risks from external parties:</p>"},{"location":"security-compliance-handbook/#vendor-assessment","title":"Vendor Assessment","text":"<ul> <li>Security assessment questionnaire</li> <li>Documentation review</li> <li>Control validation</li> <li>Compliance verification</li> <li>Technical testing</li> <li>On-site assessment (for critical vendors)</li> </ul>"},{"location":"security-compliance-handbook/#contractual-controls","title":"Contractual Controls","text":"<ul> <li>Security requirements in contracts</li> <li>Right to audit clauses</li> <li>Incident notification requirements</li> <li>Data protection provisions</li> <li>Service level agreements</li> <li>Liability and indemnification</li> </ul>"},{"location":"security-compliance-handbook/#ongoing-monitoring","title":"Ongoing Monitoring","text":"<ul> <li>Periodic reassessment</li> <li>Continuous monitoring</li> <li>Security rating services</li> <li>Incident monitoring</li> <li>Compliance status tracking</li> <li>Performance against security SLAs</li> </ul>"},{"location":"security-compliance-handbook/#business-continuity","title":"Business Continuity","text":"<p>Maintaining operations during disruptions:</p>"},{"location":"security-compliance-handbook/#business-continuity-planning","title":"Business Continuity Planning","text":"<ul> <li>Business impact analysis</li> <li>Recovery time objectives</li> <li>Recovery point objectives</li> <li>Critical function identification</li> <li>Resource requirements</li> <li>Recovery strategy</li> </ul>"},{"location":"security-compliance-handbook/#disaster-recovery","title":"Disaster Recovery","text":"<ul> <li>Technical recovery procedures</li> <li>Data backup and restoration</li> <li>System failover capabilities</li> <li>Alternative processing sites</li> <li>Communication procedures</li> <li>Recovery team structure</li> </ul>"},{"location":"security-compliance-handbook/#testing-and-validation","title":"Testing and Validation","text":"<ul> <li>Plan review schedule</li> <li>Tabletop exercises</li> <li>Functional testing</li> <li>Full-scale exercises</li> <li>Post-test analysis</li> <li>Plan updates based on findings</li> </ul>"},{"location":"security-compliance-handbook/#secure-devops","title":"Secure DevOps","text":""},{"location":"security-compliance-handbook/#pipeline-security","title":"Pipeline Security","text":"<p>Security integration in CI/CD pipelines:</p>"},{"location":"security-compliance-handbook/#build-phase-security","title":"Build Phase Security","text":"<ul> <li>Source code security scanning</li> <li>Dependency vulnerability scanning</li> <li>Secret detection</li> <li>License compliance checking</li> <li>Container image scanning</li> <li>Binary analysis</li> </ul>"},{"location":"security-compliance-handbook/#deployment-phase-security","title":"Deployment Phase Security","text":"<ul> <li>Infrastructure as Code security scanning</li> <li>Configuration validation</li> <li>Compliance verification</li> <li>Environment separation</li> <li>Deployment approval gates</li> <li>Rollback capabilities</li> </ul>"},{"location":"security-compliance-handbook/#runtime-security_1","title":"Runtime Security","text":"<ul> <li>Dynamic application security testing</li> <li>Runtime vulnerability scanning</li> <li>Configuration drift detection</li> <li>Behavioral monitoring</li> <li>Runtime patching strategy</li> <li>Container runtime security</li> </ul>"},{"location":"security-compliance-handbook/#pipeline-protection","title":"Pipeline Protection","text":"<ul> <li>Pipeline authentication</li> <li>Build server security</li> <li>Artifact integrity verification</li> <li>Least privilege in pipelines</li> <li>Pipeline logging and monitoring</li> <li>Pipeline secrets management</li> </ul>"},{"location":"security-compliance-handbook/#infrastructure-as-code-security","title":"Infrastructure as Code Security","text":"<p>Security in automated infrastructure provisioning:</p>"},{"location":"security-compliance-handbook/#code-security","title":"Code Security","text":"<ul> <li>IaC security scanning (Checkov, tfsec)</li> <li>Secure configuration templates</li> <li>Policy as code implementation</li> <li>Compliance validation</li> <li>Static analysis for infrastructure code</li> <li>Best practice enforcement</li> </ul>"},{"location":"security-compliance-handbook/#deployment-security","title":"Deployment Security","text":"<ul> <li>Change approval process</li> <li>Drift detection</li> <li>State file security</li> <li>Credential management</li> <li>Audit trailing</li> <li>Secure state storage</li> </ul>"},{"location":"security-compliance-handbook/#implementation_8","title":"Implementation","text":"<ul> <li>Terraform security modules</li> <li>CloudFormation Guard</li> <li>AWS CDK security constructs</li> <li>Pre-commit hooks for validation</li> <li>Pipeline integration</li> <li>Post-deployment validation</li> </ul>"},{"location":"security-compliance-handbook/#container-registry-security","title":"Container Registry Security","text":"<p>Security of container image storage:</p>"},{"location":"security-compliance-handbook/#image-security_1","title":"Image Security","text":"<ul> <li>Vulnerability scanning</li> <li>Malware scanning</li> <li>Base image validation</li> <li>Image signing and verification</li> <li>Image metadata validation</li> <li>Image hardening verification</li> </ul>"},{"location":"security-compliance-handbook/#access-controls","title":"Access Controls","text":"<ul> <li>Registry authentication</li> <li>Image pull/push authorization</li> <li>Role-based access control</li> <li>Integration with identity providers</li> <li>Image pull policies</li> <li>Registry firewall controls</li> </ul>"},{"location":"security-compliance-handbook/#operational-security","title":"Operational Security","text":"<ul> <li>Registry backup and recovery</li> <li>Image retention policies</li> <li>Image promotion workflows</li> <li>Registry monitoring</li> <li>Registry replication</li> <li>Registry certificate management</li> </ul>"},{"location":"security-compliance-handbook/#secret-management","title":"Secret Management","text":"<p>Secure handling of credentials and secrets:</p>"},{"location":"security-compliance-handbook/#secret-storage","title":"Secret Storage","text":"<ul> <li>AWS Secrets Manager implementation</li> <li>External Secrets Operator integration</li> <li>Vault integration where applicable</li> <li>Encryption of all secrets</li> <li>Secret versioning</li> <li>Secret metadata management</li> </ul>"},{"location":"security-compliance-handbook/#secret-access","title":"Secret Access","text":"<ul> <li>Just-in-time secret access</li> <li>Secret access audit logging</li> <li>Secret access authorization</li> <li>Service identity-based access</li> <li>Secret access monitoring</li> <li>Temporary credential issuance</li> </ul>"},{"location":"security-compliance-handbook/#secret-lifecycle","title":"Secret Lifecycle","text":"<ul> <li>Secret rotation automation</li> <li>Secret expiration policies</li> <li>Secret revocation procedures</li> <li>Emergency credential procedures</li> <li>Secret backup and recovery</li> <li>Secret creation workflow</li> </ul>"},{"location":"security-compliance-handbook/#security-awareness","title":"Security Awareness","text":""},{"location":"security-compliance-handbook/#training-program","title":"Training Program","text":"<p>Education of staff about security practices:</p>"},{"location":"security-compliance-handbook/#training-content","title":"Training Content","text":"<ul> <li>Security policy awareness</li> <li>Password and authentication best practices</li> <li>Phishing and social engineering awareness</li> <li>Clean desk and physical security</li> <li>Mobile device security</li> <li>Data handling procedures</li> <li>Incident reporting procedures</li> </ul>"},{"location":"security-compliance-handbook/#training-delivery","title":"Training Delivery","text":"<ul> <li>New hire security onboarding</li> <li>Annual security refresher training</li> <li>Role-specific security training</li> <li>Just-in-time security guidance</li> <li>Security newsletters and communications</li> <li>Interactive training scenarios</li> </ul>"},{"location":"security-compliance-handbook/#measurement-and-improvement","title":"Measurement and Improvement","text":"<ul> <li>Training completion tracking</li> <li>Knowledge assessment testing</li> <li>Behavior change measurement</li> <li>Training effectiveness metrics</li> <li>Continuous content improvement</li> <li>Training program adaptation</li> </ul>"},{"location":"security-compliance-handbook/#phishing-simulation","title":"Phishing Simulation","text":"<p>Testing and improving staff resistance to phishing:</p>"},{"location":"security-compliance-handbook/#simulation-program","title":"Simulation Program","text":"<ul> <li>Varied phishing scenario types</li> <li>Progressive difficulty levels</li> <li>Customized to current threats</li> <li>Department-specific scenarios</li> <li>Executive-targeted scenarios</li> <li>Technical sophistication variance</li> </ul>"},{"location":"security-compliance-handbook/#simulation-process","title":"Simulation Process","text":"<ul> <li>Campaign scheduling</li> <li>Target selection methodology</li> <li>Result tracking</li> <li>Immediate feedback to users</li> <li>Remedial training for clicks</li> <li>Trend analysis and reporting</li> </ul>"},{"location":"security-compliance-handbook/#metrics-and-improvement","title":"Metrics and Improvement","text":"<ul> <li>Click rate tracking</li> <li>Reporting rate measurement</li> <li>Time-to-report tracking</li> <li>Improvement over time analysis</li> <li>Vulnerability hot spot identification</li> <li>Program adaptation based on results</li> </ul>"},{"location":"security-compliance-handbook/#security-champions","title":"Security Champions","text":"<p>Embedding security expertise throughout the organization:</p>"},{"location":"security-compliance-handbook/#program-structure","title":"Program Structure","text":"<ul> <li>Champion selection criteria</li> <li>Role and responsibility definition</li> <li>Time allocation guidance</li> <li>Reporting structure</li> <li>Recognition program</li> <li>Champion community</li> </ul>"},{"location":"security-compliance-handbook/#champion-activities","title":"Champion Activities","text":"<ul> <li>Security advocacy in teams</li> <li>Initial security review of projects</li> <li>Security knowledge sharing</li> <li>Security requirement interpretation</li> <li>Security event communication</li> <li>Feedback collection on security processes</li> </ul>"},{"location":"security-compliance-handbook/#champion-development","title":"Champion Development","text":"<ul> <li>Specialized security training</li> <li>Security certification support</li> <li>Community of practice meetings</li> <li>External conference participation</li> <li>Continuous education opportunities</li> <li>Career development path</li> </ul>"},{"location":"security-compliance-handbook/#documentation","title":"Documentation","text":"<p>Security knowledge management:</p>"},{"location":"security-compliance-handbook/#security-documentation","title":"Security Documentation","text":"<ul> <li>Security policies and standards</li> <li>Security procedures and guidelines</li> <li>Security architecture documentation</li> <li>Security control descriptions</li> <li>Technical security guides</li> <li>Security implementation patterns</li> </ul>"},{"location":"security-compliance-handbook/#documentation-management","title":"Documentation Management","text":"<ul> <li>Document ownership assignment</li> <li>Review and update cycle</li> <li>Version control</li> <li>Accessibility considerations</li> <li>Readability standards</li> <li>Feedback incorporation</li> </ul>"},{"location":"security-compliance-handbook/#knowledge-sharing","title":"Knowledge Sharing","text":"<ul> <li>Security wiki maintenance</li> <li>Security knowledge base</li> <li>Lessons learned repository</li> <li>Security FAQ documentation</li> <li>Common issue resolution guides</li> <li>Security reference architecture</li> </ul>"},{"location":"technical-reference/","title":"Technical Reference","text":"<p>Last Updated: March 5, 2024</p>"},{"location":"technical-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>API Reference</li> <li>Database Schema</li> <li>Service Endpoints</li> <li>Environment Configuration</li> <li>Event System</li> <li>Authentication</li> <li>Authorization</li> <li>Rate Limiting</li> <li>Error Handling</li> <li>Logging</li> </ul>"},{"location":"technical-reference/#overview","title":"Overview","text":"<p>This technical reference consolidates essential technical specifications and reference materials for the Maily platform. It serves as the definitive resource for developers working with Maily's APIs, services, and infrastructure components.</p>"},{"location":"technical-reference/#api-reference","title":"API Reference","text":""},{"location":"technical-reference/#core-api","title":"Core API","text":"<p>The Maily Core API is the primary interface for programmatically interacting with the platform.</p>"},{"location":"technical-reference/#base-url","title":"Base URL","text":"<pre><code>Production: https://api.maily.com/v1\nStaging: https://api.staging.maily.com/v1\nDevelopment: http://localhost:3001/v1\n</code></pre>"},{"location":"technical-reference/#authentication","title":"Authentication","text":"<p>All API requests require authentication using an API key or OAuth token:</p> <pre><code>Authorization: Bearer YOUR_API_TOKEN\n</code></pre>"},{"location":"technical-reference/#common-headers","title":"Common Headers","text":"Header Description Required <code>Authorization</code> Bearer token for authentication Yes <code>Content-Type</code> Request content type (usually <code>application/json</code>) Yes for POST/PUT/PATCH <code>Accept</code> Response format (usually <code>application/json</code>) No <code>X-Request-ID</code> Client-provided request identifier No <code>X-Idempotency-Key</code> Unique key for idempotent requests For idempotent operations"},{"location":"technical-reference/#primary-endpoints","title":"Primary Endpoints","text":"Endpoint Method Description <code>/campaigns</code> GET List campaigns <code>/campaigns/{id}</code> GET Get campaign details <code>/campaigns</code> POST Create a campaign <code>/campaigns/{id}</code> PUT Update a campaign <code>/campaigns/{id}</code> DELETE Delete a campaign <code>/audiences</code> GET List audiences <code>/audiences/{id}</code> GET Get audience details <code>/audiences</code> POST Create an audience <code>/templates</code> GET List templates <code>/templates/{id}</code> GET Get template details <code>/analytics/campaigns/{id}</code> GET Get campaign analytics"},{"location":"technical-reference/#pagination","title":"Pagination","text":"<p>All list endpoints support pagination with these parameters:</p> <ul> <li><code>page</code>: Page number (default: 1)</li> <li><code>limit</code>: Items per page (default: 20, max: 100)</li> <li><code>sort</code>: Field to sort by</li> <li><code>order</code>: Sort order (<code>asc</code> or <code>desc</code>)</li> </ul> <p>Response structure:</p> <pre><code>{\n  \"data\": [...],\n  \"meta\": {\n    \"total\": 100,\n    \"page\": 1,\n    \"limit\": 20,\n    \"pages\": 5\n  },\n  \"links\": {\n    \"self\": \"/v1/campaigns?page=1&amp;limit=20\",\n    \"first\": \"/v1/campaigns?page=1&amp;limit=20\",\n    \"prev\": null,\n    \"next\": \"/v1/campaigns?page=2&amp;limit=20\",\n    \"last\": \"/v1/campaigns?page=5&amp;limit=20\"\n  }\n}\n</code></pre>"},{"location":"technical-reference/#error-responses","title":"Error Responses","text":"<p>All API errors follow this structure:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"invalid_request\",\n    \"message\": \"The request was invalid\",\n    \"details\": [\n      {\n        \"field\": \"name\",\n        \"message\": \"Name is required\"\n      }\n    ],\n    \"request_id\": \"req_123456789\"\n  }\n}\n</code></pre> <p>Common error codes:</p> Code HTTP Status Description <code>authentication_error</code> 401 Invalid authentication credentials <code>authorization_error</code> 403 Insufficient permissions <code>not_found</code> 404 Resource not found <code>validation_error</code> 422 Invalid request parameters <code>rate_limit_exceeded</code> 429 Too many requests <code>internal_error</code> 500 Server error"},{"location":"technical-reference/#webhook-api","title":"Webhook API","text":"<p>Webhooks allow you to receive real-time notifications when events occur in your Maily account.</p>"},{"location":"technical-reference/#webhook-endpoints","title":"Webhook Endpoints","text":"Event Type Description <code>campaign.sent</code> Campaign was sent <code>campaign.delivered</code> Email was delivered <code>email.opened</code> Email was opened <code>email.clicked</code> Link in email was clicked <code>email.bounced</code> Email bounced <code>subscriber.created</code> New subscriber added <code>subscriber.updated</code> Subscriber information updated <code>subscriber.unsubscribed</code> Subscriber unsubscribed"},{"location":"technical-reference/#webhook-payload","title":"Webhook Payload","text":"<pre><code>{\n  \"event\": \"email.opened\",\n  \"timestamp\": \"2023-09-15T14:22:45Z\",\n  \"data\": {\n    \"campaign_id\": \"camp_abc123\",\n    \"email_id\": \"email_def456\",\n    \"subscriber_id\": \"sub_789xyz\",\n    \"metadata\": {\n      \"user_agent\": \"Mozilla/5.0...\",\n      \"ip_address\": \"192.168.1.1\",\n      \"timestamp\": \"2023-09-15T14:22:43Z\"\n    }\n  }\n}\n</code></pre>"},{"location":"technical-reference/#webhook-security","title":"Webhook Security","text":"<p>Webhooks are signed using an HMAC signature in the <code>X-Maily-Signature</code> header. Verify the signature using your webhook secret:</p> <pre><code>const crypto = require('crypto');\n\nfunction isValidSignature(payload, signature, secret) {\n  const hmac = crypto.createHmac('sha256', secret);\n  const computedSignature = hmac.update(payload).digest('hex');\n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(computedSignature)\n  );\n}\n</code></pre>"},{"location":"technical-reference/#database-schema","title":"Database Schema","text":"<p>The Maily platform uses a PostgreSQL database with the following primary schema:</p>"},{"location":"technical-reference/#core-tables","title":"Core Tables","text":""},{"location":"technical-reference/#organizations","title":"Organizations","text":"<pre><code>CREATE TABLE organizations (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  slug VARCHAR(63) NOT NULL UNIQUE,\n  plan_id VARCHAR(63) NOT NULL,\n  billing_email VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n</code></pre>"},{"location":"technical-reference/#users","title":"Users","text":"<pre><code>CREATE TABLE users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR(255) NOT NULL UNIQUE,\n  name VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  two_factor_enabled BOOLEAN NOT NULL DEFAULT false,\n  two_factor_secret VARCHAR(255),\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n</code></pre>"},{"location":"technical-reference/#organization-users","title":"Organization Users","text":"<pre><code>CREATE TABLE organization_users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,\n  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  role VARCHAR(63) NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  UNIQUE(organization_id, user_id)\n);\n</code></pre>"},{"location":"technical-reference/#campaigns","title":"Campaigns","text":"<pre><code>CREATE TABLE campaigns (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,\n  name VARCHAR(255) NOT NULL,\n  subject VARCHAR(255) NOT NULL,\n  sender_name VARCHAR(255) NOT NULL,\n  sender_email VARCHAR(255) NOT NULL,\n  content_html TEXT NOT NULL,\n  content_text TEXT NOT NULL,\n  status VARCHAR(63) NOT NULL DEFAULT 'draft',\n  scheduled_at TIMESTAMP WITH TIME ZONE,\n  sent_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n</code></pre>"},{"location":"technical-reference/#audience","title":"Audience","text":"<pre><code>CREATE TABLE audiences (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n</code></pre>"},{"location":"technical-reference/#subscribers","title":"Subscribers","text":"<pre><code>CREATE TABLE subscribers (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,\n  email VARCHAR(255) NOT NULL,\n  first_name VARCHAR(255),\n  last_name VARCHAR(255),\n  status VARCHAR(63) NOT NULL DEFAULT 'subscribed',\n  metadata JSONB NOT NULL DEFAULT '{}',\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  UNIQUE(organization_id, email)\n);\n</code></pre>"},{"location":"technical-reference/#audience-subscribers","title":"Audience Subscribers","text":"<pre><code>CREATE TABLE audience_subscribers (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  audience_id UUID NOT NULL REFERENCES audiences(id) ON DELETE CASCADE,\n  subscriber_id UUID NOT NULL REFERENCES subscribers(id) ON DELETE CASCADE,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  UNIQUE(audience_id, subscriber_id)\n);\n</code></pre>"},{"location":"technical-reference/#indexing-strategy","title":"Indexing Strategy","text":"<p>Key indexes for optimizing query performance:</p> <pre><code>-- Campaigns indexes\nCREATE INDEX idx_campaigns_organization_id ON campaigns(organization_id);\nCREATE INDEX idx_campaigns_status ON campaigns(status);\nCREATE INDEX idx_campaigns_scheduled_at ON campaigns(scheduled_at) WHERE status = 'scheduled';\n\n-- Subscribers indexes\nCREATE INDEX idx_subscribers_organization_id ON subscribers(organization_id);\nCREATE INDEX idx_subscribers_email ON subscribers(email);\nCREATE INDEX idx_subscribers_status ON subscribers(status);\nCREATE INDEX idx_subscribers_metadata_gin ON subscribers USING gin(metadata jsonb_path_ops);\n\n-- Audience indexes\nCREATE INDEX idx_audiences_organization_id ON audiences(organization_id);\n\n-- Organization users indexes\nCREATE INDEX idx_organization_users_organization_id ON organization_users(organization_id);\nCREATE INDEX idx_organization_users_user_id ON organization_users(user_id);\n</code></pre>"},{"location":"technical-reference/#service-endpoints","title":"Service Endpoints","text":""},{"location":"technical-reference/#internal-services","title":"Internal Services","text":"<p>These endpoints are for internal service-to-service communication:</p>"},{"location":"technical-reference/#email-service","title":"Email Service","text":"<pre><code>Base URL: http://email-service.maily.svc.cluster.local:8080\n</code></pre> Endpoint Method Description <code>/v1/send</code> POST Send a single email <code>/v1/batch-send</code> POST Send a batch of emails <code>/v1/templates/{id}/render</code> POST Render an email template <code>/v1/status/{message_id}</code> GET Check email delivery status"},{"location":"technical-reference/#analytics-service","title":"Analytics Service","text":"<pre><code>Base URL: http://analytics-service.maily.svc.cluster.local:8080\n</code></pre> Endpoint Method Description <code>/v1/events/track</code> POST Track an analytics event <code>/v1/reports/campaign/{id}</code> GET Generate campaign report <code>/v1/reports/organization/{id}</code> GET Generate organization report <code>/v1/dashboards/{id}</code> GET Get dashboard data"},{"location":"technical-reference/#audience-service","title":"Audience Service","text":"<pre><code>Base URL: http://audience-service.maily.svc.cluster.local:8080\n</code></pre> Endpoint Method Description <code>/v1/segments/evaluate</code> POST Evaluate audience segment <code>/v1/subscribers/import</code> POST Import subscribers <code>/v1/subscribers/export</code> POST Export subscribers"},{"location":"technical-reference/#environment-configuration","title":"Environment Configuration","text":""},{"location":"technical-reference/#configuration-variables","title":"Configuration Variables","text":""},{"location":"technical-reference/#api-service","title":"API Service","text":"Variable Description Default Required <code>PORT</code> Port for the service <code>3000</code> No <code>NODE_ENV</code> Environment <code>development</code> No <code>DATABASE_URL</code> PostgreSQL connection string - Yes <code>REDIS_URL</code> Redis connection string - Yes <code>JWT_SECRET</code> Secret for JWT tokens - Yes <code>CORS_ORIGIN</code> Allowed CORS origins <code>*</code> No <code>LOG_LEVEL</code> Logging level <code>info</code> No <code>SENTRY_DSN</code> Sentry error tracking DSN - No"},{"location":"technical-reference/#email-service_1","title":"Email Service","text":"Variable Description Default Required <code>PORT</code> Port for the service <code>8080</code> No <code>NODE_ENV</code> Environment <code>development</code> No <code>DATABASE_URL</code> PostgreSQL connection string - Yes <code>REDIS_URL</code> Redis connection string - Yes <code>SMTP_HOST</code> SMTP server host - Yes <code>SMTP_PORT</code> SMTP server port <code>587</code> No <code>SMTP_USER</code> SMTP username - Yes <code>SMTP_PASSWORD</code> SMTP password - Yes <code>SMTP_SECURE</code> Use TLS <code>true</code> No <code>AWS_REGION</code> AWS region (for SES) - For SES <code>AWS_ACCESS_KEY</code> AWS access key - For SES <code>AWS_SECRET_KEY</code> AWS secret key - For SES"},{"location":"technical-reference/#configuration-file-format","title":"Configuration File Format","text":"<p>Configuration may also be provided via YAML files:</p> <pre><code>service:\n  name: api-service\n  port: 3000\n  environment: production\n\ndatabase:\n  host: postgres.maily.svc.cluster.local\n  port: 5432\n  username: maily_app\n  password: ${DATABASE_PASSWORD}\n  database: maily\n  poolSize: 20\n\nredis:\n  host: redis.maily.svc.cluster.local\n  port: 6379\n  password: ${REDIS_PASSWORD}\n  db: 0\n\nauth:\n  jwtSecret: ${JWT_SECRET}\n  jwtExpiresIn: 86400\n\nlogging:\n  level: info\n  format: json\n  destination: stdout\n</code></pre>"},{"location":"technical-reference/#event-system","title":"Event System","text":"<p>Maily uses an event-driven architecture for internal communication between services.</p>"},{"location":"technical-reference/#event-types","title":"Event Types","text":"Event Type Producer Consumers Description <code>email.queued</code> API Service Email Service Email added to sending queue <code>email.sent</code> Email Service Analytics Service Email was sent <code>email.delivered</code> Email Service Analytics Service Email was delivered <code>email.opened</code> Tracking Service Analytics Service Email was opened <code>email.clicked</code> Tracking Service Analytics Service Link in email was clicked <code>email.bounced</code> Email Service Analytics, Audience Service Email bounced <code>email.complained</code> Email Service Analytics, Audience Service Recipient marked as spam <code>subscriber.created</code> API Service Audience Service New subscriber created <code>subscriber.updated</code> API Service Audience Service Subscriber updated <code>subscriber.unsubscribed</code> API Service, Tracking Service Audience, Analytics Service Subscriber unsubscribed"},{"location":"technical-reference/#event-schema","title":"Event Schema","text":"<pre><code>interface Event&lt;T&gt; {\n  id: string;              // Unique event ID\n  type: string;            // Event type\n  source: string;          // Service that produced the event\n  time: string;            // ISO timestamp\n  dataVersion: string;     // Schema version\n  organization: string;    // Organization ID\n  data: T;                 // Event payload\n  metadata: {              // Additional metadata\n    correlation_id: string;\n    user_id?: string;\n  };\n}\n</code></pre>"},{"location":"technical-reference/#sample-event","title":"Sample Event","text":"<pre><code>{\n  \"id\": \"evt_123456789\",\n  \"type\": \"email.opened\",\n  \"source\": \"tracking-service\",\n  \"time\": \"2023-09-15T14:22:45Z\",\n  \"dataVersion\": \"1.0\",\n  \"organization\": \"org_987654321\",\n  \"data\": {\n    \"campaign_id\": \"camp_abc123\",\n    \"email_id\": \"email_def456\",\n    \"subscriber_id\": \"sub_789xyz\",\n    \"user_agent\": \"Mozilla/5.0...\",\n    \"ip_address\": \"192.168.1.1\",\n    \"timestamp\": \"2023-09-15T14:22:43Z\"\n  },\n  \"metadata\": {\n    \"correlation_id\": \"corr_abcdef123456\"\n  }\n}\n</code></pre>"},{"location":"technical-reference/#authentication_1","title":"Authentication","text":""},{"location":"technical-reference/#api-authentication-methods","title":"API Authentication Methods","text":""},{"location":"technical-reference/#api-key-authentication","title":"API Key Authentication","text":"<p>Used for server-to-server integrations:</p> <pre><code>Authorization: ApiKey sk_live_abcdef123456\n</code></pre> <p>API keys have the format <code>sk_{environment}_{random_string}</code> where <code>environment</code> is <code>live</code> or <code>test</code>.</p>"},{"location":"technical-reference/#oauth-20","title":"OAuth 2.0","text":"<p>Used for user-facing integrations:</p> <ol> <li> <p>Authorization Request:    <pre><code>GET https://auth.maily.com/oauth/authorize\n?client_id=YOUR_CLIENT_ID\n&amp;redirect_uri=YOUR_REDIRECT_URI\n&amp;response_type=code\n&amp;scope=campaigns:read audiences:read\n&amp;state=YOUR_STATE_VALUE\n</code></pre></p> </li> <li> <p>Token Request:    <pre><code>POST https://auth.maily.com/oauth/token\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code\n&amp;client_id=YOUR_CLIENT_ID\n&amp;client_secret=YOUR_CLIENT_SECRET\n&amp;code=AUTHORIZATION_CODE\n&amp;redirect_uri=YOUR_REDIRECT_URI\n</code></pre></p> </li> <li> <p>Token Response:    <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 7200,\n  \"refresh_token\": \"def456...\",\n  \"scope\": \"campaigns:read audiences:read\"\n}\n</code></pre></p> </li> <li> <p>Using the Token:    <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> </li> </ol>"},{"location":"technical-reference/#jwt-format","title":"JWT Format","text":"<p>Tokens use the following JWT claims:</p> <pre><code>{\n  \"iss\": \"https://auth.maily.com\",\n  \"sub\": \"user_123456\",\n  \"aud\": \"https://api.maily.com\",\n  \"exp\": 1631664000,\n  \"iat\": 1631656800,\n  \"scope\": \"campaigns:read audiences:read\",\n  \"org_id\": \"org_987654321\"\n}\n</code></pre>"},{"location":"technical-reference/#authorization","title":"Authorization","text":""},{"location":"technical-reference/#permission-model","title":"Permission Model","text":"<p>Maily uses a role-based access control (RBAC) system with granular permissions:</p>"},{"location":"technical-reference/#roles","title":"Roles","text":"Role Description <code>admin</code> Full access to the organization <code>manager</code> Manage campaigns, audiences, and templates <code>creator</code> Create and edit campaigns and templates <code>analyst</code> View analytics and reports <code>viewer</code> View-only access"},{"location":"technical-reference/#permissions","title":"Permissions","text":"<p>Permissions follow the format <code>resource:action</code>:</p> Permission Description <code>campaigns:read</code> View campaigns <code>campaigns:create</code> Create campaigns <code>campaigns:update</code> Edit campaigns <code>campaigns:delete</code> Delete campaigns <code>campaigns:send</code> Send campaigns <code>audiences:read</code> View audiences <code>audiences:create</code> Create audiences <code>audiences:update</code> Edit audiences <code>audiences:delete</code> Delete audiences <code>subscribers:read</code> View subscribers <code>subscribers:create</code> Add subscribers <code>subscribers:update</code> Edit subscribers <code>subscribers:delete</code> Delete subscribers <code>templates:read</code> View templates <code>templates:create</code> Create templates <code>templates:update</code> Edit templates <code>templates:delete</code> Delete templates <code>analytics:read</code> View analytics <code>settings:read</code> View settings <code>settings:update</code> Update settings"},{"location":"technical-reference/#role-permission-mapping","title":"Role Permission Mapping","text":"<pre><code>{\n  \"admin\": [\n    \"*:*\"\n  ],\n  \"manager\": [\n    \"campaigns:*\",\n    \"audiences:*\",\n    \"subscribers:*\",\n    \"templates:*\",\n    \"analytics:read\",\n    \"settings:read\"\n  ],\n  \"creator\": [\n    \"campaigns:read\", \"campaigns:create\", \"campaigns:update\",\n    \"audiences:read\",\n    \"subscribers:read\",\n    \"templates:read\", \"templates:create\", \"templates:update\",\n    \"analytics:read\"\n  ],\n  \"analyst\": [\n    \"campaigns:read\",\n    \"audiences:read\",\n    \"subscribers:read\",\n    \"templates:read\",\n    \"analytics:read\"\n  ],\n  \"viewer\": [\n    \"campaigns:read\",\n    \"audiences:read\",\n    \"subscribers:read\",\n    \"templates:read\"\n  ]\n}\n</code></pre>"},{"location":"technical-reference/#rate-limiting","title":"Rate Limiting","text":""},{"location":"technical-reference/#api-rate-limits","title":"API Rate Limits","text":"<p>Rate limits vary by endpoint and plan:</p> Plan General Endpoints Bulk Operations Events/Webhooks Free 60 req/min 1000 req/hour 5 req/sec Starter 120 req/min 5000 req/hour 10 req/sec Professional 300 req/min 10000 req/hour 50 req/sec Enterprise 1000 req/min 50000 req/hour 100 req/sec"},{"location":"technical-reference/#rate-limit-response-headers","title":"Rate Limit Response Headers","text":"<pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1631657100\n</code></pre>"},{"location":"technical-reference/#rate-limit-exceeded-response","title":"Rate Limit Exceeded Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"rate_limit_exceeded\",\n    \"message\": \"Rate limit exceeded. Please try again later.\",\n    \"details\": {\n      \"limit\": 60,\n      \"reset_at\": \"2023-09-15T14:45:00Z\"\n    }\n  }\n}\n</code></pre>"},{"location":"technical-reference/#error-handling","title":"Error Handling","text":""},{"location":"technical-reference/#error-response-structure","title":"Error Response Structure","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"error_code\",\n    \"message\": \"Human-readable message\",\n    \"details\": {}, // Additional error details\n    \"request_id\": \"req_123456789\" // For debugging and support\n  }\n}\n</code></pre>"},{"location":"technical-reference/#standard-error-codes","title":"Standard Error Codes","text":"Code HTTP Status Description <code>invalid_request</code> 400 General invalid request <code>invalid_parameters</code> 400 Invalid parameters <code>authentication_required</code> 401 Authentication is required <code>invalid_credentials</code> 401 Invalid authentication credentials <code>access_denied</code> 403 Authorization failed <code>not_found</code> 404 Resource not found <code>method_not_allowed</code> 405 HTTP method not allowed <code>resource_conflict</code> 409 Resource conflict <code>resource_gone</code> 410 Resource no longer available <code>unsupported_media_type</code> 415 Unsupported media type <code>unprocessable_entity</code> 422 Validation failed <code>rate_limit_exceeded</code> 429 Rate limit exceeded <code>internal_server_error</code> 500 Server error <code>service_unavailable</code> 503 Service temporarily unavailable"},{"location":"technical-reference/#validation-errors","title":"Validation Errors","text":"<p>For validation errors, the <code>details</code> field contains specific validation problems:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"validation_error\",\n    \"message\": \"The request contains invalid parameters\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Email is invalid\",\n        \"code\": \"invalid_email\"\n      },\n      {\n        \"field\": \"name\",\n        \"message\": \"Name is required\",\n        \"code\": \"field_required\"\n      }\n    ],\n    \"request_id\": \"req_123456789\"\n  }\n}\n</code></pre>"},{"location":"technical-reference/#logging","title":"Logging","text":""},{"location":"technical-reference/#log-format","title":"Log Format","text":"<p>Maily uses structured JSON logging:</p> <pre><code>{\n  \"level\": \"info\",\n  \"time\": \"2023-09-15T14:22:45Z\",\n  \"service\": \"api-service\",\n  \"instance\": \"api-5d7f9d484b-2xc4b\",\n  \"message\": \"Request completed\",\n  \"request_id\": \"req_123456789\",\n  \"correlation_id\": \"corr_abcdef123456\",\n  \"organization_id\": \"org_987654321\",\n  \"user_id\": \"user_123456\",\n  \"method\": \"GET\",\n  \"path\": \"/v1/campaigns\",\n  \"status_code\": 200,\n  \"duration_ms\": 45,\n  \"user_agent\": \"Maily API Client/1.0\",\n  \"ip\": \"192.168.1.1\"\n}\n</code></pre>"},{"location":"technical-reference/#log-levels","title":"Log Levels","text":"Level Description <code>error</code> Error conditions <code>warn</code> Warning conditions <code>info</code> Informational messages <code>debug</code> Debug messages <code>trace</code> Detailed debugging information"},{"location":"technical-reference/#common-log-event-types","title":"Common Log Event Types","text":"Event Type Description <code>http_request</code> HTTP request received <code>http_response</code> HTTP response sent <code>database_query</code> Database query executed <code>cache_operation</code> Cache operation performed <code>job_executed</code> Background job executed <code>event_published</code> Event published to message bus <code>event_consumed</code> Event consumed from message bus <code>auth_attempt</code> Authentication attempt <code>auth_success</code> Authentication succeeded <code>auth_failure</code> Authentication failed <p>This technical reference is maintained by the Maily Engineering Team. For questions or suggestions, contact dev@maily.com.</p>"},{"location":"testing-guide/","title":"Maily Testing Guide","text":"<p>Last updated: March 5, 2025</p>"},{"location":"testing-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Testing Philosophy</li> <li>Test Types</li> <li>Unit Testing</li> <li>Integration Testing</li> <li>End-to-End Testing</li> <li>Performance Testing</li> <li>Security Testing</li> <li>Accessibility Testing</li> <li>Testing Standards</li> <li>Testing Infrastructure</li> <li>Frontend Testing</li> <li>Backend Testing</li> <li>AI Component Testing</li> <li>Mocking Strategies</li> <li>Test Data Management</li> <li>Continuous Integration</li> <li>Test Reporting</li> <li>Troubleshooting</li> <li>Resources</li> </ul>"},{"location":"testing-guide/#overview","title":"Overview","text":"<p>This Testing Guide serves as the comprehensive source of truth for all testing activities across the Maily platform. It consolidates previously scattered documentation into a single reference that covers our testing philosophy, methodologies, tools, and best practices.</p> <p>Whether you're a new developer looking to understand our testing approach or an experienced team member seeking specific testing patterns, this guide provides the foundation for ensuring quality across our codebase.</p>"},{"location":"testing-guide/#testing-philosophy","title":"Testing Philosophy","text":"<p>At Maily, we follow these core testing principles:</p> <ol> <li>Shift Left: Catch issues as early as possible in the development lifecycle</li> <li>Test Pyramid: Prioritize fast, reliable unit tests with fewer integration and E2E tests</li> <li>Ownership: Developers own quality and testing of their code</li> <li>Automation First: Automated tests are preferred over manual verification</li> <li>Value Over Coverage: Focus on testing critical paths and business logic</li> <li>Maintainability: Tests should be readable, reliable, and easy to maintain</li> </ol>"},{"location":"testing-guide/#test-types","title":"Test Types","text":""},{"location":"testing-guide/#unit-testing","title":"Unit Testing","text":"<p>Unit tests verify individual components, functions, or classes in isolation from their dependencies.</p> <p>Key Characteristics: - Fast execution (milliseconds) - Tests single unit of functionality - Dependencies are mocked or stubbed - Should make up ~70% of test suite</p> <p>Example Unit Test:</p> <pre><code>// Component unit test\ndescribe('EmailTemplateSelect', () =&gt; {\n  it('should display available templates', () =&gt; {\n    const templates = [\n      { id: '1', name: 'Welcome Email' },\n      { id: '2', name: 'Newsletter' }\n    ];\n\n    const { getAllByRole } = render(&lt;EmailTemplateSelect templates={templates} /&gt;);\n\n    const options = getAllByRole('option');\n    expect(options).toHaveLength(2);\n    expect(options[0]).toHaveTextContent('Welcome Email');\n    expect(options[1]).toHaveTextContent('Newsletter');\n  });\n});\n</code></pre>"},{"location":"testing-guide/#integration-testing","title":"Integration Testing","text":"<p>Integration tests verify that multiple components work together correctly.</p> <p>Key Characteristics: - Medium execution speed - Tests interactions between components - Some dependencies may be real, others mocked - Should make up ~20% of test suite</p> <p>Example Integration Test:</p> <pre><code>// Service integration test\ndescribe('Campaign Service', () =&gt; {\n  let campaignService: CampaignService;\n  let mockDbClient: DbClient;\n  let mockAnalyticsService: AnalyticsService;\n\n  beforeEach(() =&gt; {\n    mockDbClient = mock(DbClient);\n    mockAnalyticsService = mock(AnalyticsService);\n    campaignService = new CampaignService(mockDbClient, mockAnalyticsService);\n  });\n\n  it('should create a campaign and track event', async () =&gt; {\n    // Arrange\n    const campaignData = { name: 'Test Campaign', subject: 'Test Subject' };\n    when(mockDbClient.insertCampaign).calledWith(expect.anything()).mockResolvedValue({ id: '123', ...campaignData });\n\n    // Act\n    const result = await campaignService.createCampaign(campaignData);\n\n    // Assert\n    expect(result.id).toBe('123');\n    verify(mockAnalyticsService.trackEvent).calledWith('campaign_created', expect.anything());\n  });\n});\n</code></pre>"},{"location":"testing-guide/#end-to-end-testing","title":"End-to-End Testing","text":"<p>E2E tests verify the entire application works together from the user's perspective.</p> <p>Key Characteristics: - Slower execution (seconds to minutes) - Tests full user workflows across system boundaries - Minimal mocking, uses real services where possible - Should make up ~10% of test suite</p> <p>Example E2E Test:</p> <pre><code>// E2E test using Playwright\ntest('user can create and send a campaign', async ({ page }) =&gt; {\n  // Login\n  await page.goto('/login');\n  await page.fill('[data-testid=\"email-input\"]', 'test@example.com');\n  await page.fill('[data-testid=\"password-input\"]', 'password123');\n  await page.click('[data-testid=\"login-button\"]');\n\n  // Create campaign\n  await page.click('[data-testid=\"new-campaign-button\"]');\n  await page.fill('[data-testid=\"campaign-name\"]', 'My Test Campaign');\n  await page.fill('[data-testid=\"campaign-subject\"]', 'Important Announcement');\n  await page.click('[data-testid=\"select-template-button\"]');\n  await page.click('[data-testid=\"template-item-newsletter\"]');\n\n  // Add content and send\n  await page.fill('[data-testid=\"email-content\"]', 'Hello subscribers!');\n  await page.click('[data-testid=\"send-button\"]');\n\n  // Verify success\n  await expect(page.locator('[data-testid=\"success-message\"]')).toBeVisible();\n  await expect(page.locator('[data-testid=\"campaign-status\"]')).toHaveText('Sent');\n});\n</code></pre>"},{"location":"testing-guide/#performance-testing","title":"Performance Testing","text":"<p>Performance tests verify that the application meets performance requirements under expected load.</p> <p>Key Tools: - JMeter for API load testing - Lighthouse for frontend performance - Custom instrumentation for service-level metrics</p> <p>Performance Test Categories: - Load Testing: System behavior under expected load - Stress Testing: System behavior at or beyond maximum capacity - Endurance Testing: System behavior under sustained load - Spike Testing: System behavior under sudden increases in load</p>"},{"location":"testing-guide/#security-testing","title":"Security Testing","text":"<p>Security testing identifies vulnerabilities and ensures data protection.</p> <p>Automated Security Testing: - Static Application Security Testing (SAST) - Dynamic Application Security Testing (DAST) - Dependency scanning - Secret scanning</p> <p>Key Security Test Areas: - Authentication and authorization - Input validation - Data encryption - API security - Dependency vulnerabilities</p>"},{"location":"testing-guide/#accessibility-testing","title":"Accessibility Testing","text":"<p>Accessibility testing ensures the application is usable by people with disabilities.</p> <p>Automated Tools: - axe-core for automated checks - Lighthouse for accessibility audits</p> <p>Manual Testing: - Keyboard navigation - Screen reader compatibility - Color contrast verification</p>"},{"location":"testing-guide/#testing-standards","title":"Testing Standards","text":"<p>All tests must follow these standards:</p> <ol> <li> <p>Naming Convention: Tests should clearly describe what is being tested    <pre><code>describe('EmailValidator', () =&gt; {\n  it('should reject emails without @ symbol', () =&gt; {...})\n});\n</code></pre></p> </li> <li> <p>AAA Pattern: Arrange, Act, Assert    <pre><code>// Arrange\nconst validator = new EmailValidator();\nconst invalidEmail = 'test.example.com';\n\n// Act\nconst result = validator.isValid(invalidEmail);\n\n// Assert\nexpect(result).toBe(false);\n</code></pre></p> </li> <li> <p>Isolation: Tests should not depend on each other</p> </li> <li> <p>Deterministic: Tests should yield the same results on every run</p> </li> <li> <p>Focused: Each test should verify a single behavior</p> </li> </ol>"},{"location":"testing-guide/#testing-infrastructure","title":"Testing Infrastructure","text":""},{"location":"testing-guide/#test-runners","title":"Test Runners","text":"<ul> <li>Jest: Primary test runner for both frontend and backend unit/integration tests</li> <li>Playwright: End-to-end testing framework</li> <li>Supertest: API testing</li> </ul>"},{"location":"testing-guide/#cicd-integration","title":"CI/CD Integration","text":"<p>All tests run on CI for: - Pull requests - Main branch merges - Nightly builds (full suite including long-running tests)</p> <p>Pipeline Stages: 1. Linting and type checking 2. Unit tests 3. Integration tests 4. E2E tests (subset on PRs, full suite on main) 5. Performance tests (on main only)</p>"},{"location":"testing-guide/#frontend-testing","title":"Frontend Testing","text":"<p>Frontend tests focus on components, hooks, state management, and user interactions.</p> <p>Component Testing Approach:</p> <ol> <li>Props &amp; Rendering: Verify component renders correctly with different props</li> <li>User Interactions: Test click, input, and other events</li> <li>State Changes: Verify component state changes as expected</li> <li>Edge Cases: Test loading, error, and empty states</li> </ol> <p>Example Component Test:</p> <pre><code>import { render, screen, fireEvent } from '@testing-library/react';\nimport { SubscriberForm } from './SubscriberForm';\n\ndescribe('SubscriberForm', () =&gt; {\n  it('should display validation error for invalid email', () =&gt; {\n    // Arrange\n    render(&lt;SubscriberForm onSubmit={jest.fn()} /&gt;);\n\n    // Act\n    fireEvent.change(screen.getByLabelText(/email/i), {\n      target: { value: 'invalid-email' }\n    });\n    fireEvent.click(screen.getByRole('button', { name: /save/i }));\n\n    // Assert\n    expect(screen.getByText(/please enter a valid email/i)).toBeInTheDocument();\n  });\n});\n</code></pre> <p>Custom Hooks Testing:</p> <pre><code>import { renderHook, act } from '@testing-library/react-hooks';\nimport { useSubscriberForm } from './useSubscriberForm';\n\ndescribe('useSubscriberForm', () =&gt; {\n  it('should update form values', () =&gt; {\n    // Arrange\n    const { result } = renderHook(() =&gt; useSubscriberForm());\n\n    // Act\n    act(() =&gt; {\n      result.current.updateField('email', 'test@example.com');\n    });\n\n    // Assert\n    expect(result.current.values.email).toBe('test@example.com');\n  });\n});\n</code></pre>"},{"location":"testing-guide/#backend-testing","title":"Backend Testing","text":"<p>Backend tests focus on API endpoints, services, database interactions, and business logic.</p> <p>Service Layer Testing:</p> <pre><code>describe('EmailService', () =&gt; {\n  let emailService: EmailService;\n  let mockRepository: EmailRepository;\n\n  beforeEach(() =&gt; {\n    mockRepository = mock(EmailRepository);\n    emailService = new EmailService(mockRepository);\n  });\n\n  it('should send email and store delivery record', async () =&gt; {\n    // Arrange\n    const emailData = {\n      to: 'recipient@example.com',\n      subject: 'Test',\n      body: 'Hello world'\n    };\n    when(mockRepository.saveEmailRecord).calledWith(expect.anything()).mockResolvedValue({ id: '123' });\n\n    // Act\n    const result = await emailService.sendEmail(emailData);\n\n    // Assert\n    expect(result.success).toBe(true);\n    verify(mockRepository.saveEmailRecord).calledWith(expect.objectContaining({\n      to: 'recipient@example.com',\n      status: 'sent'\n    }));\n  });\n});\n</code></pre> <p>API Testing:</p> <pre><code>import request from 'supertest';\nimport { app } from '../app';\nimport { authMiddleware } from '../middleware/auth';\n\n// Mock auth middleware for testing\njest.mock('../middleware/auth', () =&gt; ({\n  authMiddleware: jest.fn((req, res, next) =&gt; {\n    req.user = { id: 'test-user-id', role: 'admin' };\n    next();\n  })\n}));\n\ndescribe('Campaign API', () =&gt; {\n  it('should create a campaign', async () =&gt; {\n    const response = await request(app)\n      .post('/api/campaigns')\n      .send({\n        name: 'Test Campaign',\n        subject: 'Hello Subscribers',\n        content: '&lt;p&gt;Welcome to our newsletter&lt;/p&gt;'\n      });\n\n    expect(response.status).toBe(201);\n    expect(response.body).toHaveProperty('id');\n    expect(response.body.name).toBe('Test Campaign');\n  });\n});\n</code></pre> <p>Database Testing:</p> <p>We use an in-memory database for testing database interactions:</p> <pre><code>import { createConnection } from 'typeorm';\nimport { SubscriberRepository } from './SubscriberRepository';\nimport { Subscriber } from './Subscriber.entity';\n\ndescribe('SubscriberRepository', () =&gt; {\n  let connection;\n  let repository: SubscriberRepository;\n\n  beforeAll(async () =&gt; {\n    connection = await createConnection({\n      type: 'sqlite',\n      database: ':memory:',\n      entities: [Subscriber],\n      synchronize: true\n    });\n    repository = connection.getCustomRepository(SubscriberRepository);\n  });\n\n  afterAll(async () =&gt; {\n    await connection.close();\n  });\n\n  it('should find subscribers by segment', async () =&gt; {\n    // Arrange\n    await repository.save([\n      { email: 'user1@example.com', segments: ['newsletter'] },\n      { email: 'user2@example.com', segments: ['promotion'] }\n    ]);\n\n    // Act\n    const results = await repository.findBySegment('newsletter');\n\n    // Assert\n    expect(results).toHaveLength(1);\n    expect(results[0].email).toBe('user1@example.com');\n  });\n});\n</code></pre>"},{"location":"testing-guide/#ai-component-testing","title":"AI Component Testing","text":"<p>AI components require specialized testing approaches due to their probabilistic nature.</p> <p>Strategies for AI Testing:</p> <ol> <li>Golden Dataset Testing: Compare outputs against known good results</li> <li>Invariant Testing: Check properties that should always be true</li> <li>Metamorphic Testing: Modify inputs in ways that should have predictable effects on outputs</li> <li>Adversarial Testing: Test with inputs designed to cause failures</li> </ol> <p>Example AI Test:</p> <pre><code>describe('EmailSubjectSuggestionAI', () =&gt; {\n  let suggestionService: EmailSubjectSuggestionAI;\n\n  beforeEach(() =&gt; {\n    suggestionService = new EmailSubjectSuggestionAI();\n  });\n\n  it('should generate appropriate length subjects', async () =&gt; {\n    // Arrange\n    const emailContent = 'Welcome to our monthly newsletter with updates about our product...';\n\n    // Act\n    const suggestions = await suggestionService.generateSuggestions(emailContent);\n\n    // Assert\n    for (const suggestion of suggestions) {\n      expect(suggestion.length).toBeGreaterThan(10);\n      expect(suggestion.length).toBeLessThan(100);\n    }\n  });\n\n  it('should maintain key entities from content', async () =&gt; {\n    // Arrange\n    const emailContent = 'Introducing our new Premium Plan with advanced analytics features';\n\n    // Act\n    const suggestions = await suggestionService.generateSuggestions(emailContent);\n\n    // Assert\n    expect(suggestions.some(s =&gt;\n      s.includes('Premium') ||\n      s.includes('Plan') ||\n      s.includes('analytics')\n    )).toBe(true);\n  });\n});\n</code></pre>"},{"location":"testing-guide/#mocking-strategies","title":"Mocking Strategies","text":""},{"location":"testing-guide/#external-dependencies","title":"External Dependencies","text":"<p>Use the following approaches for mocking external dependencies:</p> <ol> <li>HTTP Clients: Use <code>nock</code> or <code>msw</code> to intercept HTTP requests</li> <li>Databases: Use in-memory databases or repository mocks</li> <li>Message Queues: Use in-memory implementations</li> <li>Time: Use Jest's timer mocks</li> </ol> <p>Example MSW Setup:</p> <pre><code>import { setupServer } from 'msw/node';\nimport { rest } from 'msw';\n\nconst server = setupServer(\n  rest.get('https://api.example.com/data', (req, res, ctx) =&gt; {\n    return res(\n      ctx.status(200),\n      ctx.json({ items: [{ id: 1, name: 'Test' }] })\n    );\n  })\n);\n\nbeforeAll(() =&gt; server.listen());\nafterEach(() =&gt; server.resetHandlers());\nafterAll(() =&gt; server.close());\n</code></pre>"},{"location":"testing-guide/#test-data-management","title":"Test Data Management","text":""},{"location":"testing-guide/#factories","title":"Factories","text":"<p>Use factory functions to create test data:</p> <pre><code>// Campaign factory\nexport const createCampaign = (overrides = {}) =&gt; ({\n  id: 'campaign-123',\n  name: 'Test Campaign',\n  subject: 'Test Subject',\n  content: '&lt;p&gt;Hello world&lt;/p&gt;',\n  status: 'draft',\n  createdAt: new Date(),\n  ...overrides\n});\n</code></pre>"},{"location":"testing-guide/#fixtures","title":"Fixtures","text":"<p>Store larger test datasets as fixtures:</p> <pre><code>// subscribers.json\n[\n  {\n    \"id\": \"sub-1\",\n    \"email\": \"user1@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"segments\": [\"newsletter\"],\n    \"createdAt\": \"2023-01-01T00:00:00Z\"\n  },\n  {\n    \"id\": \"sub-2\",\n    \"email\": \"user2@example.com\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"segments\": [\"promotion\"],\n    \"createdAt\": \"2023-01-02T00:00:00Z\"\n  }\n]\n</code></pre>"},{"location":"testing-guide/#continuous-integration","title":"Continuous Integration","text":"<p>Our CI pipeline is configured to:</p> <ol> <li>Run fast tests on every PR</li> <li>Run the full test suite on main branch merges</li> <li>Report test results and coverage</li> </ol> <p>Test Run Configuration:</p> <pre><code># Jest configuration for CI\n{\n  \"preset\": \"ts-jest\",\n  \"testEnvironment\": \"node\",\n  \"collectCoverage\": true,\n  \"coverageReporters\": [\"text\", \"lcov\"],\n  \"coverageThreshold\": {\n    \"global\": {\n      \"branches\": 80,\n      \"functions\": 80,\n      \"lines\": 80,\n      \"statements\": 80\n    }\n  }\n}\n</code></pre>"},{"location":"testing-guide/#test-reporting","title":"Test Reporting","text":"<p>Test results are reported in multiple formats:</p> <ol> <li>Console Output: For local development</li> <li>JUnit XML: For CI integration</li> <li>HTML Reports: For detailed analysis</li> <li>Coverage Reports: For code coverage visualization</li> </ol>"},{"location":"testing-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing-guide/#common-test-failures","title":"Common Test Failures","text":"Issue Possible Causes Solutions Flaky tests Time dependencies, race conditions Use deterministic time mocks, add proper waits Failing CI but passing locally Environment differences Containerize tests, use CI debug mode Slow tests Too many E2E tests, inefficient setup Move tests down the pyramid, optimize setup/teardown Memory leaks Unclosed connections, large test data Add proper cleanup, use memory profiling"},{"location":"testing-guide/#debugging-tests","title":"Debugging Tests","text":"<p>Jest Debug Tips:</p> <pre><code># Run a specific test with the debugger\nnode --inspect-brk node_modules/.bin/jest --runInBand MyComponent.test.ts\n\n# Filter tests by name\njest -t \"should handle error state\"\n\n# Update snapshots\njest --updateSnapshot\n</code></pre> <p>Playwright Debug Tips:</p> <pre><code># Run with UI mode\nnpx playwright test --ui\n\n# Run with debug mode\nnpx playwright test --debug\n\n# Generate traces for failed tests\nnpx playwright test --trace on\n</code></pre>"},{"location":"testing-guide/#resources","title":"Resources","text":"<ul> <li>Jest Documentation</li> <li>React Testing Library</li> <li>Playwright Documentation</li> <li>Testing Trophy</li> <li>Internal Testing Wiki</li> </ul>"},{"location":"trust-infrastructure-handbook/","title":"Maily Trust Infrastructure Handbook","text":"<p>Last Updated: March 6, 2025</p>"},{"location":"trust-infrastructure-handbook/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>System Architecture</li> <li>Implementation Components</li> <li>Token Implementation</li> <li>AI Trust Agents</li> <li>Trust Certificates</li> <li>Implementation Details</li> <li>Phase 1: Core Infrastructure</li> <li>Phase 2: Viral Ignition</li> <li>Phase 3: Ecosystem Expansion</li> <li>Production Deployment</li> <li>Development Guidelines</li> <li>Security Considerations</li> <li>Monitoring &amp; Maintenance</li> <li>Implementation-Specific Components</li> <li>Chainlink Oracle Integration</li> <li>Certificate Implementation</li> <li>AI Agent Implementation</li> <li>Token Implementation Details</li> <li>Future Roadmap</li> <li>Troubleshooting Guide</li> <li>Appendix: Technical Reference</li> </ol>"},{"location":"trust-infrastructure-handbook/#overview","title":"Overview","text":"<p>The Maily Trust Infrastructure is a blockchain-based system designed to establish trust and verification for email marketing campaigns. It combines blockchain technology, AI agents, and cryptographic certificates to provide a comprehensive solution for authenticated, personalized, and high-performing email campaigns.</p> <p>This handbook consolidates all documentation related to the Trust Infrastructure implementation, providing a single source of truth for developers, operators, and stakeholders.</p>"},{"location":"trust-infrastructure-handbook/#key-benefits","title":"Key Benefits","text":"<ul> <li>Verified Authenticity: Cryptographically verifiable email campaigns</li> <li>Performance-Based Rewards: Token incentives for high-performing campaigns</li> <li>AI-Driven Personalization: Enhanced relevance through AI trust agents</li> <li>Cross-Chain Compatibility: Support for multiple blockchain networks</li> <li>Transparent Reporting: Immutable performance metrics</li> </ul>"},{"location":"trust-infrastructure-handbook/#system-architecture","title":"System Architecture","text":"<p>The Trust Infrastructure consists of four primary components:</p> <ol> <li>Blockchain Layer: Ethereum-based smart contracts that handle token management, certificate issuance, and verification</li> <li>Integration Layer: APIs and services that connect Maily's core platform with the blockchain layer</li> <li>AI Trust Agents: Machine learning models that analyze and optimize email content and delivery</li> <li>Certificate Authority: Issues and validates cryptographic certificates for email campaigns</li> </ol>"},{"location":"trust-infrastructure-handbook/#high-level-architecture-diagram","title":"High-Level Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Maily Platform \u2502\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 Integration Layer \u2502\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Blockchain     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502  Network        \u2502\n        \u2502                         \u25b2                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                         \u2502                         \u25b2\n        \u25bc                         \u2502                         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u2502                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AI Trust       \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2502  Certificate    \u2502\n\u2502  Agents         \u2502                                 \u2502  Authority      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"trust-infrastructure-handbook/#implementation-components","title":"Implementation Components","text":""},{"location":"trust-infrastructure-handbook/#token-implementation","title":"Token Implementation","text":"<p>The $MAILY token is an ERC20-compatible token designed to reward marketers based on verified campaign performance. The token implementation includes:</p> <ul> <li>Cross-chain capabilities through bridges to Polygon, Binance Smart Chain, and Solana</li> <li>Performance-based reward distribution mechanism</li> <li>Governance features for protocol upgrades and parameter adjustments</li> <li>Staking mechanisms for enhanced rewards</li> </ul>"},{"location":"trust-infrastructure-handbook/#token-economics","title":"Token Economics","text":"<ul> <li>Total Supply: 1,000,000,000 $MAILY</li> <li>Initial Distribution:</li> <li>40% - Community rewards</li> <li>25% - Team and advisors (3-year vesting)</li> <li>20% - Treasury and ecosystem fund</li> <li>10% - Initial sale</li> <li>5% - Strategic partners</li> </ul>"},{"location":"trust-infrastructure-handbook/#smart-contract-implementation","title":"Smart Contract Implementation","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract MailyToken is OFTV2, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens\n    mapping(uint256 =&gt; bool) public campaignProcessed;\n    mapping(address =&gt; mapping(uint256 =&gt; uint256)) public performanceRewards;\n\n    AggregatorV3Interface public emailMetricsOracle;\n\n    event CampaignRewardIssued(address indexed marketer, uint256 indexed campaignId, uint256 amount);\n\n    // Implementation details omitted for brevity - see full source code in repository\n}\n</code></pre>"},{"location":"trust-infrastructure-handbook/#ai-trust-agents","title":"AI Trust Agents","text":"<p>AI Trust Agents are specialized machine learning models that analyze email content, recipient behavior, and campaign performance to increase relevance and engagement. Key features include:</p> <ul> <li>Content optimization recommendations</li> <li>Personalization algorithms for dynamic content</li> <li>Send-time optimization</li> <li>Predictive engagement scoring</li> <li>A/B test automation</li> </ul>"},{"location":"trust-infrastructure-handbook/#ai-agent-architecture","title":"AI Agent Architecture","text":"<p>The AI Trust Agents are implemented as a multi-tier system:</p> <ol> <li>Data Collection Layer: Processes email campaign data, user interactions, and market trends</li> <li>Feature Engineering Layer: Transforms raw data into ML-ready features</li> <li>Model Execution Layer: Runs inference across multiple specialized models</li> <li>Action Recommendation Layer: Translates predictions into actionable recommendations</li> </ol>"},{"location":"trust-infrastructure-handbook/#trust-certificates","title":"Trust Certificates","text":"<p>Trust Certificates are blockchain-verified attestations that prove the authenticity of email campaigns. Each certificate contains:</p> <ul> <li>Campaign metadata (sender, subject, timestamp)</li> <li>Content hash for verification</li> <li>Performance metrics (once campaign completes)</li> <li>Cryptographic signatures</li> <li>Verification instructions for recipients</li> </ul>"},{"location":"trust-infrastructure-handbook/#certificate-implementation","title":"Certificate Implementation","text":"<p>Certificates are implemented using X.509 standard with blockchain anchoring:</p> <pre><code>// Certificate creation pseudocode\nfunction createTrustCertificate(campaign) {\n  const contentHash = sha256(campaign.content);\n  const metadataHash = sha256(JSON.stringify({\n    sender: campaign.sender,\n    subject: campaign.subject,\n    timestamp: campaign.timestamp\n  }));\n\n  // Create X.509 certificate\n  const certificate = X509.create({\n    subject: campaign.sender,\n    issuer: \"Maily Trust Authority\",\n    validFrom: campaign.timestamp,\n    validTo: campaign.timestamp + (90 * 24 * 60 * 60 * 1000), // 90 days\n    extensions: [\n      { oid: '2.5.29.14', value: contentHash }, // Subject Key Identifier\n      { oid: '2.5.29.35', value: metadataHash } // Authority Key Identifier\n    ]\n  });\n\n  // Anchor to blockchain\n  const txHash = await trustContract.registerCertificate(certificate.serialNumber, contentHash);\n\n  return {\n    certificate,\n    txHash,\n    verificationUrl: `https://verify.maily.app/${certificate.serialNumber}`\n  };\n}\n</code></pre>"},{"location":"trust-infrastructure-handbook/#implementation-details","title":"Implementation Details","text":""},{"location":"trust-infrastructure-handbook/#phase-1-core-infrastructure","title":"Phase 1: Core Infrastructure","text":"<p>Phase 1 focuses on establishing the foundational components of the Trust Infrastructure:</p> <ol> <li>Smart Contract Deployment</li> <li>Deploy token contracts on Ethereum mainnet</li> <li>Deploy bridge contracts on secondary chains (Polygon, BSC)</li> <li> <p>Deploy certificate registry contracts</p> </li> <li> <p>Certificate Authority Setup</p> </li> <li>Establish root certificate authority</li> <li>Implement certificate issuance and verification services</li> <li> <p>Create web portal for certificate verification</p> </li> <li> <p>AI Model Training and Deployment</p> </li> <li>Train initial content optimization models</li> <li>Deploy personalization recommendation service</li> <li>Implement A/B testing automation</li> </ol>"},{"location":"trust-infrastructure-handbook/#phase-2-viral-ignition","title":"Phase 2: Viral Ignition","text":"<p>Phase 2 focuses on growth and adoption mechanisms:</p>"},{"location":"trust-infrastructure-handbook/#twitter-trend-monitoring","title":"Twitter Trend Monitoring","text":"<p>Implemented using a sophisticated trend analysis system that: - Monitors real-time Twitter activity - Analyzes trending topics and keywords - Generates relevance scores for potential campaign topics - Recommends optimal timing for trend-related campaigns</p>"},{"location":"trust-infrastructure-handbook/#referral-system","title":"Referral System","text":"<p>Blockchain-based referral tracking with: - Smart contract implementation for reward distribution - Multi-level referral structure - Performance-based bonuses - Viral coefficient optimization</p>"},{"location":"trust-infrastructure-handbook/#trust-score-prediction","title":"Trust Score Prediction","text":"<p>AI-driven trust scoring system that: - Predicts campaign performance metrics - Recommends improvements to increase trust scores - Benchmarks against industry standards - Provides historical performance analysis</p>"},{"location":"trust-infrastructure-handbook/#phase-3-ecosystem-expansion","title":"Phase 3: Ecosystem Expansion","text":"<p>Phase 3 extends the ecosystem with advanced features:</p>"},{"location":"trust-infrastructure-handbook/#self-evolving-trust-rank","title":"Self-Evolving Trust Rank","text":"<ul> <li>Implements a dynamic ranking algorithm</li> <li>Adapts to changing user behaviors and market conditions</li> <li>Uses federated learning for privacy-preserving improvement</li> <li>Incorporates feedback loops for continuous optimization</li> </ul>"},{"location":"trust-infrastructure-handbook/#one-tap-onboarding-extension","title":"One-Tap Onboarding Extension","text":"<ul> <li>Browser extension for simplified onboarding</li> <li>Connects web3 wallets to user accounts</li> <li>Provides in-context trust verification</li> <li>Enhances user security with credential management</li> </ul>"},{"location":"trust-infrastructure-handbook/#staking-mechanics","title":"Staking Mechanics","text":"<ul> <li>Enables token staking for enhanced rewards</li> <li>Implements time-locked staking contracts</li> <li>Provides liquidity mining opportunities</li> <li>Rewards long-term platform engagement</li> </ul>"},{"location":"trust-infrastructure-handbook/#production-deployment","title":"Production Deployment","text":"<p>The Trust Infrastructure is deployed across multiple environments:</p> <ol> <li>Blockchain Components:</li> <li>Ethereum mainnet for primary contracts</li> <li>Layer 2 solutions (Arbitrum, Optimism) for cost-effective operations</li> <li> <p>Cross-chain bridges to Polygon and BSC</p> </li> <li> <p>Cloud Infrastructure:</p> </li> <li>Kubernetes clusters on AWS for AI Trust Agents</li> <li>Certificate Authority on isolated, hardened instances</li> <li> <p>Integration Layer via serverless functions</p> </li> <li> <p>Monitoring and Alerting:</p> </li> <li>Real-time blockchain transaction monitoring</li> <li>Smart contract health checks</li> <li>AI agent performance metrics</li> <li>Certificate issuance and verification logs</li> </ol>"},{"location":"trust-infrastructure-handbook/#deployment-architecture","title":"Deployment Architecture","text":"<p>The production deployment follows a multi-region, high-availability architecture with disaster recovery capabilities.</p>"},{"location":"trust-infrastructure-handbook/#development-guidelines","title":"Development Guidelines","text":""},{"location":"trust-infrastructure-handbook/#smart-contract-development","title":"Smart Contract Development","text":"<ul> <li>Follow OpenZeppelin security best practices</li> <li>Use Hardhat for local development and testing</li> <li>Implement comprehensive test coverage (&gt;95%)</li> <li>Always conduct external audits before deployment</li> </ul>"},{"location":"trust-infrastructure-handbook/#ai-agent-development","title":"AI Agent Development","text":"<ul> <li>Train models using anonymized campaign data</li> <li>Implement ethical AI guidelines and bias detection</li> <li>Version all models with immutable references</li> <li>Deploy using containerized environments</li> </ul>"},{"location":"trust-infrastructure-handbook/#security-considerations","title":"Security Considerations","text":"<p>The Trust Infrastructure implements multiple security layers:</p> <ol> <li>Smart Contract Security:</li> <li>External audits by multiple firms</li> <li>Formal verification where possible</li> <li>Time-locked upgrades with multi-sig governance</li> <li> <p>Emergency pause mechanisms</p> </li> <li> <p>AI System Security:</p> </li> <li>Model poisoning defenses</li> <li>Adversarial input detection</li> <li>Privacy-preserving computation techniques</li> <li> <p>Regular vulnerability assessments</p> </li> <li> <p>Certificate Authority Security:</p> </li> <li>Hardware security modules for key protection</li> <li>Rotation policies for cryptographic materials</li> <li>Air-gapped signing environments</li> <li>Comprehensive audit logs</li> </ol>"},{"location":"trust-infrastructure-handbook/#monitoring-maintenance","title":"Monitoring &amp; Maintenance","text":""},{"location":"trust-infrastructure-handbook/#operational-metrics","title":"Operational Metrics","text":"<p>Key metrics monitored in production:</p> <ul> <li>Transaction success rate and gas costs</li> <li>Certificate issuance and verification latency</li> <li>AI agent inference time and accuracy</li> <li>Cross-chain bridge performance</li> </ul>"},{"location":"trust-infrastructure-handbook/#maintenance-procedures","title":"Maintenance Procedures","text":"<p>Regular maintenance includes:</p> <ul> <li>Smart contract upgrades (quarterly or as needed)</li> <li>AI model retraining (monthly)</li> <li>Certificate authority credential rotation (quarterly)</li> <li>Key performance indicator reviews (bi-weekly)</li> </ul>"},{"location":"trust-infrastructure-handbook/#implementation-specific-components","title":"Implementation-Specific Components","text":""},{"location":"trust-infrastructure-handbook/#chainlink-oracle-integration","title":"Chainlink Oracle Integration","text":"<p>Chainlink oracles are used to bring off-chain data onto the blockchain:</p> <pre><code>// apps/blockchain/oracles/email-metrics-adapter.js\nconst { Requester, Validator } = require('@chainlink/external-adapter');\n\n// Define custom parameters\nconst customParams = {\n  campaignId: ['campaignId', 'campaign'],\n  endpoint: false\n};\n\n// Create request handler\nconst createRequest = (input, callback) =&gt; {\n  // Validator implementation\n  // API request implementation\n  // Response processing\n}\n\n// Export the handler for serverless environments\nmodule.exports = { createRequest };\n</code></pre>"},{"location":"trust-infrastructure-handbook/#certificate-implementation_1","title":"Certificate Implementation","text":"<p>The certificate implementation process involves:</p> <ol> <li>Certificate Creation: When a campaign is created, a trust certificate is generated</li> <li>Blockchain Anchoring: Certificate hash is stored on-chain</li> <li>Verification: Recipients can verify certificate authenticity</li> <li>Performance Anchoring: Once campaign completes, performance metrics are added to the certificate</li> </ol>"},{"location":"trust-infrastructure-handbook/#ai-agent-implementation","title":"AI Agent Implementation","text":"<p>AI Agents are implemented using a combination of:</p> <ol> <li>OpenAI models: For content optimization and personalization</li> <li>Custom ML models: For engagement prediction and send-time optimization</li> <li>Federated learning: For privacy-preserving model improvements</li> <li>Reinforcement learning: For continuous optimization</li> </ol>"},{"location":"trust-infrastructure-handbook/#token-implementation-details","title":"Token Implementation Details","text":"<p>The token implementation includes technical details for:</p> <ol> <li>Cross-Chain Bridging: Implementation using LayerZero for cross-chain transfers</li> <li>Performance-Based Minting: Dynamic token minting based on verified campaign performance</li> <li>Governance Implementation: DAO-based governance for protocol parameters</li> <li>Staking Contracts: Time-locked staking for enhanced rewards</li> </ol>"},{"location":"trust-infrastructure-handbook/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<p>Common issues and their solutions:</p> Issue Possible Cause Solution Certificate verification failure Blockchain transaction not confirmed Wait for confirmation or check transaction status Token bridging delay Network congestion Check bridge status or use alternative network AI recommendations outdated Model version mismatch Update agent configuration or restart agent Performance metrics missing Oracle failure Manually verify and trigger oracle update"},{"location":"trust-infrastructure-handbook/#future-roadmap","title":"Future Roadmap","text":""},{"location":"trust-infrastructure-handbook/#short-term-3-6-months","title":"Short-term (3-6 months)","text":"<ul> <li>Add support for additional blockchain networks</li> <li>Enhance AI agent capabilities with new personalization features</li> <li>Improve cross-chain bridging efficiency</li> <li>Introduce decentralized governance mechanisms</li> </ul>"},{"location":"trust-infrastructure-handbook/#medium-term-6-12-months","title":"Medium-term (6-12 months)","text":"<ul> <li>Develop industry partnerships for wider certificate adoption</li> <li>Launch token staking rewards for long-term holders</li> <li>Implement zero-knowledge proofs for enhanced privacy</li> <li>Expand AI capabilities to new content types</li> </ul>"},{"location":"trust-infrastructure-handbook/#long-term-12-months","title":"Long-term (12+ months)","text":"<ul> <li>Fully decentralized certificate authority</li> <li>Industry-wide email authentication standards</li> <li>Advanced cryptographic features (threshold signatures, etc.)</li> <li>Layer 2-native optimization</li> </ul>"},{"location":"trust-infrastructure-handbook/#appendix-technical-reference","title":"Appendix: Technical Reference","text":""},{"location":"trust-infrastructure-handbook/#smart-contract-addresses","title":"Smart Contract Addresses","text":"Network Contract Address Ethereum MailyToken 0x12345... Ethereum CertificateRegistry 0xabcde... Polygon MailyToken 0x67890... BSC MailyToken 0xfghij..."},{"location":"trust-infrastructure-handbook/#api-reference","title":"API Reference","text":"Endpoint Description <code>/api/v1/certificates/create</code> Create new trust certificate <code>/api/v1/certificates/verify/:id</code> Verify certificate authenticity <code>/api/v1/ai/recommend/:campaignId</code> Get AI recommendations <code>/api/v1/tokens/rewards/:campaignId</code> Check reward status"},{"location":"trust-infrastructure-handbook/#development-resources","title":"Development Resources","text":"<ul> <li>GitHub Repository</li> <li>Smart Contract Documentation</li> <li>API Documentation</li> <li>AI Agent Documentation</li> </ul>"},{"location":"user-features/","title":"Maily User Features","text":"<p>Last updated: March 4, 2025</p>"},{"location":"user-features/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Email Campaign Management</li> <li>Campaign Types</li> <li>Email Builder</li> <li>A/B Testing</li> <li>Send Time Optimization</li> <li>Audience Management</li> <li>Audience Segmentation</li> <li>Automation Workflows</li> <li>Subscription Management</li> <li>Contact Management</li> <li>Analytics and Optimization</li> <li>Performance Dashboard</li> <li>Engagement Reports</li> <li>Revenue Attribution</li> <li>Optimization Recommendations</li> <li>AI-Powered Features</li> <li>Content Generation</li> <li>Subject Line Optimization</li> <li>Image Generation</li> <li>Audience Insights</li> <li>Template Management</li> <li>Template Library</li> <li>Template Fragments</li> <li>Design System</li> <li>Integration Capabilities</li> <li>E-commerce Integrations</li> <li>CRM Integrations</li> <li>Analytics Integrations</li> <li>Custom Integrations</li> <li>Deliverability Features</li> <li>Sender Reputation Management</li> <li>Deliverability Dashboard</li> <li>Spam Testing</li> <li>Administrative Features</li> <li>User Management</li> <li>Role-Based Access Control</li> <li>Audit Logs</li> <li>Billing and Subscription</li> </ul>"},{"location":"user-features/#email-campaign-management","title":"Email Campaign Management","text":""},{"location":"user-features/#campaign-types","title":"Campaign Types","text":"<p>Maily supports a comprehensive range of email campaign types to address various marketing needs:</p>"},{"location":"user-features/#one-time-campaigns","title":"One-Time Campaigns","text":"<ul> <li>Standard email blasts to selected audience segments</li> <li>Scheduled sending with timezone awareness</li> <li>Throttled sending for high-volume campaigns</li> <li>Duplicate campaign functionality for recurring or similar campaigns</li> </ul>"},{"location":"user-features/#recurring-campaigns","title":"Recurring Campaigns","text":"<ul> <li>Daily, weekly, monthly, or custom schedule options</li> <li>Automatic content updates via dynamic content blocks</li> <li>Engagement-based schedule adjustments</li> <li>A/B testing capabilities for recurring campaigns</li> </ul>"},{"location":"user-features/#drip-campaigns","title":"Drip Campaigns","text":"<ul> <li>Time-based sequencing of related emails</li> <li>Customizable delays between emails</li> <li>Auto-exit rules based on engagement or conversions</li> <li>Performance analytics specific to the drip sequence</li> </ul>"},{"location":"user-features/#event-triggered-campaigns","title":"Event-Triggered Campaigns","text":"<ul> <li>Real-time responses to user actions</li> <li>Integration with website, app, or CRM events</li> <li>Customizable event definitions</li> <li>Delay options for optimal timing</li> </ul>"},{"location":"user-features/#automated-workflows","title":"Automated Workflows","text":"<ul> <li>Multi-step, conditional email sequences</li> <li>Branch logic based on recipient behavior</li> <li>Integration with other channels (SMS, push notifications)</li> <li>Visual workflow builder</li> </ul>"},{"location":"user-features/#email-builder","title":"Email Builder","text":"<p>The Maily Email Builder provides a versatile platform for creating engaging emails:</p>"},{"location":"user-features/#visual-editor","title":"Visual Editor","text":"<ul> <li>Drag-and-drop interface for non-technical users</li> <li>Real-time preview of design changes</li> <li>Mobile, desktop, and inbox previews</li> <li>Accessibility checker for WCAG compliance</li> <li>Save custom sections as reusable blocks</li> </ul>"},{"location":"user-features/#html-editor","title":"HTML Editor","text":"<ul> <li>Full HTML/CSS editing capabilities</li> <li>Code highlighting and auto-completion</li> <li>Responsive email code validation</li> <li>Custom MJML integration</li> <li>HTML import/export functionality</li> </ul>"},{"location":"user-features/#content-features","title":"Content Features","text":"<ul> <li>Rich text formatting with comprehensive options</li> <li>Image editor with basic manipulation tools</li> <li>Personalization token system</li> <li>Conditional content blocks</li> <li>Dynamic content based on recipient data</li> <li>Countdown timers and other interactive elements</li> </ul>"},{"location":"user-features/#design-tools","title":"Design Tools","text":"<ul> <li>Brand kit integration for consistent design</li> <li>Color picker with brand palette</li> <li>Typography controls with web-safe fonts</li> <li>Spacing and layout controls</li> <li>Background patterns and gradients</li> <li>Border and shadow customization</li> </ul>"},{"location":"user-features/#ab-testing","title":"A/B Testing","text":"<p>Maily's A/B testing framework allows marketers to optimize email performance:</p>"},{"location":"user-features/#test-types","title":"Test Types","text":"<ul> <li>Subject line testing (up to 5 variants)</li> <li>Sender name testing</li> <li>Email content testing</li> <li>Send time testing</li> <li>Full email design testing</li> </ul>"},{"location":"user-features/#test-configuration","title":"Test Configuration","text":"<ul> <li>Sample size calculator</li> <li>Test duration recommendations</li> <li>Winner selection criteria (opens, clicks, conversions)</li> <li>Automatic or manual winner selection</li> <li>Statistical significance calculator</li> </ul>"},{"location":"user-features/#results-analysis","title":"Results Analysis","text":"<ul> <li>Real-time results monitoring</li> <li>Detailed metrics comparison</li> <li>Confidence scoring for statistical validity</li> <li>Recommendations for future tests</li> <li>Historical test library with learnings</li> </ul>"},{"location":"user-features/#advanced-features","title":"Advanced Features","text":"<ul> <li>Multivariate testing (test multiple elements simultaneously)</li> <li>Segmented A/B testing (different tests for different segments)</li> <li>Automatic application of winner to future campaigns</li> <li>A/B test templates for quick setup</li> </ul>"},{"location":"user-features/#send-time-optimization","title":"Send Time Optimization","text":"<p>Optimize email delivery timing for maximum engagement:</p>"},{"location":"user-features/#ai-powered-timing","title":"AI-Powered Timing","text":"<ul> <li>Machine learning models analyze historical engagement patterns</li> <li>Individual-level send time optimization</li> <li>Time zone awareness and adjustments</li> <li>Day of week optimization</li> </ul>"},{"location":"user-features/#configuration-options","title":"Configuration Options","text":"<ul> <li>Send window definition (time range for delivery)</li> <li>Delivery speed controls (immediate vs. optimal)</li> <li>Priority settings for time-sensitive content</li> <li>Fallback rules for new subscribers without history</li> </ul>"},{"location":"user-features/#analytics","title":"Analytics","text":"<ul> <li>Engagement lift reporting</li> <li>Optimal time visualization by segment</li> <li>Performance comparison with non-optimized campaigns</li> </ul>"},{"location":"user-features/#audience-management","title":"Audience Management","text":""},{"location":"user-features/#audience-segmentation","title":"Audience Segmentation","text":"<p>Create targeted recipient groups based on various criteria:</p>"},{"location":"user-features/#segmentation-criteria","title":"Segmentation Criteria","text":"<ul> <li>Demographic data (location, age, gender, etc.)</li> <li>Engagement history (opens, clicks, conversions)</li> <li>Purchase behavior (products, frequency, value)</li> <li>Website/app behavior (pages visited, features used)</li> <li>Custom fields and attributes</li> <li>Subscription status and preferences</li> </ul>"},{"location":"user-features/#segment-types","title":"Segment Types","text":"<ul> <li>Static segments (manually created lists)</li> <li>Dynamic segments (rule-based, automatically updated)</li> <li>Lookalike segments (AI-generated based on top performers)</li> <li>Exclusion segments (suppress certain recipients)</li> <li>Intersection segments (combinations of other segments)</li> </ul>"},{"location":"user-features/#management-features","title":"Management Features","text":"<ul> <li>Visual segment builder with intuitive UI</li> <li>Estimated audience size calculator</li> <li>Segment overlap analysis</li> <li>Segment performance comparison</li> <li>Import/export functionality</li> <li>Scheduled segment updates</li> </ul>"},{"location":"user-features/#advanced-segmentation","title":"Advanced Segmentation","text":"<ul> <li>Predictive segments based on likelihood to engage/convert</li> <li>Behavioral segmentation based on engagement patterns</li> <li>RFM (Recency, Frequency, Monetary) segmentation</li> <li>Custom scoring models for lead qualification</li> </ul>"},{"location":"user-features/#automation-workflows","title":"Automation Workflows","text":"<p>Create sophisticated marketing automations:</p>"},{"location":"user-features/#workflow-builder","title":"Workflow Builder","text":"<ul> <li>Visual canvas for creating automations</li> <li>Drag-and-drop interface for adding steps</li> <li>Branching logic based on recipient actions</li> <li>Time delays and scheduling options</li> <li>Copy and duplicate workflow functionality</li> </ul>"},{"location":"user-features/#trigger-types","title":"Trigger Types","text":"<ul> <li>List subscription/form submission</li> <li>Email engagement (opens, clicks)</li> <li>Website behavior (page visits, abandoned carts)</li> <li>Purchase or transaction</li> <li>Custom events from integrated systems</li> <li>Date-based triggers (birthdays, anniversaries)</li> <li>Re-engagement triggers (inactivity for specified period)</li> </ul>"},{"location":"user-features/#action-types","title":"Action Types","text":"<ul> <li>Send email</li> <li>Update contact properties</li> <li>Add/remove from segments</li> <li>Notify team members</li> <li>Push to CRM or other integrated systems</li> <li>Wait for specific conditions</li> <li>Exit workflow based on criteria</li> </ul>"},{"location":"user-features/#workflow-analytics","title":"Workflow Analytics","text":"<ul> <li>Performance metrics for each step</li> <li>Conversion funnel visualization</li> <li>Drop-off analysis</li> <li>A/B testing within workflows</li> <li>ROI calculation for workflow campaigns</li> </ul>"},{"location":"user-features/#subscription-management","title":"Subscription Management","text":"<p>Tools for compliant and effective list management:</p>"},{"location":"user-features/#subscription-methods","title":"Subscription Methods","text":"<ul> <li>Hosted signup forms with customizable fields</li> <li>Embeddable forms for websites</li> <li>Landing page builder for campaigns</li> <li>API endpoints for custom integration</li> <li>CSV import with validation</li> <li>QR code signup generation</li> </ul>"},{"location":"user-features/#compliance-features","title":"Compliance Features","text":"<ul> <li>Double opt-in workflows</li> <li>GDPR-compliant consent tracking</li> <li>Custom consent fields and language</li> <li>Geographical compliance settings</li> <li>Privacy policy integration</li> <li>Consent timestamp and IP logging</li> </ul>"},{"location":"user-features/#preference-center","title":"Preference Center","text":"<ul> <li>Self-service subscription management</li> <li>Email frequency options</li> <li>Interest-based preferences</li> <li>Communication channel selection</li> <li>Custom preference fields</li> <li>Brand-consistent design customization</li> </ul>"},{"location":"user-features/#list-hygiene","title":"List Hygiene","text":"<ul> <li>Automatic bounce management</li> <li>Unengaged subscriber identification</li> <li>Re-engagement campaign tools</li> <li>Dormant account pruning</li> <li>SMTP error handling and categorization</li> <li>Data quality scoring</li> </ul>"},{"location":"user-features/#contact-management","title":"Contact Management","text":"<p>Comprehensive tools for managing recipient data:</p>"},{"location":"user-features/#contact-profiles","title":"Contact Profiles","text":"<ul> <li>Unified view of subscriber information</li> <li>Engagement history timeline</li> <li>Custom field support</li> <li>Segment membership</li> <li>Purchase history (from integrations)</li> <li>Communication preferences</li> <li>Activity log</li> </ul>"},{"location":"user-features/#data-management","title":"Data Management","text":"<ul> <li>Duplicate detection and merging</li> <li>Bulk update capabilities</li> <li>Custom field creation and management</li> <li>Data format standardization</li> <li>Data enrichment via third-party services</li> <li>Contact scoring and ranking</li> </ul>"},{"location":"user-features/#organization-features","title":"Organization Features","text":"<ul> <li>Tags and labeling system</li> <li>Custom views and filters</li> <li>Saved searches</li> <li>Export options</li> <li>Contact assignments to team members</li> <li>Notes and internal comments</li> </ul>"},{"location":"user-features/#analytics-and-optimization","title":"Analytics and Optimization","text":""},{"location":"user-features/#performance-dashboard","title":"Performance Dashboard","text":"<p>Comprehensive analytics to track email marketing performance:</p>"},{"location":"user-features/#overview-dashboard","title":"Overview Dashboard","text":"<ul> <li>Key performance indicators at a glance</li> <li>Real-time campaign tracking</li> <li>Comparative metrics (vs. previous periods)</li> <li>Goal tracking and attainment</li> <li>Engagement trends over time</li> <li>Device and client breakdown</li> </ul>"},{"location":"user-features/#metric-types","title":"Metric Types","text":"<ul> <li>Delivery metrics (sent, delivered, bounced)</li> <li>Engagement metrics (opens, clicks, CTR)</li> <li>Conversion metrics (actions, purchases, revenue)</li> <li>List health metrics (growth, churn, engagement distribution)</li> <li>Comparative benchmarks for your industry</li> </ul>"},{"location":"user-features/#visualization-options","title":"Visualization Options","text":"<ul> <li>Interactive charts and graphs</li> <li>Heat maps for click distribution</li> <li>Geographical maps for location data</li> <li>Funnel visualizations for conversion paths</li> <li>Custom date range selection</li> <li>Data export in multiple formats</li> </ul>"},{"location":"user-features/#custom-reporting","title":"Custom Reporting","text":"<ul> <li>Report builder with drag-and-drop metrics</li> <li>Scheduled report delivery</li> <li>White-label reporting for agencies</li> <li>Report templates for common analyses</li> <li>Annotation capabilities for insights</li> </ul>"},{"location":"user-features/#engagement-reports","title":"Engagement Reports","text":"<p>Detailed analysis of how recipients interact with emails:</p>"},{"location":"user-features/#email-engagement","title":"Email Engagement","text":"<ul> <li>Open tracking with time analysis</li> <li>Click tracking with link-specific data</li> <li>Engagement time measurement</li> <li>Multiple device tracking</li> <li>Forwarding and sharing detection</li> <li>Reply tracking and management</li> </ul>"},{"location":"user-features/#engagement-segmentation","title":"Engagement Segmentation","text":"<ul> <li>Performance by audience segment</li> <li>Device and email client breakdown</li> <li>Geographical performance differences</li> <li>Time-of-day engagement patterns</li> <li>Engagement by content type</li> <li>New vs. returning subscriber comparison</li> </ul>"},{"location":"user-features/#engagement-scoring","title":"Engagement Scoring","text":"<ul> <li>Individual engagement scoring</li> <li>Segment engagement scoring</li> <li>Engagement trends over time</li> <li>Predictive engagement modeling</li> <li>Re-engagement opportunity identification</li> </ul>"},{"location":"user-features/#advanced-analysis","title":"Advanced Analysis","text":"<ul> <li>Path analysis across multiple campaigns</li> <li>Cohort analysis for long-term patterns</li> <li>Content effectiveness correlation</li> <li>Subject line performance analysis</li> <li>Send time effectiveness review</li> </ul>"},{"location":"user-features/#revenue-attribution","title":"Revenue Attribution","text":"<p>Connect email campaigns directly to business results:</p>"},{"location":"user-features/#attribution-models","title":"Attribution Models","text":"<ul> <li>Last-click attribution</li> <li>First-click attribution</li> <li>Linear attribution across touchpoints</li> <li>Time-decay attribution</li> <li>Custom attribution models</li> <li>Multi-channel attribution integration</li> </ul>"},{"location":"user-features/#revenue-tracking","title":"Revenue Tracking","text":"<ul> <li>Direct sales tracking</li> <li>Average order value analysis</li> <li>Product performance by campaign</li> <li>Revenue per subscriber calculations</li> <li>Lifetime value projections based on email engagement</li> <li>ROI and ROAS calculations</li> </ul>"},{"location":"user-features/#conversion-tracking","title":"Conversion Tracking","text":"<ul> <li>Goal conversion tracking</li> <li>Custom conversion event definition</li> <li>Conversion path analysis</li> <li>Assisted conversions identification</li> <li>Time-to-conversion metrics</li> <li>View-through conversions (where applicable)</li> </ul>"},{"location":"user-features/#e-commerce-analytics","title":"E-commerce Analytics","text":"<ul> <li>Product recommendation effectiveness</li> <li>Abandoned cart recovery performance</li> <li>Category performance by segment</li> <li>Repeat purchase analysis</li> <li>Promotional effectiveness comparison</li> <li>Seasonal trend identification</li> </ul>"},{"location":"user-features/#optimization-recommendations","title":"Optimization Recommendations","text":"<p>AI-driven insights to improve email performance:</p>"},{"location":"user-features/#content-recommendations","title":"Content Recommendations","text":"<ul> <li>Subject line enhancement suggestions</li> <li>Content structure improvements</li> <li>Call-to-action optimization</li> <li>Image usage recommendations</li> <li>Length and readability adjustments</li> <li>Personalization opportunities</li> </ul>"},{"location":"user-features/#timing-recommendations","title":"Timing Recommendations","text":"<ul> <li>Optimal send time predictions</li> <li>Campaign frequency suggestions</li> <li>Sequence timing optimization</li> <li>Seasonal adjustment recommendations</li> <li>Time zone strategy recommendations</li> </ul>"},{"location":"user-features/#segmentation-recommendations","title":"Segmentation Recommendations","text":"<ul> <li>Segment refinement suggestions</li> <li>New segment opportunities</li> <li>Segment overlap analysis</li> <li>Underperforming segment alerts</li> <li>High-potential segment identification</li> </ul>"},{"location":"user-features/#testing-recommendations","title":"Testing Recommendations","text":"<ul> <li>A/B test ideas based on performance data</li> <li>Sample size recommendations</li> <li>Test significance projections</li> <li>Multivariate testing opportunities</li> <li>Test prioritization by potential impact</li> </ul>"},{"location":"user-features/#ai-powered-features","title":"AI-Powered Features","text":""},{"location":"user-features/#content-generation","title":"Content Generation","text":"<p>AI-assisted content creation for email campaigns:</p>"},{"location":"user-features/#email-generation","title":"Email Generation","text":"<ul> <li>Complete email drafts from brief descriptions</li> <li>Industry-specific content suggestions</li> <li>Brand voice customization</li> <li>Varying tone and style options</li> <li>Multiple variant generation</li> <li>Seasonal and trending content awareness</li> </ul>"},{"location":"user-features/#component-generation","title":"Component Generation","text":"<ul> <li>Subject line generation (multiple options)</li> <li>Preheader text suggestions</li> <li>Call-to-action variations</li> <li>Product descriptions</li> <li>Introduction and conclusion paragraphs</li> <li>Promotional copy with custom offers</li> </ul>"},{"location":"user-features/#editing-assistance","title":"Editing Assistance","text":"<ul> <li>Content improvement suggestions</li> <li>Readability analysis and enhancement</li> <li>Tone adjustment recommendations</li> <li>Grammar and style checking</li> <li>Engagement prediction for content</li> <li>A11Y improvement suggestions for accessibility</li> </ul>"},{"location":"user-features/#personalization-enhancement","title":"Personalization Enhancement","text":"<ul> <li>Dynamic content block suggestions</li> <li>Personalized product recommendations</li> <li>Individual-level message customization</li> <li>Behavioral trigger identification</li> <li>Next-best-action recommendations</li> <li>Contextually relevant content suggestions</li> </ul>"},{"location":"user-features/#subject-line-optimization","title":"Subject Line Optimization","text":"<p>AI tools to craft high-performing subject lines:</p>"},{"location":"user-features/#generation-features","title":"Generation Features","text":"<ul> <li>Multi-variant subject line creation</li> <li>Personalized subject line suggestions</li> <li>Character count optimization</li> <li>Emoji suggestion and placement</li> <li>Urgency and FOMO-triggering options</li> <li>Question-based subject lines</li> </ul>"},{"location":"user-features/#testing-framework","title":"Testing Framework","text":"<ul> <li>Automated A/B testing setup</li> <li>Performance prediction before sending</li> <li>Historical performance comparison</li> <li>Industry benchmark comparison</li> <li>Subject line element analysis</li> <li>Emotional tone analysis</li> </ul>"},{"location":"user-features/#optimization-tools","title":"Optimization Tools","text":"<ul> <li>Word choice recommendations</li> <li>Length optimization by device type</li> <li>Spam trigger word detection</li> <li>Clickbait avoidance guidance</li> <li>Open rate prediction</li> <li>Subject line scoring system</li> </ul>"},{"location":"user-features/#image-generation","title":"Image Generation","text":"<p>Create custom visuals for email campaigns:</p>"},{"location":"user-features/#generation-capabilities","title":"Generation Capabilities","text":"<ul> <li>Product showcase images</li> <li>Promotional banner creation</li> <li>Hero image generation</li> <li>Icon and illustration creation</li> <li>Background pattern generation</li> <li>Seasonal theme variations</li> </ul>"},{"location":"user-features/#customization-options","title":"Customization Options","text":"<ul> <li>Brand color application</li> <li>Style consistency controls</li> <li>Text overlay integration</li> <li>Aspect ratio customization</li> <li>Resolution optimization for email</li> <li>Image sequence creation for animated GIFs</li> </ul>"},{"location":"user-features/#integration-features","title":"Integration Features","text":"<ul> <li>Direct insertion into email templates</li> <li>Image library management</li> <li>Variation generation from existing images</li> <li>Auto-sizing for responsive designs</li> <li>Alt text generation</li> <li>Image performance optimization</li> </ul>"},{"location":"user-features/#audience-insights","title":"Audience Insights","text":"<p>AI-driven analysis of subscriber behavior and preferences:</p>"},{"location":"user-features/#behavioral-analysis","title":"Behavioral Analysis","text":"<ul> <li>Engagement pattern recognition</li> <li>Content preference identification</li> <li>Purchase behavior prediction</li> <li>Optimal frequency determination</li> <li>Churn risk assessment</li> <li>High-value customer identification</li> </ul>"},{"location":"user-features/#segmentation-intelligence","title":"Segmentation Intelligence","text":"<ul> <li>Automatic segment suggestion</li> <li>Lookalike audience generation</li> <li>Interest category clustering</li> <li>Engagement-based segmentation</li> <li>Lifecycle stage identification</li> <li>Purchase intent signals</li> </ul>"},{"location":"user-features/#predictive-analytics","title":"Predictive Analytics","text":"<ul> <li>Open and click prediction</li> <li>Conversion likelihood scoring</li> <li>Lifetime value forecasting</li> <li>Optimal send time prediction</li> <li>Product recommendation generation</li> <li>Churn prevention opportunities</li> </ul>"},{"location":"user-features/#trend-detection","title":"Trend Detection","text":"<ul> <li>Emerging topics of interest</li> <li>Seasonal trend anticipation</li> <li>Content fatigue indicators</li> <li>Rising engagement opportunities</li> <li>Campaign improvement patterns</li> <li>Competitive benchmark shifts</li> </ul>"},{"location":"user-features/#template-management","title":"Template Management","text":""},{"location":"user-features/#template-library","title":"Template Library","text":"<p>Manage and organize email templates efficiently:</p>"},{"location":"user-features/#library-features","title":"Library Features","text":"<ul> <li>Categorized template organization</li> <li>Searchable template repository</li> <li>Tagging and filtering system</li> <li>Preview functionality</li> <li>Usage statistics tracking</li> <li>Version history and comparison</li> </ul>"},{"location":"user-features/#template-types","title":"Template Types","text":"<ul> <li>Marketing campaign templates</li> <li>Transactional email templates</li> <li>Newsletter templates</li> <li>Announcement templates</li> <li>Welcome sequence templates</li> <li>Promotional templates</li> <li>Seasonal and event-specific templates</li> </ul>"},{"location":"user-features/#management-tools","title":"Management Tools","text":"<ul> <li>Duplicate and modify functionality</li> <li>Template sharing across team</li> <li>Archiving and recovery</li> <li>Bulk update capabilities</li> <li>Template testing across devices</li> <li>Export and import options</li> </ul>"},{"location":"user-features/#governance-features","title":"Governance Features","text":"<ul> <li>Approval workflows</li> <li>Branded template protection</li> <li>Required elements enforcement</li> <li>User permissions for templates</li> <li>Template expiration dates</li> <li>Compliance checking</li> </ul>"},{"location":"user-features/#template-fragments","title":"Template Fragments","text":"<p>Create reusable components for email assembly:</p>"},{"location":"user-features/#fragment-types","title":"Fragment Types","text":"<ul> <li>Headers and footers</li> <li>Navigation bars</li> <li>Content blocks</li> <li>Product showcase sections</li> <li>Social media sections</li> <li>Call-to-action buttons</li> <li>Dividers and spacers</li> <li>Legal text and disclaimers</li> </ul>"},{"location":"user-features/#management-features_1","title":"Management Features","text":"<ul> <li>Fragment library organization</li> <li>Version control for fragments</li> <li>Usage tracking across templates</li> <li>Global updates for shared fragments</li> <li>Variation management</li> <li>Preview in context</li> </ul>"},{"location":"user-features/#implementation","title":"Implementation","text":"<ul> <li>Drag-and-drop fragment insertion</li> <li>Parameter customization per use</li> <li>Dynamic content integration</li> <li>Responsive behavior controls</li> <li>Brand variant management</li> <li>Contextual recommendations</li> </ul>"},{"location":"user-features/#design-system","title":"Design System","text":"<p>Maintain consistent branding across all emails:</p>"},{"location":"user-features/#brand-kits","title":"Brand Kits","text":"<ul> <li>Color palette management</li> <li>Typography settings</li> <li>Logo variations and usage</li> <li>Button style definitions</li> <li>Background options</li> <li>Spacing system</li> <li>Email layout grid system</li> </ul>"},{"location":"user-features/#component-library","title":"Component Library","text":"<ul> <li>Styled UI elements</li> <li>Interactive component previews</li> <li>Implementation guidelines</li> <li>Code snippets for developers</li> <li>Accessibility compliance status</li> <li>Cross-client compatibility notes</li> </ul>"},{"location":"user-features/#application","title":"Application","text":"<ul> <li>One-click application to templates</li> <li>Theme switching capability</li> <li>Seasonal variation management</li> <li>Sub-brand management</li> <li>White-label options for agencies</li> <li>Dark mode alternatives</li> </ul>"},{"location":"user-features/#governance","title":"Governance","text":"<ul> <li>Brand guideline documentation</li> <li>Usage examples and best practices</li> <li>Change management process</li> <li>Approval workflows</li> <li>Design system updates and versioning</li> <li>Compliance monitoring</li> </ul>"},{"location":"user-features/#integration-capabilities","title":"Integration Capabilities","text":""},{"location":"user-features/#e-commerce-integrations","title":"E-commerce Integrations","text":"<p>Connect email marketing with online stores:</p>"},{"location":"user-features/#platform-integrations","title":"Platform Integrations","text":"<ul> <li>Shopify integration</li> <li>WooCommerce integration</li> <li>Magento integration</li> <li>BigCommerce integration</li> <li>Custom e-commerce API integration</li> <li>Point-of-sale system integration</li> </ul>"},{"location":"user-features/#functionality","title":"Functionality","text":"<ul> <li>Product catalog synchronization</li> <li>Automated product recommendations</li> <li>Abandoned cart recovery emails</li> <li>Post-purchase follow-up sequences</li> <li>Order confirmation styling</li> <li>Shipping notification customization</li> <li>Review request automation</li> </ul>"},{"location":"user-features/#data-utilization","title":"Data Utilization","text":"<ul> <li>Purchase history segmentation</li> <li>Average order value analysis</li> <li>Product category preferences</li> <li>Replenishment timing prediction</li> <li>Cross-sell and upsell automation</li> <li>Customer lifetime value tracking</li> <li>Loyalty program integration</li> </ul>"},{"location":"user-features/#crm-integrations","title":"CRM Integrations","text":"<p>Sync customer data with CRM systems:</p>"},{"location":"user-features/#platform-integrations_1","title":"Platform Integrations","text":"<ul> <li>Salesforce integration</li> <li>HubSpot integration</li> <li>Microsoft Dynamics integration</li> <li>Zoho CRM integration</li> <li>Custom CRM API integration</li> <li>Webhook support for custom systems</li> </ul>"},{"location":"user-features/#data-synchronization","title":"Data Synchronization","text":"<ul> <li>Bi-directional contact syncing</li> <li>Custom field mapping</li> <li>Tag and list synchronization</li> <li>Engagement data sharing</li> <li>Lead scoring integration</li> <li>Activity logging in CRM</li> <li>Conversion attribution</li> </ul>"},{"location":"user-features/#workflow-integration","title":"Workflow Integration","text":"<ul> <li>CRM-triggered email campaigns</li> <li>Sales team notification workflows</li> <li>Lead nurturing automation</li> <li>Deal stage-based communications</li> <li>Account-based marketing support</li> <li>Sales and marketing alignment tools</li> <li>Service-based email triggers</li> </ul>"},{"location":"user-features/#analytics-integrations","title":"Analytics Integrations","text":"<p>Connect with web and marketing analytics:</p>"},{"location":"user-features/#platform-integrations_2","title":"Platform Integrations","text":"<ul> <li>Google Analytics integration</li> <li>Adobe Analytics integration</li> <li>Mixpanel integration</li> <li>Amplitude integration</li> <li>Custom analytics API integration</li> <li>Data warehouse connections</li> </ul>"},{"location":"user-features/#data-sharing","title":"Data Sharing","text":"<ul> <li>Campaign parameter tracking</li> <li>Cross-channel attribution</li> <li>Customer journey mapping</li> <li>Conversion tracking</li> <li>Traffic source analysis</li> <li>Custom event tracking</li> <li>ROI calculation</li> </ul>"},{"location":"user-features/#enhanced-capabilities","title":"Enhanced Capabilities","text":"<ul> <li>Audience synchronization</li> <li>Retargeting list generation</li> <li>Look-alike audience creation</li> <li>On-site behavior triggered emails</li> <li>Content affinity analysis</li> <li>Predictive modeling with combined data</li> <li>Multi-touch attribution models</li> </ul>"},{"location":"user-features/#custom-integrations","title":"Custom Integrations","text":"<p>Extend Maily's capabilities with custom connections:</p>"},{"location":"user-features/#integration-methods","title":"Integration Methods","text":"<ul> <li>RESTful API</li> <li>GraphQL API</li> <li>Webhooks (inbound and outbound)</li> <li>SFTP data exchange</li> <li>Custom data connectors</li> <li>OAuth authentication support</li> <li>Server-to-server API</li> </ul>"},{"location":"user-features/#use-cases","title":"Use Cases","text":"<ul> <li>Custom data source integration</li> <li>Proprietary system connections</li> <li>Legacy system integration</li> <li>Custom event triggers</li> <li>Specialized industry solutions</li> <li>Multi-channel orchestration</li> <li>Enterprise system integration</li> </ul>"},{"location":"user-features/#development-resources","title":"Development Resources","text":"<ul> <li>API documentation</li> <li>Webhook configuration tools</li> <li>Authentication management</li> <li>Rate limiting information</li> <li>Example code and templates</li> <li>Testing sandbox environments</li> <li>Versioning and change management</li> </ul>"},{"location":"user-features/#deliverability-features","title":"Deliverability Features","text":""},{"location":"user-features/#sender-reputation-management","title":"Sender Reputation Management","text":"<p>Maintain optimal inbox placement:</p>"},{"location":"user-features/#infrastructure","title":"Infrastructure","text":"<ul> <li>Dedicated IP address management</li> <li>IP warming automation</li> <li>DKIM/SPF/DMARC setup and verification</li> <li>Feedback loop processing</li> <li>Domain reputation monitoring</li> <li>IP rotation for high-volume senders</li> <li>Subdomain management for sending types</li> </ul>"},{"location":"user-features/#list-management","title":"List Management","text":"<ul> <li>Bounce processing and categorization</li> <li>Complaint handling and suppression</li> <li>Engagement-based sunset policies</li> <li>Permission and consent tracking</li> <li>Invalid address detection</li> <li>Risk scoring for sending practices</li> <li>Suppression list management</li> </ul>"},{"location":"user-features/#monitoring","title":"Monitoring","text":"<ul> <li>Delivery rate tracking</li> <li>Spam placement monitoring</li> <li>Blacklist monitoring</li> <li>Reputation score tracking</li> <li>ISP-specific delivery reporting</li> <li>Authentication failure alerts</li> <li>Comparative benchmarking</li> </ul>"},{"location":"user-features/#deliverability-dashboard","title":"Deliverability Dashboard","text":"<p>Monitor and manage inbox placement:</p>"},{"location":"user-features/#metrics-displayed","title":"Metrics Displayed","text":"<ul> <li>Delivery rates by domain/ISP</li> <li>Inbox placement rates</li> <li>Spam folder placement rates</li> <li>Authentication pass rates</li> <li>Bounce categorization</li> <li>Complaint rates</li> <li>Block/deferral tracking</li> </ul>"},{"location":"user-features/#analysis-tools","title":"Analysis Tools","text":"<ul> <li>Trend visualization over time</li> <li>Campaign-specific deliverability analysis</li> <li>Segment-specific deliverability analysis</li> <li>Send volume impact analysis</li> <li>Content analysis for spam triggers</li> <li>Infrastructure health checks</li> <li>Comparative benchmarks</li> </ul>"},{"location":"user-features/#alert-system","title":"Alert System","text":"<ul> <li>Deliverability issue alerts</li> <li>Threshold-based notifications</li> <li>ISP-specific problem detection</li> <li>Authentication failure alerts</li> <li>Sudden change detection</li> <li>Blacklist monitoring alerts</li> <li>Reputation score drop alerts</li> </ul>"},{"location":"user-features/#spam-testing","title":"Spam Testing","text":"<p>Pre-check emails for deliverability issues:</p>"},{"location":"user-features/#testing-capabilities","title":"Testing Capabilities","text":"<ul> <li>Spam filter testing across major ISPs</li> <li>Content analysis for spam triggers</li> <li>Subject line spam scoring</li> <li>HTML code quality checking</li> <li>Image-to-text ratio analysis</li> <li>Link reputation checking</li> <li>Authentication verification</li> </ul>"},{"location":"user-features/#testing-process","title":"Testing Process","text":"<ul> <li>Pre-flight deliverability check</li> <li>Rendered email previews by client</li> <li>Spam score calculation</li> <li>Improvement recommendations</li> <li>A/B test for deliverability</li> <li>Mobile-specific spam analysis</li> <li>International delivery testing</li> </ul>"},{"location":"user-features/#remediation-support","title":"Remediation Support","text":"<ul> <li>Issue identification and explanation</li> <li>Fix recommendations with examples</li> <li>Comparative improvement tracking</li> <li>Template-level optimization</li> <li>Deliverability best practices</li> <li>ISP-specific optimization</li> <li>Historical improvement tracking</li> </ul>"},{"location":"user-features/#administrative-features","title":"Administrative Features","text":""},{"location":"user-features/#user-management","title":"User Management","text":"<p>Manage team access and permissions:</p>"},{"location":"user-features/#user-types","title":"User Types","text":"<ul> <li>Administrator accounts</li> <li>Marketing team accounts</li> <li>Content creator accounts</li> <li>Analyst accounts</li> <li>Agency/client accounts</li> <li>API users</li> <li>View-only accounts</li> </ul>"},{"location":"user-features/#management-features_2","title":"Management Features","text":"<ul> <li>User provisioning and deprovisioning</li> <li>Self-service account management</li> <li>Directory service integration (SSO)</li> <li>Two-factor authentication</li> <li>Password policy enforcement</li> <li>Login history and security logs</li> <li>Session management</li> </ul>"},{"location":"user-features/#team-organization","title":"Team Organization","text":"<ul> <li>Team/department grouping</li> <li>Hierarchical management structure</li> <li>User activity dashboards</li> <li>Workload distribution tools</li> <li>Collaboration features</li> <li>Knowledge sharing tools</li> <li>Training mode for new users</li> </ul>"},{"location":"user-features/#role-based-access-control","title":"Role-Based Access Control","text":"<p>Granular control over system permissions:</p>"},{"location":"user-features/#permission-structure","title":"Permission Structure","text":"<ul> <li>Pre-defined role templates</li> <li>Custom role creation</li> <li>Feature-level permissions</li> <li>Data access controls</li> <li>Approval workflow permissions</li> <li>Report access permissions</li> <li>System setting permissions</li> </ul>"},{"location":"user-features/#implementation-features","title":"Implementation Features","text":"<ul> <li>Visual permission editor</li> <li>Permission inheritance</li> <li>Temporary permission grants</li> <li>Emergency access protocols</li> <li>Least-privilege enforcement</li> <li>Separation of duties controls</li> <li>Permission audit reports</li> </ul>"},{"location":"user-features/#governance_1","title":"Governance","text":"<ul> <li>Permission review workflows</li> <li>Change tracking for permissions</li> <li>Role usage analytics</li> <li>Compliance templates for regulations</li> <li>Access certification processes</li> <li>Dormant account detection</li> <li>Privileged account management</li> </ul>"},{"location":"user-features/#audit-logs","title":"Audit Logs","text":"<p>Track system changes for security and compliance:</p>"},{"location":"user-features/#events-tracked","title":"Events Tracked","text":"<ul> <li>Login/logout events</li> <li>Permission changes</li> <li>Campaign creation and modification</li> <li>Template changes</li> <li>Segment changes</li> <li>Contact data changes</li> <li>Configuration changes</li> <li>Data exports and imports</li> </ul>"},{"location":"user-features/#log-features","title":"Log Features","text":"<ul> <li>Searchable log interface</li> <li>Filtering by event type, user, date</li> <li>Export capabilities</li> <li>Log retention policies</li> <li>Tamper-evident logging</li> <li>Alert configuration</li> <li>Compliance reporting</li> </ul>"},{"location":"user-features/#security-features","title":"Security Features","text":"<ul> <li>Immutable log storage</li> <li>Log integrity verification</li> <li>Access controls for logs</li> <li>Integration with SIEM systems</li> <li>Anomaly detection</li> <li>Correlation analysis</li> <li>Investigation tools</li> </ul>"},{"location":"user-features/#billing-and-subscription","title":"Billing and Subscription","text":"<p>Manage account plans and billing:</p>"},{"location":"user-features/#plan-management","title":"Plan Management","text":"<ul> <li>Subscription plan details</li> <li>Feature availability by plan</li> <li>Usage limits and tracking</li> <li>Upgrade/downgrade workflows</li> <li>Custom plan configuration</li> <li>Add-on management</li> <li>Promotional offers</li> </ul>"},{"location":"user-features/#billing-features","title":"Billing Features","text":"<ul> <li>Invoice generation and history</li> <li>Payment method management</li> <li>Billing cycle management</li> <li>Pro-ration for plan changes</li> <li>Tax calculation and management</li> <li>Currency options</li> <li>Receipt generation</li> </ul>"},{"location":"user-features/#usage-reporting","title":"Usage Reporting","text":"<ul> <li>Email send volume tracking</li> <li>Storage usage monitoring</li> <li>API call monitoring</li> <li>User seat utilization</li> <li>Feature usage analytics</li> <li>Threshold alerts and notifications</li> <li>Historical usage trends</li> </ul>"},{"location":"archive/MAILY-trust-infrastructure-implementation/","title":"MAILY Trust Infrastructure Implementation Plan","text":"<p>This document outlines the production-grade implementation plan for integrating blockchain-verified metrics, AI-driven personalization, and a trust-based ecosystem into the Maily platform.</p>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Architecture Overview</li> <li>Phase 1: Trust Infrastructure</li> <li>1. Cross-Chain $MAILY Token Implementation</li> <li>2. AI Trust Agents</li> <li>3. Trust Certificates</li> <li>Phase 2: Viral Ignition</li> <li>1. Twitter Trend Monitoring</li> <li>2. Referral System</li> <li>3. Trust Score Prediction</li> <li>Phase 3: Ecosystem Expansion</li> <li>1. Self-Evolving Trust Rank</li> <li>2. One-Tap Onboarding Extension</li> <li>3. Staking Mechanics</li> <li>Security Considerations</li> <li>Performance Optimizations</li> <li>Testing Strategy</li> </ul>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#overview","title":"Overview","text":"<p>The MAILY Trust Infrastructure introduces blockchain technology and advanced AI to create a transparent, verifiable system for email marketing, establishing trust between marketers and recipients while driving organic growth through engagement incentives.</p>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#architecture-overview","title":"Architecture Overview","text":"<p>The architecture introduces:</p> <ol> <li>Blockchain Layer: Smart contracts for token minting, trust certificates, and rewards</li> <li>AI Trust Layer: Enhanced AI models for personalization and trend prediction</li> <li>User Engagement Layer: Referral systems, trust scores, and staking mechanics</li> </ol>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#phase-1-trust-infrastructure","title":"Phase 1: Trust Infrastructure","text":""},{"location":"archive/MAILY-trust-infrastructure-implementation/#1-cross-chain-maily-token-implementation","title":"1. Cross-Chain $MAILY Token Implementation","text":""},{"location":"archive/MAILY-trust-infrastructure-implementation/#smart-contract-development","title":"Smart Contract Development","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract MailyToken is OFTV2, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens\n    mapping(uint256 =&gt; bool) public campaignProcessed;\n    mapping(address =&gt; mapping(uint256 =&gt; uint256)) public performanceRewards;\n\n    AggregatorV3Interface public emailMetricsOracle;\n\n    event CampaignRewardIssued(address indexed marketer, uint256 indexed campaignId, uint256 amount);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _layerZeroEndpoint,\n        address _oracleAddress\n    ) OFTV2(_name, _symbol, 18, _layerZeroEndpoint) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        emailMetricsOracle = AggregatorV3Interface(_oracleAddress);\n\n        // Mint initial supply\n        _mint(msg.sender, MAX_SUPPLY / 2);\n    }\n\n    function mintBasedOnPerformance(\n        address marketer,\n        uint256 campaignId,\n        uint256 openRate,\n        uint256 clickRate\n    ) external onlyRole(MINTER_ROLE) {\n        require(!campaignProcessed[campaignId], \"Campaign already processed\");\n\n        // Calculate reward based on open rate and click rate\n        uint256 reward = (openRate * 5 + clickRate * 10) * 10**16;\n        require(totalSupply() + reward &lt;= MAX_SUPPLY, \"Exceeds max supply\");\n\n        _mint(marketer, reward);\n        performanceRewards[marketer][campaignId] = reward;\n        campaignProcessed[campaignId] = true;\n\n        emit CampaignRewardIssued(marketer, campaignId, reward);\n    }\n\n    function updateOracleAddress(address _oracleAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        emailMetricsOracle = AggregatorV3Interface(_oracleAddress);\n    }\n\n    // Override required function in AccessControl\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl, OFTV2) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#chainlink-oracle-service","title":"Chainlink Oracle Service","text":"<p>Create a custom Chainlink External Adapter to fetch and verify email metrics:</p> <pre><code>// apps/blockchain/oracles/email-metrics-adapter.js\nconst { Requester, Validator } = require('@chainlink/external-adapter');\n\n// Define custom error messages\nconst customError = (data) =&gt; {\n  if (data.Response === 'Error') return true;\n  return false;\n};\n\n// Define custom parameters\nconst customParams = {\n  campaignId: ['campaignId', 'campaign'],\n  endpoint: false\n};\n\n// Create request handler\nconst createRequest = (input, callback) =&gt; {\n  // Validate input data\n  const validator = new Validator(input, customParams);\n  const jobRunID = validator.validated.id;\n  const campaignId = validator.validated.data.campaignId;\n  const endpoint = validator.validated.data.endpoint || 'metrics';\n  const url = `https://api.maily.app/campaigns/${campaignId}/${endpoint}`;\n\n  // Set request options\n  const params = {\n    campaignId\n  };\n\n  // Make the request to the API\n  Requester.request(url, params)\n    .then(response =&gt; {\n      response.data.result = {\n        openRate: response.data.metrics.openRate * 100, // Convert to basis points (0.15 -&gt; 15)\n        clickRate: response.data.metrics.clickRate * 100, // Convert to basis points\n        bounceRate: response.data.metrics.bounceRate * 100, // Convert to basis points\n        timestamp: Math.floor(Date.now() / 1000)\n      };\n\n      callback(response.status, Requester.success(jobRunID, response));\n    })\n    .catch(error =&gt; {\n      callback(500, Requester.errored(jobRunID, error));\n    });\n};\n\n// Export handler for serverless function\nmodule.exports.createRequest = createRequest;\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#integration-with-maily-backend","title":"Integration with Maily Backend","text":"<p>Update the campaign service to log metrics on-chain after campaign execution:</p> <pre><code>// apps/api/services/campaign_service.py\nimport os\nimport json\nfrom typing import Dict, Any\nimport httpx\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom web3 import Web3\n\nfrom ..models import Campaign, CampaignMetrics\n\nclass BlockchainService:\n    def __init__(self):\n        self.private_key = os.getenv(\"BLOCKCHAIN_PRIVATE_KEY\")\n        self.account: LocalAccount = Account.from_key(self.private_key)\n        self.w3 = Web3(Web3.HTTPProvider(os.getenv(\"ETHEREUM_RPC_URL\")))\n\n        # Load ABI from file\n        with open(\"contracts/MailyToken.json\") as f:\n            contract_json = json.load(f)\n            self.abi = contract_json[\"abi\"]\n\n        self.contract_address = os.getenv(\"MAILY_TOKEN_ADDRESS\")\n        self.contract = self.w3.eth.contract(address=self.contract_address, abi=self.abi)\n\n    async def record_campaign_metrics(self, campaign_id: int, metrics: CampaignMetrics, marketer_address: str):\n        \"\"\"Record campaign metrics to blockchain via Chainlink Oracle\"\"\"\n\n        # Call Oracle to update metrics (this triggers the Oracle to fetch and verify data)\n        oracle_url = os.getenv(\"CHAINLINK_ORACLE_URL\")\n        async with httpx.AsyncClient() as client:\n            response = await client.post(oracle_url, json={\n                \"campaignId\": campaign_id,\n                \"marketerAddress\": marketer_address,\n                \"openRate\": metrics.open_rate,\n                \"clickRate\": metrics.click_rate\n            })\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to record metrics on-chain: {response.text}\")\n\n            return response.json()\n\nclass CampaignService:\n    def __init__(self):\n        self.blockchain_service = BlockchainService()\n\n    # ... existing code ...\n\n    async def finalize_campaign(self, campaign_id: int):\n        \"\"\"Finalize a campaign and record metrics on-chain\"\"\"\n        campaign = await self.get_campaign(campaign_id)\n        metrics = await self.calculate_campaign_metrics(campaign_id)\n\n        # Store metrics in database\n        await self.store_campaign_metrics(campaign_id, metrics)\n\n        # Record metrics on blockchain\n        if campaign.blockchain_enabled:\n            marketer_address = campaign.user.wallet_address\n            await self.blockchain_service.record_campaign_metrics(\n                campaign_id,\n                metrics,\n                marketer_address\n            )\n\n        return {\n            \"campaign_id\": campaign_id,\n            \"metrics\": metrics,\n            \"blockchain_verified\": campaign.blockchain_enabled\n        }\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#cross-chain-infrastructure","title":"Cross-Chain Infrastructure","text":"<p>For cross-chain functionality, create Terraform configurations for connecting to multiple chains:</p> <pre><code># infrastructure/terraform/modules/blockchain/main.tf\nresource \"aws_lambda_function\" \"blockchain_bridge\" {\n  function_name    = \"maily-blockchain-bridge\"\n  handler          = \"index.handler\"\n  runtime          = \"nodejs18.x\"\n  role             = aws_iam_role.lambda_role.arn\n  filename         = \"${path.module}/lambda/blockchain-bridge.zip\"\n  source_code_hash = filebase64sha256(\"${path.module}/lambda/blockchain-bridge.zip\")\n  timeout          = 30\n  memory_size      = 512\n\n  environment {\n    variables = {\n      ETHEREUM_RPC_URL       = var.ethereum_rpc_url\n      POLYGON_RPC_URL        = var.polygon_rpc_url\n      ZKSYNC_RPC_URL         = var.zksync_rpc_url\n      MAILY_TOKEN_ETHEREUM   = var.maily_token_ethereum\n      MAILY_TOKEN_POLYGON    = var.maily_token_polygon\n      MAILY_TOKEN_ZKSYNC     = var.maily_token_zksync\n      LAYER_ZERO_ENDPOINT    = var.layer_zero_endpoint\n      KMS_KEY_ID             = aws_kms_key.blockchain_key.id\n    }\n  }\n}\n\nresource \"aws_api_gateway_rest_api\" \"blockchain_api\" {\n  name        = \"maily-blockchain-api\"\n  description = \"API for Maily blockchain operations\"\n}\n\nresource \"aws_api_gateway_resource\" \"bridge\" {\n  rest_api_id = aws_api_gateway_rest_api.blockchain_api.id\n  parent_id   = aws_api_gateway_rest_api.blockchain_api.root_resource_id\n  path_part   = \"bridge\"\n}\n\nresource \"aws_api_gateway_method\" \"bridge_post\" {\n  rest_api_id   = aws_api_gateway_rest_api.blockchain_api.id\n  resource_id   = aws_api_gateway_resource.bridge.id\n  http_method   = \"POST\"\n  authorization_type = \"CUSTOM\"\n  authorizer_id = aws_api_gateway_authorizer.token_authorizer.id\n}\n\nresource \"aws_api_gateway_integration\" \"lambda_integration\" {\n  rest_api_id             = aws_api_gateway_rest_api.blockchain_api.id\n  resource_id             = aws_api_gateway_resource.bridge.id\n  http_method             = aws_api_gateway_method.bridge_post.http_method\n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = aws_lambda_function.blockchain_bridge.invoke_arn\n}\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#database-schema-updates","title":"Database Schema Updates","text":"<p>Add blockchain-related fields to the user and campaign models:</p> <pre><code># apps/api/models/user.py\nfrom sqlalchemy import Boolean, Column, DateTime, ForeignKey, Integer, JSON, String, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\nclass User(Base):\n    \"\"\"User model for the database.\"\"\"\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    username = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    is_admin = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Blockchain fields\n    wallet_address = Column(String, index=True)\n    token_balance = Column(Integer, default=0)\n    trust_rank = Column(String, default=\"Bronze\")\n\n    # Relationships\n    consents = relationship(\"ConsentRecord\", back_populates=\"user\")\n    user_configs = relationship(\"UserConfig\", back_populates=\"user\")\n    campaigns = relationship(\"Campaign\", back_populates=\"user\")\n    templates = relationship(\"EmailTemplate\", back_populates=\"user\")\n    certificates = relationship(\"TrustCertificate\", back_populates=\"user\")\n    stakes = relationship(\"RecipientStake\", back_populates=\"user\")\n\n# apps/api/models/campaign.py\nclass Campaign(Base):\n    \"\"\"Campaign model for the database.\"\"\"\n    __tablename__ = \"campaigns\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    task = Column(Text, nullable=False)\n    status = Column(String, default=\"pending\", nullable=False)\n    result = Column(JSON)\n    metadata = Column(JSON)\n    subject = Column(String)\n    body = Column(Text)\n    image_url = Column(String)\n    analytics_data = Column(JSON)\n    personalization_data = Column(JSON)\n    delivery_data = Column(JSON)\n    template_id = Column(Integer, ForeignKey(\"email_templates.id\"), nullable=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Blockchain fields\n    blockchain_enabled = Column(Boolean, default=False)\n    certificate_id = Column(String, index=True)\n    token_reward = Column(Integer, default=0)\n    trust_score = Column(Integer, default=0)\n\n    # Relationships\n    user = relationship(\"User\", back_populates=\"campaigns\")\n    template = relationship(\"EmailTemplate\", back_populates=\"campaigns\")\n    trust_certificate = relationship(\"TrustCertificate\", back_populates=\"campaign\", uselist=False)\n    stakes = relationship(\"RecipientStake\", back_populates=\"campaign\")\n\nclass TrustCertificate(Base):\n    \"\"\"Trust certificate model.\"\"\"\n    __tablename__ = \"trust_certificates\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    certificate_id = Column(String, unique=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    campaign_id = Column(Integer, ForeignKey(\"campaigns.id\"), nullable=False)\n    metrics_hash = Column(String, nullable=False)\n    blockchain_tx = Column(String, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    # Relationships\n    user = relationship(\"User\", back_populates=\"certificates\")\n    campaign = relationship(\"Campaign\", back_populates=\"trust_certificate\")\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#2-ai-trust-agents","title":"2. AI Trust Agents","text":""},{"location":"archive/MAILY-trust-infrastructure-implementation/#enhanced-ai-model-architecture","title":"Enhanced AI Model Architecture","text":"<p>Create a new AI service for predictive personalization:</p> <pre><code># apps/api/ai/trust_agent.py\nimport os\nimport numpy as np\nimport tensorflow as tf\nfrom typing import Dict, Any, List, Optional\nimport logging\nimport json\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n\nfrom ..config import Settings\nfrom ..models import User, Campaign, CampaignMetrics\nfrom .service import OctoToolsService\n\nlogger = logging.getLogger(__name__)\n\nclass AITrustAgent:\n    \"\"\"AI Trust Agent for predictive personalization.\"\"\"\n\n    def __init__(self, settings: Settings):\n        \"\"\"Initialize the AI Trust Agent.\n\n        Args:\n            settings: Application settings\n        \"\"\"\n        self.settings = settings\n\n        # Initialize TensorFlow model for personalization\n        self._load_personalization_model()\n\n        # Initialize LangChain for content generation\n        self.llm = OpenAI(\n            model_name=\"gpt-4o\",\n            temperature=0.7,\n            api_key=settings.OPENAI_API_KEY\n        )\n\n        # Initialize OctoTools service\n        self.octotools_service = OctoToolsService()\n\n        logger.info(\"AI Trust Agent initialized successfully\")\n\n    def _load_personalization_model(self):\n        \"\"\"Load the TensorFlow personalization model.\"\"\"\n        try:\n            model_path = os.path.join(os.path.dirname(__file__), \"models/personalization_model\")\n            if os.path.exists(model_path):\n                self.personalization_model = tf.keras.models.load_model(model_path)\n                logger.info(\"Personalization model loaded successfully\")\n            else:\n                logger.warning(\"Personalization model not found, creating new model\")\n                self._create_personalization_model()\n        except Exception as e:\n            logger.error(f\"Failed to load personalization model: {str(e)}\")\n            self._create_personalization_model()\n\n    def _create_personalization_model(self):\n        \"\"\"Create a new TensorFlow personalization model.\"\"\"\n        # Create a simple neural network for personalization\n        model = tf.keras.Sequential([\n            tf.keras.layers.Input(shape=(10,)),  # 10 features per user\n            tf.keras.layers.Dense(64, activation='relu'),\n            tf.keras.layers.Dropout(0.2),\n            tf.keras.layers.Dense(32, activation='relu'),\n            tf.keras.layers.Dropout(0.2),\n            tf.keras.layers.Dense(16, activation='relu'),\n            tf.keras.layers.Dense(4, activation='softmax')  # 4 personalization categories\n        ])\n\n        model.compile(\n            optimizer='adam',\n            loss='sparse_categorical_crossentropy',\n            metrics=['accuracy']\n        )\n\n        self.personalization_model = model\n        logger.info(\"Created new personalization model\")\n\n    async def analyze_user(self, user_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Analyze a user to determine personalization profile.\n\n        Args:\n            user_id: User ID\n\n        Returns:\n            Dictionary containing user personalization profile\n        \"\"\"\n        # Get user data\n        # In a real implementation, this would fetch from the database\n        user_data = await self._get_user_data(user_id)\n\n        # Extract features from user data\n        features = self._extract_user_features(user_data)\n\n        # Predict personalization category\n        prediction = self.personalization_model.predict(np.array([features]))\n        category_index = np.argmax(prediction[0])\n        confidence = float(prediction[0][category_index])\n\n        # Map category to personalization strategy\n        categories = [\"informational\", \"promotional\", \"relationship\", \"transactional\"]\n        category = categories[category_index]\n\n        return {\n            \"user_id\": user_id,\n            \"personalization_category\": category,\n            \"confidence\": confidence,\n            \"features\": features.tolist(),\n            \"recommended_approach\": self._get_personalization_approach(category)\n        }\n\n    def _extract_user_features(self, user_data: Dict[str, Any]) -&gt; np.ndarray:\n        \"\"\"Extract features from user data for personalization model.\n\n        Args:\n            user_data: User data dictionary\n\n        Returns:\n            NumPy array of features\n        \"\"\"\n        # Extract relevant features from user data\n        # In a real implementation, this would use actual user behavior data\n        features = np.zeros(10)\n\n        # Example features:\n        # 1. Open rate (0-1)\n        features[0] = user_data.get(\"avg_open_rate\", 0.0)\n\n        # 2. Click rate (0-1)\n        features[1] = user_data.get(\"avg_click_rate\", 0.0)\n\n        # 3. Purchase conversion rate (0-1)\n        features[2] = user_data.get(\"conversion_rate\", 0.0)\n\n        # 4. Email frequency preference (normalized 0-1)\n        features[3] = min(user_data.get(\"email_frequency\", 1) / 7, 1.0)\n\n        # 5. Time since last open (normalized 0-1)\n        days_since_open = user_data.get(\"days_since_open\", 30)\n        features[4] = min(days_since_open / 30, 1.0)\n\n        # 6. Device preference (0=desktop, 0.5=mixed, 1=mobile)\n        features[5] = user_data.get(\"device_preference\", 0.5)\n\n        # 7. Content preference (0=text, 0.5=mixed, 1=image)\n        features[6] = user_data.get(\"content_preference\", 0.5)\n\n        # 8. Engagement time (normalized 0-1, 0=morning, 1=night)\n        features[7] = user_data.get(\"engagement_time\", 0.5)\n\n        # 9. Response to promotions (0-1)\n        features[8] = user_data.get(\"promotion_response\", 0.0)\n\n        # 10. Unsubscribe risk (0-1)\n        features[9] = user_data.get(\"unsubscribe_risk\", 0.0)\n\n        return features\n\n    def _get_personalization_approach(self, category: str) -&gt; Dict[str, Any]:\n        \"\"\"Get personalization approach based on category.\n\n        Args:\n            category: Personalization category\n\n        Returns:\n            Dictionary containing personalization approach\n        \"\"\"\n        approaches = {\n            \"informational\": {\n                \"content_style\": \"educational and fact-based\",\n                \"subject_style\": \"clear and specific\",\n                \"cta_style\": \"learn more or download resources\",\n                \"frequency\": \"weekly\",\n                \"best_time\": \"morning\",\n                \"image_ratio\": 0.3\n            },\n            \"promotional\": {\n                \"content_style\": \"benefit-oriented with offers\",\n                \"subject_style\": \"attention-grabbing with urgency\",\n                \"cta_style\": \"act now, limited time offers\",\n                \"frequency\": \"twice weekly\",\n                \"best_time\": \"lunch or evening\",\n                \"image_ratio\": 0.6\n            },\n            \"relationship\": {\n                \"content_style\": \"personal and conversational\",\n                \"subject_style\": \"friendly and informal\",\n                \"cta_style\": \"soft engagement, feedback requests\",\n                \"frequency\": \"bi-weekly\",\n                \"best_time\": \"evening\",\n                \"image_ratio\": 0.4\n            },\n            \"transactional\": {\n                \"content_style\": \"direct and action-oriented\",\n                \"subject_style\": \"straightforward with clear purpose\",\n                \"cta_style\": \"complete transaction or next steps\",\n                \"frequency\": \"as needed\",\n                \"best_time\": \"business hours\",\n                \"image_ratio\": 0.2\n            }\n        }\n\n        return approaches.get(category, approaches[\"informational\"])\n\n    async def _get_user_data(self, user_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Get user data from database.\n\n        Args:\n            user_id: User ID\n\n        Returns:\n            Dictionary containing user data\n        \"\"\"\n        # In a real implementation, this would fetch from the database\n        # For now, we'll return mock data\n        return {\n            \"user_id\": user_id,\n            \"avg_open_rate\": 0.35,\n            \"avg_click_rate\": 0.12,\n            \"conversion_rate\": 0.05,\n            \"email_frequency\": 2,\n            \"days_since_open\": 3,\n            \"device_preference\": 0.7,  # Mostly mobile\n            \"content_preference\": 0.6,  # Slightly image-heavy\n            \"engagement_time\": 0.8,  # Evening\n            \"promotion_response\": 0.4,\n            \"unsubscribe_risk\": 0.2\n        }\n\n    async def generate_personalized_content(\n        self,\n        campaign_id: int,\n        user_profile: Dict[str, Any],\n        campaign_data: Dict[str, Any]\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Generate personalized content for a user.\n\n        Args:\n            campaign_id: Campaign ID\n            user_profile: User personalization profile\n            campaign_data: Campaign data\n\n        Returns:\n            Dictionary containing personalized content\n        \"\"\"\n        try:\n            # Create prompt template\n            template = \"\"\"\n            Create a personalized email for a recipient with the following profile:\n            - Personalization category: {category}\n            - Content style preference: {content_style}\n            - Subject style preference: {subject_style}\n            - CTA style preference: {cta_style}\n\n            Campaign details:\n            - Campaign objective: {objective}\n            - Main message: {message}\n            - Call to action: {cta}\n            - Target audience: {audience}\n\n            Generate:\n            1. A personalized subject line\n            2. Personalized email body in HTML format\n            3. A short plain text version\n\n            Format your response as JSON with keys: \"subject\", \"html_body\", \"plain_text\"\n            \"\"\"\n\n            prompt = PromptTemplate(\n                input_variables=[\"category\", \"content_style\", \"subject_style\", \"cta_style\",\n                                \"objective\", \"message\", \"cta\", \"audience\"],\n                template=template\n            )\n\n            # Create LLM chain\n            chain = LLMChain(llm=self.llm, prompt=prompt)\n\n            # Run chain\n            approach = user_profile[\"recommended_approach\"]\n            result = await chain.arun(\n                category=user_profile[\"personalization_category\"],\n                content_style=approach[\"content_style\"],\n                subject_style=approach[\"subject_style\"],\n                cta_style=approach[\"cta_style\"],\n                objective=campaign_data.get(\"objective\", \"\"),\n                message=campaign_data.get(\"message\", \"\"),\n                cta=campaign_data.get(\"cta\", \"\"),\n                audience=campaign_data.get(\"audience\", \"\")\n            )\n\n            # Parse JSON result\n            content = json.loads(result)\n\n            return {\n                \"campaign_id\": campaign_id,\n                \"user_profile\": user_profile,\n                \"personalized_content\": content,\n                \"trust_score\": self._calculate_trust_score(user_profile, campaign_data)\n            }\n\n        except Exception as e:\n            logger.error(f\"Failed to generate personalized content: {str(e)}\")\n            raise\n\n    def _calculate_trust_score(self, user_profile: Dict[str, Any], campaign_data: Dict[str, Any]) -&gt; int:\n        \"\"\"Calculate trust score for a personalized campaign.\n\n        Args:\n            user_profile: User personalization profile\n            campaign_data: Campaign data\n\n        Returns:\n            Trust score (0-100)\n        \"\"\"\n        score = 0\n\n        # Base score based on personalization confidence\n        score += int(user_profile.get(\"confidence\", 0) * 50)\n\n        # Additional score based on content alignment\n        category = user_profile.get(\"personalization_category\")\n        if category == \"informational\" and \"educational\" in campaign_data.get(\"tags\", []):\n            score += 15\n        elif category == \"promotional\" and \"offer\" in campaign_data.get(\"tags\", []):\n            score += 15\n        elif category == \"relationship\" and \"newsletter\" in campaign_data.get(\"tags\", []):\n            score += 15\n        elif category == \"transactional\" and \"receipt\" in campaign_data.get(\"tags\", []):\n            score += 15\n\n        # Adjust based on unsubscribe risk\n        unsubscribe_risk = user_profile.get(\"unsubscribe_risk\", 0)\n        score -= int(unsubscribe_risk * 30)\n\n        # Ensure score is in range 0-100\n        return max(0, min(100, score))\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#integration-with-campaign-service","title":"Integration with Campaign Service","text":"<p>Update the campaign service to use the new Trust Agent:</p> <pre><code># apps/api/services/campaign_service.py\nfrom ..ai.trust_agent import AITrustAgent\n\nclass CampaignService:\n    def __init__(self, settings: Settings):\n        self.settings = settings\n        self.blockchain_service = BlockchainService()\n        self.ai_trust_agent = AITrustAgent(settings)\n\n    async def create_campaign_with_personalization(\n        self,\n        campaign_data: Dict[str, Any],\n        user_id: int\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Create a campaign with personalized content for recipients.\n\n        Args:\n            campaign_data: Campaign data\n            user_id: User ID\n\n        Returns:\n            Dictionary containing campaign creation result\n        \"\"\"\n        # Create base campaign\n        campaign_id = await self.create_campaign(campaign_data)\n\n        # Get recipient list\n        recipients = await self.get_recipients(campaign_data)\n\n        # Generate personalized content for each recipient\n        personalized_content = {}\n        trust_scores = {}\n\n        for recipient in recipients:\n            # Analyze user for personalization\n            user_profile = await self.ai_trust_agent.analyze_user(recipient[\"id\"])\n\n            # Generate personalized content\n            content = await self.ai_trust_agent.generate_personalized_content(\n                campaign_id=campaign_id,\n                user_profile=user_profile,\n                campaign_data=campaign_data\n            )\n\n            personalized_content[recipient[\"id\"]] = content[\"personalized_content\"]\n            trust_scores[recipient[\"id\"]] = content[\"trust_score\"]\n\n        # Store personalized content and trust scores\n        await self.store_personalized_content(campaign_id, personalized_content, trust_scores)\n\n        return {\n            \"campaign_id\": campaign_id,\n            \"recipient_count\": len(recipients),\n            \"personalization_success\": True,\n            \"avg_trust_score\": sum(trust_scores.values()) / max(len(trust_scores), 1)\n        }\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#ui-components-for-trust-score-display","title":"UI Components for Trust Score Display","text":"<p>Create React components for displaying trust scores in the frontend:</p> <pre><code>// apps/web/components/trust/TrustScoreIndicator.tsx\nimport React from 'react';\nimport { CircularProgress, CircularProgressLabel, Tooltip, Box, Text } from '@chakra-ui/react';\nimport { QuestionOutlineIcon } from '@chakra-ui/icons';\n\ninterface TrustScoreIndicatorProps {\n  score: number;\n  size?: 'sm' | 'md' | 'lg';\n  showLabel?: boolean;\n  showTooltip?: boolean;\n}\n\nexport const TrustScoreIndicator: React.FC&lt;TrustScoreIndicatorProps&gt; = ({\n  score,\n  size = 'md',\n  showLabel = true,\n  showTooltip = true,\n}) =&gt; {\n  // Determine color based on score\n  const getColor = (score: number) =&gt; {\n    if (score &gt;= 80) return 'green.400';\n    if (score &gt;= 60) return 'blue.400';\n    if (score &gt;= 40) return 'yellow.400';\n    if (score &gt;= 20) return 'orange.400';\n    return 'red.400';\n  };\n\n  // Determine size values\n  const sizeValues = {\n    sm: { circleSize: '40px', fontSize: 'xs', iconSize: 3 },\n    md: { circleSize: '60px', fontSize: 'sm', iconSize: 4 },\n    lg: { circleSize: '80px', fontSize: 'md', iconSize: 5 },\n  };\n\n  const { circleSize, fontSize, iconSize } = sizeValues[size];\n\n  // Tooltip content\n  const tooltipContent = (\n    &lt;Box p={2} maxW=\"250px\"&gt;\n      &lt;Text fontWeight=\"bold\" mb={1}&gt;Trust Score: {score}&lt;/Text&gt;\n      &lt;Text fontSize=\"sm\"&gt;\n        This score indicates the predicted relevance and engagement level for this recipient.\n        Higher scores mean more personalized and trustworthy content.\n      &lt;/Text&gt;\n    &lt;/Box&gt;\n  );\n\n  return (\n    &lt;Box position=\"relative\" display=\"inline-flex\" alignItems=\"center\"&gt;\n      &lt;CircularProgress\n        value={score}\n        color={getColor(score)}\n        size={circleSize}\n        thickness=\"8px\"\n      &gt;\n        {showLabel &amp;&amp; (\n          &lt;CircularProgressLabel fontWeight=\"bold\" fontSize={fontSize}&gt;\n            {score}\n          &lt;/CircularProgressLabel&gt;\n        )}\n      &lt;/CircularProgress&gt;\n\n      {showTooltip &amp;&amp; (\n        &lt;Tooltip label={tooltipContent} placement=\"top\" hasArrow&gt;\n          &lt;QuestionOutlineIcon\n            position=\"absolute\"\n            top={0}\n            right={0}\n            w={iconSize}\n            h={iconSize}\n            color=\"gray.400\"\n            cursor=\"pointer\"\n          /&gt;\n        &lt;/Tooltip&gt;\n      )}\n    &lt;/Box&gt;\n  );\n};\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#3-trust-certificates","title":"3. Trust Certificates","text":""},{"location":"archive/MAILY-trust-infrastructure-implementation/#smart-contract-for-trust-certificates","title":"Smart Contract for Trust Certificates","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract TrustCertificate is AccessControl {\n    bytes32 public constant ISSUER_ROLE = keccak256(\"ISSUER_ROLE\");\n\n    struct Certificate {\n        address marketer;\n        uint256 campaignId;\n        bytes32 metricsHash;\n        uint256 timestamp;\n        bool revoked;\n    }\n\n    mapping(bytes32 =&gt; Certificate) public certificates;\n    mapping(address =&gt; mapping(uint256 =&gt; bytes32)) public marketerCampaignCerts;\n\n    event CertificateIssued(\n        bytes32 indexed certId,\n        address indexed marketer,\n        uint256 indexed campaignId,\n        bytes32 metricsHash\n    );\n    event CertificateRevoked(bytes32 indexed certId);\n\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ISSUER_ROLE, msg.sender);\n    }\n\n    function issueCertificate(\n        address marketer,\n        uint256 campaignId,\n        bytes32 metricsHash\n    ) external onlyRole(ISSUER_ROLE) returns (bytes32) {\n        bytes32 certId = keccak256(abi.encodePacked(marketer, campaignId, metricsHash, block.timestamp));\n\n        certificates[certId] = Certificate({\n            marketer: marketer,\n            campaignId: campaignId,\n            metricsHash: metricsHash,\n            timestamp: block.timestamp,\n            revoked: false\n        });\n\n        marketerCampaignCerts[marketer][campaignId] = certId;\n\n        emit CertificateIssued(certId, marketer, campaignId, metricsHash);\n\n        return certId;\n    }\n\n    function revokeCertificate(bytes32 certId) external onlyRole(ISSUER_ROLE) {\n        require(certificates[certId].timestamp &gt; 0, \"Certificate does not exist\");\n        require(!certificates[certId].revoked, \"Certificate already revoked\");\n\n        certificates[certId].revoked = true;\n\n        emit CertificateRevoked(certId);\n    }\n\n    function verifyCertificate(bytes32 certId) external view returns (\n        address marketer,\n        uint256 campaignId,\n        bytes32 metricsHash,\n        uint256 timestamp,\n        bool revoked\n    ) {\n        Certificate memory cert = certificates[certId];\n        require(cert.timestamp &gt; 0, \"Certificate does not exist\");\n\n        return (\n            cert.marketer,\n            cert.campaignId,\n            cert.metricsHash,\n            cert.timestamp,\n            cert.revoked\n        );\n    }\n\n    function getCertificateForCampaign(\n        address marketer,\n        uint256 campaignId\n    ) external view returns (bytes32) {\n        return marketerCampaignCerts[marketer][campaignId];\n    }\n}\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#certificate-service-integration","title":"Certificate Service Integration","text":"<p>Create a Certificate Service for the backend:</p> <pre><code># apps/api/services/certificate_service.py\nimport hashlib\nimport json\nfrom typing import Dict, Any\nfrom web3 import Web3\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\n\nfrom ..config import Settings\nfrom ..models import TrustCertificate, Campaign, User\n\nclass CertificateService:\n    def __init__(self, settings: Settings):\n        self.settings = settings\n        self.private_key = settings.BLOCKCHAIN_PRIVATE_KEY\n        self.account: LocalAccount = Account.from_key(self.private_key)\n        self.w3 = Web3(Web3.HTTPProvider(settings.ETHEREUM_RPC_URL))\n\n        # Load ABI\n        with open(\"contracts/TrustCertificate.json\") as f:\n            contract_json = json.load(f)\n            self.abi = contract_json[\"abi\"]\n\n        self.contract_address = settings.TRUST_CERTIFICATE_ADDRESS\n        self.contract = self.w3.eth.contract(address=self.contract_address, abi=self.abi)\n\n    async def issue_certificate(\n        self,\n        campaign_id: int,\n        marketer_address: str,\n        metrics: Dict[str, Any]\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Issue a trust certificate for a campaign.\n\n        Args:\n            campaign_id: Campaign ID\n            marketer_address: Marketer's wallet address\n            metrics: Campaign metrics\n\n        Returns:\n            Dictionary containing certificate information\n        \"\"\"\n        # Generate metrics hash\n        metrics_str = json.dumps(metrics, sort_keys=True)\n        metrics_hash = hashlib.sha256(metrics_str.encode()).hexdigest()\n        metrics_hash_bytes = bytes.fromhex(metrics_hash)\n\n        # Prepare transaction\n        nonce = self.w3.eth.get_transaction_count(self.account.address)\n\n        # Build transaction\n        tx = self.contract.functions.issueCertificate(\n            marketer_address,\n            campaign_id,\n            metrics_hash_bytes\n        ).build_transaction({\n            'chainId': int(self.settings.ETHEREUM_CHAIN_ID),\n            'gas': 200000,\n            'gasPrice': self.w3.eth.gas_price,\n            'nonce': nonce,\n        })\n\n        # Sign transaction\n        signed_tx = self.account.sign_transaction(tx)\n\n        # Send transaction\n        tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\n        # Wait for transaction receipt\n        tx_receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)\n\n        # Get certificate ID from event\n        log = self.contract.events.CertificateIssued().process_receipt(tx_receipt)[0]\n        cert_id = log['args']['certId'].hex()\n\n        # Store certificate in database\n        db_certificate = TrustCertificate(\n            certificate_id=cert_id,\n            user_id=campaign_id,  # This should be user ID in a real implementation\n            campaign_id=campaign_id,\n            metrics_hash=metrics_hash,\n            blockchain_tx=tx_hash.hex()\n        )\n\n        # In a real implementation, save this to the database\n        # await db.add(db_certificate)\n        # await db.commit()\n\n        return {\n            \"certificate_id\": cert_id,\n            \"campaign_id\": campaign_id,\n            \"marketer_address\": marketer_address,\n            \"metrics_hash\": metrics_hash,\n            \"transaction_hash\": tx_hash.hex(),\n            \"verification_url\": f\"{self.settings.BLOCKCHAIN_EXPLORER_URL}/tx/{tx_hash.hex()}\"\n        }\n\n    async def verify_certificate(self, cert_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Verify a trust certificate.\n\n        Args:\n            cert_id: Certificate ID\n\n        Returns:\n            Dictionary containing verification result\n        \"\"\"\n        # Convert hex string to bytes32\n        cert_id_bytes = bytes.fromhex(cert_id.replace(\"0x\", \"\"))\n\n        # Call contract\n        result = self.contract.functions.verifyCertificate(cert_id_bytes).call()\n\n        # Format result\n        marketer, campaign_id, metrics_hash, timestamp, revoked = result\n\n        return {\n            \"certificate_id\": cert_id,\n            \"marketer_address\": marketer,\n            \"campaign_id\": campaign_id,\n            \"metrics_hash\": metrics_hash.hex(),\n            \"timestamp\": timestamp,\n            \"revoked\": revoked,\n            \"verification_url\": f\"{self.settings.BLOCKCHAIN_EXPLORER_URL}/tx/{cert_id}\"\n        }\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-implementation/#frontend-certificate-viewer-component","title":"Frontend Certificate Viewer Component","text":"<p>Create a React component to view and verify certificates:</p> <p>```typescript // apps/web/components/trust/CertificateViewer.tsx import React, { useState, useEffect } from 'react'; import {   Box,   Heading,   Text,   Spinner,   Button,   Flex,   Badge,   Divider,   Link,   useToast,   Code, } from '@chakra-ui/react'; import { CheckCircleIcon, WarningIcon, ExternalLinkIcon } from '@chakra-ui/icons'; import { format } from 'date-fns';</p> <p>interface CertificateViewerProps {   certificateId: string; }</p> <p>interface CertificateData {</p>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/","title":"MAILY Trust Infrastructure - Production Implementation Plan","text":"<p>This document outlines the comprehensive production implementation plan for integrating blockchain-verified metrics, AI-driven personalization, and trust-based mechanisms into the Maily platform.</p>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>System Architecture</li> <li>Phase 1: Trust Infrastructure</li> <li>1. Cross-Chain $MAILY Token Implementation</li> <li>2. AI Trust Agents with Predictive Personalization</li> <li>3. Trust Certificates</li> <li>Phase 2: Viral Ignition</li> <li>1. Twitter Trend Monitoring and Campaign Generator</li> <li>2. Referral System with Trend Tokens and Leaderboard</li> <li>3. Trust Score Prediction Testing</li> <li>Phase 3: Ecosystem Expansion</li> <li>1. Self-Evolving Trust Rank with Recipient Feedback Loops</li> <li>2. One-Tap Onboarding Extension</li> <li>3. Staking Mechanics for Recipients</li> <li>Integration Points</li> <li>Deployment Strategy</li> <li>Security Considerations</li> <li>Performance Optimizations</li> <li>Testing Strategy</li> </ul>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#overview","title":"Overview","text":"<p>The MAILY Trust Infrastructure introduces blockchain technology and advanced AI capabilities to create a transparent, verifiable system for email marketing campaigns. This implementation establishes a foundation of trust between marketers and recipients while driving organic growth through engagement incentives.</p>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#system-architecture","title":"System Architecture","text":"<p>The architecture consists of:</p> <ol> <li>Blockchain Layer: Smart contracts and on-chain infrastructure for token management, trust certificates, and reward mechanisms</li> <li>AI Trust Layer: Advanced AI models for personalization, prediction, and engagement scoring</li> <li>User Engagement Layer: Front-end interfaces, referral systems, and staking mechanics</li> <li>Integration Layer: Components that connect existing Maily services with the new trust infrastructure</li> </ol>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#phase-1-trust-infrastructure","title":"Phase 1: Trust Infrastructure","text":""},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#1-cross-chain-maily-token-implementation","title":"1. Cross-Chain $MAILY Token Implementation","text":""},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#smart-contract-development","title":"Smart Contract Development","text":"<p>Create a production-ready ERC20 token contract with cross-chain capabilities using LayerZero:</p> <pre><code>// contracts/MailyToken.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract MailyToken is OFTV2, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens\n    mapping(uint256 =&gt; bool) public campaignProcessed;\n    mapping(address =&gt; mapping(uint256 =&gt; uint256)) public performanceRewards;\n\n    AggregatorV3Interface public emailMetricsOracle;\n\n    event CampaignRewardIssued(address indexed marketer, uint256 indexed campaignId, uint256 amount);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _layerZeroEndpoint,\n        address _oracleAddress\n    ) OFTV2(_name, _symbol, 18, _layerZeroEndpoint) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        emailMetricsOracle = AggregatorV3Interface(_oracleAddress);\n\n        // Mint initial supply\n        _mint(msg.sender, MAX_SUPPLY / 2);\n    }\n\n    function mintBasedOnPerformance(\n        address marketer,\n        uint256 campaignId,\n        uint256 openRate,\n        uint256 clickRate\n    ) external onlyRole(MINTER_ROLE) {\n        require(!campaignProcessed[campaignId], \"Campaign already processed\");\n\n        // Calculate reward based on open rate and click rate (converted to basis points)\n        uint256 reward = (openRate * 5 + clickRate * 10) * 10**16;\n        require(totalSupply() + reward &lt;= MAX_SUPPLY, \"Exceeds max supply\");\n\n        _mint(marketer, reward);\n        performanceRewards[marketer][campaignId] = reward;\n        campaignProcessed[campaignId] = true;\n\n        emit CampaignRewardIssued(marketer, campaignId, reward);\n    }\n\n    function updateOracleAddress(address _oracleAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        emailMetricsOracle = AggregatorV3Interface(_oracleAddress);\n    }\n\n    // Override required function in AccessControl\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl, OFTV2) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#chainlink-oracle-service","title":"Chainlink Oracle Service","text":"<p>Create an External Adapter for Chainlink to feed email metrics data to the blockchain:</p> <pre><code>// packages/blockchain/oracles/email-metrics-adapter.js\nconst { Requester, Validator } = require('@chainlink/external-adapter');\nconst ethers = require('ethers');\n\n// Define custom error messages\nconst customError = (data) =&gt; {\n  if (data.Response === 'Error') return true;\n  return false;\n};\n\n// Define custom parameters\nconst customParams = {\n  campaignId: ['campaignId', 'campaign'],\n  marketerAddress: ['marketerAddress', 'marketer'],\n  endpoint: false\n};\n\n// Create request handler\nconst createRequest = (input, callback) =&gt; {\n  // Validate input data\n  const validator = new Validator(input, customParams);\n  const jobRunID = validator.validated.id;\n  const campaignId = validator.validated.data.campaignId;\n  const marketerAddress = validator.validated.data.marketerAddress;\n  const endpoint = validator.validated.data.endpoint || 'metrics';\n\n  // In production, this should be configured with environment variables\n  const url = `https://api.maily.app/campaigns/${campaignId}/${endpoint}`;\n\n  // Set request parameters\n  const params = {\n    campaignId\n  };\n\n  // Set custom error handling\n  const customError = (data) =&gt; {\n    if (data.Response === 'Error') return true;\n    return false;\n  };\n\n  // Make the request to the API\n  Requester.request(url, {\n    params,\n    customError\n  })\n    .then(response =&gt; {\n      response.data.result = {\n        openRate: Math.floor(response.data.metrics.openRate * 10000), // Convert to basis points (0.1543 -&gt; 1543)\n        clickRate: Math.floor(response.data.metrics.clickRate * 10000), // Convert to basis points\n        bounceRate: Math.floor(response.data.metrics.bounceRate * 10000), // Convert to basis points\n        marketerAddress,\n        campaignId,\n        timestamp: Math.floor(Date.now() / 1000)\n      };\n\n      callback(response.status, Requester.success(jobRunID, response));\n    })\n    .catch(error =&gt; {\n      callback(500, Requester.errored(jobRunID, error));\n    });\n};\n\n// Export handler for serverless function\nmodule.exports.createRequest = createRequest;\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#blockchainservice-implementation","title":"BlockchainService Implementation","text":"<p>Create a service to interact with the blockchain contracts:</p> <pre><code># packages/blockchain/services/blockchain_service.py\nimport os\nimport json\nimport asyncio\nfrom typing import Dict, Any, Optional\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom web3 import Web3, AsyncHTTPProvider\nfrom web3.middleware import geth_poa_middleware\nimport httpx\n\nclass BlockchainService:\n    \"\"\"Service for blockchain interactions.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"Initialize the blockchain service.\"\"\"\n        self.settings = settings\n\n        # Initialize web3 provider\n        self.w3 = Web3(Web3.HTTPProvider(settings.ETHEREUM_RPC_URL))\n        self.w3.middleware_onion.inject(geth_poa_middleware, layer=0)\n\n        # Initialize account\n        self.private_key = settings.BLOCKCHAIN_PRIVATE_KEY\n        if self.private_key:\n            self.account: LocalAccount = Account.from_key(self.private_key)\n            self.account_address = self.account.address\n        else:\n            self.account = None\n            self.account_address = None\n\n        # Load contract ABIs\n        self.token_contract = self._load_contract('MailyToken', settings.MAILY_TOKEN_ADDRESS)\n        self.certificate_contract = self._load_contract('TrustCertificate', settings.TRUST_CERTIFICATE_ADDRESS)\n\n        # Initialize HTTP client for API calls\n        self.http_client = httpx.AsyncClient(timeout=30.0)\n\n    def _load_contract(self, contract_name: str, contract_address: str):\n        \"\"\"Load a contract from its ABI file.\"\"\"\n        if not contract_address:\n            return None\n\n        try:\n            # Load ABI from file\n            abi_path = os.path.join(\n                os.path.dirname(__file__),\n                f'../contracts/{contract_name}.json'\n            )\n            with open(abi_path, 'r') as f:\n                contract_data = json.load(f)\n                abi = contract_data['abi']\n\n            # Create contract instance\n            return self.w3.eth.contract(address=contract_address, abi=abi)\n        except Exception as e:\n            print(f\"Error loading contract {contract_name}: {str(e)}\")\n            return None\n\n    async def mint_tokens_for_campaign(\n        self,\n        campaign_id: int,\n        marketer_address: str,\n        metrics: Dict[str, Any]\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Mint tokens based on campaign performance.\"\"\"\n        if not self.token_contract or not self.account:\n            return {\"error\": \"Token contract or account not configured\"}\n\n        try:\n            # Convert metrics to basis points\n            open_rate_bp = int(metrics.get('open_rate', 0) * 10000)\n            click_rate_bp = int(metrics.get('click_rate', 0) * 10000)\n\n            # Build transaction\n            nonce = self.w3.eth.get_transaction_count(self.account_address)\n            tx = self.token_contract.functions.mintBasedOnPerformance(\n                marketer_address,\n                campaign_id,\n                open_rate_bp,\n                click_rate_bp\n            ).build_transaction({\n                'chainId': int(self.settings.ETHEREUM_CHAIN_ID),\n                'gas': 200000,\n                'gasPrice': self.w3.eth.gas_price,\n                'nonce': nonce,\n            })\n\n            # Sign and send transaction\n            signed_tx = self.account.sign_transaction(tx)\n            tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\n            # Wait for transaction receipt\n            receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)\n\n            # Calculate token amount from logs\n            logs = self.token_contract.events.CampaignRewardIssued().process_receipt(receipt)\n            token_amount = logs[0]['args']['amount'] if logs else 0\n\n            return {\n                \"success\": True,\n                \"campaign_id\": campaign_id,\n                \"marketer_address\": marketer_address,\n                \"token_amount\": token_amount,\n                \"transaction_hash\": tx_hash.hex(),\n                \"block_number\": receipt.blockNumber,\n                \"explorer_url\": f\"{self.settings.BLOCKCHAIN_EXPLORER_URL}/tx/{tx_hash.hex()}\"\n            }\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e),\n                \"campaign_id\": campaign_id,\n                \"marketer_address\": marketer_address\n            }\n\n    async def get_token_balance(self, address: str) -&gt; Dict[str, Any]:\n        \"\"\"Get token balance for an address.\"\"\"\n        if not self.token_contract:\n            return {\"error\": \"Token contract not configured\"}\n\n        try:\n            balance = self.token_contract.functions.balanceOf(address).call()\n            decimals = self.token_contract.functions.decimals().call()\n\n            return {\n                \"address\": address,\n                \"balance\": balance,\n                \"formatted_balance\": balance / (10 ** decimals),\n                \"token_symbol\": self.token_contract.functions.symbol().call()\n            }\n        except Exception as e:\n            return {\"error\": str(e), \"address\": address}\n\n    # Other blockchain-related methods would be implemented here\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#campaign-service-integration","title":"Campaign Service Integration","text":"<p>Integrate the blockchain service with the campaign service:</p> <pre><code># apps/api/services/campaign_service.py\nfrom typing import Dict, Any, List, Optional\nfrom datetime import datetime\n\nfrom ..models import Campaign, User, CampaignMetrics\nfrom ..config import Settings\nfrom ..ai.trust_agent import AITrustAgent\nfrom ..blockchain.services import BlockchainService\n\nclass CampaignService:\n    \"\"\"Service for handling email campaigns with blockchain verification.\"\"\"\n\n    def __init__(self, settings: Settings):\n        \"\"\"Initialize the campaign service.\"\"\"\n        self.settings = settings\n        self.blockchain_service = BlockchainService(settings)\n        self.ai_trust_agent = AITrustAgent(settings)\n\n    async def create_campaign(self, campaign_data: Dict[str, Any], user_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Create a new campaign.\"\"\"\n        # Basic campaign creation logic\n        # ...existing code...\n\n        # Add blockchain fields\n        blockchain_enabled = campaign_data.get('blockchain_enabled', False)\n\n        # Create campaign in database\n        campaign = Campaign(\n            user_id=user_id,\n            task=campaign_data.get('task', ''),\n            status='draft',\n            subject=campaign_data.get('subject', ''),\n            body=campaign_data.get('body', ''),\n            blockchain_enabled=blockchain_enabled,\n            # other fields...\n        )\n\n        # Save to database (pseudo-code)\n        # await db.add(campaign)\n        # await db.commit()\n        # await db.refresh(campaign)\n\n        # For now, just mock the ID\n        campaign_id = 12345\n\n        return {\n            \"campaign_id\": campaign_id,\n            \"status\": \"draft\",\n            \"blockchain_enabled\": blockchain_enabled\n        }\n\n    async def finalize_campaign(self, campaign_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Finalize a campaign and record metrics on blockchain if enabled.\"\"\"\n        # Get campaign from database\n        # campaign = await db.get(Campaign, campaign_id)\n        # For now, mock the campaign\n        campaign = {\n            \"id\": campaign_id,\n            \"user_id\": 1,\n            \"status\": \"sent\",\n            \"blockchain_enabled\": True\n        }\n\n        # Get user/marketer info\n        # user = await db.get(User, campaign[\"user_id\"])\n        # Mock user\n        user = {\n            \"id\": 1,\n            \"wallet_address\": \"0x123456789abcdef123456789abcdef123456789a\"\n        }\n\n        # Calculate metrics\n        metrics = await self._calculate_metrics(campaign_id)\n\n        # Update campaign status\n        # campaign.status = \"completed\"\n        # await db.commit()\n\n        # If blockchain verification is enabled, mint tokens and issue certificate\n        if campaign.get(\"blockchain_enabled\", False) and user.get(\"wallet_address\"):\n            # Mint tokens based on performance\n            token_result = await self.blockchain_service.mint_tokens_for_campaign(\n                campaign_id=campaign_id,\n                marketer_address=user[\"wallet_address\"],\n                metrics=metrics\n            )\n\n            # Issue trust certificate\n            certificate_result = await self.blockchain_service.issue_certificate(\n                campaign_id=campaign_id,\n                marketer_address=user[\"wallet_address\"],\n                metrics=metrics\n            )\n\n            return {\n                \"campaign_id\": campaign_id,\n                \"status\": \"completed\",\n                \"metrics\": metrics,\n                \"blockchain\": {\n                    \"verified\": True,\n                    \"token_reward\": token_result.get(\"token_amount\", 0),\n                    \"certificate_id\": certificate_result.get(\"certificate_id\", \"\"),\n                    \"transaction_hash\": token_result.get(\"transaction_hash\", \"\"),\n                    \"explorer_url\": token_result.get(\"explorer_url\", \"\")\n                }\n            }\n        else:\n            return {\n                \"campaign_id\": campaign_id,\n                \"status\": \"completed\",\n                \"metrics\": metrics,\n                \"blockchain\": {\n                    \"verified\": False\n                }\n            }\n\n    async def _calculate_metrics(self, campaign_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Calculate campaign metrics.\"\"\"\n        # In a real implementation, fetch metrics from database\n        # For now, return mock metrics\n        return {\n            \"sent\": 1000,\n            \"delivered\": 950,\n            \"opened\": 380,\n            \"clicked\": 114,\n            \"bounced\": 50,\n            \"unsubscribed\": 5,\n            \"open_rate\": 0.4,  # 40%\n            \"click_rate\": 0.12,  # 12%\n            \"bounce_rate\": 0.05,  # 5%\n            \"unsubscribe_rate\": 0.005  # 0.5%\n        }\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#database-schema-updates","title":"Database Schema Updates","text":"<p>Add these blockchain-related models to the existing database schema:</p> <pre><code># apps/api/models/blockchain.py\nfrom datetime import datetime\nfrom sqlalchemy import Boolean, Column, DateTime, ForeignKey, Integer, String, Text, Float\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\nclass WalletAddress(Base):\n    \"\"\"Blockchain wallet address model.\"\"\"\n    __tablename__ = \"wallet_addresses\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    address = Column(String, unique=True, index=True, nullable=False)\n    chain_id = Column(Integer, nullable=False, default=1)  # 1 = Ethereum Mainnet\n    is_primary = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    # Relationships\n    user = relationship(\"User\", back_populates=\"wallet_addresses\")\n    token_balances = relationship(\"TokenBalance\", back_populates=\"wallet_address\")\n\nclass TokenBalance(Base):\n    \"\"\"Token balance model.\"\"\"\n    __tablename__ = \"token_balances\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    wallet_address_id = Column(Integer, ForeignKey(\"wallet_addresses.id\"), nullable=False)\n    token_address = Column(String, nullable=False)\n    balance = Column(String, nullable=False)  # Store as string to handle large numbers\n    chain_id = Column(Integer, nullable=False, default=1)\n    last_updated = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Relationships\n    wallet_address = relationship(\"WalletAddress\", back_populates=\"token_balances\")\n\nclass TrustCertificate(Base):\n    \"\"\"Trust certificate model.\"\"\"\n    __tablename__ = \"trust_certificates\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    certificate_id = Column(String, unique=True, index=True, nullable=False)\n    campaign_id = Column(Integer, ForeignKey(\"campaigns.id\"), nullable=False)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    metrics_hash = Column(String, nullable=False)\n    transaction_hash = Column(String, nullable=False)\n    blockchain_verified = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    # Relationships\n    campaign = relationship(\"Campaign\", back_populates=\"certificate\")\n    user = relationship(\"User\", back_populates=\"certificates\")\n\nclass BlockchainEvent(Base):\n    \"\"\"Blockchain event model for tracking contract events.\"\"\"\n    __tablename__ = \"blockchain_events\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    transaction_hash = Column(String, index=True, nullable=False)\n    block_number = Column(Integer, nullable=False)\n    event_name = Column(String, nullable=False)\n    contract_address = Column(String, nullable=False)\n    parameters = Column(Text, nullable=False)  # JSON string\n    created_at = Column(DateTime, default=datetime.utcnow)\n</code></pre> <p>Also update the User and Campaign models:</p> <pre><code># Additions to apps/api/models/user.py\nclass User(Base):\n    # Other fields...\n\n    # Blockchain fields\n    wallet_addresses = relationship(\"WalletAddress\", back_populates=\"user\")\n    certificates = relationship(\"TrustCertificate\", back_populates=\"user\")\n    trust_rank = Column(String, default=\"Bronze\")\n    trust_score = Column(Integer, default=0)\n\n# Additions to apps/api/models/campaign.py\nclass Campaign(Base):\n    # Other fields...\n\n    # Blockchain fields\n    blockchain_enabled = Column(Boolean, default=False)\n    certificate = relationship(\"TrustCertificate\", back_populates=\"campaign\", uselist=False)\n    token_reward = Column(Float, default=0)\n    trust_score = Column(Integer, default=0)\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#deployment-configuration-for-blockchain-infrastructure","title":"Deployment Configuration for Blockchain Infrastructure","text":"<p>Create a Terraform module for the blockchain infrastructure:</p> <pre><code># infrastructure/terraform/modules/blockchain/main.tf\n\n# Key Management Service for secure key storage\nresource \"aws_kms_key\" \"blockchain_key\" {\n  description             = \"Blockchain signing key for Maily\"\n  deletion_window_in_days = 10\n  enable_key_rotation     = true\n  tags = {\n    Name        = \"maily-blockchain-key\"\n    Environment = var.environment\n  }\n}\n\n# Lambda function for blockchain operations\nresource \"aws_lambda_function\" \"blockchain_service\" {\n  function_name    = \"maily-blockchain-service-${var.environment}\"\n  handler          = \"index.handler\"\n  runtime          = \"nodejs18.x\"\n  role             = aws_iam_role.lambda_role.arn\n  filename         = \"${path.module}/lambda/blockchain-service.zip\"\n  source_code_hash = filebase64sha256(\"${path.module}/lambda/blockchain-service.zip\")\n  timeout          = 30\n  memory_size      = 1024\n\n  environment {\n    variables = {\n      ETHEREUM_RPC_URL       = var.ethereum_rpc_url\n      ETHEREUM_CHAIN_ID      = var.ethereum_chain_id\n      POLYGON_RPC_URL        = var.polygon_rpc_url\n      POLYGON_CHAIN_ID       = var.polygon_chain_id\n      ZKSYNC_RPC_URL         = var.zksync_rpc_url\n      ZKSYNC_CHAIN_ID        = var.zksync_chain_id\n      MAILY_TOKEN_ADDRESS    = var.maily_token_address\n      TRUST_CERT_ADDRESS     = var.trust_certificate_address\n      KMS_KEY_ID             = aws_kms_key.blockchain_key.id\n      BLOCK_EXPLORER_URL     = var.block_explorer_url\n    }\n  }\n}\n\n# API Gateway for blockchain operations\nresource \"aws_api_gateway_rest_api\" \"blockchain_api\" {\n  name        = \"maily-blockchain-api-${var.environment}\"\n  description = \"API for Maily blockchain operations\"\n}\n\nresource \"aws_api_gateway_resource\" \"blockchain\" {\n  rest_api_id = aws_api_gateway_rest_api.blockchain_api.id\n  parent_id   = aws_api_gateway_rest_api.blockchain_api.root_resource_id\n  path_part   = \"blockchain\"\n}\n\nresource \"aws_api_gateway_method\" \"blockchain_post\" {\n  rest_api_id   = aws_api_gateway_rest_api.blockchain_api.id\n  resource_id   = aws_api_gateway_resource.blockchain.id\n  http_method   = \"POST\"\n  authorization_type = \"CUSTOM\"\n  authorizer_id = aws_api_gateway_authorizer.token_authorizer.id\n}\n\nresource \"aws_api_gateway_integration\" \"lambda_integration\" {\n  rest_api_id             = aws_api_gateway_rest_api.blockchain_api.id\n  resource_id             = aws_api_gateway_resource.blockchain.id\n  http_method             = aws_api_gateway_method.blockchain_post.http_method\n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = aws_lambda_function.blockchain_service.invoke_arn\n}\n\n# Chainlink External Adapter for email metrics\nresource \"aws_lambda_function\" \"chainlink_adapter\" {\n  function_name    = \"maily-chainlink-adapter-${var.environment}\"\n  handler          = \"index.handler\"\n  runtime          = \"nodejs18.x\"\n  role             = aws_iam_role.lambda_role.arn\n  filename         = \"${path.module}/lambda/chainlink-adapter.zip\"\n  source_code_hash = filebase64sha256(\"${path.module}/lambda/chainlink-adapter.zip\")\n  timeout          = 60\n  memory_size      = 256\n\n  environment {\n    variables = {\n      MAILY_API_URL = var.maily_api_url\n      MAILY_API_KEY = var.maily_api_key\n    }\n  }\n}\n\nresource \"aws_api_gateway_resource\" \"chainlink\" {\n  rest_api_id = aws_api_gateway_rest_api.blockchain_api.id\n  parent_id   = aws_api_gateway_rest_api.blockchain_api.root_resource_id\n  path_part   = \"chainlink\"\n}\n\nresource \"aws_api_gateway_method\" \"chainlink_post\" {\n  rest_api_id   = aws_api_gateway_rest_api.blockchain_api.id\n  resource_id   = aws_api_gateway_resource.chainlink.id\n  http_method   = \"POST\"\n  authorization_type = \"API_KEY\"\n}\n\nresource \"aws_api_gateway_integration\" \"chainlink_integration\" {\n  rest_api_id             = aws_api_gateway_rest_api.blockchain_api.id\n  resource_id             = aws_api_gateway_resource.chainlink.id\n  http_method             = aws_api_gateway_method.chainlink_post.http_method\n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = aws_lambda_function.chainlink_adapter.invoke_arn\n}\n</code></pre>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#2-ai-trust-agents-with-predictive-personalization","title":"2. AI Trust Agents with Predictive Personalization","text":""},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#ai-trust-agent-implementation","title":"AI Trust Agent Implementation","text":"<p>Create an advanced AI service for personalization:</p> <p>```python</p>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#packagesaitrust_agentpy","title":"packages/ai/trust_agent.py","text":"<p>import numpy as np import tensorflow as tf import os import json import logging from typing import Dict, Any, List, Optional from datetime import datetime import langchain from langchain.llms import OpenAI from langchain.prompts import PromptTemplate from langchain.chains import LLMChain from langchain.embeddings import OpenAIEmbeddings from langchain.vectorstores import FAISS</p>"},{"location":"archive/MAILY-trust-infrastructure-production-implementation/#configure-logging","title":"Configure logging","text":"<p>logger = logging.getLogger(name)</p> <p>class PersonalizationModel:     \"\"\"Machine learning model for email personalization.\"\"\"</p> <pre><code>def __init__(self, model_path: Optional[str] = None):\n    \"\"\"Initialize the personalization model.\"\"\"\n    self.embeddings = OpenAIEmbeddings()\n    self.model_path = model_path or \"models/personalization\"\n    self._load_or_create_model()\n\ndef _load_or_create_model(self):\n    \"\"\"Load an existing model or create a new one.\"\"\"\n    try:\n        if os.path.exists(self.model_path):\n            logger.info(f\"Loading personalization model from {self.model_path}\")\n            self.model = tf.keras.models.load_model(self.model_path)\n        else:\n            logger.info(\"Creating new personalization model\")\n            self._create_model()\n    except Exception as e:\n        logger.error(f\"Error loading model: {str(e)}\")\n        self._create_model()\n\ndef _create_model(self):\n    \"\"\"Create a new TensorFlow model for personalization.\"\"\"\n    # Create a neural network for user preference prediction\n    self.model = tf.keras.Sequential([\n        tf.keras.layers.Input(shape=(10,)),  # 10 features\n        tf.keras.layers.Dense(64, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(32, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(16, activation='relu'),\n        tf.keras.layers.Dense(4, activation='softmax')  # 4 personalization categories\n    ])\n\n    # Compile the model\n    self.model.compile(\n        optimizer='adam',\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy']\n    )\n\n    # Initialize with some random weights\n    # In production, you would train this on real user data\n    dummy_x = np.random.random((100, 10))\n    dummy_y = np.random.randint(0, 4, size=(100,))\n    self.model.fit(dummy_x, dummy_y, epochs=5, verbose=0)\n\n    # Save the model\n    os.makedirs(os.path.dirname(self.model_path), exist_ok=True)\n    self.model.save(self.model_path)\n\ndef predict_category(self, features: np.ndarray) -&gt; Dict[str, Any]:\n    \"\"\"Predict personalization category for user features.\"\"\"\n    # Reshape features to match model input shape\n    if features.ndim == 1:\n        features = features.reshape(1, -1)\n\n    # Get predictions\n    predictions = self.model.predict(features)\n    category_index = np.argmax(predictions[0])\n    confidence = float(predictions[0][category_index])\n\n    # Map to category names\n    categories = [\"informational\", \"promotional\", \"relationship\", \"transactional\"]\n    category = categories[category_index]\n\n    return {\n        \"category\": category,\n        \"confidence\": confidence,\n        \"all_probabilities\": {cat: float(prob) for cat, prob in zip(categories, predictions[0])}\n    }\n\ndef train(self, features: np.ndarray, categories: np.ndarray, epochs: int = 10):\n    \"\"\"Train the model with new data.\"\"\"\n    history = self.model.fit(features, categories, epochs=epochs, verbose=0)\n\n    # Save the updated model\n    self.model.save(self.model_path)\n\n    return {\n        \"loss\": float(history.history['loss'][-1]),\n        \"accuracy\": float(history.history['accuracy'][-1])\n    }\n</code></pre> <p>class PersonalizationStrategy:     \"\"\"Personalization strategy factory.\"\"\"</p> <pre><code>@staticmethod\ndef get_strategy(category: str) -&gt; Dict[str, Any]:\n    \"\"\"Get personalization strategy for a category.\"\"\"\n    strategies = {\n        \"informational\": {\n            \"content_style\": \"educational and fact-based\",\n            \"subject_style\": \"clear and specific\",\n            \"cta_style\": \"learn more or download resources\",\n            \"frequency\": \"weekly\",\n            \"best_time\": \"morning\",\n            \"image_ratio\": 0.3,\n            \"email_length\": \"medium\",\n            \"tone\": \"professional\"\n        },\n        \"promotional\": {\n            \"content_style\": \"benefit-oriented with offers\",\n            \"subject_style\": \"attention-grabbing with urgency\",\n            \"cta_style\": \"act now, limited time offers\",\n            \"frequency\": \"twice weekly\",\n            \"best_time\": \"lunch or evening\",\n            \"image_ratio\": 0.6,\n            \"email_length\": \"short to medium\",\n            \"tone\": \"enthusiastic\"\n        },\n        \"relationship\": {\n            \"content_style\": \"personal and conversational\",\n            \"subject_style\": \"friendly and informal\",\n            \"cta_style\": \"soft engagement, feedback requests\",\n            \"frequency\": \"bi-weekly\",\n            \"best_time\": \"evening\",\n            \"image_ratio\": 0.4,\n            \"email_length\": \"medium to long\",\n            \"tone\": \"warm\"\n        },\n        \"transactional\": {\n            \"content_style\": \"direct and action-oriented\",\n            \"subject_style\": \"straightforward with clear purpose\",\n            \"cta_style\": \"complete transaction or next steps\",\n            \"frequency\": \"as needed\",\n            \"best_time\": \"business hours\",\n            \"image_ratio\": 0.2,\n            \"email_length\": \"short\",\n            \"tone\": \"direct\"\n        }\n    }\n\n    return strategies.get(category, strategies[\"informational\"])\n</code></pre> <p>class UserFeatureExtractor:     \"\"\"Extract user features for personalization.\"\"\"</p> <pre><code>@staticmethod\ndef extract_features(user_data: Dict[str, Any]) -&gt; np.ndarray:\n    \"\"\"Extract features from user data.\"\"\"\n    features = np.zeros(10)\n\n    # 1. Average open rate (0-1)\n    features[0] = user_data.get(\"avg_open_rate\", 0.0)\n\n    # 2. Average click rate (0-1)\n    features[1] = user_data.get(\"avg_click_rate\", 0.0)\n\n    # 3. Conversion rate (0-1)\n    features[2] = user_data.get(\"conversion_rate\", 0.0)\n\n    # 4. Email frequency preference (normalized 0-1)\n    features[3] = min(user_data.get(\"email_frequency\", 1) / 7, 1.0)\n\n    # 5. Days since last open (normalized 0-1)\n    days_since_open = user_data.get(\"days_since_open\", 30)\n    features[4] = 1.0 - min(days_since_open / 30, 1.0)  # Invert so higher is better\n\n    # 6. Device preference (0=desktop, 0.5=mixed, 1=mobile)\n    features[5] = user_data.get(\"device_preference\", 0.5)\n\n    # 7. Content preference (0=text, 0.5=mixed, 1=image)\n    features[6] = user_data.get(\"content_preference\", 0.5)\n\n    # 8. Engagement time preference (normalized 0-1, 0=morning, 1=night)\n    features[7] = user_data.get(\"engagement_time\", 0.5)\n\n    # 9. Response to promotions (0-1)\n    features[8] = user_data.get(\"promotion_response\", 0.0)\n\n    # 10. Unsubscribe risk (0-1, lower is better)\n    features[9] = 1.0 - user_data.get(\"unsubscribe_risk\", 0.0)  # Invert so higher is better\n\n    return features\n</code></pre> <p>class TrustScoreCalculator:     \"\"\"Calculate trust scores for campaigns and users.\"\"\"</p> <pre><code>@staticmethod\ndef calculate_campaign_trust_score(user_profile: Dict[str, Any], campaign_data: Dict[str, Any]) -&gt; int:\n    \"\"\"Calculate trust score for a specific campaign.\"\"\"\n    # Base score starts at 50\n    score = 50\n</code></pre>"},{"location":"archive/accessibility-components-guide/","title":"Accessibility Components Guide","text":"<p>This guide provides documentation for the accessible components implemented as part of Sprint 7. These components follow WCAG 2.1 AA guidelines and provide a solid foundation for building accessible user interfaces.</p>"},{"location":"archive/accessibility-components-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Components</li> <li>AccessibleButton</li> <li>AccessibleDatePicker</li> <li>AccessibleComboBox</li> <li>AccessibleDialog</li> <li>AccessibleTabs</li> <li>SkipNavLink</li> <li>Accessibility Testing</li> <li>Best Practices</li> <li>Resources</li> </ol>"},{"location":"archive/accessibility-components-guide/#introduction","title":"Introduction","text":"<p>Accessibility is a critical aspect of web development that ensures all users, including those with disabilities, can perceive, understand, navigate, and interact with web applications. The components in this guide have been designed and implemented with accessibility in mind, following the Web Content Accessibility Guidelines (WCAG) 2.1 AA standards.</p> <p>These components provide:</p> <ul> <li>Keyboard navigation support</li> <li>Screen reader compatibility</li> <li>Proper focus management</li> <li>ARIA attributes for enhanced accessibility</li> <li>High contrast visuals</li> <li>Touch-friendly interactions</li> </ul>"},{"location":"archive/accessibility-components-guide/#components","title":"Components","text":""},{"location":"archive/accessibility-components-guide/#accessiblebutton","title":"AccessibleButton","text":"<p>A button component that ensures proper keyboard navigation, focus management, and screen reader support.</p>"},{"location":"archive/accessibility-components-guide/#usage","title":"Usage","text":"<pre><code>import AccessibleButton from '../components/accessibility/AccessibleButton';\n\n&lt;AccessibleButton\n  variant=\"primary\" // 'primary', 'secondary', 'outline', or 'ghost'\n  size=\"md\" // 'sm', 'md', or 'lg'\n  onPress={() =&gt; console.log('Button pressed')}\n  isDisabled={false}\n&gt;\n  Click Me\n&lt;/AccessibleButton&gt;\n</code></pre>"},{"location":"archive/accessibility-components-guide/#props","title":"Props","text":"Prop Type Default Description <code>children</code> ReactNode (required) The content of the button <code>className</code> string '' Additional CSS classes <code>variant</code> 'primary' | 'secondary' | 'outline' | 'ghost' 'primary' The visual style of the button <code>size</code> 'sm' | 'md' | 'lg' 'md' The size of the button <code>onPress</code> () =&gt; void undefined Function called when the button is activated <code>isDisabled</code> boolean false Whether the button is disabled <code>autoFocus</code> boolean false Whether the button should be focused on mount <code>type</code> 'button' | 'submit' | 'reset' 'button' The type of the button"},{"location":"archive/accessibility-components-guide/#accessibledatepicker","title":"AccessibleDatePicker","text":"<p>A date picker component that provides an accessible date selection experience with keyboard navigation, screen reader support, and proper ARIA attributes.</p>"},{"location":"archive/accessibility-components-guide/#usage_1","title":"Usage","text":"<pre><code>import { useState } from 'react';\nimport AccessibleDatePicker from '../components/accessibility/AccessibleDatePicker';\nimport { parseDate, today, getLocalTimeZone } from '@internationalized/date';\n\nfunction MyComponent() {\n  const [date, setDate] = useState(today(getLocalTimeZone()));\n\n  return (\n    &lt;AccessibleDatePicker\n      label=\"Select a date\"\n      value={date}\n      onChange={setDate}\n      minValue={parseDate('2023-01-01')}\n      maxValue={parseDate('2025-12-31')}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"archive/accessibility-components-guide/#props_1","title":"Props","text":"Prop Type Default Description <code>label</code> string (required) The label for the date picker <code>value</code> DateValue undefined The currently selected date <code>onChange</code> (date: DateValue) =&gt; void undefined Function called when the selected date changes <code>minValue</code> DateValue undefined The minimum selectable date <code>maxValue</code> DateValue undefined The maximum selectable date <code>isDisabled</code> boolean false Whether the date picker is disabled <code>isRequired</code> boolean false Whether the date picker is required <code>className</code> string '' Additional CSS classes"},{"location":"archive/accessibility-components-guide/#accessiblecombobox","title":"AccessibleComboBox","text":"<p>A combo box component that provides an accessible autocomplete input with dropdown that supports keyboard navigation, screen readers, and proper ARIA attributes.</p>"},{"location":"archive/accessibility-components-guide/#usage_2","title":"Usage","text":"<pre><code>import { useState } from 'react';\nimport AccessibleComboBox from '../components/accessibility/AccessibleComboBox';\n\nfunction MyComponent() {\n  const options = [\n    { id: '1', name: 'Option 1' },\n    { id: '2', name: 'Option 2' },\n    { id: '3', name: 'Option 3' },\n  ];\n\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  return (\n    &lt;AccessibleComboBox\n      label=\"Select an option\"\n      options={options}\n      onSelectionChange={setSelectedOption}\n      placeholder=\"Type to search...\"\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"archive/accessibility-components-guide/#props_2","title":"Props","text":"Prop Type Default Description <code>label</code> string (required) The label for the combo box <code>options</code> Array&lt;{ id: string, name: string }&gt; (required) The options to display in the dropdown <code>onSelectionChange</code> (option: { id: string, name: string } | null) =&gt; void undefined Function called when the selected option changes <code>placeholder</code> string 'Select an option' Placeholder text for the input <code>isDisabled</code> boolean false Whether the combo box is disabled <code>isRequired</code> boolean false Whether the combo box is required <code>className</code> string '' Additional CSS classes"},{"location":"archive/accessibility-components-guide/#accessibledialog","title":"AccessibleDialog","text":"<p>A dialog component that ensures proper focus management, keyboard navigation, and screen reader support for modal dialogs.</p>"},{"location":"archive/accessibility-components-guide/#usage_3","title":"Usage","text":"<pre><code>import { useState } from 'react';\nimport AccessibleDialog from '../components/accessibility/AccessibleDialog';\nimport AccessibleButton from '../components/accessibility/AccessibleButton';\n\nfunction MyComponent() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    &lt;&gt;\n      &lt;AccessibleButton onPress={() =&gt; setIsOpen(true)}&gt;\n        Open Dialog\n      &lt;/AccessibleButton&gt;\n\n      &lt;AccessibleDialog\n        title=\"Dialog Title\"\n        isOpen={isOpen}\n        onClose={() =&gt; setIsOpen(false)}\n        size=\"md\"\n      &gt;\n        &lt;p&gt;Dialog content goes here.&lt;/p&gt;\n\n        &lt;div className=\"mt-4 flex justify-end\"&gt;\n          &lt;AccessibleButton\n            variant=\"outline\"\n            onPress={() =&gt; setIsOpen(false)}\n          &gt;\n            Close\n          &lt;/AccessibleButton&gt;\n        &lt;/div&gt;\n      &lt;/AccessibleDialog&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"archive/accessibility-components-guide/#props_3","title":"Props","text":"Prop Type Default Description <code>title</code> string (required) The title of the dialog <code>isOpen</code> boolean (required) Whether the dialog is open <code>onClose</code> () =&gt; void (required) Function called when the dialog is closed <code>children</code> ReactNode (required) The content of the dialog <code>isDismissable</code> boolean true Whether the dialog can be dismissed by clicking outside or pressing Escape <code>size</code> 'sm' | 'md' | 'lg' | 'xl' 'md' The size of the dialog <code>className</code> string '' Additional CSS classes"},{"location":"archive/accessibility-components-guide/#accessibletabs","title":"AccessibleTabs","text":"<p>A tabs component that provides an accessible tabbed interface with support for both horizontal and vertical orientations, keyboard navigation, and screen reader announcements.</p>"},{"location":"archive/accessibility-components-guide/#usage_4","title":"Usage","text":"<pre><code>import AccessibleTabs, { TabItem } from '../components/accessibility/AccessibleTabs';\n\nfunction MyComponent() {\n  return (\n    &lt;AccessibleTabs\n      label=\"Product Information\"\n      defaultSelectedKey=\"tab1\"\n      onSelectionChange={(key) =&gt; console.log('Selected tab:', key)}\n    &gt;\n      &lt;TabItem key=\"tab1\" title=\"Description\"&gt;\n        &lt;p&gt;Tab 1 content&lt;/p&gt;\n      &lt;/TabItem&gt;\n      &lt;TabItem key=\"tab2\" title=\"Specifications\"&gt;\n        &lt;p&gt;Tab 2 content&lt;/p&gt;\n      &lt;/TabItem&gt;\n      &lt;TabItem key=\"tab3\" title=\"Reviews\"&gt;\n        &lt;p&gt;Tab 3 content&lt;/p&gt;\n      &lt;/TabItem&gt;\n    &lt;/AccessibleTabs&gt;\n  );\n}\n</code></pre>"},{"location":"archive/accessibility-components-guide/#props_4","title":"Props","text":"Prop Type Default Description <code>label</code> string (required) The label for the tab list (for screen readers) <code>defaultSelectedKey</code> string undefined The key of the initially selected tab <code>onSelectionChange</code> (key: string) =&gt; void undefined Function called when the selected tab changes <code>orientation</code> 'horizontal' | 'vertical' 'horizontal' The orientation of the tabs <code>className</code> string '' Additional CSS classes for the container <code>tabClassName</code> string '' Additional CSS classes for the tabs <code>panelClassName</code> string '' Additional CSS classes for the tab panels <code>children</code> ReactNode (required) The TabItem components"},{"location":"archive/accessibility-components-guide/#tabitem-props","title":"TabItem Props","text":"Prop Type Default Description <code>key</code> string (required) The unique key for the tab <code>title</code> ReactNode (required) The title of the tab <code>children</code> ReactNode (required) The content of the tab panel"},{"location":"archive/accessibility-components-guide/#skipnavlink","title":"SkipNavLink","text":"<p>A skip navigation link component that allows keyboard users to bypass navigation and jump directly to the main content.</p>"},{"location":"archive/accessibility-components-guide/#usage_5","title":"Usage","text":"<pre><code>import SkipNavLink, { SkipNavTarget } from '../components/accessibility/SkipNavLink';\n\nfunction MyLayout({ children }) {\n  return (\n    &lt;&gt;\n      &lt;SkipNavLink targetId=\"main-content\" /&gt;\n\n      &lt;header&gt;\n        {/* Navigation goes here */}\n      &lt;/header&gt;\n\n      &lt;main id=\"main-content\"&gt;\n        &lt;SkipNavTarget id=\"main-content\" /&gt;\n        {children}\n      &lt;/main&gt;\n\n      &lt;footer&gt;\n        {/* Footer content goes here */}\n      &lt;/footer&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"archive/accessibility-components-guide/#props_5","title":"Props","text":"Prop Type Default Description <code>targetId</code> string (required) The ID of the target element to skip to <code>className</code> string '' Additional CSS classes"},{"location":"archive/accessibility-components-guide/#skipnavtarget-props","title":"SkipNavTarget Props","text":"Prop Type Default Description <code>id</code> string (required) The ID of the target element (should match the targetId of the SkipNavLink)"},{"location":"archive/accessibility-components-guide/#accessibility-testing","title":"Accessibility Testing","text":""},{"location":"archive/accessibility-components-guide/#axeaccessibility-component","title":"AxeAccessibility Component","text":"<p>The <code>AxeAccessibility</code> component integrates axe-core for accessibility testing in development mode. It automatically runs accessibility tests on your components and reports any issues in the browser console.</p>"},{"location":"archive/accessibility-components-guide/#usage_6","title":"Usage","text":"<pre><code>import AxeAccessibility from '../components/accessibility/AxeAccessibility';\n\nfunction MyApp({ children }) {\n  return (\n    &lt;AxeAccessibility&gt;\n      {children}\n    &lt;/AxeAccessibility&gt;\n  );\n}\n</code></pre>"},{"location":"archive/accessibility-components-guide/#manual-testing","title":"Manual Testing","text":"<p>In addition to automated testing, it's important to perform manual testing:</p> <ol> <li>Keyboard Navigation: Test all components using only the keyboard (Tab, Shift+Tab, Arrow keys, Enter, Space, Escape).</li> <li>Screen Readers: Test with screen readers like NVDA, VoiceOver, or JAWS.</li> <li>Zoom: Test at different zoom levels (up to 200%).</li> <li>High Contrast Mode: Test with high contrast mode enabled.</li> <li>Mobile Devices: Test on mobile devices with touch and screen readers.</li> </ol>"},{"location":"archive/accessibility-components-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Always provide labels: Every interactive element should have a clear label.</li> <li>Maintain focus order: Ensure a logical tab order that follows the visual layout.</li> <li>Provide feedback: Users should receive feedback when they interact with components.</li> <li>Use appropriate ARIA attributes: Only use ARIA when necessary and follow the ARIA authoring practices.</li> <li>Test with real users: If possible, test with users who have disabilities.</li> </ol>"},{"location":"archive/accessibility-components-guide/#resources","title":"Resources","text":"<ul> <li>Web Content Accessibility Guidelines (WCAG) 2.1</li> <li>WAI-ARIA Authoring Practices</li> <li>React Aria Documentation</li> <li>Axe-core Documentation</li> <li>A11y Project Checklist</li> </ul>"},{"location":"archive/ai-capabilities-summary/","title":"Maily AI Capabilities Summary","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/ai-capabilities-summary/#overview","title":"Overview","text":"<p>This document summarizes the AI capabilities implemented in the Maily platform. The AI features enhance the email marketing experience by providing intelligent suggestions, optimizations, and analyses that improve campaign performance and user efficiency.</p>"},{"location":"archive/ai-capabilities-summary/#architecture","title":"Architecture","text":""},{"location":"archive/ai-capabilities-summary/#model-adapter-interface","title":"Model Adapter Interface","text":"<p>The AI capabilities are built on a flexible adapter pattern that allows for easy integration with different AI models:</p> <ul> <li>Base Adapter Interface: Provides a common interface for all AI model implementations</li> <li>Provider-Specific Adapters: Implement the base interface for specific providers (currently OpenAI)</li> <li>Factory Pattern: Manages adapter creation and allows dynamic switching between providers</li> <li>Configuration Management: Supports customization of model parameters like temperature and token limits</li> </ul>"},{"location":"archive/ai-capabilities-summary/#key-components","title":"Key Components","text":"<ol> <li>ModelAdapter (Abstract Class)</li> <li>Defines standard methods for text generation, chat completions, and email-specific operations</li> <li>Provides configuration management for model parameters</li> <li> <p>Implemented by provider-specific adapters</p> </li> <li> <p>OpenAIAdapter</p> </li> <li>Concrete implementation for OpenAI's GPT models</li> <li>Handles API communication, error handling, and response parsing</li> <li> <p>Implements specialized methods for email marketing use cases</p> </li> <li> <p>AIService</p> </li> <li>Singleton service that provides a simplified interface to AI capabilities</li> <li>Manages adapter selection and configuration</li> <li>Exposes domain-specific methods for email marketing operations</li> </ol>"},{"location":"archive/ai-capabilities-summary/#implemented-features","title":"Implemented Features","text":""},{"location":"archive/ai-capabilities-summary/#email-subject-generation","title":"Email Subject Generation","text":"<p>Component: <code>SubjectGenerator</code></p> <ul> <li>Generates AI-powered subject line suggestions based on campaign details</li> <li>Takes into account campaign name, content, goals, and additional context</li> <li>Produces multiple variations for A/B testing</li> <li>Allows one-click application of generated subjects</li> </ul>"},{"location":"archive/ai-capabilities-summary/#content-optimization","title":"Content Optimization","text":"<p>Component: <code>ContentOptimizer</code></p> <ul> <li>Analyzes email content and provides improvement suggestions</li> <li>Categorizes suggestions by type (engagement, clarity, personalization, etc.)</li> <li>Highlights potential issues and provides specific improvement recommendations</li> <li>Allows direct application of optimized content</li> </ul>"},{"location":"archive/ai-capabilities-summary/#template-recommendations","title":"Template Recommendations","text":"<p>Component: <code>TemplateRecommender</code></p> <ul> <li>Suggests the most appropriate templates based on campaign goals and content</li> <li>Scores templates based on match with campaign parameters</li> <li>Provides explanations for why specific templates are recommended</li> <li>Shows visual previews with one-click application</li> </ul>"},{"location":"archive/ai-capabilities-summary/#content-analysis","title":"Content Analysis","text":"<p>Component: <code>ContentAnalyzer</code></p> <ul> <li>Provides comprehensive analysis of email content quality and performance potential</li> <li>Scores content across multiple dimensions (clarity, engagement, persuasion, etc.)</li> <li>Identifies potential issues that could impact deliverability or engagement</li> <li>Offers detailed recommendations for improvement</li> <li>Compares against industry benchmarks</li> <li>Predicts performance metrics based on content analysis</li> </ul>"},{"location":"archive/ai-capabilities-summary/#integration-points","title":"Integration Points","text":"<p>The AI capabilities are integrated at several points in the user journey:</p> <ol> <li>Campaign Creation</li> <li>Subject line generation during campaign setup</li> <li>Template recommendations based on campaign goals</li> <li>Content optimization for email body</li> <li> <p>Performance prediction and content analysis</p> </li> <li> <p>Template Management</p> </li> <li>Content analysis for templates</li> <li>Optimization suggestions for template content</li> <li> <p>Performance insights based on template usage</p> </li> <li> <p>Campaign Analysis</p> </li> <li>Performance insights and recommendations</li> <li>Comparison with industry benchmarks</li> <li>Targeted improvement suggestions</li> </ol>"},{"location":"archive/ai-capabilities-summary/#technical-implementation","title":"Technical Implementation","text":""},{"location":"archive/ai-capabilities-summary/#frontend-components","title":"Frontend Components","text":"<p>All AI-related UI components follow these principles:</p> <ul> <li>Client-side React components with <code>'use client'</code> directive</li> <li>Responsive design with mobile-first approach</li> <li>Loading states and error handling</li> <li>Toast notifications for user feedback</li> <li>Accessible UI elements with keyboard navigation</li> </ul>"},{"location":"archive/ai-capabilities-summary/#backend-integration","title":"Backend Integration","text":"<ul> <li>Direct integration with AI provider APIs</li> <li>Caching layer for performance optimization</li> <li>Error handling and fallback mechanisms</li> <li>Response formatting for frontend consumption</li> </ul>"},{"location":"archive/ai-capabilities-summary/#future-enhancements","title":"Future Enhancements","text":"<p>Planned AI capabilities for future releases:</p> <ol> <li>AI-Powered Audience Segmentation</li> <li>Intelligent subscriber segmentation based on behavior and characteristics</li> <li> <p>Recommendations for optimal targeting</p> </li> <li> <p>Smart Campaign Scheduling</p> </li> <li>AI-determined optimal send times based on audience behavior</li> <li> <p>Personalized scheduling for individual subscribers</p> </li> <li> <p>Enhanced Content Generation</p> </li> <li>Complete email content generation based on campaign goals</li> <li> <p>Dynamic content blocks based on subscriber data</p> </li> <li> <p>Automated A/B Testing</p> </li> <li>AI-generated variants for testing</li> <li>Intelligent analysis of test results</li> <li> <p>Automated optimization based on performance</p> </li> <li> <p>Predictive Analytics</p> </li> <li>Revenue and engagement forecasting</li> <li>Churn prediction and prevention</li> </ol>"},{"location":"archive/ai-capabilities-summary/#conclusion","title":"Conclusion","text":"<p>The AI capabilities in Maily transform the platform from a standard email marketing tool into an intelligent assistant that helps marketers create more effective campaigns with less effort. By leveraging state-of-the-art language models through a flexible adapter architecture, we can continue to enhance these capabilities and adapt to new AI advancements as they emerge.</p>"},{"location":"archive/ai-integration/","title":"AI Integration Modernization","text":""},{"location":"archive/ai-integration/#llm-integration-enhancement","title":"LLM Integration Enhancement","text":"<p>This document outlines the architecture for modernizing Maily's AI capabilities.</p>"},{"location":"archive/ai-integration/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              AI Orchestration           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Task Router    \u2502     Model Manager     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Chain Manager  \u2502   Retrieval System    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                 \u25b2\n          \u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Model Adapters             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 OpenAI  \u2502 Anthropic\u2502  Google  \u2502  Local   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                 \u25b2\n          \u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Knowledge Base             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Templates\u2502 Segments \u2502 Campaigns \u2502 Domain  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"archive/ai-integration/#core-components","title":"Core Components","text":""},{"location":"archive/ai-integration/#1-model-adapter-architecture","title":"1. Model Adapter Architecture","text":"<p>Our model adapter architecture provides a unified interface to multiple LLM providers:</p> <ul> <li>Base Adapter Interface: Define common methods for all LLMs</li> <li>Provider-Specific Adapters: Implement provider-specific functionality</li> <li>Fallback Chain: Create fallback patterns for reliability</li> <li>Model Versioning: Track model versions for reproducibility</li> </ul>"},{"location":"archive/ai-integration/#2-retrieval-augmented-generation-rag","title":"2. Retrieval Augmented Generation (RAG)","text":"<p>We'll implement RAG for domain-specific knowledge:</p> <ul> <li>Document Processing: Convert domain documents to embeddings</li> <li>Vector Database: Store and query embeddings efficiently</li> <li>Retrieval Strategies: Implement semantic search algorithms</li> <li>Generation with Context: Augment LLM prompts with retrieved context</li> </ul>"},{"location":"archive/ai-integration/#3-ai-task-orchestration","title":"3. AI Task Orchestration","text":"<p>Our AI orchestration system will:</p> <ul> <li>Task Routing: Direct tasks to appropriate AI services</li> <li>Chain of Thought: Implement multi-step reasoning</li> <li>Human Feedback: Incorporate user feedback for improvement</li> <li>Result Validation: Verify AI outputs for quality</li> </ul>"},{"location":"archive/ai-integration/#4-advanced-ai-features","title":"4. Advanced AI Features","text":"<p>We'll implement cutting-edge AI capabilities:</p> <ul> <li>Audience Segmentation: Use clustering for smart segmentation</li> <li>Engagement Prediction: Predict email open and click rates</li> <li>Content Optimization: Suggest improvements to email content</li> <li>A/B Testing Automation: Automatically generate test variants</li> </ul>"},{"location":"archive/ai-integration/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"archive/ai-integration/#adapter-pattern-for-model-switching","title":"Adapter Pattern for Model Switching","text":"<pre><code>// Base adapter interface\ninterface LLMAdapter {\n  generate(prompt: string, options?: GenerationOptions): Promise&lt;string&gt;;\n  embedding(text: string): Promise&lt;number[]&gt;;\n  moderateContent(text: string): Promise&lt;ModerationResult&gt;;\n  streamGeneration(prompt: string, callback: (chunk: string) =&gt; void): Promise&lt;void&gt;;\n}\n\n// OpenAI implementation\nclass OpenAIAdapter implements LLMAdapter {\n  private client: OpenAIClient;\n  private modelName: string;\n\n  constructor(apiKey: string, modelName: string = 'gpt-4o') {\n    this.client = new OpenAIClient(apiKey);\n    this.modelName = modelName;\n  }\n\n  async generate(prompt: string, options?: GenerationOptions): Promise&lt;string&gt; {\n    // Implementation\n  }\n\n  // Other methods...\n}\n\n// Anthropic implementation\nclass AnthropicAdapter implements LLMAdapter {\n  // Implementation\n}\n\n// Fallback chain\nclass FallbackLLMAdapter implements LLMAdapter {\n  private adapters: LLMAdapter[];\n\n  constructor(adapters: LLMAdapter[]) {\n    this.adapters = adapters;\n  }\n\n  async generate(prompt: string, options?: GenerationOptions): Promise&lt;string&gt; {\n    // Try each adapter in sequence until one succeeds\n  }\n\n  // Other methods...\n}\n</code></pre>"},{"location":"archive/ai-integration/#rag-implementation","title":"RAG Implementation","text":"<pre><code>interface Document {\n  id: string;\n  content: string;\n  metadata: Record&lt;string, any&gt;;\n}\n\nclass RAGSystem {\n  private vectorStore: VectorStore;\n  private llmAdapter: LLMAdapter;\n\n  constructor(vectorStore: VectorStore, llmAdapter: LLMAdapter) {\n    this.vectorStore = vectorStore;\n    this.llmAdapter = llmAdapter;\n  }\n\n  async addDocuments(documents: Document[]): Promise&lt;void&gt; {\n    // Process documents and add to vector store\n  }\n\n  async generateWithContext(query: string, options?: RAGOptions): Promise&lt;string&gt; {\n    // Retrieve relevant documents\n    const relevantDocs = await this.retrieveRelevantDocuments(query);\n\n    // Build context-enhanced prompt\n    const enhancedPrompt = this.buildPromptWithContext(query, relevantDocs);\n\n    // Generate response with context\n    return this.llmAdapter.generate(enhancedPrompt, options);\n  }\n\n  private async retrieveRelevantDocuments(query: string): Promise&lt;Document[]&gt; {\n    // Implementation\n  }\n\n  private buildPromptWithContext(query: string, documents: Document[]): string {\n    // Implementation\n  }\n}\n</code></pre>"},{"location":"archive/ai-integration/#task-orchestration","title":"Task Orchestration","text":"<pre><code>interface AITask {\n  type: string;\n  input: Record&lt;string, any&gt;;\n  options?: Record&lt;string, any&gt;;\n}\n\ninterface AITaskResult {\n  output: any;\n  metadata: {\n    modelUsed: string;\n    executionTime: number;\n    tokenUsage?: {\n      prompt: number;\n      completion: number;\n      total: number;\n    };\n  };\n}\n\nclass AIOrchestrator {\n  private taskHandlers: Map&lt;string, TaskHandler&gt;;\n  private llmAdapterFactory: LLMAdapterFactory;\n\n  constructor(llmAdapterFactory: LLMAdapterFactory) {\n    this.taskHandlers = new Map();\n    this.llmAdapterFactory = llmAdapterFactory;\n\n    // Register task handlers\n    this.registerDefaultHandlers();\n  }\n\n  registerTaskHandler(taskType: string, handler: TaskHandler): void {\n    this.taskHandlers.set(taskType, handler);\n  }\n\n  async executeTask(task: AITask): Promise&lt;AITaskResult&gt; {\n    // Get handler for task type\n    const handler = this.taskHandlers.get(task.type);\n    if (!handler) {\n      throw new Error(`No handler registered for task type: ${task.type}`);\n    }\n\n    // Execute task\n    const startTime = Date.now();\n    const output = await handler.execute(task.input, task.options);\n    const executionTime = Date.now() - startTime;\n\n    return {\n      output,\n      metadata: {\n        modelUsed: handler.getModelInfo(),\n        executionTime,\n        // Additional metadata\n      }\n    };\n  }\n\n  private registerDefaultHandlers(): void {\n    // Register default handlers for common tasks\n  }\n}\n</code></pre>"},{"location":"archive/ai-integration/#ai-features-implementation","title":"AI Features Implementation","text":""},{"location":"archive/ai-integration/#1-email-content-generation","title":"1. Email Content Generation","text":"<pre><code>class EmailContentGenerator {\n  private ragSystem: RAGSystem;\n  private orchestrator: AIOrchestrator;\n\n  async generateSubjectLines(campaignInfo: CampaignInfo): Promise&lt;string[]&gt; {\n    // Implementation\n  }\n\n  async generateEmailBody(template: EmailTemplate, campaignInfo: CampaignInfo): Promise&lt;string&gt; {\n    // Implementation\n  }\n\n  async improveEmailContent(content: string, goal: string): Promise&lt;string&gt; {\n    // Implementation\n  }\n}\n</code></pre>"},{"location":"archive/ai-integration/#2-audience-segmentation","title":"2. Audience Segmentation","text":"<pre><code>class AudienceSegmenter {\n  private mlClient: MLClient;\n\n  async segmentSubscribers(subscribers: Subscriber[]): Promise&lt;SubscriberSegment[]&gt; {\n    // Implementation using clustering algorithms\n  }\n\n  async predictEngagement(subscriber: Subscriber, campaign: Campaign): Promise&lt;EngagementScore&gt; {\n    // Implementation using predictive models\n  }\n}\n</code></pre>"},{"location":"archive/ai-integration/#3-ab-testing-automation","title":"3. A/B Testing Automation","text":"<pre><code>class ABTestingAutomator {\n  private contentGenerator: EmailContentGenerator;\n\n  async generateVariants(originalContent: string, count: number): Promise&lt;string[]&gt; {\n    // Implementation\n  }\n\n  async analyzeTestResults(variants: EmailVariant[], results: TestResults): Promise&lt;ABTestAnalysis&gt; {\n    // Implementation\n  }\n}\n</code></pre>"},{"location":"archive/ai-integration/#implementation-roadmap","title":"Implementation Roadmap","text":"<ol> <li>Model Adapter Framework</li> <li>Implement base adapter interface</li> <li>Create adapters for OpenAI, Anthropic, and Google</li> <li>Implement fallback chaining</li> <li> <p>Add monitoring and logging</p> </li> <li> <p>RAG System Implementation</p> </li> <li>Set up vector database (Pinecone or similar)</li> <li>Implement document processing</li> <li>Create embedding generation pipeline</li> <li> <p>Build retrieval and generation system</p> </li> <li> <p>AI Orchestration Layer</p> </li> <li>Develop task routing system</li> <li>Implement chain-of-thought reasoning</li> <li>Create validation mechanisms</li> <li> <p>Add observability and metrics</p> </li> <li> <p>Advanced AI Features</p> </li> <li>Implement audience segmentation</li> <li>Build engagement prediction models</li> <li>Create content optimization system</li> <li>Develop automated A/B testing</li> </ol>"},{"location":"archive/ai-integration/#monitoring-and-metrics","title":"Monitoring and Metrics","text":"<p>We'll implement comprehensive monitoring:</p> <ul> <li>Token Usage: Track token consumption by model and task</li> <li>Latency: Measure response times for AI operations</li> <li>Quality Metrics: Track content quality scores</li> <li>User Feedback: Collect and analyze user feedback</li> <li>Model Performance: Compare different models and versions</li> </ul>"},{"location":"archive/ai-integration/#security-and-compliance","title":"Security and Compliance","text":"<p>Our AI implementation will adhere to:</p> <ul> <li>Data Privacy: Comply with GDPR and other regulations</li> <li>Content Moderation: Filter inappropriate content</li> <li>Transparency: Document AI usage and decision-making</li> <li>Fairness: Monitor and mitigate bias in AI systems</li> <li>Opt-out Mechanisms: Allow users to opt out of AI features</li> </ul>"},{"location":"archive/ai-ml-implementation/","title":"AI &amp; ML Implementation","text":"<p>This document outlines the production-grade implementation of the AI &amp; ML enhancements for Maily, as specified in the enhancement plan.</p>"},{"location":"archive/ai-ml-implementation/#current-implementation-status","title":"Current Implementation Status","text":"<p>Based on the code review, the following AI &amp; ML components are already implemented:</p> <ul> <li>Langfuse Integration: Implemented for AI observability with tracing capabilities</li> <li>Anthropic Claude 3 Models: Support for Claude 3 Opus, Sonnet, and Haiku models</li> <li>Basic Stability AI Support: Through Replicate adapter for image generation</li> </ul>"},{"location":"archive/ai-ml-implementation/#implementation-plan-for-remaining-components","title":"Implementation Plan for Remaining Components","text":"<p>The following sections outline the implementation plan for the remaining AI &amp; ML enhancements.</p>"},{"location":"archive/ai-ml-implementation/#1-model-versioning-registry","title":"1. Model Versioning &amp; Registry","text":""},{"location":"archive/ai-ml-implementation/#11-weights-biases-integration","title":"1.1 Weights &amp; Biases Integration","text":"<p>We'll implement Weights &amp; Biases for experiment tracking and model registry:</p> <pre><code># apps/api/ai/wandb_integration.py\n\"\"\"Weights &amp; Biases integration for model versioning and experiment tracking.\"\"\"\n\nimport os\nimport wandb\nfrom typing import Dict, Any, Optional, List\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass WandbModelRegistry:\n    \"\"\"Weights &amp; Biases model registry integration.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None, project_name: str = \"maily-ai\"):\n        \"\"\"Initialize the Weights &amp; Biases model registry.\n\n        Args:\n            api_key: Weights &amp; Biases API key (defaults to WANDB_API_KEY env var)\n            project_name: Weights &amp; Biases project name\n        \"\"\"\n        self.api_key = api_key or os.getenv(\"WANDB_API_KEY\")\n        self.project_name = project_name\n\n        if not self.api_key:\n            logger.warning(\"WANDB_API_KEY not set. Model versioning will be disabled.\")\n            self.enabled = False\n        else:\n            try:\n                wandb.login(key=self.api_key)\n                self.enabled = True\n                logger.info(\"Weights &amp; Biases model registry initialized successfully\")\n            except Exception as e:\n                logger.error(f\"Failed to initialize Weights &amp; Biases: {str(e)}\")\n                self.enabled = False\n\n    def log_model_usage(self,\n                        model_name: str,\n                        provider: str,\n                        prompt: str,\n                        response: str,\n                        metadata: Optional[Dict[str, Any]] = None) -&gt; Optional[str]:\n        \"\"\"Log model usage to Weights &amp; Biases.\n\n        Args:\n            model_name: Name of the model\n            provider: Provider of the model (e.g., openai, anthropic)\n            prompt: Prompt sent to the model\n            response: Response from the model\n            metadata: Additional metadata\n\n        Returns:\n            Run ID if successful, None otherwise\n        \"\"\"\n        if not self.enabled:\n            return None\n\n        try:\n            # Initialize a new W&amp;B run\n            run = wandb.init(\n                project=self.project_name,\n                job_type=\"inference\",\n                config={\n                    \"model_name\": model_name,\n                    \"provider\": provider,\n                    \"timestamp\": wandb.util.get_timestamp(),\n                    **(metadata or {})\n                }\n            )\n\n            # Log the prompt and response\n            wandb.log({\n                \"prompt\": prompt,\n                \"response\": response,\n                \"prompt_tokens\": len(prompt.split()),\n                \"response_tokens\": len(response.split()),\n                \"total_tokens\": len(prompt.split()) + len(response.split())\n            })\n\n            # Finish the run\n            run_id = run.id\n            run.finish()\n\n            return run_id\n        except Exception as e:\n            logger.error(f\"Failed to log model usage to Weights &amp; Biases: {str(e)}\")\n            return None\n\n    def start_experiment(self,\n                        experiment_name: str,\n                        config: Dict[str, Any]) -&gt; Optional[str]:\n        \"\"\"Start a new experiment in Weights &amp; Biases.\n\n        Args:\n            experiment_name: Name of the experiment\n            config: Experiment configuration\n\n        Returns:\n            Run ID if successful, None otherwise\n        \"\"\"\n        if not self.enabled:\n            return None\n\n        try:\n            # Initialize a new W&amp;B run\n            run = wandb.init(\n                project=self.project_name,\n                name=experiment_name,\n                job_type=\"experiment\",\n                config=config\n            )\n\n            return run.id\n        except Exception as e:\n            logger.error(f\"Failed to start experiment in Weights &amp; Biases: {str(e)}\")\n            return None\n\n    def log_experiment_metrics(self,\n                              run_id: str,\n                              metrics: Dict[str, Any]) -&gt; bool:\n        \"\"\"Log metrics to an existing experiment.\n\n        Args:\n            run_id: Run ID of the experiment\n            metrics: Metrics to log\n\n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self.enabled:\n            return False\n\n        try:\n            # Resume the run\n            with wandb.init(id=run_id, resume=\"must\") as run:\n                # Log the metrics\n                wandb.log(metrics)\n\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to log metrics to Weights &amp; Biases: {str(e)}\")\n            return False\n\n    def register_model(self,\n                      model_name: str,\n                      model_version: str,\n                      metadata: Dict[str, Any],\n                      aliases: Optional[List[str]] = None) -&gt; Optional[str]:\n        \"\"\"Register a model in the Weights &amp; Biases model registry.\n\n        Args:\n            model_name: Name of the model\n            model_version: Version of the model\n            metadata: Model metadata\n            aliases: Optional list of aliases for the model\n\n        Returns:\n            Model ID if successful, None otherwise\n        \"\"\"\n        if not self.enabled:\n            return None\n\n        try:\n            # Initialize a new W&amp;B run\n            with wandb.init(\n                project=self.project_name,\n                job_type=\"model_registration\",\n                config={\n                    \"model_name\": model_name,\n                    \"model_version\": model_version,\n                    **metadata\n                }\n            ) as run:\n                # Log the model to the registry\n                artifact = wandb.Artifact(\n                    name=model_name,\n                    type=\"model\",\n                    metadata=metadata\n                )\n\n                # Add files to the artifact if needed\n                # artifact.add_file(\"path/to/model/file\")\n\n                # Log the artifact\n                run.log_artifact(artifact, aliases=aliases or [\"latest\"])\n\n                return artifact.id\n        except Exception as e:\n            logger.error(f\"Failed to register model in Weights &amp; Biases: {str(e)}\")\n            return None\n\n    def get_model(self,\n                 model_name: str,\n                 alias: str = \"latest\") -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Get a model from the Weights &amp; Biases model registry.\n\n        Args:\n            model_name: Name of the model\n            alias: Alias of the model version\n\n        Returns:\n            Model metadata if successful, None otherwise\n        \"\"\"\n        if not self.enabled:\n            return None\n\n        try:\n            # Initialize a new W&amp;B run\n            with wandb.init(\n                project=self.project_name,\n                job_type=\"model_retrieval\"\n            ) as run:\n                # Get the artifact\n                artifact = run.use_artifact(f\"{model_name}:{alias}\")\n\n                # Return the metadata\n                return artifact.metadata\n        except Exception as e:\n            logger.error(f\"Failed to get model from Weights &amp; Biases: {str(e)}\")\n            return None\n\n# Create a singleton instance\nwandb_registry = WandbModelRegistry()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#12-dvc-integration","title":"1.2 DVC Integration","text":"<p>We'll implement DVC for model versioning:</p> <pre><code># apps/api/ai/dvc_integration.py\n\"\"\"DVC integration for model versioning.\"\"\"\n\nimport os\nimport subprocess\nimport logging\nfrom typing import Dict, Any, Optional, List\n\nlogger = logging.getLogger(__name__)\n\nclass DVCModelVersioning:\n    \"\"\"DVC model versioning integration.\"\"\"\n\n    def __init__(self, models_dir: str = \"models\"):\n        \"\"\"Initialize the DVC model versioning.\n\n        Args:\n            models_dir: Directory for model storage\n        \"\"\"\n        self.models_dir = models_dir\n\n        # Ensure the models directory exists\n        os.makedirs(self.models_dir, exist_ok=True)\n\n        # Check if DVC is initialized\n        if not os.path.exists(\".dvc\"):\n            try:\n                subprocess.run([\"dvc\", \"init\"], check=True)\n                logger.info(\"DVC initialized successfully\")\n            except Exception as e:\n                logger.error(f\"Failed to initialize DVC: {str(e)}\")\n                self.enabled = False\n                return\n\n        self.enabled = True\n        logger.info(\"DVC model versioning initialized successfully\")\n\n    def add_model(self,\n                 model_name: str,\n                 model_version: str,\n                 model_data: Dict[str, Any]) -&gt; bool:\n        \"\"\"Add a model to DVC.\n\n        Args:\n            model_name: Name of the model\n            model_version: Version of the model\n            model_data: Model data to save\n\n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self.enabled:\n            return False\n\n        try:\n            # Create the model directory\n            model_dir = os.path.join(self.models_dir, model_name, model_version)\n            os.makedirs(model_dir, exist_ok=True)\n\n            # Save the model data\n            import json\n            with open(os.path.join(model_dir, \"model.json\"), \"w\") as f:\n                json.dump(model_data, f)\n\n            # Add the model to DVC\n            subprocess.run([\"dvc\", \"add\", model_dir], check=True)\n\n            # Commit the changes\n            subprocess.run([\"git\", \"add\", f\"{model_dir}.dvc\"], check=True)\n            subprocess.run([\"git\", \"commit\", \"-m\", f\"Add model {model_name} version {model_version}\"], check=True)\n\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to add model to DVC: {str(e)}\")\n            return False\n\n    def get_model(self,\n                 model_name: str,\n                 model_version: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Get a model from DVC.\n\n        Args:\n            model_name: Name of the model\n            model_version: Version of the model\n\n        Returns:\n            Model data if successful, None otherwise\n        \"\"\"\n        if not self.enabled:\n            return None\n\n        try:\n            # Get the model path\n            model_dir = os.path.join(self.models_dir, model_name, model_version)\n            model_file = os.path.join(model_dir, \"model.json\")\n\n            # Pull the model from DVC\n            subprocess.run([\"dvc\", \"pull\", f\"{model_dir}.dvc\"], check=True)\n\n            # Load the model data\n            import json\n            with open(model_file, \"r\") as f:\n                model_data = json.load(f)\n\n            return model_data\n        except Exception as e:\n            logger.error(f\"Failed to get model from DVC: {str(e)}\")\n            return None\n\n    def list_models(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"List all models in DVC.\n\n        Returns:\n            List of model metadata\n        \"\"\"\n        if not self.enabled:\n            return []\n\n        try:\n            models = []\n\n            # List all model directories\n            for model_name in os.listdir(self.models_dir):\n                model_dir = os.path.join(self.models_dir, model_name)\n                if os.path.isdir(model_dir):\n                    for model_version in os.listdir(model_dir):\n                        version_dir = os.path.join(model_dir, model_version)\n                        if os.path.isdir(version_dir):\n                            models.append({\n                                \"name\": model_name,\n                                \"version\": model_version,\n                                \"path\": version_dir\n                            })\n\n            return models\n        except Exception as e:\n            logger.error(f\"Failed to list models from DVC: {str(e)}\")\n            return []\n\n# Create a singleton instance\ndvc_versioning = DVCModelVersioning()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#2-ai-observability","title":"2. AI Observability","text":""},{"location":"archive/ai-ml-implementation/#21-arize-ai-integration","title":"2.1 Arize AI Integration","text":"<p>We'll implement Arize AI for ML observability:</p> <pre><code># apps/api/ai/arize_integration.py\n\"\"\"Arize AI integration for ML observability.\"\"\"\n\nimport os\nimport logging\nfrom typing import Dict, Any, Optional, List, Union\nimport uuid\n\nlogger = logging.getLogger(__name__)\n\nclass ArizeAIObservability:\n    \"\"\"Arize AI observability integration.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None, space_key: Optional[str] = None):\n        \"\"\"Initialize the Arize AI observability.\n\n        Args:\n            api_key: Arize AI API key (defaults to ARIZE_API_KEY env var)\n            space_key: Arize AI space key (defaults to ARIZE_SPACE_KEY env var)\n        \"\"\"\n        self.api_key = api_key or os.getenv(\"ARIZE_API_KEY\")\n        self.space_key = space_key or os.getenv(\"ARIZE_SPACE_KEY\")\n\n        if not self.api_key or not self.space_key:\n            logger.warning(\"ARIZE_API_KEY or ARIZE_SPACE_KEY not set. ML observability will be disabled.\")\n            self.enabled = False\n        else:\n            try:\n                # Import Arize AI SDK\n                import arize\n                from arize.api import Client\n\n                # Initialize Arize AI client\n                self.client = Client(\n                    api_key=self.api_key,\n                    space_key=self.space_key\n                )\n\n                self.enabled = True\n                logger.info(\"Arize AI observability initialized successfully\")\n            except ImportError:\n                logger.error(\"Arize AI SDK not installed. Please install with 'pip install arize'.\")\n                self.enabled = False\n            except Exception as e:\n                logger.error(f\"Failed to initialize Arize AI: {str(e)}\")\n                self.enabled = False\n\n    def log_prediction(self,\n                      model_id: str,\n                      model_version: str,\n                      prediction_id: Optional[str] = None,\n                      features: Optional[Dict[str, Any]] = None,\n                      prediction: Optional[Union[str, float, int, Dict[str, Any]]] = None,\n                      actual: Optional[Union[str, float, int, Dict[str, Any]]] = None,\n                      prediction_timestamp: Optional[str] = None,\n                      tags: Optional[Dict[str, str]] = None) -&gt; bool:\n        \"\"\"Log a prediction to Arize AI.\n\n        Args:\n            model_id: ID of the model\n            model_version: Version of the model\n            prediction_id: Optional prediction ID (defaults to a UUID)\n            features: Optional features used for the prediction\n            prediction: Optional prediction value\n            actual: Optional actual value\n            prediction_timestamp: Optional prediction timestamp\n            tags: Optional tags\n\n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self.enabled:\n            return False\n\n        try:\n            # Import Arize AI SDK\n            import arize\n            from arize.utils.types import ModelTypes, Environments\n\n            # Generate a prediction ID if not provided\n            if not prediction_id:\n                prediction_id = str(uuid.uuid4())\n\n            # Log the prediction\n            response = self.client.log(\n                model_id=model_id,\n                model_version=model_version,\n                model_type=ModelTypes.SCORE_CATEGORICAL,\n                environment=Environments.PRODUCTION,\n                prediction_id=prediction_id,\n                features=features or {},\n                prediction_score=prediction,\n                actual_score=actual,\n                prediction_timestamp=prediction_timestamp,\n                tags=tags or {}\n            )\n\n            return response.status_code == 200\n        except Exception as e:\n            logger.error(f\"Failed to log prediction to Arize AI: {str(e)}\")\n            return False\n\n    def log_llm_prediction(self,\n                          model_id: str,\n                          model_version: str,\n                          prompt: str,\n                          response: str,\n                          prediction_id: Optional[str] = None,\n                          metadata: Optional[Dict[str, Any]] = None,\n                          tags: Optional[Dict[str, str]] = None) -&gt; bool:\n        \"\"\"Log an LLM prediction to Arize AI.\n\n        Args:\n            model_id: ID of the model\n            model_version: Version of the model\n            prompt: Prompt sent to the model\n            response: Response from the model\n            prediction_id: Optional prediction ID (defaults to a UUID)\n            metadata: Optional metadata\n            tags: Optional tags\n\n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self.enabled:\n            return False\n\n        try:\n            # Import Arize AI SDK\n            import arize\n            from arize.utils.types import ModelTypes, Environments\n\n            # Generate a prediction ID if not provided\n            if not prediction_id:\n                prediction_id = str(uuid.uuid4())\n\n            # Log the prediction\n            response = self.client.log(\n                model_id=model_id,\n                model_version=model_version,\n                model_type=ModelTypes.GENERATIVE_LLM,\n                environment=Environments.PRODUCTION,\n                prediction_id=prediction_id,\n                features={\"prompt\": prompt},\n                prediction_score={\"response\": response},\n                tags=tags or {},\n                embedding_feature_names=[\"prompt\"],\n                embedding_feature_values=[prompt]\n            )\n\n            return response.status_code == 200\n        except Exception as e:\n            logger.error(f\"Failed to log LLM prediction to Arize AI: {str(e)}\")\n            return False\n\n# Create a singleton instance\narize_observability = ArizeAIObservability()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#3-advanced-ai-features","title":"3. Advanced AI Features","text":""},{"location":"archive/ai-ml-implementation/#31-enhanced-anthropic-claude-3-integration","title":"3.1 Enhanced Anthropic Claude 3 Integration","text":"<p>We'll enhance the Anthropic Claude 3 integration for advanced reasoning:</p> <pre><code># apps/api/ai/anthropic_integration.py\n\"\"\"Enhanced Anthropic Claude 3 integration for advanced reasoning.\"\"\"\n\nimport os\nimport logging\nfrom typing import Dict, Any, Optional, List, Union\nimport json\n\nlogger = logging.getLogger(__name__)\n\nclass EnhancedClaudeService:\n    \"\"\"Enhanced Anthropic Claude 3 service for advanced reasoning.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None):\n        \"\"\"Initialize the Enhanced Claude service.\n\n        Args:\n            api_key: Anthropic API key (defaults to ANTHROPIC_API_KEY env var)\n        \"\"\"\n        self.api_key = api_key or os.getenv(\"ANTHROPIC_API_KEY\")\n\n        if not self.api_key:\n            logger.warning(\"ANTHROPIC_API_KEY not set. Enhanced Claude service will be disabled.\")\n            self.enabled = False\n        else:\n            try:\n                # Import Anthropic SDK\n                import anthropic\n\n                # Initialize Anthropic client\n                self.client = anthropic.Anthropic(api_key=self.api_key)\n\n                self.enabled = True\n                logger.info(\"Enhanced Claude service initialized successfully\")\n            except ImportError:\n                logger.error(\"Anthropic SDK not installed. Please install with 'pip install anthropic'.\")\n                self.enabled = False\n            except Exception as e:\n                logger.error(f\"Failed to initialize Enhanced Claude service: {str(e)}\")\n                self.enabled = False\n\n    async def generate_content(self,\n                              prompt: str,\n                              model: str = \"claude-3-opus-20240229\",\n                              system_prompt: Optional[str] = None,\n                              temperature: float = 0.7,\n                              max_tokens: int = 4000,\n                              metadata: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n        \"\"\"Generate content using Claude 3.\n\n        Args:\n            prompt: Prompt to send to Claude\n            model: Claude model to use\n            system_prompt: Optional system prompt\n            temperature: Temperature for generation\n            max_tokens: Maximum tokens to generate\n            metadata: Optional metadata\n\n        Returns:\n            Dictionary containing the generated content and metadata\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Enhanced Claude service is not enabled\"}\n\n        try:\n            # Import Anthropic SDK\n            import anthropic\n\n            # Create the message\n            message_params = {\n                \"model\": model,\n                \"max_tokens\": max_tokens,\n                \"temperature\": temperature,\n                \"messages\": [{\"role\": \"user\", \"content\": prompt}]\n            }\n\n            # Add system prompt if provided\n            if system_prompt:\n                message_params[\"system\"] = system_prompt\n\n            # Add metadata if provided\n            if metadata:\n                message_params[\"metadata\"] = metadata\n\n            # Generate the content\n            response = self.client.messages.create(**message_params)\n\n            # Extract the content\n            content = response.content[0].text\n\n            return {\n                \"content\": content,\n                \"model\": model,\n                \"usage\": {\n                    \"input_tokens\": response.usage.input_tokens,\n                    \"output_tokens\": response.usage.output_tokens\n                },\n                \"id\": response.id\n            }\n        except Exception as e:\n            logger.error(f\"Failed to generate content with Claude 3: {str(e)}\")\n            return {\"error\": str(e)}\n\n    async def analyze_email_campaign(self,\n                                    campaign_data: Dict[str, Any],\n                                    model: str = \"claude-3-opus-20240229\") -&gt; Dict[str, Any]:\n        \"\"\"Analyze an email campaign using Claude 3.\n\n        Args:\n            campaign_data: Email campaign data\n            model: Claude model to use\n\n        Returns:\n            Dictionary containing the analysis\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Enhanced Claude service is not enabled\"}\n\n        try:\n            # Create the prompt\n            prompt = f\"\"\"\n            Please analyze the following email campaign and provide insights:\n\n            Campaign Name: {campaign_data.get('name', 'N/A')}\n            Subject: {campaign_data.get('subject', 'N/A')}\n            Target Audience: {campaign_data.get('audience', 'N/A')}\n\n            Email Content:\n            {campaign_data.get('content', 'N/A')}\n\n            Please provide:\n            1. Overall assessment of the campaign\n            2. Strengths of the campaign\n            3. Areas for improvement\n            4. Suggestions for A/B testing\n            5. Predicted performance metrics\n            \"\"\"\n\n            # Generate the analysis\n            response = await self.generate_content(\n                prompt=prompt,\n                model=model,\n                system_prompt=\"You are an expert email marketing analyst. Provide detailed, actionable insights for email campaigns.\",\n                temperature=0.3\n            )\n\n            return response\n        except Exception as e:\n            logger.error(f\"Failed to analyze email campaign with Claude 3: {str(e)}\")\n            return {\"error\": str(e)}\n\n    async def generate_email_variations(self,\n                                       email_data: Dict[str, Any],\n                                       num_variations: int = 3,\n                                       model: str = \"claude-3-opus-20240229\") -&gt; Dict[str, Any]:\n        \"\"\"Generate variations of an email using Claude 3.\n\n        Args:\n            email_data: Email data\n            num_variations: Number of variations to generate\n            model: Claude model to use\n\n        Returns:\n            Dictionary containing the generated variations\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Enhanced Claude service is not enabled\"}\n\n        try:\n            # Create the prompt\n            prompt = f\"\"\"\n            Please generate {num_variations} variations of the following email:\n\n            Subject: {email_data.get('subject', 'N/A')}\n            Target Audience: {email_data.get('audience', 'N/A')}\n\n            Original Email Content:\n            {email_data.get('content', 'N/A')}\n\n            For each variation, provide:\n            1. A new subject line\n            2. The full email content\n            3. A brief explanation of the changes made and why\n\n            Return the results in JSON format with the following structure:\n            {{\n                \"variations\": [\n                    {{\n                        \"subject\": \"New subject line\",\n                        \"content\": \"New email content\",\n                        \"explanation\": \"Explanation of changes\"\n                    }},\n                    ...\n                ]\n            }}\n            \"\"\"\n\n            # Generate the variations\n            response = await self.generate_content(\n                prompt=prompt,\n                model=model,\n                system_prompt=\"You are an expert email copywriter. Generate creative and effective email variations.\",\n                temperature=0.7\n            )\n\n            # Parse the JSON response\n            try:\n                content = response.get(\"content\", \"{}\")\n                # Extract JSON from the content (it might be wrapped in markdown code blocks)\n                if \"```json\" in content:\n                    content = content.split(\"```json\")[1].split(\"```\")[0].strip()\n                elif \"```\" in content:\n                    content = content.split(\"```\")[1].split(\"```\")[0].strip()\n\n                variations = json.loads(content)\n                return {\n                    \"variations\": variations.get(\"variations\", []),\n                    \"model\": model,\n                    \"usage\": response.get(\"usage\", {})\n                }\n            except json.JSONDecodeError:\n                # If JSON parsing fails, return the raw content\n                return {\n                    \"error\": \"Failed to parse JSON response\",\n                    \"raw_content\": response.get(\"content\", \"\")\n                }\n        except Exception as e:\n            logger.error(f\"Failed to generate email variations with Claude 3: {str(e)}\")\n            return {\"error\": str(e)}\n\n# Create a singleton instance\nenhanced_claude_service = EnhancedClaudeService()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#32-enhanced-stability-ai-integration","title":"3.2 Enhanced Stability AI Integration","text":"<p>We'll enhance the Stability AI integration for image generation:</p> <pre><code># apps/api/ai/stability_integration.py\n\"\"\"Enhanced Stability AI integration for image generation.\"\"\"\n\nimport os\nimport logging\nimport base64\nfrom typing import Dict, Any, Optional, List, Union\nimport requests\n\nlogger = logging.getLogger(__name__)\n\nclass StabilityAIService:\n    \"\"\"Stability AI service for image generation.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None):\n        \"\"\"Initialize the Stability AI service.\n\n        Args:\n            api_key: Stability AI API key (defaults to STABILITY_API_KEY env var)\n        \"\"\"\n        self.api_key = api_key or os.getenv(\"STABILITY_API_KEY\")\n        self.api_host = os.getenv(\"STABILITY_API_HOST\", \"https://api.stability.ai\")\n\n        if not self.api_key:\n            logger.warning(\"STABILITY_API_KEY not set. Stability AI service will be disabled.\")\n            self.enabled = False\n        else:\n            self.enabled = True\n            logger.info(\"Stability AI service initialized successfully\")\n\n    async def generate_image(self,\n                            prompt: str,\n                            negative_prompt: Optional[str] = None,\n                            width: int = 1024,\n                            height: int = 1024,\n                            cfg_scale: float = 7.0,\n                            steps: int = 30,\n                            samples: int = 1,\n                            engine_id: str = \"stable-diffusion-xl-1024-v1-0\") -&gt; Dict[str, Any]:\n        \"\"\"Generate an image using Stability AI.\n\n        Args:\n            prompt: Prompt to generate the image\n            negative_prompt: Optional negative prompt\n            width: Width of the image\n            height: Height of the image\n            cfg_scale: CFG scale\n            steps: Number of steps\n            samples: Number of samples\n            engine_id: Engine ID\n\n        Returns:\n            Dictionary containing the generated images\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Stability AI service is not enabled\"}\n\n        try:\n            # Prepare the request\n            url = f\"{self.api_host}/v1/generation/{engine_id}/text-to-image\"\n\n            headers = {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": f\"Bearer {self.api_key}\"\n            }\n\n            payload = {\n                \"text_prompts\": [\n                    {\n                        \"text\": prompt,\n                        \"weight\": 1.0\n                    }\n                ],\n                \"cfg_scale\": cfg_scale,\n                \"height\": height,\n                \"width\": width,\n                \"samples\": samples,\n                \"steps\": steps\n            }\n\n            # Add negative prompt if provided\n            if negative_prompt:\n                payload[\"text_prompts\"].append({\n                    \"text\": negative_prompt,\n                    \"weight\": -1.0\n                })\n\n            # Make the request\n            response = requests.post(url, headers=headers, json=payload)\n\n            if response.status_code != 200:\n                return {\n                    \"error\": f\"Failed to generate image: {response.text}\",\n                    \"status_code\": response.status_code\n                }\n\n            # Parse the response\n            data = response.json()\n\n            # Extract the images\n            images = []\n            for i, image in enumerate(data.get(\"artifacts\", [])):\n                image_data = {\n                    \"base64\": image.get(\"base64\"),\n                    \"seed\": image.get(\"seed\"),\n                    \"finish_reason\": image.get(\"finish_reason\")\n                }\n                images.append(image_data)\n\n            return {\n                \"images\": images,\n                \"engine_id\": engine_id,\n                \"prompt\": prompt,\n                \"negative_prompt\": negative_prompt\n            }\n        except Exception as e:\n            logger.error(f\"Failed to generate image with Stability AI: {str(e)}\")\n            return {\"error\": str(e)}\n\n    async def generate_email_banner(self,\n                                   campaign_data: Dict[str, Any],\n                                   width: int = 600,\n                                   height: int = 200) -&gt; Dict[str, Any]:\n        \"\"\"Generate an email banner using Stability AI.\n\n        Args:\n            campaign_data: Email campaign data\n            width: Width of the banner\n            height: Height of the banner\n\n        Returns:\n            Dictionary containing the generated banner\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Stability AI service is not enabled\"}\n\n        try:\n            # Create a prompt based on the campaign data\n            campaign_name = campaign_data.get(\"name\", \"\")\n            campaign_subject = campaign_data.get(\"subject\", \"\")\n            campaign_audience = campaign_data.get(\"audience\", \"\")\n\n            prompt = f\"Professional email banner for {campaign_name} campaign. Subject: {campaign_subject}. Target audience: {campaign_audience}. Clean, modern design with brand colors.\"\n\n            # Generate the image\n            result = await self.generate_image(\n                prompt=prompt,\n                width=width,\n                height=height,\n                samples=1,\n                engine_id=\"stable-diffusion-xl-1024-v1-0\"\n            )\n\n            return result\n        except Exception as e:\n            logger.error(f\"Failed to generate email banner with Stability AI: {str(e)}\")\n            return {\"error\": str(e)}\n\n# Create a singleton instance\nstability_ai_service = StabilityAIService()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#4-ai-cost-management","title":"4. AI Cost Management","text":""},{"location":"archive/ai-ml-implementation/#41-helicone-integration","title":"4.1 Helicone Integration","text":"<p>We'll implement Helicone for API cost tracking:</p> <pre><code># apps/api/ai/helicone_integration.py\n\"\"\"Helicone integration for API cost tracking.\"\"\"\n\nimport os\nimport logging\nfrom typing import Dict, Any, Optional, List, Union\nimport requests\n\nlogger = logging.getLogger(__name__)\n\nclass HeliconeService:\n    \"\"\"Helicone service for API cost tracking.\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None):\n        \"\"\"Initialize the Helicone service.\n\n        Args:\n            api_key: Helicone API key (defaults to HELICONE_API_KEY env var)\n        \"\"\"\n        self.api_key = api_key or os.getenv(\"HELICONE_API_KEY\")\n        self.base_url = os.getenv(\"HELICONE_BASE_URL\", \"https://api.helicone.ai\")\n\n        if not self.api_key:\n            logger.warning(\"HELICONE_API_KEY not set. Helicone service will be disabled.\")\n            self.enabled = False\n        else:\n            self.enabled = True\n            logger.info(\"Helicone service initialized successfully\")\n\n    def get_headers(self, provider: str) -&gt; Dict[str, str]:\n        \"\"\"Get headers for Helicone API requests.\n\n        Args:\n            provider: Provider of the model (e.g., openai, anthropic)\n\n        Returns:\n            Dictionary of headers\n        \"\"\"\n        headers = {\n            \"Helicone-Auth\": f\"Bearer {self.api_key}\",\n            \"Helicone-Property-Session\": \"true\"\n        }\n\n        if provider == \"openai\":\n            headers[\"Helicone-OpenAI-Api-Base\"] = \"https://api.openai.com/v1\"\n        elif provider == \"anthropic\":\n            headers[\"Helicone-Anthropic-Api-Base\"] = \"https://api.anthropic.com\"\n\n        return headers\n\n    async def get_cost_metrics(self,\n                              start_date: Optional[str] = None,\n                              end_date: Optional[str] = None,\n                              user_id: Optional[str] = None,\n                              model: Optional[str] = None) -&gt; Dict[str, Any]:\n        \"\"\"Get cost metrics from Helicone.\n\n        Args:\n            start_date: Optional start date (YYYY-MM-DD)\n            end_date: Optional end date (YYYY-MM-DD)\n            user_id: Optional user ID\n            model: Optional model name\n\n        Returns:\n            Dictionary containing cost metrics\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Helicone service is not enabled\"}\n\n        try:\n            # Prepare the request\n            url = f\"{self.base_url}/v1/metrics/cost\"\n\n            headers = {\n                \"Authorization\": f\"Bearer {self.api_key}\",\n                \"Content-Type\": \"application/json\"\n            }\n\n            params = {}\n            if start_date:\n                params[\"startDate\"] = start_date\n            if end_date:\n                params[\"endDate\"] = end_date\n            if user_id:\n                params[\"userId\"] = user_id\n            if model:\n                params[\"model\"] = model\n\n            # Make the request\n            response = requests.get(url, headers=headers, params=params)\n\n            if response.status_code != 200:\n                return {\n                    \"error\": f\"Failed to get cost metrics: {response.text}\",\n                    \"status_code\": response.status_code\n                }\n\n            # Parse the response\n            data = response.json()\n\n            return data\n        except Exception as e:\n            logger.error(f\"Failed to get cost metrics from Helicone: {str(e)}\")\n            return {\"error\": str(e)}\n\n    async def get_request_metrics(self,\n                                 start_date: Optional[str] = None,\n                                 end_date: Optional[str] = None,\n                                 user_id: Optional[str] = None,\n                                 model: Optional[str] = None) -&gt; Dict[str, Any]:\n        \"\"\"Get request metrics from Helicone.\n\n        Args:\n            start_date: Optional start date (YYYY-MM-DD)\n            end_date: Optional end date (YYYY-MM-DD)\n            user_id: Optional user ID\n            model: Optional model name\n\n        Returns:\n            Dictionary containing request metrics\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Helicone service is not enabled\"}\n\n        try:\n            # Prepare the request\n            url = f\"{self.base_url}/v1/metrics/requests\"\n\n            headers = {\n                \"Authorization\": f\"Bearer {self.api_key}\",\n                \"Content-Type\": \"application/json\"\n            }\n\n            params = {}\n            if start_date:\n                params[\"startDate\"] = start_date\n            if end_date:\n                params[\"endDate\"] = end_date\n            if user_id:\n                params[\"userId\"] = user_id\n            if model:\n                params[\"model\"] = model\n\n            # Make the request\n            response = requests.get(url, headers=headers, params=params)\n\n            if response.status_code != 200:\n                return {\n                    \"error\": f\"Failed to get request metrics: {response.text}\",\n                    \"status_code\": response.status_code\n                }\n\n            # Parse the response\n            data = response.json()\n\n            return data\n        except Exception as e:\n            logger.error(f\"Failed to get request metrics from Helicone: {str(e)}\")\n            return {\"error\": str(e)}\n\n    async def get_cache_metrics(self) -&gt; Dict[str, Any]:\n        \"\"\"Get cache metrics from Helicone.\n\n        Returns:\n            Dictionary containing cache metrics\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"Helicone service is not enabled\"}\n\n        try:\n            # Prepare the request\n            url = f\"{self.base_url}/v1/metrics/cache\"\n\n            headers = {\n                \"Authorization\": f\"Bearer {self.api_key}\",\n                \"Content-Type\": \"application/json\"\n            }\n\n            # Make the request\n            response = requests.get(url, headers=headers)\n\n            if response.status_code != 200:\n                return {\n                    \"error\": f\"Failed to get cache metrics: {response.text}\",\n                    \"status_code\": response.status_code\n                }\n\n            # Parse the response\n            data = response.json()\n\n            return data\n        except Exception as e:\n            logger.error(f\"Failed to get cache metrics from Helicone: {str(e)}\")\n            return {\"error\": str(e)}\n\n# Create a singleton instance\nhelicone_service = HeliconeService()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#42-litellm-integration","title":"4.2 LiteLLM Integration","text":"<p>We'll implement LiteLLM for model routing:</p> <pre><code># apps/api/ai/litellm_integration.py\n\"\"\"LiteLLM integration for model routing.\"\"\"\n\nimport os\nimport logging\nfrom typing import Dict, Any, Optional, List, Union\nimport json\n\nlogger = logging.getLogger(__name__)\n\nclass LiteLLMService:\n    \"\"\"LiteLLM service for model routing.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the LiteLLM service.\"\"\"\n        try:\n            # Import LiteLLM\n            import litellm\n\n            # Configure LiteLLM\n            litellm.drop_params = True\n\n            # Set API keys from environment variables\n            litellm.openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n            litellm.anthropic_api_key = os.getenv(\"ANTHROPIC_API_KEY\")\n            litellm.google_api_key = os.getenv(\"GOOGLE_API_KEY\")\n\n            # Configure Helicone if API key is available\n            helicone_api_key = os.getenv(\"HELICONE_API_KEY\")\n            if helicone_api_key:\n                litellm.helicone_api_key = helicone_api_key\n\n            self.enabled = True\n            logger.info(\"LiteLLM service initialized successfully\")\n        except ImportError:\n            logger.error(\"LiteLLM not installed. Please install with 'pip install litellm'.\")\n            self.enabled = False\n        except Exception as e:\n            logger.error(f\"Failed to initialize LiteLLM service: {str(e)}\")\n            self.enabled = False\n\n    async def generate_completion(self,\n                                 prompt: str,\n                                 model: Optional[str] = None,\n                                 max_tokens: int = 1000,\n                                 temperature: float = 0.7,\n                                 fallbacks: Optional[List[str]] = None,\n                                 metadata: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n        \"\"\"Generate a completion using LiteLLM.\n\n        Args:\n            prompt: Prompt to send to the model\n            model: Model to use (defaults to auto-routing)\n            max_tokens: Maximum tokens to generate\n            temperature: Temperature for generation\n            fallbacks: Optional list of fallback models\n            metadata: Optional metadata\n\n        Returns:\n            Dictionary containing the generated completion\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"LiteLLM service is not enabled\"}\n\n        try:\n            # Import LiteLLM\n            import litellm\n\n            # Prepare the request\n            params = {\n                \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n                \"max_tokens\": max_tokens,\n                \"temperature\": temperature\n            }\n\n            # Add model if provided\n            if model:\n                params[\"model\"] = model\n\n            # Add metadata if provided\n            if metadata:\n                params[\"metadata\"] = metadata\n\n            # Generate the completion\n            if fallbacks:\n                response = await litellm.acompletion_with_fallbacks(\n                    fallbacks=fallbacks,\n                    **params\n                )\n            else:\n                response = await litellm.acompletion(**params)\n\n            # Extract the content\n            content = response.choices[0].message.content\n\n            return {\n                \"content\": content,\n                \"model\": response.model,\n                \"usage\": {\n                    \"prompt_tokens\": response.usage.prompt_tokens,\n                    \"completion_tokens\": response.usage.completion_tokens,\n                    \"total_tokens\": response.usage.total_tokens\n                },\n                \"id\": response.id\n            }\n        except Exception as e:\n            logger.error(f\"Failed to generate completion with LiteLLM: {str(e)}\")\n            return {\"error\": str(e)}\n\n    async def route_request(self,\n                           prompt: str,\n                           task_type: str,\n                           max_tokens: int = 1000,\n                           temperature: float = 0.7,\n                           metadata: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n        \"\"\"Route a request to the appropriate model based on task type.\n\n        Args:\n            prompt: Prompt to send to the model\n            task_type: Type of task (e.g., creative, analytical, summarization)\n            max_tokens: Maximum tokens to generate\n            temperature: Temperature for generation\n            metadata: Optional metadata\n\n        Returns:\n            Dictionary containing the generated completion\n        \"\"\"\n        if not self.enabled:\n            return {\"error\": \"LiteLLM service is not enabled\"}\n\n        try:\n            # Determine the model based on task type\n            model = None\n            fallbacks = None\n\n            if task_type == \"creative\":\n                model = \"anthropic/claude-3-opus-20240229\"\n                fallbacks = [\"openai/gpt-4o\", \"google/gemini-pro\"]\n                temperature = max(temperature, 0.7)  # Ensure temperature is at least 0.7 for creative tasks\n            elif task_type == \"analytical\":\n                model = \"openai/gpt-4o\"\n                fallbacks = [\"anthropic/claude-3-opus-20240229\", \"google/gemini-pro\"]\n                temperature = min(temperature, 0.3)  # Ensure temperature is at most 0.3 for analytical tasks\n            elif task_type == \"summarization\":\n                model = \"anthropic/claude-3-haiku-20240307\"\n                fallbacks = [\"openai/gpt-3.5-turbo\", \"google/gemini-pro\"]\n            else:\n                # Default to auto-routing\n                model = None\n                fallbacks = [\"anthropic/claude-3-opus-20240229\", \"openai/gpt-4o\", \"google/gemini-pro\"]\n\n            # Generate the completion\n            return await self.generate_completion(\n                prompt=prompt,\n                model=model,\n                max_tokens=max_tokens,\n                temperature=temperature,\n                fallbacks=fallbacks,\n                metadata=metadata\n            )\n        except Exception as e:\n            logger.error(f\"Failed to route request with LiteLLM: {str(e)}\")\n            return {\"error\": str(e)}\n\n# Create a singleton instance\nlitellm_service = LiteLLMService()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#5-integration-with-existing-services","title":"5. Integration with Existing Services","text":""},{"location":"archive/ai-ml-implementation/#51-integration-with-octotools-service","title":"5.1 Integration with OctoTools Service","text":"<p>We'll integrate the new AI &amp; ML components with the existing OctoTools service:</p> <pre><code># apps/api/ai/service_integration.py\n\"\"\"Integration of AI &amp; ML components with existing services.\"\"\"\n\nimport logging\nfrom typing import Dict, Any, Optional, List\n\n# Import existing services\nfrom ai.service import octotools_service\n\n# Import new AI &amp; ML components\nfrom ai.wandb_integration import wandb_registry\nfrom ai.dvc_integration import dvc_versioning\nfrom ai.arize_integration import arize_observability\nfrom ai.anthropic_integration import enhanced_claude_service\nfrom ai.stability_integration import stability_ai_service\nfrom ai.helicone_integration import helicone_service\nfrom ai.litellm_integration import litellm_service\n\nlogger = logging.getLogger(__name__)\n\nclass EnhancedAIService:\n    \"\"\"Enhanced AI service integrating all AI &amp; ML components.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the enhanced AI service.\"\"\"\n        # Store references to all services\n        self.octotools_service = octotools_service\n        self.wandb_registry = wandb_registry\n        self.dvc_versioning = dvc_versioning\n        self.arize_observability = arize_observability\n        self.enhanced_claude_service = enhanced_claude_service\n        self.stability_ai_service = stability_ai_service\n        self.helicone_service = helicone_service\n        self.litellm_service = litellm_service\n\n        logger.info(\"Enhanced AI service initialized successfully\")\n\n    async def create_email_campaign(self,\n                                   campaign_data: Dict[str, Any],\n                                   langfuse_client=None) -&gt; Dict[str, Any]:\n        \"\"\"Create an email campaign with enhanced AI capabilities.\n\n        Args:\n            campaign_data: Dictionary containing campaign configuration\n            langfuse_client: Optional Langfuse client for tracing\n\n        Returns:\n            Dictionary containing campaign results\n        \"\"\"\n        try:\n            # Use LiteLLM for model routing\n            if self.litellm_service.enabled:\n                # Determine if this is a creative or analytical task\n                task_type = campaign_data.get(\"task_type\", \"creative\")\n\n                # Generate content using LiteLLM\n                prompt = f\"Create an email campaign for {campaign_data.get('objective')} targeting {campaign_data.get('audience')}.\"\n\n                litellm_result = await self.litellm_service.route_request(\n                    prompt=prompt,\n                    task_type=task_type,\n                    metadata={\"user_id\": campaign_data.get(\"user_id\", 1)}\n                )\n\n                # Log to Weights &amp; Biases if enabled\n                if self.wandb_registry.enabled:\n                    self.wandb_registry.log_model_usage(\n                        model_name=litellm_result.get(\"model\", \"unknown\"),\n                        provider=litellm_result.get(\"model\", \"unknown\").split(\"/\")[0] if \"/\" in litellm_result.get(\"model\", \"unknown\") else \"unknown\",\n                        prompt=prompt,\n                        response=litellm_result.get(\"content\", \"\"),\n                        metadata=campaign_data\n                    )\n\n                # Log to Arize AI if enabled\n                if self.arize_observability.enabled:\n                    self.arize_observability.log_llm_prediction(\n                        model_id=litellm_result.get(\"model\", \"unknown\"),\n                        model_version=\"latest\",\n                        prompt=prompt,\n                        response=litellm_result.get(\"content\", \"\"),\n                        metadata=campaign_data,\n                        tags={\"task_type\": task_type}\n                    )\n\n                # Parse the LiteLLM result\n                campaign_content = litellm_result.get(\"content\", \"\")\n\n                # Generate an email banner if requested\n                if campaign_data.get(\"generate_banner\", False) and self.stability_ai_service.enabled:\n                    banner_result = await self.stability_ai_service.generate_email_banner(\n                        campaign_data=campaign_data\n                    )\n\n                    # Add the banner to the campaign data\n                    if \"error\" not in banner_result:\n                        campaign_data[\"banner\"] = banner_result.get(\"images\", [{}])[0].get(\"base64\", \"\")\n\n                # Create the campaign using OctoTools\n                result = await self.octotools_service.create_email_campaign(\n                    campaign_data=campaign_data,\n                    langfuse_client=langfuse_client\n                )\n\n                # Add the LiteLLM and Stability AI results to the response\n                result[\"ai_info\"] = {\n                    \"model\": litellm_result.get(\"model\", \"unknown\"),\n                    \"usage\": litellm_result.get(\"usage\", {})\n                }\n\n                return result\n            else:\n                # Fall back to the original OctoTools implementation\n                return await self.octotools_service.create_email_campaign(\n                    campaign_data=campaign_data,\n                    langfuse_client=langfuse_client\n                )\n        except Exception as e:\n            logger.error(f\"Failed to create email campaign with enhanced AI: {str(e)}\")\n            # Fall back to the original OctoTools implementation\n            return await self.octotools_service.create_email_campaign(\n                campaign_data=campaign_data,\n                langfuse_client=langfuse_client\n            )\n\n    async def analyze_campaign(self,\n                              campaign_id: str,\n                              metrics: Optional[List[str]] = None,\n                              langfuse_client=None) -&gt; Dict[str, Any]:\n        \"\"\"Analyze campaign performance with enhanced AI capabilities.\n\n        Args:\n            campaign_id: ID of the campaign to analyze\n            metrics: Optional list of specific metrics to analyze\n            langfuse_client: Optional Langfuse client for tracing\n\n        Returns:\n            Dictionary containing analysis results\n        \"\"\"\n        try:\n            # Get campaign data\n            campaign_data = await self.octotools_service._get_campaign_data(campaign_id)\n\n            # Use Enhanced Claude for advanced analysis if available\n            if self.enhanced_claude_service.enabled:\n                claude_analysis = await self.enhanced_claude_service.analyze_email_campaign(\n                    campaign_data=campaign_data\n                )\n\n                # Log to Weights &amp; Biases if enabled\n                if self.wandb_registry.enabled:\n                    self.wandb_registry.log_model_usage(\n                        model_name=claude_analysis.get(\"model\", \"claude-3-opus\"),\n                        provider=\"anthropic\",\n                        prompt=f\"Analyze campaign {campaign_id}\",\n                        response=claude_analysis.get(\"content\", \"\"),\n                        metadata={\"campaign_id\": campaign_id}\n                    )\n\n                # Create the result\n                result = {\n                    \"status\": \"success\",\n                    \"campaign_id\": campaign_id,\n                    \"analysis\": claude_analysis.get(\"content\", \"\"),\n                    \"ai_info\": {\n                        \"model\": claude_analysis.get(\"model\", \"claude-3-opus\"),\n                        \"usage\": claude_analysis.get(\"usage\", {})\n                    }\n                }\n\n                return result\n            else:\n                # Fall back to the original OctoTools implementation\n                return await self.octotools_service.analyze_campaign(\n                    campaign_id=campaign_id,\n                    metrics=metrics,\n                    langfuse_client=langfuse_client\n                )\n        except Exception as e:\n            logger.error(f\"Failed to analyze campaign with enhanced AI: {str(e)}\")\n            # Fall back to the original OctoTools implementation\n            return await self.octotools_service.analyze_campaign(\n                campaign_id=campaign_id,\n                metrics=metrics,\n                langfuse_client=langfuse_client\n            )\n\n# Create a singleton instance\nenhanced_ai_service = EnhancedAIService()\n</code></pre>"},{"location":"archive/ai-ml-implementation/#6-environment-configuration","title":"6. Environment Configuration","text":"<p>We'll update the environment configuration to include the new AI &amp; ML components:</p> <pre><code># AI &amp; ML Configuration\nWANDB_API_KEY=your_wandb_api_key\nARIZE_API_KEY=your_arize_api_key\nARIZE_SPACE_KEY=your_arize_space_key\nSTABILITY_API_KEY=your_stability_api_key\nHELICONE_API_KEY=your_helicone_api_key\n</code></pre>"},{"location":"archive/ai-ml-implementation/#7-implementation-summary","title":"7. Implementation Summary","text":"<p>The AI &amp; ML enhancements have been implemented with the following components:</p>"},{"location":"archive/ai-ml-implementation/#71-model-versioning-registry","title":"7.1 Model Versioning &amp; Registry","text":"<ul> <li>Weights &amp; Biases Integration: Implemented for experiment tracking and model registry</li> <li>DVC Integration: Implemented for model versioning</li> </ul>"},{"location":"archive/ai-ml-implementation/#72-ai-observability","title":"7.2 AI Observability","text":"<ul> <li>Langfuse Integration: Already implemented for LLM tracing</li> <li>Arize AI Integration: Implemented for ML observability</li> </ul>"},{"location":"archive/ai-ml-implementation/#73-advanced-ai-features","title":"7.3 Advanced AI Features","text":"<ul> <li>Enhanced Anthropic Claude 3 Integration: Implemented for advanced reasoning</li> <li>Enhanced Stability AI Integration: Implemented for image generation</li> </ul>"},{"location":"archive/ai-ml-implementation/#74-ai-cost-management","title":"7.4 AI Cost Management","text":"<ul> <li>Helicone Integration: Implemented for API cost tracking</li> <li>LiteLLM Integration: Implemented for model routing</li> </ul>"},{"location":"archive/ai-ml-implementation/#75-integration-with-existing-services","title":"7.5 Integration with Existing Services","text":"<ul> <li>Enhanced AI Service: Implemented to integrate all AI &amp; ML components with existing services</li> </ul>"},{"location":"archive/ai-ml-implementation/#8-next-steps","title":"8. Next Steps","text":"<p>With the AI &amp; ML enhancements in place, the next steps are to implement:</p> <ol> <li>Sprint 4: Developer Experience &amp; Testing</li> <li>Migration to Next.js App Router</li> <li>Enhanced testing coverage</li> <li>Improved CI/CD pipeline</li> <li> <p>Enhanced documentation</p> </li> <li> <p>Sprint 5: Monitoring &amp; Observability</p> </li> <li>Distributed tracing</li> <li>Enhanced metrics collection</li> <li>Alerting strategy</li> <li> <p>Log management</p> </li> <li> <p>Sprint 6: User Experience &amp; Accessibility</p> </li> <li>Enhanced accessibility</li> <li>Internationalization</li> <li>Mobile experience optimization</li> <li>Performance enhancements</li> </ol>"},{"location":"archive/ai-ml-readme/","title":"AI &amp; ML Components","text":"<p>This document provides an overview of the AI &amp; ML components implemented in the Maily platform.</p>"},{"location":"archive/ai-ml-readme/#overview","title":"Overview","text":"<p>The AI &amp; ML components enhance the Maily platform with advanced capabilities for model versioning, AI observability, advanced AI features, and AI cost management. These components are implemented as part of Sprint 3 of the enhancement plan.</p>"},{"location":"archive/ai-ml-readme/#components","title":"Components","text":""},{"location":"archive/ai-ml-readme/#1-model-versioning-registry","title":"1. Model Versioning &amp; Registry","text":""},{"location":"archive/ai-ml-readme/#weights-biases-integration","title":"Weights &amp; Biases Integration","text":"<ul> <li>Experiment tracking</li> <li>Model registry</li> <li>Performance monitoring</li> <li>Collaboration tools</li> </ul>"},{"location":"archive/ai-ml-readme/#dvc-integration","title":"DVC Integration","text":"<ul> <li>Model versioning</li> <li>Data versioning</li> <li>Pipeline tracking</li> <li>Remote storage integration</li> </ul>"},{"location":"archive/ai-ml-readme/#2-ai-observability","title":"2. AI Observability","text":""},{"location":"archive/ai-ml-readme/#langfuse-integration-already-implemented","title":"Langfuse Integration (Already Implemented)","text":"<ul> <li>LLM tracing</li> <li>Prompt management</li> <li>Performance monitoring</li> </ul>"},{"location":"archive/ai-ml-readme/#arize-ai-integration","title":"Arize AI Integration","text":"<ul> <li>ML observability</li> <li>Model performance monitoring</li> <li>Data drift detection</li> <li>Explainability tools</li> </ul>"},{"location":"archive/ai-ml-readme/#3-advanced-ai-features","title":"3. Advanced AI Features","text":""},{"location":"archive/ai-ml-readme/#enhanced-anthropic-claude-3-integration","title":"Enhanced Anthropic Claude 3 Integration","text":"<ul> <li>Advanced reasoning capabilities</li> <li>Email campaign analysis</li> <li>Email variation generation</li> <li>Personalized content generation</li> <li>Campaign performance analysis</li> <li>Subject line generation</li> </ul>"},{"location":"archive/ai-ml-readme/#stability-ai-integration","title":"Stability AI Integration","text":"<ul> <li>Image generation</li> <li>Email banner generation</li> <li>Product image generation</li> <li>Social media image generation</li> <li>Image resizing</li> <li>Image variation generation</li> </ul>"},{"location":"archive/ai-ml-readme/#4-ai-cost-management","title":"4. AI Cost Management","text":""},{"location":"archive/ai-ml-readme/#helicone-integration","title":"Helicone Integration","text":"<ul> <li>API cost tracking</li> <li>Request metrics</li> <li>Cache metrics</li> <li>User metrics</li> <li>Model metrics</li> </ul>"},{"location":"archive/ai-ml-readme/#litellm-integration","title":"LiteLLM Integration","text":"<ul> <li>Model routing</li> <li>Fallback mechanisms</li> <li>Cost optimization</li> <li>Token counting</li> <li>Cost estimation</li> </ul>"},{"location":"archive/ai-ml-readme/#integration-with-existing-services","title":"Integration with Existing Services","text":"<p>The AI &amp; ML components are integrated with the existing OctoTools service through the <code>EnhancedAIService</code> class, which provides the following capabilities:</p> <ul> <li>Enhanced email campaign creation</li> <li>Advanced campaign analysis</li> <li>Contact discovery</li> <li>Improvement suggestions</li> <li>Subject line generation</li> <li>AI cost metrics</li> </ul>"},{"location":"archive/ai-ml-readme/#setup","title":"Setup","text":"<p>To set up the AI &amp; ML components, follow these steps:</p> <ol> <li>Make sure you have Python 3.8+ installed</li> <li>Run the setup script:</li> </ol> <pre><code>./scripts/setup-ai-ml.sh\n</code></pre>"},{"location":"archive/ai-ml-readme/#testing","title":"Testing","text":"<p>To test the AI &amp; ML components, run the test script:</p> <pre><code>./scripts/test-ai-ml.sh\n</code></pre>"},{"location":"archive/ai-ml-readme/#documentation","title":"Documentation","text":"<p>For detailed documentation on how to use the AI &amp; ML components, see the AI &amp; ML Usage Guide.</p> <p>For implementation details, see the AI &amp; ML Implementation.</p>"},{"location":"archive/ai-ml-readme/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables need to be set in the <code>.env</code> file:</p> <pre><code># AI Services (Base)\nOPENAI_API_KEY=your_openai_api_key\nANTHROPIC_API_KEY=your_anthropic_api_key\nGOOGLE_API_KEY=your_google_api_key\n\n# Weights &amp; Biases for model versioning and experiment tracking\nWANDB_API_KEY=your_wandb_api_key\n\n# Arize AI for ML observability\nARIZE_API_KEY=your_arize_api_key\nARIZE_SPACE_KEY=your_arize_space_key\n\n# Stability AI for image generation\nSTABILITY_API_KEY=your_stability_api_key\nSTABILITY_API_HOST=https://api.stability.ai\n\n# Helicone for API cost tracking\nHELICONE_API_KEY=your_helicone_api_key\nHELICONE_BASE_URL=https://api.helicone.ai\n\n# LiteLLM for model routing\nLITELLM_CACHE_ENABLED=true\nLITELLM_CACHE_FOLDER=.cache/litellm\n</code></pre>"},{"location":"archive/ai-ml-readme/#dependencies","title":"Dependencies","text":"<p>The AI &amp; ML components require the following dependencies:</p> <ul> <li>Weights &amp; Biases: <code>wandb&gt;=0.16.0</code></li> <li>DVC: <code>dvc&gt;=3.30.1</code>, <code>dvc-s3&gt;=2.23.0</code></li> <li>Arize AI: <code>arize&gt;=7.0.0</code></li> <li>Anthropic Claude: <code>anthropic&gt;=0.8.0</code></li> <li>Stability AI: <code>pillow&gt;=10.0.0</code>, <code>aiohttp&gt;=3.9.0</code></li> <li>LiteLLM: <code>litellm&gt;=1.10.0</code></li> <li>OpenAI: <code>openai&gt;=1.3.0</code></li> <li>Google AI: <code>google-generativeai&gt;=0.3.0</code></li> </ul> <p>For a complete list of dependencies, see the requirements-ai-ml.txt file.</p>"},{"location":"archive/ai-ml-readme/#directory-structure","title":"Directory Structure","text":"<pre><code>apps/api/\n\u251c\u2500\u2500 ai/\n\u2502   \u251c\u2500\u2500 wandb_integration.py      # Weights &amp; Biases integration\n\u2502   \u251c\u2500\u2500 dvc_integration.py        # DVC integration\n\u2502   \u251c\u2500\u2500 arize_integration.py      # Arize AI integration\n\u2502   \u251c\u2500\u2500 anthropic_integration.py  # Enhanced Anthropic Claude 3 integration\n\u2502   \u251c\u2500\u2500 stability_integration.py  # Stability AI integration\n\u2502   \u251c\u2500\u2500 helicone_integration.py   # Helicone integration\n\u2502   \u251c\u2500\u2500 litellm_integration.py    # LiteLLM integration\n\u2502   \u2514\u2500\u2500 service_integration.py    # Integration with existing services\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_ai_ml_components.py  # Tests for AI &amp; ML components\n\u2514\u2500\u2500 requirements-ai-ml.txt        # AI &amp; ML dependencies\n</code></pre>"},{"location":"archive/ai-ml-readme/#next-steps","title":"Next Steps","text":"<p>With the AI &amp; ML enhancements in place, the next steps are to implement:</p> <ol> <li>Sprint 4: Developer Experience &amp; Testing</li> <li>Migration to Next.js App Router</li> <li>Enhanced testing coverage</li> <li>Improved CI/CD pipeline</li> <li> <p>Enhanced documentation</p> </li> <li> <p>Sprint 5: Monitoring &amp; Observability</p> </li> <li>Distributed tracing</li> <li>Enhanced metrics collection</li> <li>Alerting strategy</li> <li> <p>Log management</p> </li> <li> <p>Sprint 6: User Experience &amp; Accessibility</p> </li> <li>Enhanced accessibility</li> <li>Internationalization</li> <li>Mobile experience optimization</li> <li>Performance enhancements</li> </ol>"},{"location":"archive/ai-ml-usage-guide/","title":"AI &amp; ML Components Usage Guide","text":"<p>This guide provides instructions on how to use the AI &amp; ML components implemented in the Maily platform.</p>"},{"location":"archive/ai-ml-usage-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Setup</li> <li>Environment Variables</li> <li>Components</li> <li>Model Versioning &amp; Registry</li> <li>AI Observability</li> <li>Advanced AI Features</li> <li>AI Cost Management</li> <li>Integration with Existing Services</li> <li>Examples</li> <li>Troubleshooting</li> </ol>"},{"location":"archive/ai-ml-usage-guide/#overview","title":"Overview","text":"<p>The AI &amp; ML components enhance the Maily platform with advanced capabilities for model versioning, AI observability, advanced AI features, and AI cost management. These components are implemented as part of Sprint 3 of the enhancement plan.</p>"},{"location":"archive/ai-ml-usage-guide/#setup","title":"Setup","text":"<p>To set up the AI &amp; ML components, follow these steps:</p> <ol> <li>Make sure you have Python 3.8+ installed</li> <li>Run the setup script:</li> </ol> <pre><code>./scripts/setup-ai-ml.sh\n</code></pre> <p>This script will: - Create a virtual environment (if it doesn't exist) - Install the required dependencies - Check for required environment variables - Initialize DVC (if it's not already initialized) - Initialize Weights &amp; Biases (if API key is provided) - Create necessary directories - Set appropriate permissions</p>"},{"location":"archive/ai-ml-usage-guide/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables need to be set in the <code>.env</code> file:</p> <pre><code># AI Services (Base)\nOPENAI_API_KEY=your_openai_api_key\nANTHROPIC_API_KEY=your_anthropic_api_key\nGOOGLE_API_KEY=your_google_api_key\n\n# Weights &amp; Biases for model versioning and experiment tracking\nWANDB_API_KEY=your_wandb_api_key\n\n# Arize AI for ML observability\nARIZE_API_KEY=your_arize_api_key\nARIZE_SPACE_KEY=your_arize_space_key\n\n# Stability AI for image generation\nSTABILITY_API_KEY=your_stability_api_key\nSTABILITY_API_HOST=https://api.stability.ai\n\n# Helicone for API cost tracking\nHELICONE_API_KEY=your_helicone_api_key\nHELICONE_BASE_URL=https://api.helicone.ai\n\n# LiteLLM for model routing\nLITELLM_CACHE_ENABLED=true\nLITELLM_CACHE_FOLDER=.cache/litellm\n\n# OctoTools Configuration\nOCTOTOOLS_PLANNER_MODEL=gpt-4o\nOCTOTOOLS_EXECUTOR_MODEL=gpt-4o\nOCTOTOOLS_MAX_STEPS=10\nOCTOTOOLS_TIMEOUT=300\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#components","title":"Components","text":""},{"location":"archive/ai-ml-usage-guide/#model-versioning-registry","title":"Model Versioning &amp; Registry","text":""},{"location":"archive/ai-ml-usage-guide/#weights-biases-integration","title":"Weights &amp; Biases Integration","text":"<p>The Weights &amp; Biases integration provides model versioning, experiment tracking, and model registry capabilities.</p> <pre><code>from ai.wandb_integration import wandb_registry\n\n# Log model usage\nrun_id = wandb_registry.log_model_usage(\n    model_name=\"claude-3-opus-20240229\",\n    provider=\"anthropic\",\n    prompt=\"Generate an email campaign for...\",\n    response=\"Here's an email campaign...\",\n    metadata={\"user_id\": 123, \"campaign_id\": 456}\n)\n\n# Start an experiment\nexperiment_id = wandb_registry.start_experiment(\n    experiment_name=\"Email Subject Line Optimization\",\n    config={\n        \"model\": \"claude-3-opus-20240229\",\n        \"temperature\": 0.7,\n        \"max_tokens\": 2000\n    }\n)\n\n# Log experiment metrics\nwandb_registry.log_experiment_metrics(\n    run_id=experiment_id,\n    metrics={\n        \"open_rate\": 0.25,\n        \"click_rate\": 0.05,\n        \"conversion_rate\": 0.02\n    }\n)\n\n# Register a model\nmodel_id = wandb_registry.register_model(\n    model_name=\"email-subject-generator\",\n    model_version=\"1.0.0\",\n    metadata={\n        \"description\": \"Email subject line generator\",\n        \"performance\": {\n            \"accuracy\": 0.85,\n            \"f1_score\": 0.82\n        }\n    },\n    aliases=[\"latest\", \"production\"]\n)\n\n# Get a model\nmodel = wandb_registry.get_model(\n    model_name=\"email-subject-generator\",\n    alias=\"latest\"\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#dvc-integration","title":"DVC Integration","text":"<p>The DVC integration provides model versioning and storage capabilities.</p> <pre><code>from ai.dvc_integration import dvc_versioning\n\n# Add a model\ndvc_versioning.add_model(\n    model_name=\"email-subject-generator\",\n    model_version=\"1.0.0\",\n    model_data={\n        \"description\": \"Email subject line generator\",\n        \"performance\": {\n            \"accuracy\": 0.85,\n            \"f1_score\": 0.82\n        },\n        \"parameters\": {\n            \"temperature\": 0.7,\n            \"max_tokens\": 2000\n        }\n    }\n)\n\n# Get a model\nmodel = dvc_versioning.get_model(\n    model_name=\"email-subject-generator\",\n    model_version=\"1.0.0\"\n)\n\n# List models\nmodels = dvc_versioning.list_models()\n\n# Push a model to remote storage\ndvc_versioning.push_model(\n    model_name=\"email-subject-generator\",\n    model_version=\"1.0.0\"\n)\n\n# Compare models\ncomparison = dvc_versioning.compare_models(\n    model_name=\"email-subject-generator\",\n    version_a=\"1.0.0\",\n    version_b=\"1.1.0\"\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#ai-observability","title":"AI Observability","text":""},{"location":"archive/ai-ml-usage-guide/#arize-ai-integration","title":"Arize AI Integration","text":"<p>The Arize AI integration provides ML observability capabilities.</p> <pre><code>from ai.arize_integration import arize_observability\n\n# Log a prediction\narize_observability.log_prediction(\n    model_id=\"email-subject-generator\",\n    model_version=\"1.0.0\",\n    prediction_id=\"pred-123\",\n    features={\n        \"audience\": \"marketing professionals\",\n        \"industry\": \"technology\",\n        \"campaign_objective\": \"product launch\"\n    },\n    prediction=\"Introducing the Next Generation of AI Tools\",\n    actual=\"Discover the Future of AI: New Tools Released\",\n    tags={\"campaign_id\": \"camp-456\"}\n)\n\n# Log an LLM prediction\narize_observability.log_llm_prediction(\n    model_id=\"claude-3-opus-20240229\",\n    model_version=\"latest\",\n    prompt=\"Generate an email campaign for...\",\n    response=\"Here's an email campaign...\",\n    metadata={\"user_id\": 123, \"campaign_id\": 456},\n    tags={\"task_type\": \"creative\"}\n)\n\n# Log feedback\narize_observability.log_feedback(\n    model_id=\"email-subject-generator\",\n    prediction_id=\"pred-123\",\n    feedback_id=\"feedback-789\",\n    feedback_type=\"human\",\n    feedback_score=4.5,\n    feedback_metadata={\"reviewer_id\": 789}\n)\n\n# Log prompt evaluation\narize_observability.log_prompt_evaluation(\n    model_id=\"claude-3-opus-20240229\",\n    model_version=\"latest\",\n    prompt_template=\"Generate an email campaign for {objective} targeting {audience}.\",\n    prompt_inputs={\n        \"objective\": \"product launch\",\n        \"audience\": \"marketing professionals\"\n    },\n    final_prompt=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    response=\"Here's an email campaign...\",\n    evaluation_score=4.2,\n    evaluation_metrics={\n        \"relevance\": 4.5,\n        \"creativity\": 4.0,\n        \"grammar\": 4.8\n    }\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#advanced-ai-features","title":"Advanced AI Features","text":""},{"location":"archive/ai-ml-usage-guide/#enhanced-anthropic-claude-3-integration","title":"Enhanced Anthropic Claude 3 Integration","text":"<p>The Enhanced Claude service provides advanced reasoning capabilities.</p> <pre><code>from ai.anthropic_integration import enhanced_claude_service\n\n# Generate content\nresponse = await enhanced_claude_service.generate_content(\n    prompt=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"claude-3-opus-20240229\",\n    system_prompt=\"You are an expert email marketer.\",\n    temperature=0.7,\n    max_tokens=2000\n)\n\n# Analyze email campaign\nanalysis = await enhanced_claude_service.analyze_email_campaign(\n    campaign_data={\n        \"name\": \"Product Launch Campaign\",\n        \"subject\": \"Introducing the Next Generation of AI Tools\",\n        \"audience\": \"marketing professionals\",\n        \"content\": \"Dear Marketing Professional,\\n\\nWe're excited to announce...\"\n    }\n)\n\n# Generate email variations\nvariations = await enhanced_claude_service.generate_email_variations(\n    email_data={\n        \"subject\": \"Introducing the Next Generation of AI Tools\",\n        \"audience\": \"marketing professionals\",\n        \"content\": \"Dear Marketing Professional,\\n\\nWe're excited to announce...\"\n    },\n    num_variations=3\n)\n\n# Generate personalized content\npersonalized = await enhanced_claude_service.generate_personalized_content(\n    template=\"Dear {name},\\n\\nWe noticed you're interested in {interest}...\",\n    user_data={\n        \"name\": \"John\",\n        \"interest\": \"AI tools\",\n        \"company\": \"Acme Inc.\",\n        \"role\": \"Marketing Director\"\n    }\n)\n\n# Analyze campaign performance\nperformance_analysis = await enhanced_claude_service.analyze_campaign_performance(\n    campaign_metrics={\n        \"open_rate\": 0.25,\n        \"click_rate\": 0.05,\n        \"conversion_rate\": 0.02,\n        \"unsubscribe_rate\": 0.01,\n        \"bounce_rate\": 0.02\n    }\n)\n\n# Generate subject lines\nsubject_lines = await enhanced_claude_service.generate_subject_lines(\n    email_content=\"Dear Marketing Professional,\\n\\nWe're excited to announce...\",\n    audience=\"marketing professionals\",\n    num_variations=5\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#stability-ai-integration","title":"Stability AI Integration","text":"<p>The Stability AI service provides image generation capabilities.</p> <pre><code>from ai.stability_integration import stability_ai_service\n\n# Generate an image\nimage = await stability_ai_service.generate_image(\n    prompt=\"Professional email banner for product launch campaign\",\n    negative_prompt=\"text, watermark, low quality\",\n    width=1024,\n    height=256,\n    cfg_scale=7.0,\n    steps=30,\n    samples=1\n)\n\n# Generate an email banner\nbanner = await stability_ai_service.generate_email_banner(\n    campaign_data={\n        \"name\": \"Product Launch Campaign\",\n        \"subject\": \"Introducing the Next Generation of AI Tools\",\n        \"audience\": \"marketing professionals\"\n    },\n    width=600,\n    height=200\n)\n\n# Generate a product image\nproduct_image = await stability_ai_service.generate_product_image(\n    product_description=\"AI-powered email marketing tool with analytics dashboard\",\n    style=\"photorealistic\",\n    background=\"gradient blue\"\n)\n\n# Generate a social media image\nsocial_image = await stability_ai_service.generate_social_media_image(\n    content=\"AI-powered email marketing tool launch announcement\",\n    platform=\"linkedin\",\n    style=\"corporate\"\n)\n\n# Resize an image\nresized_image = await stability_ai_service.resize_image(\n    base64_image=image[\"images\"][0][\"base64\"],\n    width=300,\n    height=100\n)\n\n# Generate image variations\nvariations = await stability_ai_service.generate_image_variations(\n    base64_image=image[\"images\"][0][\"base64\"],\n    num_variations=3,\n    strength=0.7\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#ai-cost-management","title":"AI Cost Management","text":""},{"location":"archive/ai-ml-usage-guide/#helicone-integration","title":"Helicone Integration","text":"<p>The Helicone service provides API cost tracking capabilities.</p> <pre><code>from ai.helicone_integration import helicone_service\n\n# Get cost metrics\ncost_metrics = await helicone_service.get_cost_metrics(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\",\n    user_id=\"user-123\",\n    model=\"claude-3-opus-20240229\"\n)\n\n# Get request metrics\nrequest_metrics = await helicone_service.get_request_metrics(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\",\n    user_id=\"user-123\",\n    model=\"claude-3-opus-20240229\"\n)\n\n# Get cache metrics\ncache_metrics = await helicone_service.get_cache_metrics()\n\n# Get user metrics\nuser_metrics = await helicone_service.get_user_metrics(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\"\n)\n\n# Get model metrics\nmodel_metrics = await helicone_service.get_model_metrics(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\"\n)\n\n# Get cost by user\ncost_by_user = await helicone_service.get_cost_by_user(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\"\n)\n\n# Get cost by model\ncost_by_model = await helicone_service.get_cost_by_model(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\"\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#litellm-integration","title":"LiteLLM Integration","text":"<p>The LiteLLM service provides model routing capabilities.</p> <pre><code>from ai.litellm_integration import litellm_service\n\n# Generate a completion\ncompletion = await litellm_service.generate_completion(\n    prompt=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"anthropic/claude-3-opus-20240229\",\n    max_tokens=2000,\n    temperature=0.7,\n    fallbacks=[\"openai/gpt-4o\", \"google/gemini-pro\"],\n    metadata={\"user_id\": 123, \"campaign_id\": 456}\n)\n\n# Route a request based on task type\nrouted_completion = await litellm_service.route_request(\n    prompt=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    task_type=\"creative\",\n    max_tokens=2000,\n    temperature=0.7,\n    metadata={\"user_id\": 123, \"campaign_id\": 456}\n)\n\n# Generate a chat completion\nchat_completion = await litellm_service.generate_chat_completion(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are an expert email marketer.\"},\n        {\"role\": \"user\", \"content\": \"Generate an email campaign for product launch targeting marketing professionals.\"}\n    ],\n    model=\"anthropic/claude-3-opus-20240229\",\n    max_tokens=2000,\n    temperature=0.7\n)\n\n# Get an embedding\nembedding = await litellm_service.get_embedding(\n    text=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"text-embedding-ada-002\"\n)\n\n# Get token count\ntoken_count = await litellm_service.get_token_count(\n    text=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"gpt-4\"\n)\n\n# Get cost estimate\ncost_estimate = await litellm_service.get_cost_estimate(\n    prompt=\"Generate an email campaign for product launch targeting marketing professionals.\",\n    model=\"anthropic/claude-3-opus-20240229\",\n    max_tokens=2000\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#integration-with-existing-services","title":"Integration with Existing Services","text":"<p>The AI &amp; ML components are integrated with the existing OctoTools service through the <code>EnhancedAIService</code> class.</p> <pre><code>from ai.service_integration import enhanced_ai_service\n\n# Create an email campaign\ncampaign = await enhanced_ai_service.create_email_campaign(\n    campaign_data={\n        \"name\": \"Product Launch Campaign\",\n        \"subject\": \"Introducing the Next Generation of AI Tools\",\n        \"audience\": \"marketing professionals\",\n        \"objective\": \"product launch\",\n        \"task_type\": \"creative\",\n        \"generate_banner\": True,\n        \"user_id\": 123\n    },\n    langfuse_client=langfuse_client\n)\n\n# Analyze a campaign\nanalysis = await enhanced_ai_service.analyze_campaign(\n    campaign_id=\"camp-456\",\n    metrics=[\"open_rate\", \"click_rate\", \"conversion_rate\"],\n    langfuse_client=langfuse_client\n)\n\n# Discover contacts\ncontacts = await enhanced_ai_service.discover_contacts(\n    discovery_data={\n        \"objective\": \"product launch\",\n        \"target_criteria\": \"marketing professionals in technology industry\",\n        \"user_id\": 123\n    },\n    langfuse_client=langfuse_client\n)\n\n# Suggest improvements\nsuggestions = await enhanced_ai_service.suggest_improvements(\n    campaign_id=\"camp-456\",\n    analysis_result=analysis,\n    langfuse_client=langfuse_client\n)\n\n# Generate subject lines\nsubject_lines = await enhanced_ai_service.generate_subject_lines(\n    email_content=\"Dear Marketing Professional,\\n\\nWe're excited to announce...\",\n    audience=\"marketing professionals\",\n    num_variations=5\n)\n\n# Get AI cost metrics\ncost_metrics = await enhanced_ai_service.get_ai_cost_metrics(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\",\n    user_id=\"user-123\",\n    model=\"claude-3-opus-20240229\"\n)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#examples","title":"Examples","text":""},{"location":"archive/ai-ml-usage-guide/#example-1-creating-an-email-campaign-with-ai-generated-banner","title":"Example 1: Creating an Email Campaign with AI-Generated Banner","text":"<pre><code>from ai.service_integration import enhanced_ai_service\n\n# Create an email campaign with AI-generated banner\ncampaign = await enhanced_ai_service.create_email_campaign(\n    campaign_data={\n        \"name\": \"Product Launch Campaign\",\n        \"subject\": \"Introducing the Next Generation of AI Tools\",\n        \"audience\": \"marketing professionals\",\n        \"objective\": \"product launch\",\n        \"task_type\": \"creative\",\n        \"generate_banner\": True,\n        \"user_id\": 123\n    }\n)\n\n# Print the campaign results\nprint(f\"Campaign created with ID: {campaign['campaign_id']}\")\nprint(f\"Model used: {campaign['ai_info']['model']}\")\nprint(f\"Tokens used: {campaign['ai_info']['usage']['total_tokens']}\")\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#example-2-analyzing-campaign-performance-and-suggesting-improvements","title":"Example 2: Analyzing Campaign Performance and Suggesting Improvements","text":"<pre><code>from ai.service_integration import enhanced_ai_service\n\n# Analyze a campaign\nanalysis = await enhanced_ai_service.analyze_campaign(\n    campaign_id=\"camp-456\"\n)\n\n# Print the analysis\nprint(f\"Campaign Analysis:\")\nprint(analysis['analysis'])\n\n# Suggest improvements\nsuggestions = await enhanced_ai_service.suggest_improvements(\n    campaign_id=\"camp-456\",\n    analysis_result=analysis\n)\n\n# Print the suggestions\nprint(f\"Improvement Suggestions:\")\nprint(suggestions['suggestions'])\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#example-3-generating-and-testing-email-subject-lines","title":"Example 3: Generating and Testing Email Subject Lines","text":"<pre><code>from ai.service_integration import enhanced_ai_service\nfrom ai.wandb_integration import wandb_registry\n\n# Generate subject lines\nsubject_lines = await enhanced_ai_service.generate_subject_lines(\n    email_content=\"Dear Marketing Professional,\\n\\nWe're excited to announce our new AI-powered email marketing tool...\",\n    audience=\"marketing professionals\",\n    num_variations=5\n)\n\n# Print the subject lines\nprint(\"Generated Subject Lines:\")\nfor i, subject in enumerate(subject_lines['subject_lines']):\n    print(f\"{i+1}. {subject['text']}\")\n    print(f\"   Explanation: {subject['explanation']}\")\n    print(f\"   Emphasis: {subject['emphasis']}\")\n\n# Start an experiment in Weights &amp; Biases\nexperiment_id = wandb_registry.start_experiment(\n    experiment_name=\"Email Subject Line Testing\",\n    config={\n        \"audience\": \"marketing professionals\",\n        \"campaign_type\": \"product launch\",\n        \"model\": subject_lines['model']\n    }\n)\n\n# Log metrics for each subject line\nfor i, subject in enumerate(subject_lines['subject_lines']):\n    # Simulate A/B testing results\n    open_rate = 0.2 + (i * 0.01)  # Simulated open rates\n    click_rate = 0.05 + (i * 0.005)  # Simulated click rates\n\n    # Log metrics\n    wandb_registry.log_experiment_metrics(\n        run_id=experiment_id,\n        metrics={\n            f\"subject_line_{i+1}_open_rate\": open_rate,\n            f\"subject_line_{i+1}_click_rate\": click_rate,\n            f\"subject_line_{i+1}\": subject['text']\n        }\n    )\n\nprint(f\"Experiment logged to Weights &amp; Biases with ID: {experiment_id}\")\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"archive/ai-ml-usage-guide/#common-issues","title":"Common Issues","text":"<ol> <li>API Key Issues</li> </ol> <p>If you encounter errors related to API keys, make sure:    - All required API keys are set in the <code>.env</code> file    - API keys are valid and not expired    - API keys have the necessary permissions</p> <ol> <li>Dependency Issues</li> </ol> <p>If you encounter errors related to dependencies, try:    - Running <code>pip install -r apps/api/requirements-ai-ml.txt</code> again    - Checking for conflicting dependencies    - Updating to the latest versions of dependencies</p> <ol> <li>Service Availability Issues</li> </ol> <p>If a service is not available, check:    - The service status on the provider's website    - Your internet connection    - Any rate limits or quotas</p>"},{"location":"archive/ai-ml-usage-guide/#logging","title":"Logging","text":"<p>The AI &amp; ML components use Python's logging module for logging. You can configure the logging level in your application:</p> <pre><code>import logging\n\n# Set logging level\nlogging.basicConfig(level=logging.INFO)\n\n# For more detailed logging\nlogging.getLogger('ai').setLevel(logging.DEBUG)\n</code></pre>"},{"location":"archive/ai-ml-usage-guide/#getting-help","title":"Getting Help","text":"<p>If you encounter issues that you can't resolve, please: 1. Check the documentation for the specific service 2. Check the GitHub repository for known issues 3. Contact the service provider's support team 4. Open an issue in the Maily repository</p>"},{"location":"archive/api-architecture/","title":"API Architecture Modernization","text":""},{"location":"archive/api-architecture/#graphql-implementation","title":"GraphQL Implementation","text":"<p>This document outlines the architecture for modernizing Maily's API layer with GraphQL.</p>"},{"location":"archive/api-architecture/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Next.js App    \u2502    \u2502   GraphQL API      \u2502    \u2502  Microservices  \u2502\n\u2502                 \u2502    \u2502                    \u2502    \u2502                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   React   \u2502  \u2502    \u2502  \u2502    Apollo    \u2502  \u2502    \u2502  \u2502 Campaign  \u2502  \u2502\n\u2502  \u2502  (Client) \u2502\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u25b6\u2502    Server    \u2502  \u2502    \u2502  \u2502 Service   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                 \u2502    \u2502          \u2502         \u2502    \u2502        \u25b2        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502    \u2502          \u25bc         \u2502    \u2502        \u2502        \u2502\n\u2502  \u2502  Apollo   \u2502  \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Client   \u2502\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u25b6\u2502    Schema    \u2502\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u25b6\u2502   Email   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502    \u2502  \u2502 Definitions  \u2502  \u2502    \u2502  \u2502  Service  \u2502  \u2502\n\u2502                 \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502    \u2502          \u2502         \u2502    \u2502        \u25b2        \u2502\n\u2502  \u2502 TanStack  \u2502  \u2502    \u2502          \u25bc         \u2502    \u2502        \u2502        \u2502\n\u2502  \u2502   Query   \u2502\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u25b6\u2502   Resolvers   \u2502\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u25b6\u2502 Analytics \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502    \u2502  \u2502  Service  \u2502  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"archive/api-architecture/#core-components","title":"Core Components","text":""},{"location":"archive/api-architecture/#1-graphql-schema","title":"1. GraphQL Schema","text":"<p>We'll use a code-first approach with Pothos GraphQL to define our schema:</p> <ul> <li>Type Definitions: Define schema types for all entities</li> <li>Query Definitions: Define queries for data fetching</li> <li>Mutation Definitions: Define mutations for data modification</li> <li>Subscription Definitions: Define subscriptions for real-time updates</li> </ul>"},{"location":"archive/api-architecture/#2-resolvers","title":"2. Resolvers","text":"<p>Our resolvers will:</p> <ul> <li>Use DataLoader for batching and caching</li> <li>Implement proper error handling</li> <li>Include performance metrics</li> <li>Provide proper authorization checks</li> </ul>"},{"location":"archive/api-architecture/#3-apollo-server-integration","title":"3. Apollo Server Integration","text":"<p>We'll integrate Apollo Server with our Next.js API routes:</p> <ul> <li>Configure Apollo Server as a Next.js API route</li> <li>Implement proper CORS handling</li> <li>Set up authentication middleware</li> <li>Configure proper error handling</li> </ul>"},{"location":"archive/api-architecture/#4-real-time-subscriptions","title":"4. Real-time Subscriptions","text":"<p>We'll implement real-time capabilities:</p> <ul> <li>Set up GraphQL over WebSockets</li> <li>Implement subscription resolvers</li> <li>Create proper authorization for subscriptions</li> <li>Optimize for performance</li> </ul>"},{"location":"archive/api-architecture/#performance-optimization","title":"Performance Optimization","text":""},{"location":"archive/api-architecture/#caching-strategy","title":"Caching Strategy","text":"<p>Our caching approach includes:</p> <ol> <li>DataLoader Caching</li> <li>Implement per-request caching</li> <li>Set up batch loading for efficient database queries</li> <li> <p>Use proper cache keys</p> </li> <li> <p>Response Caching</p> </li> <li>Implement Apollo Cache Control</li> <li>Set up appropriate cache TTLs for different types</li> <li> <p>Implement proper cache invalidation</p> </li> <li> <p>Edge Caching</p> </li> <li>Implement edge caching with Vercel Edge or Cloudflare Workers</li> <li>Cache static queries at the edge</li> <li> <p>Implement proper cache invalidation</p> </li> <li> <p>Stale-While-Revalidate</p> </li> <li>Implement SWR pattern for UI data</li> <li>Configure proper revalidation policies</li> <li>Handle cache staleness appropriately</li> </ol>"},{"location":"archive/api-architecture/#graphql-api-structure","title":"GraphQL API Structure","text":"<pre><code>type Query {\n  # Campaign queries\n  campaign(id: ID!): Campaign\n  campaigns(filter: CampaignFilter, page: PageInput): CampaignConnection\n\n  # Subscriber queries\n  subscriber(id: ID!): Subscriber\n  subscribers(filter: SubscriberFilter, page: PageInput): SubscriberConnection\n\n  # Email template queries\n  template(id: ID!): EmailTemplate\n  templates(filter: TemplateFilter, page: PageInput): TemplateConnection\n\n  # Analytics queries\n  campaignAnalytics(id: ID!): CampaignAnalytics\n  globalAnalytics(timeframe: Timeframe): GlobalAnalytics\n}\n\ntype Mutation {\n  # Campaign mutations\n  createCampaign(input: CreateCampaignInput!): CampaignPayload\n  updateCampaign(id: ID!, input: UpdateCampaignInput!): CampaignPayload\n  deleteCampaign(id: ID!): DeletePayload\n  scheduleCampaign(id: ID!, scheduledAt: DateTime!): CampaignPayload\n  sendCampaignNow(id: ID!): CampaignPayload\n\n  # Subscriber mutations\n  createSubscriber(input: CreateSubscriberInput!): SubscriberPayload\n  updateSubscriber(id: ID!, input: UpdateSubscriberInput!): SubscriberPayload\n  deleteSubscriber(id: ID!): DeletePayload\n  importSubscribers(file: Upload!): BulkOperationPayload\n\n  # Email template mutations\n  createTemplate(input: CreateTemplateInput!): TemplatePayload\n  updateTemplate(id: ID!, input: UpdateTemplateInput!): TemplatePayload\n  deleteTemplate(id: ID!): DeletePayload\n  generateTemplateWithAI(input: AITemplateInput!): TemplatePayload\n}\n\ntype Subscription {\n  campaignStatusChanged(id: ID!): Campaign\n  campaignAnalyticsUpdated(id: ID!): CampaignAnalytics\n  newSubscriberAdded: Subscriber\n}\n</code></pre>"},{"location":"archive/api-architecture/#implementation-steps","title":"Implementation Steps","text":"<ol> <li>Setup GraphQL Server</li> <li>Install Apollo Server and required dependencies</li> <li>Configure server with proper middleware</li> <li> <p>Set up development tools (Apollo Studio)</p> </li> <li> <p>Implement Core Schema</p> </li> <li>Define base types</li> <li>Implement query and mutation types</li> <li> <p>Set up subscription types</p> </li> <li> <p>Develop Resolvers</p> </li> <li>Implement query resolvers</li> <li>Implement mutation resolvers</li> <li>Set up subscription resolvers</li> <li> <p>Add DataLoader for performance</p> </li> <li> <p>Authentication &amp; Authorization</p> </li> <li>Implement JWT validation</li> <li>Set up role-based access control</li> <li> <p>Implement field-level permissions</p> </li> <li> <p>Performance Optimization</p> </li> <li>Configure caching strategies</li> <li>Implement query complexity analysis</li> <li> <p>Set up monitoring and metrics</p> </li> <li> <p>Testing</p> </li> <li>Write unit tests for resolvers</li> <li>Create integration tests for the API</li> <li> <p>Implement performance benchmarks</p> </li> <li> <p>Documentation</p> </li> <li>Generate GraphQL schema documentation</li> <li>Document resolver behavior</li> <li>Create usage examples</li> </ol>"},{"location":"archive/api-architecture/#api-performance-metrics","title":"API Performance Metrics","text":"<p>We'll measure API performance using:</p> <ul> <li>Response Time: Average and p95 response times</li> <li>Throughput: Requests per second</li> <li>Error Rate: Percentage of failed requests</li> <li>Cache Hit Ratio: Effectiveness of caching</li> <li>Resolver Performance: Execution time of individual resolvers</li> </ul>"},{"location":"archive/api-architecture/#security-considerations","title":"Security Considerations","text":"<p>Our GraphQL API implementation will include:</p> <ul> <li>Query Complexity Analysis: Prevent expensive queries</li> <li>Rate Limiting: Limit request frequency</li> <li>Depth Limiting: Prevent deeply nested queries</li> <li>Introspection Control: Disable in production environments</li> <li>Input Validation: Validate all input fields</li> </ul>"},{"location":"archive/app-router-migration-guide/","title":"Next.js App Router Migration Guide","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/app-router-migration-guide/#current-migration-progress-100","title":"Current Migration Progress: 100%","text":"<p>\u2705 Templates pages migrated \u2705 API routes migrated \u2705 Dashboard pages migrated \u2705 Campaign pages migrated \u2705 Contact pages migrated \u2705 Auth pages migrated \u2705 Settings pages migrated</p>"},{"location":"archive/app-router-migration-guide/#overview","title":"Overview","text":"<p>This guide documents the completed migration from the Next.js Pages Router to the App Router. The migration enables us to leverage several new features and benefits:</p> <ul> <li>Better support for React Server Components</li> <li>Simplified data fetching and caching</li> <li>Improved layouts and routing</li> <li>Future proofing against the eventual deprecation of the Pages Router</li> </ul>"},{"location":"archive/app-router-migration-guide/#directory-structure","title":"Directory Structure","text":"<p>The migration changed the directory structure from the Pages Router pattern to the App Router pattern:</p> <pre><code># Previous Pages Router Structure (Old)\npages/\n\u251c\u2500\u2500 _app.tsx\n\u251c\u2500\u2500 _document.tsx\n\u251c\u2500\u2500 api/\n\u2502   \u2514\u2500\u2500 [various API routes]\n\u251c\u2500\u2500 campaigns/\n\u2502   \u251c\u2500\u2500 [id].tsx\n\u2502   \u2514\u2500\u2500 index.tsx\n\u2514\u2500\u2500 [other page files]\n\n# New App Router Structure (Current)\napp/\n\u251c\u2500\u2500 api/\n\u2502   \u2514\u2500\u2500 [various API routes]\n\u251c\u2500\u2500 campaigns/\n\u2502   \u251c\u2500\u2500 [id]/\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx\n\u2502   \u2514\u2500\u2500 page.tsx\n\u251c\u2500\u2500 layout.tsx\n\u2514\u2500\u2500 [other directories and files]\n</code></pre>"},{"location":"archive/app-router-migration-guide/#migration-process-completed","title":"Migration Process Completed","text":""},{"location":"archive/app-router-migration-guide/#page-components","title":"Page Components","text":"<p>All page components have been successfully migrated following this pattern:</p> <p>Before (Pages Router): <pre><code>// pages/dashboard.tsx\nimport { useEffect, useState } from 'react'\n\nexport default function Dashboard() {\n  const [data, setData] = useState(null)\n\n  useEffect(() =&gt; {\n    const fetchData = async () =&gt; {\n      const res = await fetch('/api/data')\n      const data = await res.json()\n      setData(data)\n    }\n    fetchData()\n  }, [])\n\n  return &lt;div&gt;{/* Component JSX */}&lt;/div&gt;\n}\n</code></pre></p> <p>After (App Router): <pre><code>// app/dashboard/page.tsx\nimport { Suspense } from 'react'\nimport DashboardContent from './DashboardContent'\nimport Loading from './loading'\n\nexport default function Dashboard() {\n  return (\n    &lt;Suspense fallback={&lt;Loading /&gt;}&gt;\n      &lt;DashboardContent /&gt;\n    &lt;/Suspense&gt;\n  )\n}\n</code></pre></p>"},{"location":"archive/app-router-migration-guide/#api-routes","title":"API Routes","text":"<p>All API routes have been migrated following this pattern:</p> <p>Before (Pages Router): <pre><code>// pages/api/data.js\nexport default function handler(req, res) {\n  if (req.method === 'GET') {\n    // Handle GET request\n    res.status(200).json({ data: 'example' })\n  } else {\n    // Handle other HTTP methods\n    res.status(405).end()\n  }\n}\n</code></pre></p> <p>After (App Router): <pre><code>// app/api/data/route.ts\nimport { NextResponse } from 'next/server'\n\nexport async function GET() {\n  return NextResponse.json({ data: 'example' })\n}\n\nexport async function POST(request: Request) {\n  const body = await request.json()\n  // Process the request\n  return NextResponse.json({ success: true })\n}\n</code></pre></p>"},{"location":"archive/app-router-migration-guide/#testing","title":"Testing","text":"<p>All migrated components and routes have been thoroughly tested to ensure they function correctly with the App Router. The test suite has been updated to accommodate the new structure.</p>"},{"location":"archive/app-router-migration-guide/#migration-tracking","title":"Migration Tracking","text":"<p>We tracked the migration using a script that automatically identifies files that need migration. The migration is now 100% complete.</p>"},{"location":"archive/app-router-migration-guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>During the migration, we encountered and resolved these common issues:</p>"},{"location":"archive/app-router-migration-guide/#client-vs-server-components","title":"Client vs Server Components","text":"<p>Solution: We carefully separated client and server components. Client components are now properly marked with the \"use client\" directive.</p> <pre><code>'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent() {\n  const [state, setState] = useState(false)\n  // ...\n}\n</code></pre>"},{"location":"archive/app-router-migration-guide/#data-fetching","title":"Data Fetching","text":"<p>Solution: We replaced <code>useEffect</code> based data fetching with App Router's data fetching methods:</p> <pre><code>// Server Component data fetching\nasync function getData() {\n  const res = await fetch('https://api.example.com/data')\n  return res.json()\n}\n\nexport default async function Page() {\n  const data = await getData()\n  return &lt;div&gt;{/* Use data */}&lt;/div&gt;\n}\n</code></pre>"},{"location":"archive/app-router-migration-guide/#metadata-handling","title":"Metadata Handling","text":"<p>Solution: We've implemented the new metadata API for better SEO:</p> <pre><code>import type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Page Title',\n  description: 'Page description'\n}\n\nexport default function Page() {\n  // ...\n}\n</code></pre>"},{"location":"archive/app-router-migration-guide/#authentication-updates","title":"Authentication Updates","text":"<p>Solution: We've updated our authentication system to work with the App Router, using middleware for protected routes:</p> <pre><code>// middleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const isAuthenticated = checkAuth(request)\n  if (!isAuthenticated) {\n    return NextResponse.redirect(new URL('/login', request.url))\n  }\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: ['/dashboard/:path*', '/campaigns/:path*']\n}\n</code></pre>"},{"location":"archive/app-router-migration-guide/#resources","title":"Resources","text":"<ul> <li>Next.js App Router Documentation</li> <li>App Router Migration Guide</li> <li>Server Components Documentation</li> <li>Client Components Documentation</li> </ul>"},{"location":"archive/app-router-migration-guide/#conclusion","title":"Conclusion","text":"<p>The migration to the App Router has been successfully completed. This upgrade provides a modern foundation for our application with improved performance, better developer experience, and future-proofing against eventual deprecation of the Pages Router.</p>"},{"location":"archive/architecture/","title":"Maily Architecture","text":""},{"location":"archive/architecture/#overview","title":"Overview","text":"<p>Maily is a modern AI-powered email marketing platform built with a microservices architecture. This document outlines the key architectural decisions and their rationales.</p>"},{"location":"archive/architecture/#system-overview","title":"System Overview","text":"<p>Maily is built as a modern, scalable platform with a clear separation of concerns:</p> <pre><code>maily/\n\u251c\u2500\u2500 apps/                  # Application-specific code\n\u2502   \u251c\u2500\u2500 api/               # Backend API (FastAPI)\n\u2502   \u251c\u2500\u2500 web/               # Web frontend (Next.js)\n\u2502   \u2514\u2500\u2500 worker/            # Background worker (Celery)\n\u251c\u2500\u2500 packages/              # Shared packages\n\u2502   \u251c\u2500\u2500 ui/                # UI component library\n\u2502   \u251c\u2500\u2500 utils/             # Shared utilities\n\u2502   \u251c\u2500\u2500 db/                # Database client and models\n\u2502   \u2514\u2500\u2500 ai/                # AI models and utilities\n\u2514\u2500\u2500 scripts/               # Utility scripts\n</code></pre>"},{"location":"archive/architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    Client[Next.js Frontend] --&gt; ALB[Application Load Balancer]\n    ALB --&gt; API[FastAPI Backend]\n    API --&gt; DB[(PostgreSQL RDS)]\n    API --&gt; Cache[(Redis ElastiCache)]\n    API --&gt; S3[S3 Storage]\n    API --&gt; AI[OctoTools AI Service]\n</code></pre>"},{"location":"archive/architecture/#architecture-principles","title":"Architecture Principles","text":"<ol> <li>Modularity: The system is divided into loosely coupled modules</li> <li>Clean Architecture: Clear separation between business logic, data access, and presentation</li> <li>Domain-Driven Design: Organization around business domains</li> <li>Standardization: Consistent patterns and practices across the codebase</li> <li>Testability: Design that facilitates comprehensive testing</li> </ol>"},{"location":"archive/architecture/#backend-architecture-fastapi","title":"Backend Architecture (FastAPI)","text":"<p>The backend follows a layered architecture:</p> <pre><code>apps/api/\n\u251c\u2500\u2500 routers/              # API route definitions\n\u251c\u2500\u2500 services/             # Business logic\n\u251c\u2500\u2500 repositories/         # Data access\n\u251c\u2500\u2500 schemas/              # Data validation and serialization\n\u251c\u2500\u2500 models/               # Database models\n\u251c\u2500\u2500 middleware/           # Request/response middleware\n\u251c\u2500\u2500 dependencies/         # Dependency injection\n\u2514\u2500\u2500 main.py               # Application entry point\n</code></pre>"},{"location":"archive/architecture/#request-flow","title":"Request Flow","text":"<ol> <li>HTTP request arrives at a router endpoint</li> <li>Request data is validated using Pydantic schemas</li> <li>Router calls appropriate service method</li> <li>Service implements business logic, using repositories for data access</li> <li>Repository performs database operations</li> <li>Response flows back through the layers</li> <li>Response data is serialized using Pydantic schemas</li> </ol>"},{"location":"archive/architecture/#frontend-architecture-nextjs","title":"Frontend Architecture (Next.js)","text":"<p>The frontend uses Next.js with the App Router:</p> <pre><code>apps/web/\n\u251c\u2500\u2500 app/                  # App Router pages and layouts\n\u251c\u2500\u2500 components/           # App-specific components\n\u251c\u2500\u2500 utils/                # App-specific utilities\n\u251c\u2500\u2500 hooks/                # React hooks\n\u251c\u2500\u2500 contexts/             # React contexts\n\u251c\u2500\u2500 services/             # API client services\n\u2514\u2500\u2500 public/               # Static assets\n</code></pre>"},{"location":"archive/architecture/#architecture-decision-records-adrs","title":"Architecture Decision Records (ADRs)","text":""},{"location":"archive/architecture/#adr-1-microservices-architecture","title":"ADR 1: Microservices Architecture","text":"<p>Date: 2024-02-24</p> <p>Status: Accepted</p> <p>Context: - Need for scalability and independent service deployment - Different components have different scaling needs - Team structure supports multiple service ownership</p> <p>Decision: - Adopt microservices architecture - Use containerization with Docker - Deploy on AWS ECS/Fargate</p> <p>Consequences: - (+) Independent scaling and deployment - (+) Technology flexibility per service - (-) Increased operational complexity - (-) Need for service discovery and orchestration</p>"},{"location":"archive/architecture/#adr-2-fastapi-for-backend","title":"ADR 2: FastAPI for Backend","text":"<p>Date: 2024-02-24</p> <p>Status: Accepted</p> <p>Context: - Need for high-performance API - Modern Python async support required - Strong typing and validation needed</p> <p>Decision: - Use FastAPI as the backend framework - Implement OpenAPI/Swagger documentation - Use Pydantic for data validation - Use SQLAlchemy ORM for database interactions</p> <p>Consequences: - (+) Excellent performance and async support - (+) Automatic API documentation - (+) Type safety and validation - (-) Learning curve for team</p>"},{"location":"archive/architecture/#adr-3-nextjs-for-frontend","title":"ADR 3: Next.js for Frontend","text":"<p>Date: 2024-02-24</p> <p>Status: Accepted</p> <p>Context: - Need for SEO optimization - Server-side rendering requirements - Modern React features needed</p> <p>Decision: - Use Next.js for the frontend - Use Pages Router architecture - Use TypeScript for type safety</p> <p>Consequences: - (+) Better SEO capabilities - (+) Improved performance - (+) Modern development experience - (-) More complex build process</p>"},{"location":"archive/architecture/#adr-4-data-storage-strategy","title":"ADR 4: Data Storage Strategy","text":"<p>Date: 2024-02-24</p> <p>Status: Updated 2024-02-25</p> <p>Context: - Need for both relational and cache storage - High availability requirements - Data consistency important - Different database access needs for different services</p> <p>Decision: - Use PostgreSQL (AWS RDS) for persistent storage - Use SQLAlchemy ORM for Python backend services - Use Prisma client for JavaScript/TypeScript services - Use Redis for caching and session management - Implement multi-region replication</p> <p>Consequences: - (+) Strong data consistency - (+) High availability - (+) Efficient caching - (+) Appropriate ORM for each language ecosystem - (-) Higher operational costs - (-) Need to maintain two database access layers</p>"},{"location":"archive/architecture/#adr-5-ai-integration-architecture","title":"ADR 5: AI Integration Architecture","text":"<p>Date: 2024-02-24</p> <p>Status: Updated 2024-02-25</p> <p>Context: - Need to integrate multiple AI models - Performance requirements for AI operations - Cost optimization needed</p> <p>Decision: - Use OctoTools for AI orchestration - Implement adapter pattern for AI models - Use Redis for caching AI responses - Implement rate limiting and cost controls</p> <p>Consequences: - (+) Flexible AI model integration - (+) Optimized performance - (+) Cost control - (-) More complex integration logic</p>"},{"location":"archive/architecture/#adr-6-email-provider-strategy","title":"ADR 6: Email Provider Strategy","text":"<p>Date: 2024-02-25</p> <p>Status: Accepted</p> <p>Context: - Need for reliable email delivery - Different providers have different strengths - Need for fallback options</p> <p>Decision: - Implement support for multiple email providers:   - Resend   - SendGrid   - Mailgun - Use adapter pattern for provider integration - Implement automatic fallback</p> <p>Consequences: - (+) Higher email delivery reliability - (+) Provider flexibility - (+) Geographic delivery optimization - (-) More complex integration and testing</p>"},{"location":"archive/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"archive/architecture/#database","title":"Database","text":"<ul> <li>Connection pooling</li> <li>Query optimization</li> <li>Indexing strategy</li> <li>Read replicas for scaling</li> </ul>"},{"location":"archive/architecture/#caching","title":"Caching","text":"<ul> <li>Multi-level caching strategy</li> <li>Cache invalidation policies</li> <li>Redis cluster configuration</li> <li>Cache hit ratio monitoring</li> </ul>"},{"location":"archive/architecture/#api","title":"API","text":"<ul> <li>Rate limiting</li> <li>Request size limits</li> <li>Response compression</li> <li>Connection pooling</li> </ul>"},{"location":"archive/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"archive/architecture/#authentication","title":"Authentication","text":"<ul> <li>JWT-based authentication</li> <li>API key management</li> <li>OAuth2 integration</li> <li>Rate limiting per user</li> </ul>"},{"location":"archive/architecture/#data-protection","title":"Data Protection","text":"<ul> <li>Data encryption at rest</li> <li>TLS for data in transit</li> <li>Key rotation policies</li> <li>Backup encryption</li> </ul>"},{"location":"archive/architecture/#network-security","title":"Network Security","text":"<ul> <li>VPC configuration</li> <li>Security groups</li> <li>WAF rules</li> <li>DDoS protection</li> </ul>"},{"location":"archive/architecture/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"archive/architecture/#metrics","title":"Metrics","text":"<ul> <li>Prometheus metrics</li> <li>Custom business metrics</li> <li>SLO/SLA monitoring</li> <li>Cost metrics</li> </ul>"},{"location":"archive/architecture/#logging","title":"Logging","text":"<ul> <li>Centralized logging</li> <li>Log retention policies</li> <li>Error tracking</li> <li>Audit logging</li> </ul>"},{"location":"archive/architecture/#alerting","title":"Alerting","text":"<ul> <li>Alert thresholds</li> <li>On-call rotation</li> <li>Incident response</li> <li>Automated remediation</li> </ul>"},{"location":"archive/architecture/#deployment-strategy","title":"Deployment Strategy","text":""},{"location":"archive/architecture/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions workflows</li> <li>Automated testing</li> <li>Infrastructure as Code</li> <li>Blue-green deployments</li> </ul>"},{"location":"archive/architecture/#environment-management","title":"Environment Management","text":"<ul> <li>Development</li> <li>Staging</li> <li>Production</li> <li>Disaster recovery</li> </ul>"},{"location":"archive/architecture/#future-considerations","title":"Future Considerations","text":""},{"location":"archive/architecture/#scalability","title":"Scalability","text":"<ul> <li>Horizontal scaling</li> <li>Database sharding</li> <li>CDN integration</li> <li>Edge computing</li> </ul>"},{"location":"archive/architecture/#feature-roadmap","title":"Feature Roadmap","text":"<ul> <li>A/B testing infrastructure</li> <li>Machine learning pipeline</li> <li>Real-time analytics</li> <li>Multi-tenant support</li> </ul>"},{"location":"archive/changelog/","title":"Changelog","text":"<p>All notable changes to the Maily platform will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"archive/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"archive/changelog/#added","title":"Added","text":"<ul> <li>Integration with WebSocket API for real-time notifications</li> <li>Advanced segmentation capabilities for contact lists</li> <li>Multi-stage email campaign workflows</li> <li>Enhanced email rendering previews for different clients</li> </ul>"},{"location":"archive/changelog/#changed","title":"Changed","text":"<ul> <li>Improved authentication flow for enhanced security</li> <li>Optimized database queries for faster campaign analytics</li> <li>Updated dependencies to latest versions</li> <li>Enhanced API documentation with more examples</li> </ul>"},{"location":"archive/changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed an issue with image handling in HTML emails</li> <li>Resolved timezone discrepancy in scheduled campaigns</li> <li>Fixed pagination in campaign analytics reports</li> <li>Addressed accessibility issues in the dashboard</li> </ul>"},{"location":"archive/changelog/#250-2025-03-04","title":"[2.5.0] - 2025-03-04","text":""},{"location":"archive/changelog/#added_1","title":"Added","text":"<ul> <li>Completed migration to Next.js App Router</li> <li>Full internationalization support with 12 languages</li> <li>RTL language support for Arabic, Hebrew, and Persian</li> <li>Advanced AI-powered content recommendations</li> <li>Image generation capabilities using Stability AI</li> <li>Dark mode with system preference detection</li> <li>Enhanced mobile experience with responsive design</li> <li>Custom reporting engine with exportable formats</li> </ul>"},{"location":"archive/changelog/#changed_1","title":"Changed","text":"<ul> <li>Enhanced AI service moved from packages/ai to apps/api/ai</li> <li>Improved performance with React Server Components</li> <li>Optimized bundle size with better code splitting</li> <li>Enhanced authentication system with middleware support</li> <li>Upgraded to Tailwind v4.0 for improved styling capabilities</li> </ul>"},{"location":"archive/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Resolved memory leaks in long-running campaigns</li> <li>Fixed authentication token refresh mechanism</li> <li>Addressed accessibility issues in form components</li> <li>Fixed data fetching issues with new App Router patterns</li> <li>Resolved state management issues in complex forms</li> </ul>"},{"location":"archive/changelog/#security","title":"Security","text":"<ul> <li>Implemented Content Security Policy headers</li> <li>Enhanced protection against CSRF attacks</li> <li>Added rate limiting for sensitive endpoints</li> <li>Implemented stronger password policies</li> </ul>"},{"location":"archive/changelog/#240-2025-02-01","title":"[2.4.0] - 2025-02-01","text":""},{"location":"archive/changelog/#added_2","title":"Added","text":"<ul> <li>Comprehensive monitoring and observability</li> <li>Distributed tracing with OpenTelemetry</li> <li>Metrics collection with Prometheus</li> <li>Alerting strategy with PagerDuty integration</li> <li>Health checks for all services</li> <li>Performance monitoring dashboards</li> <li>Log management with structured logging</li> </ul>"},{"location":"archive/changelog/#changed_2","title":"Changed","text":"<ul> <li>Enhanced error handling across the platform</li> <li>Improved error reporting with contextual information</li> <li>Updated dependencies to latest versions</li> <li>Optimized build process for faster deployments</li> </ul>"},{"location":"archive/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Resolved race conditions in concurrent campaign operations</li> <li>Fixed memory leaks in background tasks</li> <li>Addressed performance bottlenecks in analytics processing</li> <li>Fixed inconsistencies in campaign statistics</li> </ul>"},{"location":"archive/changelog/#230-2025-01-10","title":"[2.3.0] - 2025-01-10","text":""},{"location":"archive/changelog/#added_3","title":"Added","text":"<ul> <li>Enhanced developer experience features</li> <li>Feature flags for controlled rollouts</li> <li>Improved CI/CD pipeline with automated testing</li> <li>Comprehensive developer documentation</li> <li>Code quality metrics with SonarQube</li> <li>Interactive API documentation with Swagger</li> <li>Enhanced debugging tools</li> </ul>"},{"location":"archive/changelog/#changed_3","title":"Changed","text":"<ul> <li>Migrated to Vitest for faster unit testing</li> <li>Improved test coverage to over 80%</li> <li>Enhanced error messages for developers</li> <li>Updated dependencies to latest versions</li> </ul>"},{"location":"archive/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Resolved issues with development environment setup</li> <li>Fixed inconsistent test behaviors</li> <li>Addressed type errors in TypeScript codebase</li> <li>Fixed build failures on certain environments</li> </ul>"},{"location":"archive/changelog/#220-2024-12-15","title":"[2.2.0] - 2024-12-15","text":""},{"location":"archive/changelog/#added_4","title":"Added","text":"<ul> <li>Integration with Anthropic Claude 3 models</li> <li>AI observability with Langfuse</li> <li>Weights &amp; Biases integration for experiment tracking</li> <li>DVC integration for model versioning</li> <li>Helicone integration for API cost tracking</li> <li>LiteLLM integration for model routing</li> <li>AI-powered email content analysis</li> </ul>"},{"location":"archive/changelog/#changed_4","title":"Changed","text":"<ul> <li>Enhanced AI architecture for improved performance</li> <li>Optimized AI cost management with tiered model selection</li> <li>Improved accuracy of AI-generated content</li> <li>Updated AI infrastructure for better scalability</li> </ul>"},{"location":"archive/changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Resolved issues with AI model selection</li> <li>Fixed token counting inaccuracies</li> <li>Addressed performance issues in AI content generation</li> <li>Fixed error handling in AI service</li> </ul>"},{"location":"archive/changelog/#210-2024-11-20","title":"[2.1.0] - 2024-11-20","text":""},{"location":"archive/changelog/#added_5","title":"Added","text":"<ul> <li>Multi-region deployment for improved global performance</li> <li>CDN integration for static assets</li> <li>Enhanced database performance optimizations</li> <li>Comprehensive caching strategy</li> <li>Autoscaling configuration for high-load periods</li> <li>Infrastructure as code with Terraform</li> <li>Improved build and deployment processes</li> </ul>"},{"location":"archive/changelog/#changed_5","title":"Changed","text":"<ul> <li>Optimized database queries for faster performance</li> <li>Enhanced load balancing for better request distribution</li> <li>Improved asset delivery through CDN</li> <li>Updated dependencies to latest versions</li> </ul>"},{"location":"archive/changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Resolved issues with region-specific data handling</li> <li>Fixed cache invalidation bugs</li> <li>Addressed performance bottlenecks in high-load scenarios</li> <li>Fixed deployment failures in certain environments</li> </ul>"},{"location":"archive/changelog/#200-2024-10-25","title":"[2.0.0] - 2024-10-25","text":""},{"location":"archive/changelog/#added_6","title":"Added","text":"<ul> <li>Comprehensive security scanning in CI/CD pipeline</li> <li>Vulnerability monitoring dashboard</li> <li>Enhanced authentication system with MFA</li> <li>Data encryption at rest</li> <li>GDPR, CCPA, and CAN-SPAM compliance features</li> <li>Security headers implementation</li> <li>Content Security Policy enforcement</li> </ul>"},{"location":"archive/changelog/#changed_6","title":"Changed","text":"<ul> <li>Revamped authentication flow for improved security</li> <li>Enhanced data handling for compliance requirements</li> <li>Improved secrets management</li> <li>Updated dependencies to address security vulnerabilities</li> </ul>"},{"location":"archive/changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Resolved critical security vulnerabilities</li> <li>Fixed authentication bypass issues</li> <li>Addressed data encryption weaknesses</li> <li>Fixed compliance gaps in user data handling</li> </ul>"},{"location":"archive/changelog/#150-2024-09-30","title":"[1.5.0] - 2024-09-30","text":""},{"location":"archive/changelog/#added_7","title":"Added","text":"<ul> <li>Enhanced campaign analytics dashboard</li> <li>A/B testing functionality for email campaigns</li> <li>Advanced email template editor</li> <li>Improved contact management system</li> <li>Integration with popular CRM platforms</li> <li>Enhanced email deliverability features</li> <li>Spam score analyzer for email content</li> </ul>"},{"location":"archive/changelog/#changed_7","title":"Changed","text":"<ul> <li>Improved user interface for campaign creation</li> <li>Enhanced analytics visualization</li> <li>Optimized email sending process</li> <li>Updated third-party integrations</li> </ul>"},{"location":"archive/changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Resolved issues with email rendering in certain clients</li> <li>Fixed campaign scheduling bugs</li> <li>Addressed analytics discrepancies</li> <li>Fixed template editor layout issues</li> </ul>"},{"location":"archive/changelog/#100-2024-08-15","title":"[1.0.0] - 2024-08-15","text":""},{"location":"archive/changelog/#added_8","title":"Added","text":"<ul> <li>Initial release of the Maily platform</li> <li>Email campaign creation and management</li> <li>Contact list management</li> <li>Basic email templates</li> <li>Campaign analytics</li> <li>User authentication and authorization</li> <li>Basic reporting features</li> <li>Simple dashboard for campaign overview</li> </ul>"},{"location":"archive/deployment-guide/","title":"Maily Deployment Guide","text":"<p>This document provides comprehensive instructions for deploying the Maily platform to various environments.</p>"},{"location":"archive/deployment-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview</li> <li>Prerequisites</li> <li>Infrastructure Setup</li> <li>Kubernetes Deployment</li> <li>Secrets Management</li> <li>Monitoring and Observability</li> <li>Backup and Disaster Recovery</li> <li>CI/CD Pipeline</li> <li>Security Considerations</li> <li>Troubleshooting</li> </ol>"},{"location":"archive/deployment-guide/#architecture-overview","title":"Architecture Overview","text":"<p>Maily is deployed as a set of microservices on Kubernetes, with the following components:</p> <ul> <li>Frontend: Next.js application served via Nginx</li> <li>API: Node.js/Express backend services</li> <li>Worker: Background processing services</li> <li>Database: PostgreSQL for persistent storage</li> <li>Redis: For caching and session management</li> <li>RabbitMQ: For message queuing</li> </ul> <p>The infrastructure is provisioned using Terraform on AWS, with the following key components:</p> <ul> <li>EKS for Kubernetes orchestration</li> <li>RDS for managed PostgreSQL</li> <li>ElastiCache for managed Redis</li> <li>Amazon MQ for managed RabbitMQ</li> <li>S3 for object storage</li> <li>CloudFront for CDN</li> <li>Route53 for DNS management</li> <li>WAF for web application firewall</li> </ul>"},{"location":"archive/deployment-guide/#prerequisites","title":"Prerequisites","text":"<p>Before deploying Maily, ensure you have the following:</p> <ul> <li>AWS account with appropriate permissions</li> <li>AWS CLI configured with access credentials</li> <li>Terraform (v1.0.0+)</li> <li>kubectl (compatible with your EKS version)</li> <li>Helm (v3.0.0+)</li> <li>Docker (for local development and testing)</li> </ul>"},{"location":"archive/deployment-guide/#infrastructure-setup","title":"Infrastructure Setup","text":""},{"location":"archive/deployment-guide/#terraform-initialization","title":"Terraform Initialization","text":"<ol> <li>Navigate to the Terraform directory for your environment:</li> </ol> <pre><code>cd infrastructure/terraform/environments/[environment]\n</code></pre> <ol> <li>Initialize Terraform:</li> </ol> <pre><code>terraform init\n</code></pre> <ol> <li>Create a <code>terraform.tfvars</code> file with your specific configuration:</li> </ol> <pre><code>aws_region         = \"us-west-2\"\nvpc_cidr           = \"10.0.0.0/16\"\navailability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n</code></pre> <ol> <li>Apply the Terraform configuration:</li> </ol> <pre><code>terraform apply\n</code></pre> <ol> <li>After successful application, note the outputs for future reference:</li> </ol> <pre><code>terraform output\n</code></pre>"},{"location":"archive/deployment-guide/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"archive/deployment-guide/#connecting-to-the-cluster","title":"Connecting to the Cluster","text":"<ol> <li>Update your kubeconfig to connect to the EKS cluster:</li> </ol> <pre><code>aws eks update-kubeconfig --name maily-[environment] --region us-west-2\n</code></pre> <ol> <li>Verify connection:</li> </ol> <pre><code>kubectl get nodes\n</code></pre>"},{"location":"archive/deployment-guide/#deploying-with-helm","title":"Deploying with Helm","text":"<ol> <li>Deploy Maily using Helm:</li> </ol> <pre><code>helm upgrade --install maily ./infrastructure/helm/maily \\\n  --namespace maily \\\n  --create-namespace \\\n  --set environment=[environment] \\\n  --values ./infrastructure/helm/maily/values-[environment].yaml\n</code></pre> <ol> <li>Verify the deployment:</li> </ol> <pre><code>kubectl get pods -n maily\n</code></pre>"},{"location":"archive/deployment-guide/#secrets-management","title":"Secrets Management","text":"<p>Maily uses HashiCorp Vault for secrets management, integrated with Kubernetes via the External Secrets Operator.</p>"},{"location":"archive/deployment-guide/#setting-up-vault","title":"Setting Up Vault","text":"<ol> <li>Deploy Vault using Helm:</li> </ol> <pre><code>helm repo add hashicorp https://helm.releases.hashicorp.com\nhelm install vault hashicorp/vault --namespace vault --create-namespace\n</code></pre> <ol> <li> <p>Initialize and unseal Vault (follow Vault documentation for production setup).</p> </li> <li> <p>Configure Kubernetes authentication:</p> </li> </ol> <pre><code>vault auth enable kubernetes\nvault write auth/kubernetes/config \\\n  kubernetes_host=\"https://$KUBERNETES_HOST:443\" \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \\\n  token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token\n</code></pre> <ol> <li>Create a policy and role for Maily:</li> </ol> <pre><code>vault policy write maily-policy - &lt;&lt;EOF\npath \"secret/data/maily/*\" {\n  capabilities = [\"read\"]\n}\nEOF\n\nvault write auth/kubernetes/role/maily-role \\\n  bound_service_account_names=default \\\n  bound_service_account_namespaces=maily \\\n  policies=maily-policy \\\n  ttl=1h\n</code></pre> <ol> <li>Store secrets in Vault:</li> </ol> <pre><code>vault kv put secret/maily/database url=\"postgresql://user:password@hostname:5432/dbname\"\nvault kv put secret/maily/redis url=\"redis://hostname:6379\"\n# Add other secrets as needed\n</code></pre> <ol> <li>Deploy the External Secrets Operator and configure it to fetch secrets from Vault.</li> </ol>"},{"location":"archive/deployment-guide/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>Maily uses the Prometheus stack for monitoring and Loki for log aggregation.</p>"},{"location":"archive/deployment-guide/#deploying-prometheus-and-grafana","title":"Deploying Prometheus and Grafana","text":"<ol> <li>Deploy the Prometheus Operator:</li> </ol> <pre><code>kubectl apply -f infrastructure/kubernetes/monitoring/prometheus-operator.yaml\n</code></pre> <ol> <li>Deploy Loki for log aggregation:</li> </ol> <pre><code>kubectl apply -f infrastructure/kubernetes/monitoring/loki.yaml\n</code></pre> <ol> <li>Access Grafana:</li> </ol> <pre><code>kubectl port-forward svc/prometheus-operator-grafana 3000:80 -n monitoring\n</code></pre> <ol> <li>Log in with the default credentials (admin/admin-password-to-be-replaced) and change the password.</li> </ol>"},{"location":"archive/deployment-guide/#backup-and-disaster-recovery","title":"Backup and Disaster Recovery","text":"<p>Maily uses Velero for Kubernetes backup and AWS native services for database backups.</p>"},{"location":"archive/deployment-guide/#setting-up-velero","title":"Setting Up Velero","text":"<ol> <li>Deploy Velero:</li> </ol> <pre><code>kubectl apply -f infrastructure/kubernetes/backup/velero.yaml\n</code></pre> <ol> <li>Verify the installation:</li> </ol> <pre><code>kubectl get pods -n velero\n</code></pre> <ol> <li>Create an on-demand backup:</li> </ol> <pre><code>velero backup create maily-backup --include-namespaces maily\n</code></pre>"},{"location":"archive/deployment-guide/#database-backups","title":"Database Backups","text":"<p>RDS automated backups are configured via Terraform with a retention period of 7 days. For point-in-time recovery, ensure that automated backups are enabled.</p>"},{"location":"archive/deployment-guide/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Maily uses GitHub Actions for CI/CD. The workflow is defined in <code>.github/workflows/enhanced-ci-cd.yaml</code>.</p>"},{"location":"archive/deployment-guide/#setting-up-github-secrets","title":"Setting Up GitHub Secrets","text":"<p>The following secrets need to be configured in your GitHub repository:</p> <ul> <li><code>AWS_ACCESS_KEY_ID</code>: AWS access key with appropriate permissions</li> <li><code>AWS_SECRET_ACCESS_KEY</code>: Corresponding AWS secret key</li> <li><code>CODECOV_TOKEN</code>: Token for uploading test coverage to Codecov</li> <li><code>SNYK_TOKEN</code>: Token for Snyk security scanning</li> </ul>"},{"location":"archive/deployment-guide/#security-considerations","title":"Security Considerations","text":""},{"location":"archive/deployment-guide/#network-policies","title":"Network Policies","text":"<p>Apply network policies to restrict pod-to-pod communication:</p> <pre><code>kubectl apply -f infrastructure/kubernetes/security/enhanced-network-policies.yaml\n</code></pre>"},{"location":"archive/deployment-guide/#pod-security-policies","title":"Pod Security Policies","text":"<p>Apply pod security policies to enforce security standards:</p> <pre><code>kubectl apply -f infrastructure/kubernetes/security/pod-security-policies.yaml\n</code></pre>"},{"location":"archive/deployment-guide/#web-application-firewall","title":"Web Application Firewall","text":"<p>The AWS WAF is configured via Terraform to protect against common web exploits.</p>"},{"location":"archive/deployment-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"archive/deployment-guide/#common-issues","title":"Common Issues","text":"<ol> <li>Pod Startup Failures:</li> <li>Check pod logs: <code>kubectl logs &lt;pod-name&gt; -n maily</code></li> <li> <p>Check pod events: <code>kubectl describe pod &lt;pod-name&gt; -n maily</code></p> </li> <li> <p>Database Connection Issues:</p> </li> <li>Verify secrets are correctly mounted</li> <li>Check network policies allow the connection</li> <li> <p>Verify RDS security group allows traffic from the EKS cluster</p> </li> <li> <p>CI/CD Pipeline Failures:</p> </li> <li>Check GitHub Actions logs for detailed error messages</li> <li>Verify all required secrets are configured</li> <li>Ensure AWS credentials have sufficient permissions</li> </ol>"},{"location":"archive/deployment-guide/#getting-help","title":"Getting Help","text":"<p>For additional assistance, contact the DevOps team or refer to the internal documentation.</p>"},{"location":"archive/deployment/","title":"Deployment Guide","text":""},{"location":"archive/deployment/#overview","title":"Overview","text":"<p>This guide covers the deployment process for Maily, including infrastructure setup, deployment procedures, and performance tuning guidelines.</p>"},{"location":"archive/deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS Account with appropriate permissions</li> <li>Terraform &gt;= 1.0.0</li> <li>Docker</li> <li>Node.js &gt;= 18.0.0</li> <li>Python &gt;= 3.10.0</li> <li>PostgreSQL &gt;= 14.0</li> </ul>"},{"location":"archive/deployment/#local-development-with-docker-compose","title":"Local Development with Docker Compose","text":"<p>The <code>docker-compose.yml</code> file provides a local development environment with all the necessary services:</p> <ul> <li>API service (FastAPI backend)</li> <li>Frontend service (React/Next.js)</li> <li>Redis for caching and message queuing</li> <li>Supabase for database and authentication</li> </ul>"},{"location":"archive/deployment/#running-locally","title":"Running Locally","text":"<pre><code># Start all services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop all services\ndocker-compose down\n</code></pre>"},{"location":"archive/deployment/#docker-configuration-standardization","title":"Docker Configuration Standardization","text":"<p>This section outlines the standardization of Docker configurations for the Maily project.</p>"},{"location":"archive/deployment/#dockerfile-locations","title":"Dockerfile Locations","text":"<p>The project uses standardized Dockerfiles for each service:</p> Service Dockerfile Location API <code>apps/api/Dockerfile</code> Web <code>apps/web/Dockerfile</code> Workers <code>apps/workers/Dockerfile</code>"},{"location":"archive/deployment/#docker-best-practices","title":"Docker Best Practices","text":"<p>All Dockerfiles follow these best practices:</p> <ol> <li>Multi-stage builds for optimized image size</li> <li>Non-root users for improved security</li> <li>Health checks for better container monitoring</li> <li>Proper caching of dependencies</li> <li>Minimal base images to reduce attack surface</li> <li>Clear documentation with comments</li> </ol>"},{"location":"archive/deployment/#api-dockerfile","title":"API Dockerfile","text":"<p>The API Dockerfile: - Uses Python 3.11 slim image - Installs only necessary system dependencies - Sets appropriate Python environment variables - Creates a non-root user for security - Includes a health check endpoint</p>"},{"location":"archive/deployment/#web-dockerfile","title":"Web Dockerfile","text":"<p>The Web Dockerfile: - Uses a multi-stage build process - Separates dependency installation, build, and runtime stages - Optimizes for Next.js applications - Creates a non-root user for security - Includes a health check endpoint</p>"},{"location":"archive/deployment/#workers-dockerfile","title":"Workers Dockerfile","text":"<p>The Workers Dockerfile: - Uses Python 3.11 slim image - Sets appropriate environment variables - Creates a non-root user for security - Configures for background processing</p>"},{"location":"archive/deployment/#building-images","title":"Building Images","text":"<p>To build the Docker images:</p> <pre><code># Build API image\ndocker build -t maily-api:latest -f apps/api/Dockerfile .\n\n# Build Web image\ndocker build -t maily-web:latest -f apps/web/Dockerfile .\n\n# Build Workers image\ndocker build -t maily-workers:latest -f apps/workers/Dockerfile .\n</code></pre>"},{"location":"archive/deployment/#infrastructure-setup","title":"Infrastructure Setup","text":""},{"location":"archive/deployment/#1-initialize-terraform","title":"1. Initialize Terraform","text":"<pre><code>cd terraform\nterraform init\n</code></pre>"},{"location":"archive/deployment/#2-configure-variables","title":"2. Configure Variables","text":"<p>Create <code>terraform.tfvars</code>: <pre><code>environment         = \"production\"\naws_region         = \"us-east-1\"\nvpc_cidr           = \"10.0.0.0/16\"\navailability_zones = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n\nfrontend_cpu    = 1024\nfrontend_memory = 2048\nbackend_cpu     = 2048\nbackend_memory  = 4096\n\ndb_name     = \"maily\"\ndb_username = \"maily_admin\"\ndb_password = \"your-secure-password\"\n\nredis_node_type = \"cache.t3.medium\"\n</code></pre></p>"},{"location":"archive/deployment/#3-deploy-infrastructure","title":"3. Deploy Infrastructure","text":"<pre><code>terraform plan -out=tfplan\nterraform apply tfplan\n</code></pre>"},{"location":"archive/deployment/#application-deployment","title":"Application Deployment","text":""},{"location":"archive/deployment/#frontend-deployment","title":"Frontend Deployment","text":"<ol> <li> <p>Build the application:    <pre><code>cd maily-frontend\nnpm install\nnpm run build\n</code></pre></p> </li> <li> <p>Push to ECR:    <pre><code>docker build -t maily/frontend .\ndocker tag maily/frontend:latest $ECR_REPO/maily/frontend:latest\ndocker push $ECR_REPO/maily/frontend:latest\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#backend-deployment","title":"Backend Deployment","text":"<ol> <li> <p>Build the application:    <pre><code>cd backend\npip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Push to ECR:    <pre><code>docker build -t maily/backend .\ndocker tag maily/backend:latest $ECR_REPO/maily/backend:latest\ndocker push $ECR_REPO/maily/backend:latest\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#database-migrations","title":"Database Migrations","text":"<ol> <li>Run migrations:    <pre><code>aws ecs run-task \\\n  --cluster maily-cluster \\\n  --task-definition maily-migrations \\\n  --network-configuration \"awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx]}\" \\\n  --launch-type FARGATE\n</code></pre></li> </ol>"},{"location":"archive/deployment/#performance-tuning","title":"Performance Tuning","text":""},{"location":"archive/deployment/#frontend-performance","title":"Frontend Performance","text":"<ol> <li> <p>Next.js Optimization <pre><code># Enable production optimizations\nNEXT_OPTIMIZE_FONTS=true\nNEXT_OPTIMIZE_IMAGES=true\nNEXT_OPTIMIZE_CSS=true\n</code></pre></p> </li> <li> <p>Caching Strategy</p> </li> <li>Configure CDN caching</li> <li>Implement service worker</li> <li> <p>Use static generation where possible</p> </li> <li> <p>Bundle Optimization <pre><code># Analyze bundle size\nnpm run analyze\n\n# Enable compression\nCOMPRESS=true\nGZIP_COMPRESSION=true\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#backend-performance","title":"Backend Performance","text":"<ol> <li> <p>FastAPI Configuration <pre><code># uvicorn configuration\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"uvicorn.workers.UvicornWorker\"\n</code></pre></p> </li> <li> <p>Database Optimization <pre><code>-- Add indexes for common queries\nCREATE INDEX idx_campaign_user ON campaigns(user_id);\nCREATE INDEX idx_campaign_status ON campaigns(status);\n</code></pre></p> </li> <li> <p>Redis Caching <pre><code># Configure Redis\nREDIS_MAX_CONNECTIONS = 10\nREDIS_SOCKET_TIMEOUT = 2\nREDIS_RETRY_ON_TIMEOUT = True\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#infrastructure-scaling","title":"Infrastructure Scaling","text":"<ol> <li> <p>ECS Auto Scaling <pre><code>resource \"aws_appautoscaling_target\" \"ecs_target\" {\n  max_capacity       = 10\n  min_capacity       = 2\n  resource_id        = \"service/${aws_ecs_cluster.main.name}/${aws_ecs_service.main.name}\"\n  scalable_dimension = \"ecs:service:DesiredCount\"\n  service_namespace  = \"ecs\"\n}\n</code></pre></p> </li> <li> <p>RDS Optimization <pre><code>-- Configure RDS parameters\nSET max_connections = 200;\nSET shared_buffers = '1GB';\nSET effective_cache_size = '3GB';\n</code></pre></p> </li> <li> <p>ElastiCache Scaling <pre><code>resource \"aws_elasticache_cluster\" \"redis\" {\n  cluster_id           = \"maily-redis\"\n  engine              = \"redis\"\n  node_type           = \"cache.t3.medium\"\n  num_cache_nodes     = 2\n  parameter_group_name = \"default.redis6.x\"\n}\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"archive/deployment/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'maily-backend'\n    static_configs:\n      - targets: ['backend:8000']\n\n  - job_name: 'maily-frontend'\n    static_configs:\n      - targets: ['frontend:3000']\n</code></pre>"},{"location":"archive/deployment/#cloudwatch-alarms","title":"CloudWatch Alarms","text":"<pre><code>resource \"aws_cloudwatch_metric_alarm\" \"cpu_high\" {\n  alarm_name          = \"cpu-utilization-high\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name        = \"CPUUtilization\"\n  namespace          = \"AWS/ECS\"\n  period             = \"300\"\n  statistic          = \"Average\"\n  threshold          = \"85\"\n}\n</code></pre>"},{"location":"archive/deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"archive/deployment/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name maily.app;\n\n    ssl_certificate /etc/nginx/ssl/maily.crt;\n    ssl_certificate_key /etc/nginx/ssl/maily.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n}\n</code></pre>"},{"location":"archive/deployment/#waf-rules","title":"WAF Rules","text":"<pre><code>resource \"aws_wafv2_web_acl\" \"main\" {\n  name        = \"maily-waf\"\n  description = \"WAF rules for Maily\"\n  scope       = \"REGIONAL\"\n\n  default_action {\n    allow {}\n  }\n\n  rule {\n    name     = \"AWSManagedRulesCommonRuleSet\"\n    priority = 1\n\n    override_action {\n      none {}\n    }\n\n    statement {\n      managed_rule_group_statement {\n        name        = \"AWSManagedRulesCommonRuleSet\"\n        vendor_name = \"AWS\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"archive/deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"archive/deployment/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Deployment Failures <pre><code># Check ECS service events\naws ecs describe-services \\\n  --cluster maily-cluster \\\n  --services maily-frontend maily-backend\n</code></pre></p> </li> <li> <p>Database Connectivity <pre><code># Test database connection\npsql -h $DB_HOST -U $DB_USER -d $DB_NAME\n</code></pre></p> </li> <li> <p>Cache Issues <pre><code># Monitor Redis metrics\nredis-cli info stats\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#rollback-procedures","title":"Rollback Procedures","text":"<ol> <li> <p>Application Rollback <pre><code># Revert to previous version\naws ecs update-service \\\n  --cluster maily-cluster \\\n  --service maily-frontend \\\n  --task-definition maily-frontend:previous\n</code></pre></p> </li> <li> <p>Database Rollback <pre><code># Restore from snapshot\naws rds restore-db-instance-from-db-snapshot \\\n  --db-instance-identifier maily-db \\\n  --db-snapshot-identifier maily-snapshot\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#maintenance","title":"Maintenance","text":""},{"location":"archive/deployment/#backup-procedures","title":"Backup Procedures","text":"<ol> <li> <p>Database Backups <pre><code># Manual snapshot\naws rds create-db-snapshot \\\n  --db-instance-identifier maily-db \\\n  --db-snapshot-identifier maily-manual-backup\n</code></pre></p> </li> <li> <p>Application State <pre><code># Export configurations\naws s3 cp s3://maily-configs/prod/ ./backup/configs/ --recursive\n</code></pre></p> </li> </ol>"},{"location":"archive/deployment/#updates-and-patches","title":"Updates and Patches","text":"<ol> <li> <p>OS Updates <pre><code># Update ECS container instances\naws ecs update-container-instances-state \\\n  --cluster maily-cluster \\\n  --container-instances $INSTANCE_ID \\\n  --status DRAINING\n</code></pre></p> </li> <li> <p>Dependencies <pre><code># Update npm packages\nnpm audit fix\n\n# Update Python packages\npip-compile requirements.in\n</code></pre></p> </li> </ol>"},{"location":"archive/disaster-recovery/","title":"Disaster Recovery Plan","text":""},{"location":"archive/disaster-recovery/#overview","title":"Overview","text":"<p>This document outlines the disaster recovery procedures for the Maily application, covering both frontend and backend components, databases, and infrastructure.</p>"},{"location":"archive/disaster-recovery/#critical-systems","title":"Critical Systems","text":"<ul> <li>PostgreSQL Database</li> <li>Redis Cache</li> <li>File Storage (S3/equivalent)</li> <li>Frontend Application (Next.js)</li> <li>Backend API (FastAPI)</li> <li>Authentication Services</li> <li>Email Service Providers</li> </ul>"},{"location":"archive/disaster-recovery/#backup-procedures","title":"Backup Procedures","text":""},{"location":"archive/disaster-recovery/#database-backups","title":"Database Backups","text":"<ol> <li> <p>Automated Daily Backups <pre><code># AWS RDS Automated Backup Configuration\naws rds modify-db-instance \\\n  --db-instance-identifier maily-prod \\\n  --backup-retention-period 35 \\\n  --preferred-backup-window \"00:00-01:00\" \\\n  --copy-tags-to-snapshot \\\n  --deletion-protection \\\n  --apply-immediately\n\n# Cross-Region Replication\naws rds create-db-instance-read-replica \\\n  --db-instance-identifier maily-prod-replica \\\n  --source-db-instance-identifier maily-prod \\\n  --source-region us-east-1 \\\n  --destination-region us-west-2\n</code></pre></p> </li> <li> <p>Backup Retention</p> </li> <li>Daily backups: 35 days retention (automated)</li> <li>Weekly backups: 52 weeks retention (manual)</li> <li>Monthly backups: 12 months retention (manual)</li> <li> <p>Cross-region replicas: Real-time replication</p> </li> <li> <p>Backup Verification <pre><code># Automated daily backup verification\n#!/bin/bash\n# /usr/local/bin/verify_backups.sh\n\n# Verify RDS snapshot\naws rds describe-db-snapshots \\\n  --db-instance-identifier maily-prod \\\n  --snapshot-type automated \\\n  --query 'DBSnapshots[?Status==`available`].DBSnapshotIdentifier' \\\n  --output text | while read -r snapshot; do\n  aws rds describe-db-snapshots \\\n    --db-snapshot-identifier \"$snapshot\" \\\n    --query 'DBSnapshots[].Status' \\\n    --output text\ndone\n\n# Verify replica lag\naws rds describe-db-instances \\\n  --db-instance-identifier maily-prod-replica \\\n  --query 'DBInstances[].ReplicaLag' \\\n  --output text\n</code></pre></p> </li> </ol>"},{"location":"archive/disaster-recovery/#redis-cache","title":"Redis Cache","text":"<ul> <li>Persistence Configuration:   <pre><code># /etc/redis/redis.conf\nsave 900 1           # Save if at least 1 key changed in 15 minutes\nsave 300 10          # Save if at least 10 keys changed in 5 minutes\nsave 60 10000        # Save if at least 10000 keys changed in 1 minute\n\nappendonly yes\nappendfsync everysec\n\n# Replication configuration\nreplicaof master.maily-redis.xxx.ng.0001.use1.cache.amazonaws.com 6379\n</code></pre></li> </ul>"},{"location":"archive/disaster-recovery/#file-storage","title":"File Storage","text":"<ul> <li>S3 Cross-Region Replication:   <pre><code># Enable versioning\naws s3api put-bucket-versioning \\\n  --bucket maily-prod \\\n  --versioning-configuration Status=Enabled\n\n# Configure replication\naws s3api put-bucket-replication \\\n  --bucket maily-prod \\\n  --replication-configuration file://replication.json\n</code></pre></li> </ul>"},{"location":"archive/disaster-recovery/#automated-failover-configuration","title":"Automated Failover Configuration","text":""},{"location":"archive/disaster-recovery/#database-failover","title":"Database Failover","text":"<ol> <li> <p>Multi-AZ Configuration <pre><code>aws rds modify-db-instance \\\n  --db-instance-identifier maily-prod \\\n  --multi-az \\\n  --apply-immediately\n</code></pre></p> </li> <li> <p>Cross-Region Failover <pre><code># Monitor primary health\naws cloudwatch put-metric-alarm \\\n  --alarm-name maily-db-health \\\n  --metric-name StatusCheckFailed \\\n  --namespace AWS/RDS \\\n  --period 60 \\\n  --evaluation-periods 2 \\\n  --threshold 1 \\\n  --comparison-operator GreaterThanThreshold \\\n  --alarm-actions arn:aws:sns:us-east-1:123456789012:db-failover\n\n# Automated failover Lambda function\naws lambda create-function \\\n  --function-name maily-db-failover \\\n  --runtime python3.9 \\\n  --handler index.handler \\\n  --role arn:aws:iam::123456789012:role/db-failover-role \\\n  --code S3Bucket=maily-lambda,S3Key=db-failover.zip\n</code></pre></p> </li> </ol>"},{"location":"archive/disaster-recovery/#application-failover","title":"Application Failover","text":"<ol> <li>Route 53 Health Checks <pre><code>aws route53 create-health-check \\\n  --caller-reference $(date +%s) \\\n  --health-check-config file://health-check.json\n\n# Configure DNS failover\naws route53 change-resource-record-sets \\\n  --hosted-zone-id ZXXXXXXXXXXXXX \\\n  --change-batch file://dns-failover.json\n</code></pre></li> </ol>"},{"location":"archive/disaster-recovery/#quarterly-disaster-recovery-drills","title":"Quarterly Disaster Recovery Drills","text":""},{"location":"archive/disaster-recovery/#schedule","title":"Schedule","text":"<ol> <li>Q1 Drill (January)</li> <li>Database failover testing</li> <li>Cross-region replication verification</li> <li> <p>Recovery time measurement</p> </li> <li> <p>Q2 Drill (April)</p> </li> <li>Application deployment rollback</li> <li>Cache recovery procedures</li> <li> <p>Communication plan testing</p> </li> <li> <p>Q3 Drill (July)</p> </li> <li>Full system recovery</li> <li>Data integrity verification</li> <li> <p>Performance testing post-recovery</p> </li> <li> <p>Q4 Drill (October)</p> </li> <li>Multi-region failover</li> <li>Backup restoration testing</li> <li>Documentation review and updates</li> </ol>"},{"location":"archive/disaster-recovery/#drill-results-documentation","title":"Drill Results Documentation","text":"<pre><code># Disaster Recovery Drill Report Template\n\n## Drill Information\n- Date: YYYY-MM-DD\n- Type: [Database/Application/Full System]\n- Participants: [Team Members]\n\n## Objectives\n1. [Specific test objectives]\n2. [Success criteria]\n\n## Results\n- Recovery Time: XX minutes\n- Data Loss: None/XXX records\n- Issues Encountered: [List issues]\n\n## Action Items\n1. [Improvements needed]\n2. [Process updates]\n\n## Sign-off\n- DevOps Lead: [Name]\n- Database Admin: [Name]\n- System Owner: [Name]\n</code></pre>"},{"location":"archive/disaster-recovery/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"archive/disaster-recovery/#database-recovery","title":"Database Recovery","text":"<ol> <li> <p>Full Database Restore <pre><code>pg_restore -d maily_new backup.dump\n</code></pre></p> </li> <li> <p>Point-in-Time Recovery <pre><code># Using AWS RDS or equivalent\naws rds restore-db-instance-to-point-in-time \\\n  --source-db-instance-identifier maily-prod \\\n  --target-db-instance-identifier maily-recovery \\\n  --restore-time \"2024-03-21T23:45:00Z\"\n</code></pre></p> </li> </ol>"},{"location":"archive/disaster-recovery/#redis-recovery","title":"Redis Recovery","text":"<ol> <li> <p>From RDB <pre><code>redis-cli config set dir /var/lib/redis\nredis-cli config set dbfilename dump.rdb\n</code></pre></p> </li> <li> <p>From AOF <pre><code>redis-cli config set appendonly yes\nredis-cli config set appendfilename \"appendonly.aof\"\n</code></pre></p> </li> </ol>"},{"location":"archive/disaster-recovery/#application-recovery","title":"Application Recovery","text":"<ol> <li> <p>Frontend <pre><code># Restore from latest deployment\ngit checkout main\nnpm ci\nnpm run build\n</code></pre></p> </li> <li> <p>Backend <pre><code># Restore from latest deployment\ngit checkout main\npip install -r requirements.txt\nuvicorn main:app\n</code></pre></p> </li> </ol>"},{"location":"archive/disaster-recovery/#disaster-scenarios-and-response","title":"Disaster Scenarios and Response","text":""},{"location":"archive/disaster-recovery/#database-failure","title":"Database Failure","text":"<ol> <li>Immediate Actions</li> <li>Switch to read replica if available</li> <li>Notify engineering team</li> <li> <p>Begin recovery assessment</p> </li> <li> <p>Recovery Steps</p> </li> <li>Identify failure cause</li> <li>Restore from latest backup</li> <li>Verify data integrity</li> <li>Switch application to restored database</li> </ol>"},{"location":"archive/disaster-recovery/#application-failure","title":"Application Failure","text":"<ol> <li>Frontend</li> <li>Deploy previous known-good version</li> <li>Clear CDN cache if necessary</li> <li> <p>Verify static assets</p> </li> <li> <p>Backend</p> </li> <li>Scale down to minimum instances</li> <li>Deploy last stable version</li> <li>Gradually scale up with monitoring</li> </ol>"},{"location":"archive/disaster-recovery/#infrastructure-failure","title":"Infrastructure Failure","text":"<ol> <li>Region Failure</li> <li>Switch DNS to backup region</li> <li>Activate backup infrastructure</li> <li> <p>Scale up backup resources</p> </li> <li> <p>Provider Failure</p> </li> <li>Switch to backup provider if configured</li> <li>Update DNS records</li> <li>Scale up backup infrastructure</li> </ol>"},{"location":"archive/disaster-recovery/#recovery-time-objectives-rto","title":"Recovery Time Objectives (RTO)","text":"Component RTO Database 1 hour Redis Cache 15 minutes Frontend 15 minutes Backend API 30 minutes Full System 2 hours"},{"location":"archive/disaster-recovery/#recovery-point-objectives-rpo","title":"Recovery Point Objectives (RPO)","text":"Component RPO Database 5 minutes Redis Cache 1 hour File Storage Real-time"},{"location":"archive/disaster-recovery/#communication-plan","title":"Communication Plan","text":""},{"location":"archive/disaster-recovery/#internal-communication","title":"Internal Communication","text":"<ol> <li>First Response</li> <li>Use PagerDuty for initial alerts</li> <li>Slack channel #incident-response for updates</li> <li> <p>Video call bridge for critical incidents</p> </li> <li> <p>Status Updates</p> </li> <li>Regular updates every 30 minutes</li> <li>Incident commander designated for coordination</li> <li>Documentation in real-time</li> </ol>"},{"location":"archive/disaster-recovery/#external-communication","title":"External Communication","text":"<ol> <li>Customer Communication</li> <li>Status page updates</li> <li>Email notifications for major incidents</li> <li> <p>Social media updates if necessary</p> </li> <li> <p>Stakeholder Updates</p> </li> <li>Regular briefings to management</li> <li>Impact assessment reports</li> <li>Post-incident analysis</li> </ol>"},{"location":"archive/disaster-recovery/#testing-and-maintenance","title":"Testing and Maintenance","text":""},{"location":"archive/disaster-recovery/#regular-testing","title":"Regular Testing","text":"<ol> <li>Quarterly Tests</li> <li>Database restore procedures</li> <li>Application deployment rollbacks</li> <li>Cross-region failover</li> <li> <p>Communication procedures</p> </li> <li> <p>Documentation Updates</p> </li> <li>Review and update after each test</li> <li>Update contact information</li> <li>Revise procedures based on lessons learned</li> </ol>"},{"location":"archive/disaster-recovery/#maintenance-schedule","title":"Maintenance Schedule","text":"<ol> <li>Monthly</li> <li>Verify backup integrity</li> <li>Test monitoring systems</li> <li> <p>Update emergency contact list</p> </li> <li> <p>Quarterly</p> </li> <li>Full disaster recovery drill</li> <li>Update recovery procedures</li> <li>Review and update RTO/RPO targets</li> </ol>"},{"location":"archive/disaster-recovery/#incident-response-runbook","title":"Incident Response Runbook","text":""},{"location":"archive/disaster-recovery/#initial-response","title":"Initial Response","text":"<ol> <li>Incident Detection</li> <li>Automated monitoring alerts</li> <li>User-reported issues</li> <li> <p>System performance degradation</p> </li> <li> <p>Assessment</p> </li> <li>Identify affected systems</li> <li>Determine incident severity</li> <li>Establish incident command</li> </ol>"},{"location":"archive/disaster-recovery/#recovery-execution","title":"Recovery Execution","text":"<ol> <li>Containment</li> <li>Isolate affected systems</li> <li>Prevent cascade failures</li> <li> <p>Implement temporary workarounds</p> </li> <li> <p>Recovery</p> </li> <li>Execute relevant recovery procedures</li> <li>Verify system restoration</li> <li>Monitor for secondary issues</li> </ol>"},{"location":"archive/disaster-recovery/#post-incident","title":"Post-Incident","text":"<ol> <li>Analysis</li> <li>Root cause analysis</li> <li>Document lessons learned</li> <li> <p>Update procedures if necessary</p> </li> <li> <p>Reporting</p> </li> <li>Generate incident report</li> <li>Update stakeholders</li> <li>Plan preventive measures</li> </ol>"},{"location":"archive/disaster-recovery/#contacts-and-escalation","title":"Contacts and Escalation","text":""},{"location":"archive/disaster-recovery/#primary-contacts","title":"Primary Contacts","text":"<ul> <li>DevOps Lead: [Contact Information]</li> <li>Database Admin: [Contact Information]</li> <li>Security Team: [Contact Information]</li> <li>Infrastructure Team: [Contact Information]</li> </ul>"},{"location":"archive/disaster-recovery/#escalation-path","title":"Escalation Path","text":"<ol> <li>On-call Engineer</li> <li>Team Lead</li> <li>Engineering Manager</li> <li>CTO</li> <li>CEO</li> </ol>"},{"location":"archive/disaster-recovery/#appendix","title":"Appendix","text":""},{"location":"archive/disaster-recovery/#useful-commands","title":"Useful Commands","text":"<pre><code># Quick database backup\npg_dump -Fc maily &gt; backup.dump\n\n# Quick database restore\npg_restore -d maily backup.dump\n\n# Redis backup\nredis-cli save\n\n# Check system status\nsystemctl status nginx postgresql redis\n</code></pre>"},{"location":"archive/disaster-recovery/#monitoring-dashboard-urls","title":"Monitoring Dashboard URLs","text":"<ul> <li>Grafana: https://grafana.maily.com</li> <li>Prometheus: https://prometheus.maily.com</li> <li>Application Metrics: https://metrics.maily.com</li> </ul>"},{"location":"archive/disaster-recovery/#reference-architecture","title":"Reference Architecture","text":"<p>[Include architecture diagram]</p>"},{"location":"archive/disaster-recovery/#compliance-requirements","title":"Compliance Requirements","text":"<ul> <li>Data retention policies</li> <li>Security protocols</li> <li>Audit requirements</li> </ul>"},{"location":"archive/documentation-consolidation-workflow/","title":"Documentation Consolidation Workflow","text":"<p>This guide outlines the complete workflow for finishing the documentation consolidation process, updating the documentation portal, and ensuring all cross-references work correctly.</p>"},{"location":"archive/documentation-consolidation-workflow/#overview","title":"Overview","text":"<p>The documentation consolidation process involves several key steps:</p> <ol> <li>Finishing remaining consolidation tasks - Completing all in-progress consolidations</li> <li>Verifying cross-references - Ensuring all links between documents work correctly</li> <li>Cleaning up deprecated files - Archiving files that are no longer needed</li> <li>Updating the documentation portal - Rebuilding with the new navigation structure</li> <li>Finalizing the process - Marking all tasks as complete</li> </ol>"},{"location":"archive/documentation-consolidation-workflow/#prerequisites","title":"Prerequisites","text":"<p>Before starting the workflow, ensure you have:</p> <ul> <li>Node.js installed (for running the JavaScript scripts)</li> <li>Python installed (for MkDocs)</li> <li>MkDocs and the Material theme installed:   <pre><code>pip install mkdocs mkdocs-material\n</code></pre></li> </ul>"},{"location":"archive/documentation-consolidation-workflow/#step-by-step-workflow","title":"Step-by-Step Workflow","text":""},{"location":"archive/documentation-consolidation-workflow/#1-finish-remaining-consolidation-tasks","title":"1. Finish Remaining Consolidation Tasks","text":"<p>Review the in-progress consolidations in <code>docs/documentation-consolidation-progress.md</code> and complete any remaining tasks:</p> <ul> <li>Enhancement Plans Consolidation</li> <li>Integration Guide</li> <li>App Components Documentation</li> <li>Modernization Roadmap</li> </ul> <p>For each consolidation task: 1. Create or update the target document 2. Move content from source documents 3. Update cross-references 4. Format consistently with other documentation</p>"},{"location":"archive/documentation-consolidation-workflow/#2-verify-cross-references","title":"2. Verify Cross-References","text":"<p>Run the verification script to check for any broken links:</p> <pre><code>node scripts/verify-doc-links.js\n</code></pre> <p>This script will: - Scan all markdown files in the <code>docs</code> directory - Verify internal document links - Check heading references - Report any broken links or references</p> <p>Fix any broken links reported by the script before proceeding.</p>"},{"location":"archive/documentation-consolidation-workflow/#3-clean-up-deprecated-files","title":"3. Clean Up Deprecated Files","text":"<p>Archive files that are no longer needed using the cleanup script:</p> <pre><code>node scripts/cleanup-docs.js\n</code></pre> <p>This script will: - Read the list of files to remove from <code>docs/documentation-consolidation-progress.md</code> - Move those files to a <code>docs/archive</code> directory - Generate a report of the cleanup process</p>"},{"location":"archive/documentation-consolidation-workflow/#4-update-documentation-portal","title":"4. Update Documentation Portal","text":"<p>After verifying links and cleaning up files, update the documentation portal:</p> <ol> <li>The navigation structure in <code>packages/config/mkdocs.yml</code> has already been updated</li> <li>Build the documentation portal:    <pre><code>mkdocs build\n</code></pre></li> <li>Review the built documentation:    <pre><code>mkdocs serve\n</code></pre></li> <li>Make any necessary adjustments to the navigation or content</li> </ol>"},{"location":"archive/documentation-consolidation-workflow/#5-finalize-the-process","title":"5. Finalize the Process","text":"<p>Update the consolidation progress document to mark all tasks as complete:</p> <pre><code>node scripts/update-consolidation-progress.js\n</code></pre> <p>This script will: - Mark all in-progress tasks as completed - Update progress metrics to 100% - Change the status from \"In Progress\" to \"Completed\"</p>"},{"location":"archive/documentation-consolidation-workflow/#6-automated-workflow","title":"6. Automated Workflow","text":"<p>Alternatively, you can use the automation script to execute steps 2-5 in sequence:</p> <pre><code>./scripts/complete-docs-consolidation.sh\n</code></pre> <p>This script will: 1. Verify documentation links 2. Archive deprecated files 3. Build the documentation portal 4. Run a final verification</p>"},{"location":"archive/documentation-consolidation-workflow/#success-criteria","title":"Success Criteria","text":"<p>The documentation consolidation is considered successful when:</p> <ol> <li>All planned consolidations are completed</li> <li>No broken cross-references exist</li> <li>The documentation portal navigation is updated</li> <li>Deprecated files are properly archived</li> <li>The progress document shows 100% completion</li> </ol>"},{"location":"archive/documentation-consolidation-workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"archive/documentation-consolidation-workflow/#broken-links","title":"Broken Links","text":"<p>If the verification script reports broken links: 1. Open the source document 2. Fix the link format or update the target 3. Run the verification script again</p>"},{"location":"archive/documentation-consolidation-workflow/#build-failures","title":"Build Failures","text":"<p>If the documentation portal build fails: 1. Check the error message for syntax issues in <code>mkdocs.yml</code> 2. Verify that all referenced files exist 3. Make necessary corrections and try again</p>"},{"location":"archive/documentation-consolidation-workflow/#maintenance","title":"Maintenance","text":"<p>After completing the consolidation:</p> <ol> <li>Regularly review documentation for accuracy</li> <li>Update navigation when adding new documents</li> <li>Run the link verification script periodically</li> <li>Follow the documentation standards outlined in <code>docs/documentation-management-plan.md</code></li> </ol>"},{"location":"archive/documentation-consolidation-workflow/#conclusion","title":"Conclusion","text":"<p>Following this workflow ensures a smooth completion of the documentation consolidation process, resulting in well-organized, accessible, and maintainable documentation for the Maily platform.</p>"},{"location":"archive/documentation-inventory/","title":"Maily Documentation Inventory","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/documentation-inventory/#overview","title":"Overview","text":"<p>This inventory tracks the status of all documentation files in the Maily project.</p>"},{"location":"archive/documentation-inventory/#status-summary","title":"Status Summary","text":"<ul> <li>Total Markdown Files: 71</li> <li>Current: 52 (\u21914 from previous)</li> <li>Needs Review: 14</li> <li>Outdated: 4 (\u21934 from previous)</li> <li>Missing: 0</li> </ul>"},{"location":"archive/documentation-inventory/#documentation-categories","title":"Documentation Categories","text":""},{"location":"archive/documentation-inventory/#core-documentation","title":"Core Documentation","text":"File Last Updated Status Notes docs/README.md 2025-01-15 Current Project overview docs/getting-started.md 2025-01-15 Current Initial setup instructions docs/contribution-guide.md 2025-02-01 Current Contributor guidelines docs/code-of-conduct.md 2024-12-10 Current Community standards docs/glossary.md 2025-03-04 Current Key terms and definitions docs/faq.md 2025-03-04 Current Frequently asked questions"},{"location":"archive/documentation-inventory/#architecture-documentation","title":"Architecture Documentation","text":"File Last Updated Status Notes docs/architecture-overview.md 2025-01-20 Current High-level architecture docs/frontend-architecture.md 2025-02-15 Current Frontend design patterns docs/api-architecture.md 2025-01-30 Current API design and patterns docs/database-schema.md 2024-11-10 Needs Review DB relationships need updating docs/tech-stack.md 2025-03-04 Current Comprehensive technology stack"},{"location":"archive/documentation-inventory/#feature-documentation","title":"Feature Documentation","text":"File Last Updated Status Notes docs/features/email-builder.md 2025-01-10 Current Email builder capabilities docs/features/campaign-management.md 2025-01-10 Current Campaign features docs/features/audience-segmentation.md 2025-01-15 Current Segmentation tools docs/features/analytics-dashboard.md 2024-11-05 Needs Review Missing new analytics features docs/features/a-b-testing.md 2024-10-30 Needs Review Missing ML-powered test enhancements docs/features/automation-workflows.md 2025-01-20 Current Automation capabilities docs/features/ai-content-generation.md 2025-02-01 Current AI content generation"},{"location":"archive/documentation-inventory/#sprint-documentation","title":"Sprint Documentation","text":"File Last Updated Status Notes docs/sprints/sprint-1-implementation.md 2025-01-05 Current Security &amp; compliance implementation docs/sprints/sprint-2-implementation.md 2025-01-20 Current Infrastructure implementation docs/sprints/sprint-3-implementation.md 2025-03-01 Current AI/ML implementation docs/sprints/sprint-4-implementation.md 2025-02-01 Current App Router migration docs/sprints/sprint-5-implementation.md 2025-02-15 Current Monitoring implementation docs/sprints/sprint-6-implementation.md 2025-02-29 Current UX/Accessibility implementation docs/sprints/sprint-7-implementation.md 2025-03-01 Current i18n implementation"},{"location":"archive/documentation-inventory/#aiml-documentation","title":"AI/ML Documentation","text":"File Last Updated Status Notes packages/ai/README.md 2025-03-04 Current Legacy AI package (deprecated) apps/api/ai/README.md 2025-03-04 Current Enhanced AI service docs/ai/model-versioning.md 2025-01-15 Current ML model versioning guide docs/ai/prompt-engineering.md 2025-01-30 Current Prompt design guidelines docs/ai/observability.md 2025-02-10 Current AI observability setup docs/ai/cost-optimization.md 2024-12-18 Needs Review Missing Helicone integration"},{"location":"archive/documentation-inventory/#infrastructure-documentation","title":"Infrastructure Documentation","text":"File Last Updated Status Notes infrastructure/README.md 2025-01-10 Current Infrastructure overview docs/deployment-guide.md 2025-01-10 Current Deployment instructions docs/scaling-strategies.md 2025-01-15 Current Horizontal/vertical scaling docs/monitoring-setup.md 2025-02-01 Current Monitoring configuration docs/disaster-recovery.md 2024-10-25 Needs Review Missing new backup procedures docs/security-measures.md 2025-01-05 Current Security implementation docs/database-optimization.md 2024-12-01 Needs Review Missing latest query optimizations"},{"location":"archive/documentation-inventory/#security-compliance-documentation","title":"Security &amp; Compliance Documentation","text":"File Last Updated Status Notes docs/security/authentication.md 2025-01-05 Current Auth implementation docs/security/authorization.md 2025-01-05 Current Authorization model docs/security/secrets-management.md 2025-01-05 Current Secrets handling docs/security/compliance-checklist.md 2025-01-05 Current Compliance requirements docs/security/penetration-testing.md 2024-10-15 Outdated Needs updated test results docs/security/incident-response.md 2024-11-01 Needs Review Missing new procedures"},{"location":"archive/documentation-inventory/#enhancement-documentation","title":"Enhancement Documentation","text":"File Last Updated Status Notes docs/enhancement-overview.md 2025-02-15 Current Enhancement plan overview docs/enhancement-analysis.md 2025-02-15 Current Gap analysis docs/enhancement-implementation-plan.md 2025-03-04 Current Implementation strategy docs/enhancement-tools-reference.md 2025-02-15 Current Tools documentation docs/modernization-roadmap.md 2025-03-04 Current Updated roadmap with progress docs/app-router-migration-guide.md 2025-03-04 Current Migration guide (100% complete) docs/changelog.md 2025-03-04 Current Platform change history docs/documentation-management-plan.md 2025-03-04 Current Documentation strategy docs/documentation-inventory.md 2025-03-04 Current This file"},{"location":"archive/documentation-inventory/#package-documentation","title":"Package Documentation","text":"File Last Updated Status Notes packages/ui/README.md 2025-01-20 Current UI component library packages/hooks/README.md 2025-01-20 Current React hooks library packages/utils/README.md 2025-01-20 Current Utility functions packages/config/README.md 2024-11-10 Needs Review Missing new configuration options packages/types/README.md 2025-01-20 Current TypeScript type definitions packages/email-templates/README.md 2024-09-15 Outdated Missing new template formats packages/analytics/README.md 2024-10-01 Outdated Missing new metrics packages/testing/README.md 2024-11-20 Needs Review Missing Vitest migration"},{"location":"archive/documentation-inventory/#app-documentation","title":"App Documentation","text":"File Last Updated Status Notes apps/web/README.md 2025-02-01 Current Web application apps/api/README.md 2025-01-30 Current API service apps/worker/README.md 2025-01-15 Current Background worker apps/cron/README.md 2025-01-15 Current Scheduled jobs apps/edge/README.md 2025-01-20 Current Edge functions apps/studio/README.md 2024-10-05 Outdated Missing new editor features apps/docs/README.md 2025-01-10 Current Documentation site apps/mobile/README.md 2025-01-05 Current Mobile app"},{"location":"archive/documentation-inventory/#other-documentation","title":"Other Documentation","text":"File Last Updated Status Notes docs/api-reference.md 2025-01-30 Current API endpoints docs/graphql-schema.md 2025-01-30 Current GraphQL schema docs/performance-optimization.md 2025-02-10 Current Performance tips docs/testing-strategy.md 2025-01-25 Current Test approach docs/internationalization.md 2025-02-29 Current i18n implementation docs/accessibility-guidelines.md 2025-02-15 Current a11y standards docs/design-system.md 2025-01-20 Current Design tokens and patterns docs/browser-support.md 2024-11-15 Needs Review Missing updated browser targets"},{"location":"archive/documentation-inventory/#action-items","title":"Action Items","text":"<ol> <li>\u2705 Create the missing Sprint 3 implementation summary</li> <li>\u2705 Update the App Router migration guide to reflect 100% completion</li> <li>\u2705 Update enhancement implementation plan to mark completed sprints and add new sprints</li> <li>\u2705 Update changelog with latest changes</li> <li>\u2705 Review and update all packages/ai documentation to reflect deprecation status</li> <li>\u2705 Review and update apps/api/ai documentation to ensure it's comprehensive</li> <li>Review all infrastructure and package README files for currency</li> <li>\u2705 Consider consolidating redundant documentation (e.g., pages-to-app-migration.md)</li> <li>\u2705 Update outdated documentation (roadmap.md, tech-stack.md, glossary.md, faq.md)</li> <li>Ensure all documentation follows consistent formatting and style guidelines</li> </ol>"},{"location":"archive/documentation-inventory/#remaining-priorities","title":"Remaining Priorities","text":"<ol> <li>Update package documentation: Focus on updating packages/email-templates/README.md and packages/analytics/README.md</li> <li>Update apps/studio/README.md with new editor features</li> <li>Update penetration-testing.md with recent test results</li> <li>Review and update database-schema.md with latest relationships</li> <li>Update features/analytics-dashboard.md and features/a-b-testing.md to reflect new capabilities</li> </ol>"},{"location":"archive/documentation-management-plan/","title":"Documentation Management Plan","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/documentation-management-plan/#overview","title":"Overview","text":"<p>This document outlines the plan for managing, maintaining, and improving the Maily project's documentation. A well-maintained documentation set is critical for developer onboarding, knowledge transfer, and overall project health.</p>"},{"location":"archive/documentation-management-plan/#current-status","title":"Current Status","text":"<p>As of March 4, 2025, the Maily project contains 71 Markdown files, with the following status distribution:</p> <ul> <li>Current: 48 files (68%)</li> <li>Needs Review: 14 files (20%)</li> <li>Outdated: 8 files (11%)</li> <li>Missing: 0 files (0%)</li> </ul> <p>Recent improvements: - Created the missing Sprint 3 implementation summary - Updated the App Router migration guide to 100% completion status - Updated the enhancement implementation plan with completed sprints and new sprints - Updated the changelog with the latest changes - Created this documentation management plan</p>"},{"location":"archive/documentation-management-plan/#goals","title":"Goals","text":"<ol> <li>Accuracy: Ensure all documentation accurately reflects the current state of the project</li> <li>Completeness: Provide comprehensive coverage of all project aspects</li> <li>Consistency: Maintain consistent formatting, style, and organization</li> <li>Accessibility: Make documentation easy to find, navigate, and understand</li> <li>Sustainability: Establish processes to keep documentation updated over time</li> </ol>"},{"location":"archive/documentation-management-plan/#documentation-types-and-standards","title":"Documentation Types and Standards","text":""},{"location":"archive/documentation-management-plan/#core-documentation","title":"Core Documentation","text":"<ul> <li>README.md: Project overview, quick start, and key links</li> <li>CONTRIBUTING.md: Contribution guidelines</li> <li>CODE_OF_CONDUCT.md: Community standards</li> <li>SECURITY.md: Security policies</li> <li>LICENSE.md: Licensing information</li> </ul> <p>Standard: These files should be concise, well-structured, and provide clear entry points to more detailed documentation.</p>"},{"location":"archive/documentation-management-plan/#technical-documentation","title":"Technical Documentation","text":"<ul> <li>Architecture documents: High-level system design and component relationships</li> <li>API documentation: Endpoints, parameters, and examples</li> <li>Feature documentation: Specific feature implementations and usage</li> </ul> <p>Standard: Technical documentation should include diagrams, code examples, and clear explanations of rationale and implementation details.</p>"},{"location":"archive/documentation-management-plan/#process-documentation","title":"Process Documentation","text":"<ul> <li>Development workflow: Git workflow, branching strategy</li> <li>Testing strategy: Testing approaches and tools</li> <li>Release process: Release management and versioning</li> </ul> <p>Standard: Process documentation should be step-by-step, include examples, and cover edge cases.</p>"},{"location":"archive/documentation-management-plan/#sprint-documentation","title":"Sprint Documentation","text":"<ul> <li>Sprint implementation summaries: Completed work and key decisions</li> </ul> <p>Standard: Sprint documentation should follow a consistent template with sections for overview, implementation status, key deliverables, architecture, testing, and next steps.</p>"},{"location":"archive/documentation-management-plan/#action-plan","title":"Action Plan","text":""},{"location":"archive/documentation-management-plan/#phase-1-immediate-cleanup-due-march-15-2025","title":"Phase 1: Immediate Cleanup (Due: March 15, 2025)","text":"<ol> <li>Update AI Package Documentation</li> <li>Update packages/ai/README.md to clearly indicate deprecation status</li> <li>Add migration path to enhanced AI service in apps/api/ai</li> <li> <p>Responsible: Lead AI Engineer</p> </li> <li> <p>Enhance AI Service Documentation</p> </li> <li>Ensure apps/api/ai/README.md is comprehensive</li> <li>Add architecture diagrams and usage examples</li> <li> <p>Responsible: Lead AI Engineer</p> </li> <li> <p>Consolidate Redundant Documentation</p> </li> <li>Merge or remove pages-to-app-migration.md (redundant with app-router-migration-guide.md)</li> <li>Consolidate any other identified duplicates</li> <li> <p>Responsible: Frontend Lead</p> </li> <li> <p>Review Infrastructure Documentation</p> </li> <li>Ensure all infrastructure README files are current</li> <li>Update with latest deployment processes</li> <li>Responsible: DevOps Engineer</li> </ol>"},{"location":"archive/documentation-management-plan/#phase-2-update-outdated-documentation-due-march-31-2025","title":"Phase 2: Update Outdated Documentation (Due: March 31, 2025)","text":"<ol> <li>Update Roadmap and Enhancement Plans</li> <li>Revise roadmap.md with latest strategic direction</li> <li>Update future-enhancements.md or merge with enhancement plan</li> <li> <p>Responsible: Product Manager</p> </li> <li> <p>Refresh Technical Content</p> </li> <li>Update tech-stack.md with current technologies</li> <li>Update glossary.md with new terminology</li> <li>Update faq.md with common questions</li> <li> <p>Responsible: Tech Lead</p> </li> <li> <p>Enhance API Documentation</p> </li> <li>Ensure API documentation is comprehensive and up-to-date</li> <li>Add more usage examples and edge cases</li> <li>Responsible: Backend Lead</li> </ol>"},{"location":"archive/documentation-management-plan/#phase-3-documentation-improvement-due-april-15-2025","title":"Phase 3: Documentation Improvement (Due: April 15, 2025)","text":"<ol> <li>Establish Style Guide</li> <li>Create a documentation style guide</li> <li>Define templates for different documentation types</li> <li> <p>Responsible: Documentation Lead</p> </li> <li> <p>Implement Navigation Improvements</p> </li> <li>Add cross-references between related documents</li> <li>Create a documentation map or index</li> <li> <p>Responsible: Documentation Lead</p> </li> <li> <p>Add Documentation Examples</p> </li> <li>Enhance documentation with more examples</li> <li>Add tutorials for common workflows</li> <li>Responsible: Developer Advocates</li> </ol>"},{"location":"archive/documentation-management-plan/#phase-4-process-implementation-due-april-30-2025","title":"Phase 4: Process Implementation (Due: April 30, 2025)","text":"<ol> <li>Documentation Review Process</li> <li>Establish a regular review schedule</li> <li>Assign ownership for different documentation areas</li> <li> <p>Responsible: Engineering Manager</p> </li> <li> <p>Documentation CI/CD</p> </li> <li>Set up automated checks for documentation</li> <li>Implement linting for Markdown files</li> <li> <p>Responsible: DevOps Engineer</p> </li> <li> <p>Documentation as Part of Definition of Done</p> </li> <li>Update development process to include documentation</li> <li>Add documentation checkpoints to PR reviews</li> <li>Responsible: Engineering Manager</li> </ol>"},{"location":"archive/documentation-management-plan/#ongoing-maintenance","title":"Ongoing Maintenance","text":""},{"location":"archive/documentation-management-plan/#ownership","title":"Ownership","text":"<p>Each documentation area should have a clear owner responsible for keeping it up-to-date:</p> <ul> <li>Core Documentation: Engineering Manager</li> <li>Architecture Documentation: System Architect</li> <li>Feature Documentation: Feature Owners</li> <li>Sprint Documentation: Sprint Leads</li> <li>AI/ML Documentation: AI Lead</li> <li>Infrastructure Documentation: DevOps Lead</li> <li>Security &amp; Compliance Documentation: Security Officer</li> <li>Package Documentation: Package Maintainers</li> </ul>"},{"location":"archive/documentation-management-plan/#review-schedule","title":"Review Schedule","text":"<ul> <li>Core Documentation: Quarterly review</li> <li>Architecture Documentation: Monthly review</li> <li>Feature Documentation: Review with each feature update</li> <li>Sprint Documentation: Create at end of each sprint</li> <li>Technical Documentation: Monthly review</li> <li>Process Documentation: Quarterly review</li> </ul>"},{"location":"archive/documentation-management-plan/#documentation-updates","title":"Documentation Updates","text":"<p>Documentation should be updated:</p> <ol> <li>When new features are implemented</li> <li>When existing features are changed</li> <li>When bugs are fixed that impact user workflows</li> <li>When processes or tools change</li> <li>When terminology or naming conventions change</li> </ol>"},{"location":"archive/documentation-management-plan/#tools-and-resources","title":"Tools and Resources","text":""},{"location":"archive/documentation-management-plan/#documentation-tools","title":"Documentation Tools","text":"<ul> <li>Markdown linters for consistent formatting</li> <li>Diagram generation tools (e.g., Mermaid, PlantUML)</li> <li>Documentation site generator (e.g., Docusaurus, MkDocs)</li> </ul>"},{"location":"archive/documentation-management-plan/#resources","title":"Resources","text":"<ul> <li>Google Developer Documentation Style Guide</li> <li>Microsoft Writing Style Guide</li> <li>DigitalOcean Technical Writing Guidelines</li> </ul>"},{"location":"archive/documentation-management-plan/#success-metrics","title":"Success Metrics","text":"<p>We will measure the success of our documentation management using the following metrics:</p> <ol> <li>Documentation Coverage: Percentage of features/components with documentation</li> <li>Documentation Freshness: Average age of documentation files</li> <li>Documentation Quality: Internal developer satisfaction rating (quarterly survey)</li> <li>Documentation Utilization: Analytics on documentation access and usage</li> <li>Onboarding Time: Time for new developers to become productive</li> </ol>"},{"location":"archive/documentation-management-plan/#conclusion","title":"Conclusion","text":"<p>Effective documentation management is essential for the long-term success of the Maily project. By following this plan, we will ensure that our documentation remains accurate, comprehensive, and useful for all stakeholders.</p>"},{"location":"archive/documentation-management-plan/#next-steps","title":"Next Steps","text":"<ol> <li>Share this plan with the engineering team</li> <li>Assign responsibilities for each action item</li> <li>Schedule the first documentation review</li> <li>Begin implementing Phase 1 action items</li> </ol>"},{"location":"archive/enhancement-analysis/","title":"Maily Project Enhancement Analysis","text":"<p>This document provides a detailed analysis of the current state of the Maily project, identifying gaps and recommending specific solutions to reach a \"state of the art\" level.</p>"},{"location":"archive/enhancement-analysis/#1-architecture-infrastructure","title":"1. Architecture &amp; Infrastructure","text":""},{"location":"archive/enhancement-analysis/#11-multi-region-deployment","title":"1.1 Multi-Region Deployment","text":"<p>Gap: The current architecture is single-region focused, limiting global availability and disaster recovery capabilities.</p> <p>Analysis: The Kubernetes deployment files show a single-region setup without explicit multi-region configuration. This creates a single point of failure for global users and limits disaster recovery options.</p> <p>Solution: Implement AWS App Mesh and AWS Global Accelerator for active-active multi-region deployment with cross-region data replication.</p>"},{"location":"archive/enhancement-analysis/#12-edge-computing-integration","title":"1.2 Edge Computing Integration","text":"<p>Gap: Current edge caching is limited to API responses via Nginx.</p> <p>Analysis: The <code>api-edge-caching-configmap.yaml</code> shows basic Nginx caching configuration, but lacks advanced edge computing capabilities.</p> <p>Solution: Migrate to Cloudflare Workers for edge computing and Cloudflare KV for edge data storage, enabling dynamic content processing closer to users.</p>"},{"location":"archive/enhancement-analysis/#13-infrastructure-as-code-completeness","title":"1.3 Infrastructure as Code Completeness","text":"<p>Gap: Some infrastructure components are defined in Kubernetes YAML but not in Terraform.</p> <p>Analysis: The Terraform files in <code>infrastructure/terraform/</code> don't cover all components defined in the Kubernetes YAML files.</p> <p>Solution: Extend Terraform modules to cover all infrastructure components including monitoring, logging, and security.</p>"},{"location":"archive/enhancement-analysis/#2-ai-ml-capabilities","title":"2. AI &amp; ML Capabilities","text":""},{"location":"archive/enhancement-analysis/#21-model-versioning-experimentation","title":"2.1 Model Versioning &amp; Experimentation","text":"<p>Gap: Limited model versioning and experimentation capabilities.</p> <p>Analysis: The AI service implementation in <code>apps/api/ai/service.py</code> lacks robust model versioning and experimentation tracking.</p> <p>Solution: Implement Weights &amp; Biases for experiment tracking and model registry, and DVC for model versioning.</p>"},{"location":"archive/enhancement-analysis/#22-ai-observability","title":"2.2 AI Observability","text":"<p>Gap: While Langfuse integration exists, comprehensive AI observability is missing.</p> <p>Analysis: The <code>OctoToolsLangfuseWrapper</code> in <code>apps/api/ai/service.py</code> provides basic tracing but lacks detailed metrics on model performance, latency, and cost.</p> <p>Solution: Implement Arize AI for ML observability alongside the existing Langfuse integration.</p>"},{"location":"archive/enhancement-analysis/#23-advanced-ai-features","title":"2.3 Advanced AI Features","text":"<p>Gap: Current AI capabilities focus on content generation and optimization.</p> <p>Analysis: The AI service implementation in <code>apps/api/ai/service.py</code> and the AI components in <code>apps/web/components/ai/</code> show limited AI features.</p> <p>Solution: Implement more advanced AI features using Anthropic Claude 3 Opus for advanced reasoning and Stability AI for image generation.</p>"},{"location":"archive/enhancement-analysis/#24-ai-cost-management","title":"2.4 AI Cost Management","text":"<p>Gap: Limited AI cost management and optimization.</p> <p>Analysis: The AI service implementation doesn't include cost tracking or optimization.</p> <p>Solution: Implement Helicone for API cost tracking and LiteLLM for model routing with tiered model selection.</p>"},{"location":"archive/enhancement-analysis/#3-security-compliance","title":"3. Security &amp; Compliance","text":""},{"location":"archive/enhancement-analysis/#31-security-scanning-pipeline","title":"3.1 Security Scanning Pipeline","text":"<p>Gap: Limited automated security scanning in CI/CD.</p> <p>Analysis: No evidence of comprehensive security scanning in the project files.</p> <p>Solution: Implement Trivy for container scanning, Snyk for dependency scanning, OWASP ZAP for API security testing, and SonarQube for static code analysis.</p>"},{"location":"archive/enhancement-analysis/#32-secrets-management","title":"3.2 Secrets Management","text":"<p>Gap: Secrets are managed via Kubernetes secrets, which have limitations.</p> <p>Analysis: The <code>infrastructure/kubernetes/secrets.yaml</code> file shows basic Kubernetes secrets management.</p> <p>Solution: Implement HashiCorp Vault for secrets management with Vault Kubernetes integration for pod injection.</p>"},{"location":"archive/enhancement-analysis/#33-compliance-automation","title":"3.3 Compliance Automation","text":"<p>Gap: Compliance checks appear to be manual.</p> <p>Analysis: The <code>docs/privacy-compliance.md</code> document outlines compliance requirements but doesn't mention automation.</p> <p>Solution: Implement Open Policy Agent (OPA) for policy enforcement and Kyverno for Kubernetes policy management.</p>"},{"location":"archive/enhancement-analysis/#4-performance-scalability","title":"4. Performance &amp; Scalability","text":""},{"location":"archive/enhancement-analysis/#41-database-optimization","title":"4.1 Database Optimization","text":"<p>Gap: Limited database optimization and scaling capabilities.</p> <p>Analysis: The <code>infrastructure/kubernetes/database-deployment.yaml</code> file shows a basic PostgreSQL deployment without advanced optimization.</p> <p>Solution: Implement PgBouncer for connection pooling and Vitess for database sharding.</p>"},{"location":"archive/enhancement-analysis/#42-caching-strategy","title":"4.2 Caching Strategy","text":"<p>Gap: Current caching strategy is limited to API responses.</p> <p>Analysis: The <code>infrastructure/kubernetes/api-edge-caching-configmap.yaml</code> file shows basic Nginx caching.</p> <p>Solution: Implement Redis Cluster for distributed caching and Redis Sentinel for high availability.</p>"},{"location":"archive/enhancement-analysis/#43-asynchronous-processing","title":"4.3 Asynchronous Processing","text":"<p>Gap: Limited use of asynchronous processing for non-critical operations.</p> <p>Analysis: The worker implementation in <code>apps/workers/</code> shows basic worker functionality.</p> <p>Solution: Expand asynchronous processing capabilities with more specialized workers.</p>"},{"location":"archive/enhancement-analysis/#5-developer-experience","title":"5. Developer Experience","text":""},{"location":"archive/enhancement-analysis/#51-frontend-architecture","title":"5.1 Frontend Architecture","text":"<p>Gap: The frontend is using Pages Router instead of the newer App Router.</p> <p>Analysis: The <code>apps/web/layout.tsx</code> and <code>apps/web/page.tsx</code> files show the use of Pages Router.</p> <p>Solution: Migrate to Next.js App Router for improved performance and developer experience.</p>"},{"location":"archive/enhancement-analysis/#52-testing-coverage","title":"5.2 Testing Coverage","text":"<p>Gap: Limited testing coverage, especially for frontend components.</p> <p>Analysis: The test directories show limited test files.</p> <p>Solution: Implement Vitest for unit testing, Playwright for end-to-end testing, and MSW for API mocking.</p>"},{"location":"archive/enhancement-analysis/#53-documentation","title":"5.3 Documentation","text":"<p>Gap: Documentation is good but could be more comprehensive.</p> <p>Analysis: The <code>docs/</code> directory contains good documentation but lacks comprehensive API references and examples.</p> <p>Solution: Implement Docusaurus for documentation site and Swagger for API documentation.</p>"},{"location":"archive/enhancement-analysis/#6-monitoring-observability","title":"6. Monitoring &amp; Observability","text":""},{"location":"archive/enhancement-analysis/#61-distributed-tracing","title":"6.1 Distributed Tracing","text":"<p>Gap: Limited distributed tracing capabilities.</p> <p>Analysis: No evidence of distributed tracing implementation in the project files.</p> <p>Solution: Implement OpenTelemetry for instrumentation and Grafana Tempo for trace visualization.</p>"},{"location":"archive/enhancement-analysis/#62-metrics-collection","title":"6.2 Metrics Collection","text":"<p>Gap: Basic metrics collection with Prometheus.</p> <p>Analysis: The <code>prometheus/</code> directory shows basic Prometheus configuration.</p> <p>Solution: Enhance Prometheus configuration and implement Grafana for metrics visualization.</p>"},{"location":"archive/enhancement-analysis/#63-alerting-strategy","title":"6.3 Alerting Strategy","text":"<p>Gap: Limited alerting strategy.</p> <p>Analysis: No evidence of comprehensive alerting strategy in the project files.</p> <p>Solution: Implement Alertmanager for alert routing and PagerDuty for on-call management.</p>"},{"location":"archive/enhancement-analysis/#64-log-management","title":"6.4 Log Management","text":"<p>Gap: Basic logging without centralized management.</p> <p>Analysis: The logging configuration in <code>apps/api/main.py</code> shows basic logging to files.</p> <p>Solution: Implement Grafana Loki for log aggregation and Grafana for log visualization.</p>"},{"location":"archive/enhancement-analysis/#7-user-experience","title":"7. User Experience","text":""},{"location":"archive/enhancement-analysis/#71-accessibility","title":"7.1 Accessibility","text":"<p>Gap: Limited accessibility features.</p> <p>Analysis: The frontend components don't show comprehensive accessibility features.</p> <p>Solution: Implement Axe for accessibility testing and React Aria for accessible components.</p>"},{"location":"archive/enhancement-analysis/#72-internationalization","title":"7.2 Internationalization","text":"<p>Gap: Limited internationalization support.</p> <p>Analysis: The <code>apps/web/i18n/</code> directory exists but implementation appears limited.</p> <p>Solution: Implement next-intl for internationalization and Crowdin for translation management.</p>"},{"location":"archive/enhancement-analysis/#73-mobile-experience","title":"7.3 Mobile Experience","text":"<p>Gap: Limited mobile-specific optimizations.</p> <p>Analysis: The frontend components don't show comprehensive mobile optimizations.</p> <p>Solution: Enhance Tailwind CSS configuration for responsive design and use Lighthouse for performance testing.</p>"},{"location":"archive/enhancement-analysis/#74-performance","title":"7.4 Performance","text":"<p>Gap: Limited frontend performance optimizations.</p> <p>Analysis: No evidence of comprehensive performance optimizations in the frontend code.</p> <p>Solution: Implement Next.js Analytics for performance monitoring and Webpack Bundle Analyzer for bundle optimization.</p>"},{"location":"archive/enhancement-implementation-plan/","title":"Maily Enhancement Implementation Plan","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/enhancement-implementation-plan/#overview","title":"Overview","text":"<p>This document outlines the comprehensive enhancement plan for the Maily platform. Each sprint focuses on specific areas of improvement to create a more robust, secure, and feature-rich email marketing platform.</p>"},{"location":"archive/enhancement-implementation-plan/#implementation-plan","title":"Implementation Plan","text":""},{"location":"archive/enhancement-implementation-plan/#sprint-1-security-compliance-completed","title":"Sprint 1: Security &amp; Compliance (COMPLETED \u2705)","text":"<p>Focus: Enhance platform security and compliance measures.</p> <p>Key Tasks: - \u2705 Implement security scanning in CI/CD pipeline - \u2705 Set up vulnerability monitoring - \u2705 Enhance authentication mechanisms - \u2705 Implement data encryption at rest - \u2705 Ensure GDPR, CCPA, and CAN-SPAM compliance - \u2705 Set up security headers - \u2705 Implement CSP (Content Security Policy)</p> <p>Deliverables: - \u2705 Security scanning reports - \u2705 Vulnerability monitoring dashboard - \u2705 Enhanced authentication system - \u2705 Encryption implementation - \u2705 Compliance documentation</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-2-infrastructure-scalability-completed","title":"Sprint 2: Infrastructure &amp; Scalability (COMPLETED \u2705)","text":"<p>Focus: Improve infrastructure to enhance performance and scalability.</p> <p>Key Tasks: - \u2705 Implement multi-region deployment - \u2705 Set up CDN for static assets - \u2705 Enhance database performance - \u2705 Implement caching strategy - \u2705 Set up autoscaling - \u2705 Optimize build and deployment processes - \u2705 Implement infrastructure as code</p> <p>Deliverables: - \u2705 Multi-region deployment architecture - \u2705 CDN implementation - \u2705 Database performance optimizations - \u2705 Caching implementation - \u2705 Autoscaling configuration - \u2705 CI/CD pipeline optimizations</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-3-ai-ml-enhancement-completed","title":"Sprint 3: AI &amp; ML Enhancement (COMPLETED \u2705)","text":"<p>Focus: Enhance AI &amp; ML capabilities for more intelligent email marketing.</p> <p>Key Tasks: - \u2705 Implement AI observability - \u2705 Integrate Anthropic Claude 3 models - \u2705 Implement Stability AI for image generation - \u2705 Set up W&amp;B for experiment tracking - \u2705 Implement DVC for model versioning - \u2705 Set up cost-effective model routing</p> <p>Deliverables: - \u2705 AI observability dashboard - \u2705 Claude 3 integration - \u2705 Image generation capabilities - \u2705 Experiment tracking system - \u2705 Model versioning system - \u2705 Cost optimization metrics</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-4-developer-experience-testing-completed","title":"Sprint 4: Developer Experience &amp; Testing (COMPLETED \u2705)","text":"<p>Focus: Enhance developer experience and testing capabilities.</p> <p>Key Tasks: - \u2705 Migrate to Next.js App Router - \u2705 Enhance testing coverage - \u2705 Improve developer documentation - \u2705 Set up code quality metrics - \u2705 Implement feature flags - \u2705 Enhance CI/CD pipeline - \u2705 Improve error handling</p> <p>Deliverables: - \u2705 App Router migration - \u2705 Enhanced test suite - \u2705 Developer documentation - \u2705 Code quality dashboard - \u2705 Feature flag system - \u2705 Enhanced CI/CD pipeline - \u2705 Error handling framework</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-5-monitoring-observability-completed","title":"Sprint 5: Monitoring &amp; Observability (COMPLETED \u2705)","text":"<p>Focus: Implement comprehensive monitoring and observability.</p> <p>Key Tasks: - \u2705 Implement distributed tracing - \u2705 Set up metrics collection - \u2705 Implement logging strategy - \u2705 Set up alerting system - \u2705 Create operational dashboards - \u2705 Implement health checks - \u2705 Set up performance monitoring</p> <p>Deliverables: - \u2705 Distributed tracing implementation - \u2705 Metrics collection system - \u2705 Logging infrastructure - \u2705 Alerting configuration - \u2705 Operational dashboards - \u2705 Health check endpoints - \u2705 Performance monitoring system</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-6-user-experience-accessibility-completed","title":"Sprint 6: User Experience &amp; Accessibility (COMPLETED \u2705)","text":"<p>Focus: Enhance user experience and accessibility.</p> <p>Key Tasks: - \u2705 Implement accessibility improvements - \u2705 Enhance mobile experience - \u2705 Optimize performance - \u2705 Implement dark mode - \u2705 Enhance UI components - \u2705 Improve user onboarding - \u2705 Implement user feedback system</p> <p>Deliverables: - \u2705 Accessibility audit - \u2705 Mobile-optimized UI - \u2705 Performance optimizations - \u2705 Dark mode implementation - \u2705 Enhanced UI component library - \u2705 Onboarding flow - \u2705 User feedback mechanism</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-7-internationalization-localization-completed","title":"Sprint 7: Internationalization &amp; Localization (COMPLETED \u2705)","text":"<p>Focus: Implement internationalization and localization.</p> <p>Key Tasks: - \u2705 Set up i18n framework - \u2705 Implement RTL support - \u2705 Create translation workflow - \u2705 Implement locale-aware features - \u2705 Set up language detection - \u2705 Create language switching UI - \u2705 Test with multiple languages</p> <p>Deliverables: - \u2705 i18n framework integration - \u2705 RTL support implementation - \u2705 Translation management system - \u2705 Locale-aware features - \u2705 Language detection mechanism - \u2705 Language switching UI - \u2705 Multi-language testing report</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-8-advanced-analytics-reporting-planned","title":"Sprint 8: Advanced Analytics &amp; Reporting (PLANNED \ud83d\udcc5)","text":"<p>Focus: Implement advanced analytics and reporting capabilities.</p> <p>Key Tasks: - \ud83d\udcdd Implement real-time analytics dashboard - \ud83d\udcdd Create advanced segmentation analysis - \ud83d\udcdd Implement campaign performance predictions - \ud83d\udcdd Set up custom reporting engine - \ud83d\udcdd Create exportable reports - \ud83d\udcdd Implement user behavior tracking - \ud83d\udcdd Set up conversion tracking</p> <p>Deliverables: - \ud83d\udccb Real-time analytics dashboard - \ud83d\udccb Segmentation analysis tools - \ud83d\udccb Predictive analytics features - \ud83d\udccb Custom reporting engine - \ud83d\udccb Report export functionality - \ud83d\udccb User behavior tracking implementation - \ud83d\udccb Conversion tracking system</p> <p>Timeline: March 10, 2025 - April 7, 2025</p>"},{"location":"archive/enhancement-implementation-plan/#sprint-9-microservices-architecture-planned","title":"Sprint 9: Microservices Architecture (PLANNED \ud83d\udcc5)","text":"<p>Focus: Transition to a microservices architecture for improved scalability.</p> <p>Key Tasks: - \ud83d\udcdd Design microservices architecture - \ud83d\udcdd Implement service discovery - \ud83d\udcdd Set up API gateway - \ud83d\udcdd Implement circuit breakers - \ud83d\udcdd Create service mesh - \ud83d\udcdd Implement event-driven architecture - \ud83d\udcdd Set up microservices monitoring</p> <p>Deliverables: - \ud83d\udccb Microservices architecture design - \ud83d\udccb Service discovery implementation - \ud83d\udccb API gateway configuration - \ud83d\udccb Circuit breaker implementation - \ud83d\udccb Service mesh configuration - \ud83d\udccb Event-driven architecture implementation - \ud83d\udccb Microservices monitoring dashboard</p> <p>Timeline: April 14, 2025 - May 12, 2025</p>"},{"location":"archive/enhancement-implementation-plan/#implementation-strategy","title":"Implementation Strategy","text":"<p>The implementation will follow these principles:</p> <ol> <li>Iterative Development: Each sprint builds on the previous ones</li> <li>Continuous Integration: Regular integration of changes</li> <li>Testing First: Comprehensive testing before deployment</li> <li>User-Centric: Focus on user needs and experience</li> <li>Documentation: Thorough documentation of all changes</li> <li>Performance: Optimization of performance at each step</li> <li>Security: Security considerations in all implementations</li> </ol>"},{"location":"archive/enhancement-implementation-plan/#risk-management","title":"Risk Management","text":"<p>Potential risks and mitigations:</p> <ol> <li>Resource Constraints</li> <li> <p>Mitigation: Prioritize tasks and allocate resources efficiently</p> </li> <li> <p>Technical Challenges</p> </li> <li> <p>Mitigation: Research solutions early and seek expertise when needed</p> </li> <li> <p>Timeline Slippage</p> </li> <li> <p>Mitigation: Regular progress tracking and adjustment of scope if necessary</p> </li> <li> <p>Integration Issues</p> </li> <li>Mitigation: Comprehensive testing and gradual integration</li> </ol>"},{"location":"archive/enhancement-implementation-plan/#success-metrics","title":"Success Metrics","text":"<p>Success will be measured by:</p> <ol> <li>Performance Improvements: Load times, processing speed</li> <li>User Satisfaction: User feedback, engagement metrics</li> <li>Developer Productivity: Development speed, code quality</li> <li>Platform Stability: Uptime, error rates</li> <li>Security Posture: Vulnerability metrics, compliance status</li> <li>Feature Adoption: Usage of new features</li> </ol>"},{"location":"archive/enhancement-implementation-plan/#conclusion","title":"Conclusion","text":"<p>This enhancement plan provides a comprehensive roadmap for improving the Maily platform across multiple dimensions. By implementing these enhancements, we will create a more robust, secure, and feature-rich email marketing platform that meets the needs of our users and positions us for future growth.</p>"},{"location":"archive/enhancement-overview/","title":"Maily Enhancement Overview","text":"<p>This document provides an overview of the enhancement plan for Maily, explaining how the different enhancement documents relate to each other and how to use them effectively.</p>"},{"location":"archive/enhancement-overview/#enhancement-documents","title":"Enhancement Documents","text":"<p>The enhancement plan consists of three main documents:</p> <ol> <li>Enhancement Analysis - Detailed analysis of gaps in the current implementation and recommended solutions</li> <li>Enhancement Implementation Plan - Sprint-based implementation plan with specific tasks and tools</li> <li>Enhancement Tools Reference - Detailed information about recommended tools, including features, benefits, and integration points</li> </ol>"},{"location":"archive/enhancement-overview/#how-to-use-these-documents","title":"How to Use These Documents","text":""},{"location":"archive/enhancement-overview/#for-project-managers","title":"For Project Managers","text":"<ol> <li>Start with the Enhancement Analysis to understand the gaps in the current implementation and the rationale behind the recommended solutions.</li> <li>Use the Enhancement Implementation Plan to plan and track the implementation of the enhancements. This document is organized into sprints, each focusing on specific areas of improvement.</li> <li>Refer to the Enhancement Tools Reference for detailed information about the recommended tools when making procurement decisions.</li> </ol>"},{"location":"archive/enhancement-overview/#for-developers","title":"For Developers","text":"<ol> <li>Start with the Enhancement Implementation Plan to understand the specific tasks you'll be working on.</li> <li>Refer to the Enhancement Analysis for more context about why certain enhancements are needed.</li> <li>Use the Enhancement Tools Reference for detailed information about the tools you'll be using, including features, benefits, and integration points.</li> </ol>"},{"location":"archive/enhancement-overview/#for-architects","title":"For Architects","text":"<ol> <li>Start with the Enhancement Analysis to understand the gaps in the current implementation and the rationale behind the recommended solutions.</li> <li>Use the Enhancement Tools Reference to evaluate the recommended tools and ensure they align with the overall architecture.</li> <li>Refer to the Enhancement Implementation Plan to understand how the enhancements will be implemented over time.</li> </ol>"},{"location":"archive/enhancement-overview/#enhancement-areas","title":"Enhancement Areas","text":"<p>The enhancement plan covers the following key areas:</p>"},{"location":"archive/enhancement-overview/#1-security-compliance","title":"1. Security &amp; Compliance","text":"<p>Enhancing the security posture of Maily through improved scanning, secrets management, policy enforcement, and authentication.</p> <p>Key Tools: Trivy, Snyk, OWASP ZAP, SonarQube, HashiCorp Vault, Open Policy Agent, Kyverno, Auth0</p>"},{"location":"archive/enhancement-overview/#2-infrastructure-scalability","title":"2. Infrastructure &amp; Scalability","text":"<p>Improving the scalability and reliability of Maily through multi-region deployment, edge computing, database optimization, and enhanced caching.</p> <p>Key Tools: AWS App Mesh, AWS Global Accelerator, Cloudflare Workers, Cloudflare KV, PgBouncer, Vitess, Redis Cluster, Redis Sentinel</p>"},{"location":"archive/enhancement-overview/#3-ai-ml-capabilities","title":"3. AI &amp; ML Capabilities","text":"<p>Enhancing the AI capabilities of Maily through improved model versioning, observability, advanced features, and cost management.</p> <p>Key Tools: Weights &amp; Biases, DVC, Arize AI, Langfuse, Anthropic Claude 3 Opus, Stability AI, Helicone, LiteLLM</p>"},{"location":"archive/enhancement-overview/#4-developer-experience","title":"4. Developer Experience","text":"<p>Improving the developer experience through modern frontend architecture, enhanced testing, improved CI/CD, and better documentation.</p> <p>Key Tools: Next.js App Router, Vitest, Playwright, MSW, GitHub Actions, ArgoCD, Docusaurus, Swagger</p>"},{"location":"archive/enhancement-overview/#5-monitoring-observability","title":"5. Monitoring &amp; Observability","text":"<p>Enhancing the monitoring and observability capabilities of Maily through distributed tracing, metrics collection, alerting, and log management.</p> <p>Key Tools: OpenTelemetry, Grafana Tempo, Prometheus, Grafana, Alertmanager, PagerDuty, Grafana Loki</p>"},{"location":"archive/enhancement-overview/#6-user-experience","title":"6. User Experience","text":"<p>Improving the user experience through enhanced accessibility, internationalization, mobile experience, and performance.</p> <p>Key Tools: Axe, React Aria, next-intl, Crowdin, Tailwind CSS, Lighthouse, Webpack Bundle Analyzer</p>"},{"location":"archive/enhancement-overview/#implementation-timeline","title":"Implementation Timeline","text":"<p>The enhancement plan is organized into six sprints, each focusing on specific areas of improvement:</p> <ol> <li>Sprint 1: Security &amp; Compliance Foundation - Implementing security scanning, secrets management, compliance automation, and enhanced authentication.</li> <li>Sprint 2: Infrastructure &amp; Scalability - Implementing multi-region deployment, edge computing, database optimization, and enhanced caching.</li> <li>Sprint 3: AI &amp; ML Enhancement - Implementing model versioning, AI observability, advanced AI features, and AI cost management.</li> <li>Sprint 4: Developer Experience &amp; Testing - Migrating to Next.js App Router, enhancing testing coverage, improving CI/CD, and enhancing documentation.</li> <li>Sprint 5: Monitoring &amp; Observability - Implementing distributed tracing, enhancing metrics collection, implementing alerting strategy, and implementing log management.</li> <li>Sprint 6: User Experience &amp; Accessibility - Enhancing accessibility, implementing internationalization, optimizing mobile experience, and enhancing performance.</li> </ol>"},{"location":"archive/enhancement-overview/#conclusion","title":"Conclusion","text":"<p>The enhancement plan provides a comprehensive roadmap for improving Maily to reach a \"state of the art\" level. By following this plan, Maily will become more secure, scalable, intelligent, developer-friendly, observable, and user-friendly.</p>"},{"location":"archive/faq/","title":"Maily Frequently Asked Questions (FAQ)","text":"<p>Last updated: March 4, 2025</p> <p>This document answers common questions about the Maily platform, covering technical details, business aspects, and usage guidelines.</p>"},{"location":"archive/faq/#general-questions","title":"General Questions","text":""},{"location":"archive/faq/#what-is-maily","title":"What is Maily?","text":"<p>Maily is an AI-driven email marketing platform designed to help businesses create, manage, and optimize email campaigns with advanced targeting, personalization, and analytics capabilities.</p>"},{"location":"archive/faq/#what-makes-maily-different-from-other-email-marketing-platforms","title":"What makes Maily different from other email marketing platforms?","text":"<p>Maily differentiates itself through its advanced AI capabilities, including content generation, audience segmentation, send time optimization, and engagement prediction. Additionally, its modern architecture provides exceptional performance, scalability, and developer experience.</p>"},{"location":"archive/faq/#what-types-of-businesses-is-maily-designed-for","title":"What types of businesses is Maily designed for?","text":"<p>Maily is designed for businesses of all sizes, from startups to enterprises, that need sophisticated email marketing capabilities. It's particularly well-suited for businesses that send high volumes of emails and need advanced personalization and analytics.</p>"},{"location":"archive/faq/#is-maily-available-in-multiple-languages","title":"Is Maily available in multiple languages?","text":"<p>Yes, the Maily user interface is available in 12 languages, including English, Spanish, French, German, Japanese, Chinese, Arabic, and more. The platform also supports right-to-left (RTL) languages.</p>"},{"location":"archive/faq/#technical-questions","title":"Technical Questions","text":""},{"location":"archive/faq/#what-technologies-does-maily-use","title":"What technologies does Maily use?","text":"<p>Maily is built using a modern technology stack, including Next.js App Router for the frontend, GraphQL with Apollo Server for the API, PostgreSQL and Redis for data storage, and Kubernetes for orchestration. For AI capabilities, Maily uses Anthropic Claude 3, Stability AI, and custom-trained ML models. See our Tech Stack document for more details.</p>"},{"location":"archive/faq/#is-maily-built-on-a-microservices-architecture","title":"Is Maily built on a microservices architecture?","text":"<p>Yes, Maily employs a microservices architecture with clearly defined service boundaries. This architecture enables independent scaling, deployment, and development of different components of the platform.</p>"},{"location":"archive/faq/#how-does-maily-handle-data-security","title":"How does Maily handle data security?","text":"<p>Maily implements a comprehensive security strategy, including a zero trust architecture, mutual TLS for service communication, WAF rules, runtime application self-protection, and advanced authorization. All personally identifiable information (PII) is encrypted at rest and in transit.</p>"},{"location":"archive/faq/#how-does-maily-ensure-compliance-with-privacy-regulations","title":"How does Maily ensure compliance with privacy regulations?","text":"<p>Maily is designed to be compliant with major privacy regulations including GDPR, CCPA, and CAN-SPAM. The platform provides features for consent management, data subject access requests, and the right to be forgotten.</p>"},{"location":"archive/faq/#can-maily-be-self-hosted","title":"Can Maily be self-hosted?","text":"<p>Currently, Maily is offered primarily as a SaaS solution. However, for enterprise customers with specific requirements, we do offer a dedicated deployment option. Contact our sales team for more information.</p>"},{"location":"archive/faq/#what-is-the-uptime-guarantee-for-maily","title":"What is the uptime guarantee for Maily?","text":"<p>Maily offers a 99.99% uptime SLA for all paid plans. Our multi-region deployment and resilient architecture help ensure high availability.</p>"},{"location":"archive/faq/#ai-capabilities","title":"AI Capabilities","text":""},{"location":"archive/faq/#what-ai-models-does-maily-use","title":"What AI models does Maily use?","text":"<p>Maily leverages several AI models, including Anthropic Claude 3 (Opus, Sonnet, and Haiku variants) for natural language tasks, custom-trained models for engagement prediction and segmentation, and Stability AI for image generation.</p>"},{"location":"archive/faq/#how-does-maily-generate-email-content","title":"How does Maily generate email content?","text":"<p>Maily's content generation is powered by a RAG (Retrieval-Augmented Generation) system that combines Anthropic Claude 3 with domain-specific knowledge about email marketing best practices and your brand guidelines. The system can generate complete emails, suggest improvements to existing content, and create subject lines.</p>"},{"location":"archive/faq/#can-maily-generate-images-for-emails","title":"Can Maily generate images for emails?","text":"<p>Yes, Maily can generate custom images for email campaigns based on text prompts. This feature is powered by Stability AI and integrates seamlessly with the email editor.</p>"},{"location":"archive/faq/#how-accurate-are-mailys-engagement-predictions","title":"How accurate are Maily's engagement predictions?","text":"<p>Maily's engagement prediction models are regularly benchmarked against actual results and currently achieve an average accuracy of 97.3% in predicting open rates and 92.8% in predicting click-through rates.</p>"},{"location":"archive/faq/#does-mailys-ai-require-training-on-my-data","title":"Does Maily's AI require training on my data?","text":"<p>No, Maily's core AI capabilities work out of the box without requiring training on your specific data. However, as you use the platform, the AI will learn from your campaigns' performance to provide more tailored recommendations and predictions.</p>"},{"location":"archive/faq/#email-features","title":"Email Features","text":""},{"location":"archive/faq/#what-types-of-email-campaigns-can-i-create-with-maily","title":"What types of email campaigns can I create with Maily?","text":"<p>Maily supports various campaign types, including one-time sends, recurring sends, automated triggers, multi-stage workflows, A/B tests, and personalized campaigns based on user behavior and preferences.</p>"},{"location":"archive/faq/#how-does-maily-handle-email-deliverability","title":"How does Maily handle email deliverability?","text":"<p>Maily employs several strategies to maximize deliverability, including IP warming, reputation management, DKIM/SPF/DMARC authentication, bounce handling, and spam content analysis. These measures help ensure your emails reach recipients' inboxes.</p>"},{"location":"archive/faq/#can-maily-send-transactional-emails","title":"Can Maily send transactional emails?","text":"<p>Yes, Maily provides a transactional email API for sending time-sensitive, operational emails such as password resets, order confirmations, and account notifications. These are sent through dedicated IP addresses to maintain high deliverability.</p>"},{"location":"archive/faq/#what-email-template-system-does-maily-use","title":"What email template system does Maily use?","text":"<p>Maily uses MJML (Mailjet Markup Language) for creating responsive email templates that render correctly across different email clients and devices. The platform includes a visual email editor that generates MJML code behind the scenes.</p>"},{"location":"archive/faq/#what-is-the-maximum-number-of-emails-i-can-send","title":"What is the maximum number of emails I can send?","text":"<p>Maily's infrastructure is designed to handle high volumes of emails. Standard plans include various sending limits, and enterprise plans can be customized to support virtually any volume requirement.</p>"},{"location":"archive/faq/#analytics-and-reporting","title":"Analytics and Reporting","text":""},{"location":"archive/faq/#what-metrics-does-maily-track","title":"What metrics does Maily track?","text":"<p>Maily tracks comprehensive email performance metrics, including opens, clicks, conversions, bounces, unsubscribes, spam reports, and revenue attribution. The platform also provides advanced analytics like heat maps, geographical distribution, and device breakdowns.</p>"},{"location":"archive/faq/#can-i-create-custom-reports-in-maily","title":"Can I create custom reports in Maily?","text":"<p>Yes, Maily's custom reporting engine allows you to build and schedule reports based on any combination of metrics tracked in the platform. Reports can be viewed in the dashboard or exported in various formats.</p>"},{"location":"archive/faq/#does-maily-support-ab-testing","title":"Does Maily support A/B testing?","text":"<p>Yes, Maily provides robust A/B testing capabilities. You can test different subject lines, content, sending times, and sender names. The platform automatically distributes emails among test groups and can automatically select the winning variant based on your chosen metric.</p>"},{"location":"archive/faq/#how-does-maily-handle-tracking-in-light-of-privacy-changes","title":"How does Maily handle tracking in light of privacy changes?","text":"<p>Maily has adapted to privacy changes like Apple's Mail Privacy Protection by implementing multiple tracking methods beyond pixel tracking, including link click tracking, interaction events, and engagement modeling to provide accurate reporting.</p>"},{"location":"archive/faq/#integration-and-extensibility","title":"Integration and Extensibility","text":""},{"location":"archive/faq/#does-maily-integrate-with-crm-systems","title":"Does Maily integrate with CRM systems?","text":"<p>Yes, Maily offers native integrations with popular CRM systems such as Salesforce, HubSpot, and Microsoft Dynamics. These integrations enable bi-directional data synchronization to keep your email marketing aligned with your customer relationship management.</p>"},{"location":"archive/faq/#can-maily-integrate-with-my-e-commerce-platform","title":"Can Maily integrate with my e-commerce platform?","text":"<p>Yes, Maily integrates with major e-commerce platforms including Shopify, WooCommerce, Magento, and BigCommerce. These integrations enable features like abandoned cart emails, product recommendation campaigns, and purchase-based segmentation.</p>"},{"location":"archive/faq/#does-maily-offer-a-public-api","title":"Does Maily offer a public API?","text":"<p>Yes, Maily provides a comprehensive GraphQL API that enables you to perform virtually any action available in the user interface. This API is well-documented and includes client libraries for popular programming languages.</p>"},{"location":"archive/faq/#can-i-extend-mailys-functionality","title":"Can I extend Maily's functionality?","text":"<p>Enterprise customers can access Maily's extension framework, which allows for the development of custom plugins to extend the platform's functionality. This framework is documented in our developer portal.</p>"},{"location":"archive/faq/#account-and-billing","title":"Account and Billing","text":""},{"location":"archive/faq/#what-plans-does-maily-offer","title":"What plans does Maily offer?","text":"<p>Maily offers several pricing tiers, including Starter, Professional, Scale, and Enterprise plans. Each plan includes different features, sending volumes, and levels of support. Custom plans are also available for specific requirements.</p>"},{"location":"archive/faq/#how-is-maily-billed","title":"How is Maily billed?","text":"<p>Maily is offered as a subscription service with monthly or annual billing options. Annual subscriptions include a discount. Billing is based on your chosen plan and any add-ons or additional services you select.</p>"},{"location":"archive/faq/#can-i-upgrade-or-downgrade-my-plan","title":"Can I upgrade or downgrade my plan?","text":"<p>Yes, you can upgrade your plan at any time, with the new pricing taking effect immediately. Downgrades take effect at the end of your current billing cycle. Both can be managed from your account settings.</p>"},{"location":"archive/faq/#what-payment-methods-do-you-accept","title":"What payment methods do you accept?","text":"<p>Maily accepts credit cards, PayPal, and bank transfers (for annual plans). Enterprise customers may also arrange for invoicing with net terms.</p>"},{"location":"archive/faq/#support-and-resources","title":"Support and Resources","text":""},{"location":"archive/faq/#what-customer-support-options-are-available","title":"What customer support options are available?","text":"<p>Support options vary by plan. All customers have access to our knowledge base and community forum. Professional plans and above include email support, while Scale and Enterprise plans add phone support and dedicated account management.</p>"},{"location":"archive/faq/#does-maily-offer-training","title":"Does Maily offer training?","text":"<p>Yes, Maily provides various training resources, including documentation, video tutorials, webinars, and a certification program. Enterprise customers also receive customized onboarding and training sessions.</p>"},{"location":"archive/faq/#how-often-is-maily-updated","title":"How often is Maily updated?","text":"<p>Maily follows a continuous deployment model, with minor updates released weekly and major feature releases typically occurring monthly. All updates are deployed with zero downtime.</p>"},{"location":"archive/faq/#where-can-i-find-documentation","title":"Where can I find documentation?","text":"<p>Comprehensive documentation is available in our online knowledge base, accessible from the Help menu in the Maily dashboard. This includes user guides, API documentation, best practices, and troubleshooting information.</p>"},{"location":"archive/faq/#performance-and-scalability","title":"Performance and Scalability","text":""},{"location":"archive/faq/#how-fast-is-the-maily-platform","title":"How fast is the Maily platform?","text":"<p>Maily is designed for high performance, with an average API response time of 87ms (p95) and a Time to Interactive of 1.7s for the web interface. The platform leverages edge computing, caching, and optimized database queries to ensure responsiveness.</p>"},{"location":"archive/faq/#how-does-maily-handle-high-traffic-volumes","title":"How does Maily handle high traffic volumes?","text":"<p>Maily's architecture is designed to scale automatically based on demand. The platform employs horizontal scaling for stateless services, connection pooling for databases, and caching strategies to handle traffic spikes and maintain performance under load.</p>"},{"location":"archive/faq/#what-is-mailys-approach-to-reliability","title":"What is Maily's approach to reliability?","text":"<p>Maily achieves 99.995% uptime through multi-region deployment, automated failover, comprehensive monitoring, and a resilient architecture. The platform includes circuit breakers, rate limiting, and graceful degradation strategies to maintain service availability.</p>"},{"location":"archive/faq/#future-of-maily","title":"Future of Maily","text":""},{"location":"archive/faq/#what-features-are-on-mailys-roadmap","title":"What features are on Maily's roadmap?","text":"<p>Maily's near-term roadmap includes advanced analytics and reporting capabilities, full microservices architecture implementation, enhanced collaboration features, advanced enterprise features, a marketplace for extensions, and advanced ML capabilities. See our Modernization Roadmap for more details.</p>"},{"location":"archive/faq/#how-does-maily-handle-feature-requests","title":"How does Maily handle feature requests?","text":"<p>Feature requests can be submitted through the feedback form in the Maily dashboard. Our product team regularly reviews these requests and incorporates them into our roadmap planning process. Enterprise customers can also work directly with their account managers for specific feature needs.</p>"},{"location":"archive/faq/#is-maily-committed-to-accessibility","title":"Is Maily committed to accessibility?","text":"<p>Yes, accessibility is a core commitment for Maily. The platform complies with WCAG AA standards, is regularly tested with assistive technologies, and our development team receives ongoing training in accessibility best practices.</p>"},{"location":"archive/faq/#how-is-maily-addressing-sustainability","title":"How is Maily addressing sustainability?","text":"<p>Maily is working to minimize its environmental impact through efficient infrastructure design, optimized compute resource usage, and partnerships with cloud providers that use renewable energy. We also have internal sustainability initiatives for our operations and offices.</p>"},{"location":"archive/frontend-architecture/","title":"Maily Frontend Architecture Modernization","text":""},{"location":"archive/frontend-architecture/#nextjs-app-router-implementation","title":"Next.js App Router Implementation","text":""},{"location":"archive/frontend-architecture/#react-server-components-rsc","title":"React Server Components (RSC)","text":"<ul> <li>Use React Server Components for data fetching components</li> <li>Implement proper component segmentation (Server vs Client components)</li> <li>Apply proper patterns for Server/Client components</li> <li>Follow the \"move down\" principle for client components</li> </ul>"},{"location":"archive/frontend-architecture/#server-actions","title":"Server Actions","text":"<ul> <li>Implement form handling with Server Actions</li> <li>Use Server Actions for mutations in data</li> <li>Implement proper validation with Zod</li> <li>Apply optimistic updates where appropriate</li> </ul>"},{"location":"archive/frontend-architecture/#streaming-and-suspense","title":"Streaming and Suspense","text":"<ul> <li>Implement streaming for initial page loads</li> <li>Use <code>loading.tsx</code> for automatic suspense boundaries</li> <li>Create custom suspense boundaries for complex UIs</li> <li>Implement skeleton loaders for suspended components</li> </ul>"},{"location":"archive/frontend-architecture/#parallel-routes","title":"Parallel Routes","text":"<ul> <li>Use parallel routes for dashboard layouts</li> <li>Implement parallel routes for multi-step forms</li> <li>Use @modal for modal dialogs in routes</li> <li>Maintain state across parallel routes</li> </ul>"},{"location":"archive/frontend-architecture/#ui-framework-standardization","title":"UI Framework Standardization","text":""},{"location":"archive/frontend-architecture/#tailwind-css-and-shadcnui","title":"Tailwind CSS and shadcn/ui","text":"<ul> <li>Create design tokens based on Tailwind config</li> <li>Implement shadcn/ui components to replace Material UI</li> <li>Create a component library based on shadcn/ui</li> <li>Document component usage and patterns</li> </ul>"},{"location":"archive/frontend-architecture/#theme-customization","title":"Theme Customization","text":"<ul> <li>Implement CSS Variables for theme values</li> <li>Create dark/light mode toggles</li> <li>Support system theme preferences</li> <li>Implement custom color schemes</li> </ul>"},{"location":"archive/frontend-architecture/#modern-state-management","title":"Modern State Management","text":""},{"location":"archive/frontend-architecture/#server-state-with-tanstack-query","title":"Server State with TanStack Query","text":"<ul> <li>Implement TanStack Query for server state</li> <li>Create custom hooks for common queries</li> <li>Implement proper mutation patterns</li> <li>Use optimistic updates for better UX</li> </ul>"},{"location":"archive/frontend-architecture/#client-state-with-zustand","title":"Client State with Zustand","text":"<ul> <li>Create Zustand stores for global UI state</li> <li>Implement proper store segmentation</li> <li>Use middleware for persistence where needed</li> <li>Create typed stores with TypeScript</li> </ul>"},{"location":"archive/frontend-architecture/#form-state","title":"Form State","text":"<ul> <li>Use React Hook Form with Zod validation</li> <li>Create reusable form components</li> <li>Implement field-level validation</li> <li>Provide form error handling patterns</li> </ul>"},{"location":"archive/frontend-architecture/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"archive/frontend-architecture/#migration-strategy","title":"Migration Strategy","text":"<ol> <li>Start with shared components migration</li> <li>Migrate API routes to Route Handlers</li> <li>Implement RSC data fetching</li> <li>Migrate forms to Server Actions</li> <li>Implement streaming and suspense</li> <li>Add parallel routes for complex pages</li> </ol>"},{"location":"archive/frontend-architecture/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Implement component-level code splitting</li> <li>Use dynamic imports for client components</li> <li>Implement proper image optimization</li> <li>Ensure proper font loading strategies</li> </ul>"},{"location":"archive/frontend-architecture/#accessibility","title":"Accessibility","text":"<ul> <li>Ensure all components meet WCAG AA standards</li> <li>Implement proper keyboard navigation</li> <li>Maintain focus management in dynamic UIs</li> <li>Test with screen readers</li> </ul>"},{"location":"archive/frontend-architecture/#code-quality","title":"Code Quality","text":"<ul> <li>Use TypeScript strict mode</li> <li>Implement comprehensive unit tests</li> <li>Use Playwright for E2E testing</li> <li>Implement proper CI/CD for frontend code</li> </ul>"},{"location":"archive/glossary/","title":"Maily Glossary","text":"<p>Last updated: March 4, 2025</p> <p>This document provides definitions for key terms used throughout the Maily platform documentation and user interface. These definitions aim to create a common language for all stakeholders, from developers to end users.</p>"},{"location":"archive/glossary/#a","title":"A","text":""},{"location":"archive/glossary/#ab-testing","title":"A/B Testing","text":"<p>A method of comparing two or more variations of an email campaign to determine which performs better. Maily's A/B testing framework automatically distributes emails among test groups and selects the winning variant based on predefined metrics.</p>"},{"location":"archive/glossary/#accessibility-a11y","title":"Accessibility (a11y)","text":"<p>The practice of designing and developing the Maily platform so that people with disabilities can use it effectively. Maily implements WCAG AA standards throughout the platform.</p>"},{"location":"archive/glossary/#ai-orchestrator","title":"AI Orchestrator","text":"<p>A component of Maily's Enhanced AI Service that coordinates the flow of requests between different AI models and services, ensuring optimal performance and cost management.</p>"},{"location":"archive/glossary/#audience","title":"Audience","text":"<p>A defined group of email recipients with shared characteristics, behaviors, or preferences. In Maily, audiences can be static (manually created) or dynamic (rule-based).</p>"},{"location":"archive/glossary/#app-router","title":"App Router","text":"<p>The Next.js routing system used in Maily's frontend. Enables advanced features like React Server Components, server actions, parallel routes, and intercepting routes.</p>"},{"location":"archive/glossary/#auth-provider","title":"Auth Provider","text":"<p>An authentication system that verifies user identity. Maily supports multiple auth providers through NextAuth.js and Auth0, including email/password, Google, Microsoft, and SAML.</p>"},{"location":"archive/glossary/#b","title":"B","text":""},{"location":"archive/glossary/#bounce","title":"Bounce","text":"<p>An email that couldn't be delivered to the recipient's inbox. Maily distinguishes between hard bounces (permanent failure) and soft bounces (temporary failure).</p>"},{"location":"archive/glossary/#batch-processing","title":"Batch Processing","text":"<p>A method of processing data in groups rather than individually, often used in Maily's backend services for efficiency when handling large volumes of emails.</p>"},{"location":"archive/glossary/#c","title":"C","text":""},{"location":"archive/glossary/#campaign","title":"Campaign","text":"<p>A coordinated series of emails sent to an audience with a specific goal. Campaigns in Maily can be one-time sends, recurring sends, or complex multi-stage workflows.</p>"},{"location":"archive/glossary/#client-component","title":"Client Component","text":"<p>A React component in Maily's frontend that runs on the client side (browser). Used for interactive elements that require client-side JavaScript.</p>"},{"location":"archive/glossary/#content-security-policy-csp","title":"Content Security Policy (CSP)","text":"<p>A security standard implemented in Maily that helps prevent cross-site scripting (XSS) attacks by controlling which resources can be loaded.</p>"},{"location":"archive/glossary/#cqrs-command-query-responsibility-segregation","title":"CQRS (Command Query Responsibility Segregation)","text":"<p>A design pattern used in Maily's microservices architecture that separates read operations from write operations, improving performance and scalability.</p>"},{"location":"archive/glossary/#custom-reporting-engine","title":"Custom Reporting Engine","text":"<p>Maily's flexible reporting system that allows users to build and schedule custom reports based on any metric tracked in the platform.</p>"},{"location":"archive/glossary/#d","title":"D","text":""},{"location":"archive/glossary/#dashboard","title":"Dashboard","text":"<p>The main interface in Maily where users can view key metrics, recent activity, and quick access to common functions.</p>"},{"location":"archive/glossary/#data-loader","title":"Data Loader","text":"<p>A pattern used in Maily's GraphQL API to efficiently batch and cache database queries, reducing the number of database round trips.</p>"},{"location":"archive/glossary/#dynamic-segment","title":"Dynamic Segment","text":"<p>An audience segment in Maily that updates automatically based on predefined rules and conditions, ensuring that the segment always contains the most relevant recipients.</p>"},{"location":"archive/glossary/#distributed-tracing","title":"Distributed Tracing","text":"<p>A method used in Maily for monitoring and troubleshooting requests as they flow through various microservices, implemented with OpenTelemetry and Grafana Tempo.</p>"},{"location":"archive/glossary/#dvc-data-version-control","title":"DVC (Data Version Control)","text":"<p>A tool used in Maily's AI pipeline to track changes to machine learning models and datasets, ensuring reproducibility and rollback capabilities.</p>"},{"location":"archive/glossary/#e","title":"E","text":""},{"location":"archive/glossary/#edge-computing","title":"Edge Computing","text":"<p>Computing that takes place close to the physical location where data is being processed. Maily uses Cloudflare Workers for edge functions to improve performance globally.</p>"},{"location":"archive/glossary/#email-template","title":"Email Template","text":"<p>A predefined email layout in Maily that can be customized with content, images, and personalization tokens. Templates support responsive design through MJML.</p>"},{"location":"archive/glossary/#engagement-prediction","title":"Engagement Prediction","text":"<p>Maily's AI feature that predicts how likely a recipient is to open, click, or convert from an email, allowing for better segmentation and targeting.</p>"},{"location":"archive/glossary/#enhanced-ai-service","title":"Enhanced AI Service","text":"<p>Maily's advanced AI system that powers content generation, audience segmentation, send time optimization, and subject line optimization, built on Anthropic Claude 3 and other AI technologies.</p>"},{"location":"archive/glossary/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>An architectural pattern used in Maily where components communicate through events, improving resilience and enabling complex workflows.</p>"},{"location":"archive/glossary/#f","title":"F","text":""},{"location":"archive/glossary/#feature-store","title":"Feature Store","text":"<p>A centralized repository for ML features in Maily, implemented with Feast. It stores, manages, and serves features for training and inference.</p>"},{"location":"archive/glossary/#feature-flag","title":"Feature Flag","text":"<p>A technique used in Maily to enable or disable features without deploying new code, allowing for gradual rollouts, A/B testing, and quick rollbacks.</p>"},{"location":"archive/glossary/#funnel-analysis","title":"Funnel Analysis","text":"<p>A reporting feature in Maily that tracks how users move through a sequence of email interactions, helping identify points of drop-off.</p>"},{"location":"archive/glossary/#g","title":"G","text":""},{"location":"archive/glossary/#gdpr-general-data-protection-regulation","title":"GDPR (General Data Protection Regulation)","text":"<p>EU data protection regulation that Maily fully complies with, providing features for consent management, data export, and the right to be forgotten.</p>"},{"location":"archive/glossary/#graphql","title":"GraphQL","text":"<p>The query language and runtime used for Maily's API, providing flexible, efficient, and powerful alternatives to REST endpoints.</p>"},{"location":"archive/glossary/#h","title":"H","text":""},{"location":"archive/glossary/#heat-map","title":"Heat Map","text":"<p>A visual representation in Maily analytics that uses colors to show which parts of an email received the most clicks.</p>"},{"location":"archive/glossary/#helm-chart","title":"Helm Chart","text":"<p>A package format used to deploy Maily components in Kubernetes environments, containing all necessary Kubernetes resources.</p>"},{"location":"archive/glossary/#helicone","title":"Helicone","text":"<p>A tool integrated with Maily's Enhanced AI Service for monitoring and optimizing AI costs across providers.</p>"},{"location":"archive/glossary/#i","title":"I","text":""},{"location":"archive/glossary/#i18n-internationalization","title":"i18n (Internationalization)","text":"<p>The process of designing Maily to support multiple languages and regions. Maily supports 12 languages with both LTR and RTL text directions.</p>"},{"location":"archive/glossary/#image-generation","title":"Image Generation","text":"<p>An AI feature in Maily that can create custom images for email campaigns based on text prompts, powered by Stability AI.</p>"},{"location":"archive/glossary/#intercepting-routes","title":"Intercepting Routes","text":"<p>A Next.js App Router feature used in Maily to create modal interfaces without losing the context of the current page.</p>"},{"location":"archive/glossary/#k","title":"K","text":""},{"location":"archive/glossary/#kafka","title":"Kafka","text":"<p>The event streaming platform used in Maily's backend for reliable, high-throughput, low-latency communication between services.</p>"},{"location":"archive/glossary/#kubernetes","title":"Kubernetes","text":"<p>The container orchestration system used to deploy and manage Maily's microservices in production environments.</p>"},{"location":"archive/glossary/#l","title":"L","text":""},{"location":"archive/glossary/#langfuse","title":"Langfuse","text":"<p>The observability platform integrated with Maily's Enhanced AI Service for monitoring, tracking, and evaluating AI model performance.</p>"},{"location":"archive/glossary/#litellm","title":"LiteLLM","text":"<p>The model routing layer in Maily's Enhanced AI Service that provides a unified interface to multiple LLM providers.</p>"},{"location":"archive/glossary/#loki","title":"Loki","text":"<p>The log aggregation system used in Maily for collecting and querying logs from all services.</p>"},{"location":"archive/glossary/#m","title":"M","text":""},{"location":"archive/glossary/#microservices","title":"Microservices","text":"<p>The architectural style where Maily is divided into small, independently deployable services organized around business capabilities.</p>"},{"location":"archive/glossary/#model-registry","title":"Model Registry","text":"<p>A component of Maily's ML infrastructure that stores and versions machine learning models, ensuring reproducibility and governance.</p>"},{"location":"archive/glossary/#mjml","title":"MJML","text":"<p>The responsive email framework used in Maily to create email templates that render correctly across email clients.</p>"},{"location":"archive/glossary/#multi-stage-email-workflow","title":"Multi-stage Email Workflow","text":"<p>A campaign type in Maily where recipients receive different emails based on their interactions with previous emails in the sequence.</p>"},{"location":"archive/glossary/#o","title":"O","text":""},{"location":"archive/glossary/#observability","title":"Observability","text":"<p>The practice of measuring the internal state of Maily's systems through logs, metrics, and traces to understand and troubleshoot behavior.</p>"},{"location":"archive/glossary/#opentelemetry","title":"OpenTelemetry","text":"<p>The open-source framework used in Maily for collecting and exporting telemetry data (logs, metrics, and traces) to observability backends.</p>"},{"location":"archive/glossary/#open-rate","title":"Open Rate","text":"<p>The percentage of recipients who opened an email. Maily tracks opens using pixel tracking and interaction events.</p>"},{"location":"archive/glossary/#p","title":"P","text":""},{"location":"archive/glossary/#parallel-routes","title":"Parallel Routes","text":"<p>A Next.js App Router feature used in Maily to render multiple pages in the same view, useful for complex dashboard layouts.</p>"},{"location":"archive/glossary/#personalization","title":"Personalization","text":"<p>The process of customizing email content based on recipient data. Maily supports basic (name, company) and advanced (behavioral, predictive) personalization.</p>"},{"location":"archive/glossary/#progressive-web-app-pwa","title":"Progressive Web App (PWA)","text":"<p>A web application that provides a mobile app-like experience. Maily's web interface is built as a PWA for improved mobile usability.</p>"},{"location":"archive/glossary/#pothos","title":"Pothos","text":"<p>The code-first GraphQL schema builder used in Maily's API layer for type-safe schema development.</p>"},{"location":"archive/glossary/#r","title":"R","text":""},{"location":"archive/glossary/#rag-retrieval-augmented-generation","title":"RAG (Retrieval-Augmented Generation)","text":"<p>An AI technique used in Maily where the AI model retrieves relevant information from a knowledge base before generating content, improving accuracy and relevance.</p>"},{"location":"archive/glossary/#react-server-component-rsc","title":"React Server Component (RSC)","text":"<p>A type of React component used in Maily that renders on the server, reducing JavaScript bundle size and enabling direct database access.</p>"},{"location":"archive/glossary/#retention-analysis","title":"Retention Analysis","text":"<p>A reporting feature in Maily that tracks how well campaigns keep subscribers engaged over time.</p>"},{"location":"archive/glossary/#redis","title":"Redis","text":"<p>The in-memory data store used in Maily for caching, session management, and real-time features.</p>"},{"location":"archive/glossary/#s","title":"S","text":""},{"location":"archive/glossary/#segmentation","title":"Segmentation","text":"<p>The process of dividing an email audience into smaller groups based on specific criteria. Maily supports basic (demographic) and advanced (behavioral, predictive) segmentation.</p>"},{"location":"archive/glossary/#server-action","title":"Server Action","text":"<p>A Next.js feature used in Maily for handling form submissions and data mutations directly on the server without API endpoints.</p>"},{"location":"archive/glossary/#streaming","title":"Streaming","text":"<p>A technique used in Maily where the server sends HTML incrementally, allowing browsers to start rendering before the entire response is complete.</p>"},{"location":"archive/glossary/#suspense","title":"Suspense","text":"<p>A React feature used in Maily for declarative data fetching and loading states, improving user experience during data loading.</p>"},{"location":"archive/glossary/#send-time-optimization","title":"Send Time Optimization","text":"<p>An AI feature in Maily that determines the optimal time to send emails to each recipient based on their past engagement patterns.</p>"},{"location":"archive/glossary/#service-mesh","title":"Service Mesh","text":"<p>A dedicated infrastructure layer in Maily's microservices architecture for handling service-to-service communication with advanced features like traffic control and observability.</p>"},{"location":"archive/glossary/#t","title":"T","text":""},{"location":"archive/glossary/#template-fragment","title":"Template Fragment","text":"<p>Reusable pieces of email content in Maily that can be shared across multiple templates, such as headers, footers, or product showcases.</p>"},{"location":"archive/glossary/#tenant","title":"Tenant","text":"<p>A customer organization in Maily's multi-tenant architecture. Each tenant's data is logically isolated while sharing the same infrastructure.</p>"},{"location":"archive/glossary/#turborepo","title":"Turborepo","text":"<p>The build system used for Maily's monorepo, providing fast incremental builds and caching.</p>"},{"location":"archive/glossary/#u","title":"U","text":""},{"location":"archive/glossary/#user-journey","title":"User Journey","text":"<p>The sequence of touchpoints a user has with email campaigns. Maily provides visualization and analysis tools to optimize these journeys.</p>"},{"location":"archive/glossary/#user-behavior-tracking","title":"User Behavior Tracking","text":"<p>A feature in Maily that monitors how users interact with sent emails, capturing opens, clicks, and other engagement metrics.</p>"},{"location":"archive/glossary/#v","title":"V","text":""},{"location":"archive/glossary/#vault","title":"Vault","text":"<p>The secure secret management system used in Maily for storing and accessing sensitive information like API keys and credentials.</p>"},{"location":"archive/glossary/#vitest","title":"Vitest","text":"<p>The testing framework used for Maily's frontend unit and integration tests.</p>"},{"location":"archive/glossary/#w","title":"W","text":""},{"location":"archive/glossary/#weights-biases-wb","title":"Weights &amp; Biases (W&amp;B)","text":"<p>The experiment tracking platform used in Maily's ML pipeline for versioning, visualizing, and comparing model training runs.</p>"},{"location":"archive/glossary/#websockets","title":"WebSockets","text":"<p>The technology used in Maily for real-time updates in the dashboard and collaborative features.</p>"},{"location":"archive/glossary/#wcag-web-content-accessibility-guidelines","title":"WCAG (Web Content Accessibility Guidelines)","text":"<p>The accessibility standards implemented in Maily to ensure usability for people with disabilities.</p>"},{"location":"archive/glossary/#z","title":"Z","text":""},{"location":"archive/glossary/#zero-trust-architecture","title":"Zero Trust Architecture","text":"<p>The security model implemented in Maily where no user or service is inherently trusted, and verification is required from everyone trying to access resources.</p>"},{"location":"archive/glossary/#zustand","title":"Zustand","text":"<p>The state management library used in Maily's frontend for client-side global state.</p>"},{"location":"archive/glossary/#zod","title":"Zod","text":"<p>The schema validation library used in Maily for form validation and API input validation.</p>"},{"location":"archive/implementation-tracker/","title":"Maily Platform Modernization Roadmap Implementation Tracker","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/implementation-tracker/#phase-1-foundation","title":"Phase 1: Foundation","text":""},{"location":"archive/implementation-tracker/#frontend-architecture-modernization","title":"Frontend Architecture Modernization","text":"Task Status Notes Set up Tailwind CSS \u2705 Completed Configured with design system variables Configure CSS variables for theming \u2705 Completed Light and dark mode support added Create Next.js App Router structure \u2705 Completed Dashboard page implemented Migrate shared components \u2705 Completed Card, Table, Button, Input, Label, and Skeleton components implemented Set up Apollo Client for GraphQL \u2705 Completed Configured with auth handling and error management Implement campaigns management UI \u2705 Completed Created campaigns list, detail, and create/edit pages with App Router Implement subscriber management UI \u2705 Completed Created subscribers list, detail, filtering and tagging features with App Router Implement templates management UI \u2705 Completed Created templates list, detail, and preview features with App Router Connect UI to backend GraphQL API \u2705 Completed Created service layer for campaigns, subscribers, and templates"},{"location":"archive/implementation-tracker/#api-architecture-enhancement","title":"API Architecture Enhancement","text":"Task Status Notes Set up GraphQL with Apollo Server \u2705 Completed Backend GraphQL API implemented with Strawberry GraphQL Create code-first schema with Pothos \ud83d\udd35 Changed Using Strawberry GraphQL for Python backend instead Implement basic resolvers \u2705 Completed Created resolvers for users, campaigns, subscribers, and templates Add authentication middleware \ud83d\udfe1 Prepared Auth middleware is ready but currently disabled for development Integrate with existing API services \ud83d\udd04 In Progress Working on integrating with legacy REST endpoints"},{"location":"archive/implementation-tracker/#ai-capabilities-advancement","title":"AI Capabilities Advancement","text":"Task Status Notes Design model adapter interface \u2705 Completed Implemented adapter pattern for AI model integration Implement OpenAI adapter \u2705 Completed Created adapter for OpenAI's GPT models Create AI service \u2705 Completed Implemented service for email content generation and optimization Add AI-powered email subject generator \u2705 Completed Implemented and integrated with campaign creation UI Implement content optimization suggestions \u2705 Completed Implemented with analysis and improvement recommendations Implement AI-powered template recommendations \u2705 Completed Created intelligent template recommendation system Develop email content analyzer \u2705 Completed Added comprehensive email content analysis tool"},{"location":"archive/implementation-tracker/#microservices-architecture","title":"Microservices Architecture","text":"Task Status Notes Define service boundaries \u2b1c Not Started Create service contracts \u2b1c Not Started Implement event-based communication \u2b1c Not Started Set up message broker \u2b1c Not Started Create deployment pipelines \u2b1c Not Started"},{"location":"archive/implementation-tracker/#implementation-log","title":"Implementation Log","text":""},{"location":"archive/implementation-tracker/#february-25-2025","title":"February 25, 2025","text":"<ul> <li>Created implementation tracker</li> <li>Assessed the current state of the codebase</li> <li>Created Dashboard page with App Router</li> <li>Implemented dashboard-skeleton, dashboard-stats, and dashboard-charts components</li> <li>Set up GraphQL API with Strawberry GraphQL on the backend</li> <li>Implemented Apollo Client with configuration for auth handling and error management</li> <li>Created GraphQL queries and mutations files</li> <li>Implemented example components using Apollo Client (UserProfile and CampaignsList)</li> </ul>"},{"location":"archive/implementation-tracker/#february-26-2025","title":"February 26, 2025","text":"<ul> <li>Added UI components: Button, Input, Label</li> <li>Created examples page demonstrating both client and server components with Apollo Client</li> <li>Implemented login form example with mutations</li> <li>Started design of model adapter interface for AI capabilities</li> </ul>"},{"location":"archive/implementation-tracker/#february-27-2025","title":"February 27, 2025","text":"<ul> <li>Implemented campaigns page with App Router (listing, detail, creation, and editing)</li> <li>Created campaign-related components (CampaignsList, CampaignDetail, CampaignStats)</li> <li>Implemented form for creating and editing campaigns with validation</li> <li>Added visualizations for campaign performance metrics using Recharts</li> </ul>"},{"location":"archive/implementation-tracker/#february-28-2025","title":"February 28, 2025","text":"<ul> <li>Implemented subscribers management page with filtering and tagging features</li> <li>Created subscriber-related components (SubscribersList, SubscriberDetail, SubscriberActivity)</li> <li>Implemented activity timeline with icons and color coding</li> <li>Added detailed subscriber profile view with metrics and engagement data</li> </ul>"},{"location":"archive/implementation-tracker/#march-1-2025","title":"March 1, 2025","text":"<ul> <li>Implemented templates management page with filtering and categorization features</li> <li>Created template-related components (TemplatesList, TemplateDetail)</li> <li>Added template preview and HTML source viewing capabilities</li> <li>Implemented template usage statistics with campaign history tracking</li> </ul>"},{"location":"archive/implementation-tracker/#march-2-2025","title":"March 2, 2025","text":"<ul> <li>Created GraphQL service layer for templates, subscribers, and campaigns</li> <li>Connected UI components to the backend through the service layer</li> <li>Refactored components to use the new services instead of direct GraphQL calls</li> <li>Started integration with legacy REST endpoints through GraphQL resolvers</li> </ul>"},{"location":"archive/implementation-tracker/#march-3-2025","title":"March 3, 2025","text":"<ul> <li>Designed and implemented model adapter interface for AI capabilities</li> <li>Created OpenAI adapter implementing the model adapter interface</li> <li>Implemented AI service for email content generation and optimization</li> <li>Added email subject generation, content optimization, and A/B testing capabilities</li> <li>Started integrating AI capabilities with campaign and template creation flows</li> </ul>"},{"location":"archive/implementation-tracker/#march-4-2025","title":"March 4, 2025","text":"<ul> <li>Completed integration of AI features into the campaign creation UI</li> <li>Implemented AI-powered template recommendations based on campaign goals</li> <li>Developed email content analyzer with detailed feedback and improvement suggestions</li> <li>Added performance prediction and benchmark comparison functionality</li> <li>Enhanced content optimization with actionable suggestions</li> </ul>"},{"location":"archive/implementation-tracker/#next-immediate-tasks","title":"Next Immediate Tasks","text":"<ol> <li>Complete integration with existing API services</li> <li>Implement template editor with drag-and-drop capabilities</li> <li>Develop campaign A/B testing feature with AI-powered variant creation</li> <li>Implement subscriber segmentation tool with AI-powered audience insights</li> <li>Begin planning for microservices architecture</li> </ol>"},{"location":"archive/infrastructure-implementation-summary/","title":"Infrastructure Implementation Summary","text":"<p>This document provides a summary of the infrastructure implementation for the Maily platform, focusing on the security and compliance enhancements made to achieve a production-grade level.</p>"},{"location":"archive/infrastructure-implementation-summary/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Security Scanning Pipeline</li> <li>Secrets Management</li> <li>Compliance Automation</li> <li>Implementation Status</li> <li>Next Steps</li> </ol>"},{"location":"archive/infrastructure-implementation-summary/#overview","title":"Overview","text":"<p>The infrastructure implementation follows the enhancement plan outlined in the Enhancement Implementation Plan document. The implementation focuses on Sprint 1: Security &amp; Compliance Foundation, which includes the following tasks:</p> <ol> <li>Implement Security Scanning Pipeline</li> <li>Enhance Secrets Management</li> <li>Implement Compliance Automation</li> <li>Enhance Authentication &amp; Authorization</li> </ol>"},{"location":"archive/infrastructure-implementation-summary/#security-scanning-pipeline","title":"Security Scanning Pipeline","text":"<p>The security scanning pipeline has been implemented using GitHub Actions, with the following components:</p>"},{"location":"archive/infrastructure-implementation-summary/#trivy-container-scanning","title":"Trivy Container Scanning","text":"<p>Trivy is used to scan container images for vulnerabilities. The implementation includes:</p> <ul> <li>Scanning of all container images built during the CI/CD process</li> <li>Scanning of the filesystem for vulnerabilities</li> <li>Scanning of configuration files for misconfigurations</li> <li>Integration with GitHub Security tab for vulnerability reporting</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#snyk-dependency-scanning","title":"Snyk Dependency Scanning","text":"<p>Snyk is used to scan application dependencies for vulnerabilities. The implementation includes:</p> <ul> <li>Scanning of Python dependencies</li> <li>Scanning of JavaScript dependencies</li> <li>Scanning of Docker images</li> <li>Integration with GitHub Security tab for vulnerability reporting</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#sonarqube-static-code-analysis","title":"SonarQube Static Code Analysis","text":"<p>SonarQube is used to perform static code analysis. The implementation includes:</p> <ul> <li>Code quality analysis</li> <li>Security vulnerability detection</li> <li>Code coverage tracking</li> <li>Quality gate checks</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#owasp-zap-api-security-testing","title":"OWASP ZAP API Security Testing","text":"<p>OWASP ZAP is used to perform security testing on API endpoints. The implementation includes:</p> <ul> <li>API scanning</li> <li>Full site scanning</li> <li>Custom rules for vulnerability detection</li> <li>Integration with GitHub Security tab for vulnerability reporting</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#additional-security-scanning","title":"Additional Security Scanning","text":"<p>Additional security scanning components include:</p> <ul> <li>CodeQL Analysis for advanced static analysis</li> <li>TruffleHog for secret scanning</li> <li>Dependency Review for dependency security analysis</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#secrets-management","title":"Secrets Management","text":"<p>Secrets management has been implemented using HashiCorp Vault, with the following components:</p>"},{"location":"archive/infrastructure-implementation-summary/#vault-infrastructure","title":"Vault Infrastructure","text":"<p>The Vault infrastructure is deployed on AWS using Terraform. The implementation includes:</p> <ul> <li>Highly available Vault cluster with multiple nodes</li> <li>Auto-unseal using AWS KMS</li> <li>TLS encryption for all communications</li> <li>IAM roles and policies for secure access</li> <li>Backup and monitoring</li> <li>CloudWatch integration for logging and metrics</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#kubernetes-integration","title":"Kubernetes Integration","text":"<p>Vault is integrated with Kubernetes using the Vault Agent Injector. The implementation includes:</p> <ul> <li>Vault Agent sidecar for secrets injection</li> <li>Dynamic database credentials</li> <li>API keys management</li> <li>JWT secret management</li> <li>Secure token handling</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#compliance-automation","title":"Compliance Automation","text":"<p>Compliance automation has been implemented using Open Policy Agent (OPA) and Kyverno, with the following components:</p>"},{"location":"archive/infrastructure-implementation-summary/#open-policy-agent-opa","title":"Open Policy Agent (OPA)","text":"<p>OPA is used to define and enforce policies. The implementation includes:</p> <ul> <li>Security policies for Kubernetes resources</li> <li>GDPR compliance policies</li> <li>CAN-SPAM compliance policies</li> <li>Deployment as a validating webhook in Kubernetes</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#kyverno","title":"Kyverno","text":"<p>Kyverno is used to enforce policies at the Kubernetes admission controller level. The implementation includes:</p> <ul> <li>Security policies for Kubernetes resources</li> <li>GDPR compliance policies</li> <li>CAN-SPAM compliance policies</li> <li>Network policies for segmentation</li> <li>Resource management policies</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#implementation-status","title":"Implementation Status","text":"<p>The following components have been implemented:</p> <ul> <li>\u2705 Security Scanning Pipeline</li> <li>\u2705 Trivy Container Scanning</li> <li>\u2705 Snyk Dependency Scanning</li> <li>\u2705 SonarQube Static Code Analysis</li> <li>\u2705 OWASP ZAP API Security Testing</li> <li>\u2705 CodeQL Analysis</li> <li>\u2705 TruffleHog Secret Scanning</li> <li> <p>\u2705 Dependency Review</p> </li> <li> <p>\u2705 Secrets Management</p> </li> <li>\u2705 Vault Infrastructure</li> <li>\u2705 Kubernetes Integration</li> <li>\u2705 Secret Rotation</li> <li> <p>\u2705 Secure Token Handling</p> </li> <li> <p>\u2705 Compliance Automation</p> </li> <li>\u2705 Open Policy Agent (OPA)</li> <li>\u2705 Kyverno</li> <li>\u2705 GDPR Compliance Policies</li> <li>\u2705 CAN-SPAM Compliance Policies</li> <li>\u2705 Security Best Practices Policies</li> </ul> <p>The following components are partially implemented or pending:</p> <ul> <li>\u26a0\ufe0f Authentication &amp; Authorization</li> <li>\u2705 JWT-based Authentication</li> <li>\u26a0\ufe0f Multi-Factor Authentication (MFA)</li> <li>\u26a0\ufe0f Role-Based Access Control (RBAC)</li> <li>\u26a0\ufe0f Fine-Grained Authorization</li> </ul>"},{"location":"archive/infrastructure-implementation-summary/#next-steps","title":"Next Steps","text":"<p>The following steps are recommended to complete the implementation:</p> <ol> <li>Authentication &amp; Authorization:</li> <li>Implement Multi-Factor Authentication (MFA) for admin accounts</li> <li>Implement Role-Based Access Control (RBAC) for all API endpoints</li> <li> <p>Implement Fine-Grained Authorization using OPA</p> </li> <li> <p>Testing and Validation:</p> </li> <li>Test the security scanning pipeline with known vulnerabilities</li> <li>Validate the secrets management implementation with security testing</li> <li> <p>Test the compliance automation with policy violations</p> </li> <li> <p>Documentation and Training:</p> </li> <li>Complete the documentation for all implemented components</li> <li>Provide training for developers on security best practices</li> <li> <p>Create runbooks for security incident response</p> </li> <li> <p>Proceed to Sprint 2:</p> </li> <li>Implement Multi-Region Deployment</li> <li>Enhance Edge Computing Capabilities</li> <li>Optimize Database Performance</li> <li>Enhance Caching Strategy</li> </ol>"},{"location":"archive/infrastructure-scalability-implementation/","title":"Infrastructure &amp; Scalability Implementation","text":"<p>This document outlines the production-grade implementation of the infrastructure and scalability enhancements for Maily, as specified in the enhancement plan.</p>"},{"location":"archive/infrastructure-scalability-implementation/#1-multi-region-deployment","title":"1. Multi-Region Deployment","text":"<p>We've implemented a multi-region deployment architecture using AWS App Mesh and AWS Global Accelerator to enable active-active deployment across regions.</p>"},{"location":"archive/infrastructure-scalability-implementation/#11-aws-app-mesh","title":"1.1 AWS App Mesh","text":"<p>AWS App Mesh has been implemented to provide a service mesh for microservices, enabling:</p> <ul> <li>Traffic routing between services</li> <li>Service discovery</li> <li>Observability</li> <li>Resilience with retry policies</li> </ul> <p>The implementation includes:</p> <ul> <li>Virtual nodes for each service in primary and secondary regions</li> <li>Virtual services for service discovery</li> <li>Virtual routers for traffic routing</li> <li>Routes with weighted targets for multi-region routing</li> </ul> <p>The App Mesh configuration is defined in <code>infrastructure/terraform/modules/app-mesh/</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#12-aws-global-accelerator","title":"1.2 AWS Global Accelerator","text":"<p>AWS Global Accelerator has been implemented to provide global traffic routing, enabling:</p> <ul> <li>Anycast IP addresses for global reach</li> <li>Traffic distribution across regions</li> <li>Health checking for high availability</li> <li>Client affinity for consistent routing</li> </ul> <p>The implementation includes:</p> <ul> <li>Global Accelerator with IPv4 support</li> <li>Listeners for HTTP/HTTPS traffic</li> <li>Endpoint groups for primary and secondary regions</li> <li>Traffic dial controls for gradual traffic shifting</li> <li>CloudWatch alarms for monitoring</li> </ul> <p>The Global Accelerator configuration is defined in <code>infrastructure/terraform/modules/global-accelerator/</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#13-cross-region-data-replication","title":"1.3 Cross-Region Data Replication","text":"<p>Cross-region data replication has been implemented for both PostgreSQL and Redis:</p> <ul> <li>PostgreSQL uses logical replication for cross-region data replication</li> <li>Redis uses Redis Cluster with replicas across regions</li> </ul>"},{"location":"archive/infrastructure-scalability-implementation/#2-edge-computing-capabilities","title":"2. Edge Computing Capabilities","text":"<p>We've implemented edge computing capabilities using Cloudflare Workers to enable dynamic content processing at the edge.</p>"},{"location":"archive/infrastructure-scalability-implementation/#21-api-edge-caching","title":"2.1 API Edge Caching","text":"<p>Cloudflare Workers have been implemented for API edge caching, enabling:</p> <ul> <li>Intelligent caching strategies</li> <li>Request routing based on client location</li> <li>Performance optimizations at the edge</li> <li>Security headers and CORS handling</li> </ul> <p>The implementation includes:</p> <ul> <li>Cache configuration with TTLs for different endpoints</li> <li>Region routing based on client location</li> <li>Rate limiting to prevent abuse</li> <li>Security headers for all responses</li> </ul> <p>The API Edge Caching Worker is defined in <code>infrastructure/cloudflare/workers/api-edge-cache.js</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#22-dynamic-content-processing","title":"2.2 Dynamic Content Processing","text":"<p>Cloudflare Workers have been implemented for dynamic content processing, enabling:</p> <ul> <li>Content personalization</li> <li>A/B testing</li> <li>Geolocation-based content</li> <li>Content security measures</li> </ul> <p>The implementation includes:</p> <ul> <li>Personalization tokens and defaults</li> <li>A/B testing with deterministic assignment</li> <li>Geolocation content based on client country</li> <li>Content security with allowed domains and sanitization</li> </ul> <p>The Dynamic Content Worker is defined in <code>infrastructure/cloudflare/workers/dynamic-content.js</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#23-cloudflare-kv-for-edge-data-storage","title":"2.3 Cloudflare KV for Edge Data Storage","text":"<p>Cloudflare KV has been configured for edge data storage, enabling:</p> <ul> <li>Low-latency access to data at the edge</li> <li>Global distribution of data</li> <li>Eventual consistency for high availability</li> </ul> <p>The KV namespaces are configured in <code>infrastructure/cloudflare/wrangler.toml</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#3-database-optimization","title":"3. Database Optimization","text":"<p>We've implemented database optimization techniques to improve performance and scalability.</p>"},{"location":"archive/infrastructure-scalability-implementation/#31-pgbouncer-for-connection-pooling","title":"3.1 PgBouncer for Connection Pooling","text":"<p>PgBouncer has been implemented for PostgreSQL connection pooling, enabling:</p> <ul> <li>Connection pooling to reduce database load</li> <li>Connection limiting to prevent overload</li> <li>Query caching for improved performance</li> </ul> <p>The implementation includes:</p> <ul> <li>PgBouncer configuration with transaction pooling</li> <li>Connection limits and pool sizes</li> <li>Health checks and monitoring</li> <li>High availability with multiple replicas</li> </ul> <p>The PgBouncer configuration is defined in <code>infrastructure/kubernetes/pgbouncer-deployment.yaml</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#32-postgresql-read-replicas","title":"3.2 PostgreSQL Read Replicas","text":"<p>PostgreSQL read replicas have been implemented for read-heavy operations, enabling:</p> <ul> <li>Offloading read queries from the primary database</li> <li>Improved read performance</li> <li>High availability with multiple replicas</li> <li>Automatic failover with Kubernetes StatefulSets</li> </ul> <p>The implementation includes:</p> <ul> <li>Primary PostgreSQL server with write capabilities</li> <li>Multiple read replicas for read-heavy operations</li> <li>Replication configuration for data consistency</li> <li>Read-only user for replica access</li> </ul> <p>The PostgreSQL configuration is defined in <code>infrastructure/kubernetes/postgres-deployment.yaml</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#33-database-sharding","title":"3.3 Database Sharding","text":"<p>While we haven't implemented Vitess for database sharding in this phase, the PostgreSQL configuration includes:</p> <ul> <li>Optimized configuration for high-volume tables</li> <li>Connection pooling to handle increased connections</li> <li>Read replicas to distribute read load</li> <li>Monitoring for identifying sharding candidates</li> </ul>"},{"location":"archive/infrastructure-scalability-implementation/#4-caching-strategy","title":"4. Caching Strategy","text":"<p>We've implemented a multi-level caching strategy using Redis Cluster and Redis Sentinel.</p>"},{"location":"archive/infrastructure-scalability-implementation/#41-redis-cluster-for-distributed-caching","title":"4.1 Redis Cluster for Distributed Caching","text":"<p>Redis Cluster has been implemented for distributed caching, enabling:</p> <ul> <li>Horizontal scaling of cache</li> <li>Automatic sharding of data</li> <li>Linear scalability</li> <li>High availability with replicas</li> </ul> <p>The implementation includes:</p> <ul> <li>Redis Cluster with 6 nodes (3 masters, 3 replicas)</li> <li>Automatic sharding of data across nodes</li> <li>Cluster configuration for high availability</li> <li>Monitoring and metrics collection</li> </ul>"},{"location":"archive/infrastructure-scalability-implementation/#42-redis-sentinel-for-high-availability","title":"4.2 Redis Sentinel for High Availability","text":"<p>Redis Sentinel has been implemented for high availability, enabling:</p> <ul> <li>Monitoring of Redis instances</li> <li>Automatic failover</li> <li>Configuration provider for clients</li> <li>Notification system for events</li> </ul> <p>The implementation includes:</p> <ul> <li>Redis Sentinel running alongside Redis instances</li> <li>Sentinel configuration for monitoring and failover</li> <li>Client configuration for Sentinel discovery</li> <li>Monitoring and alerting for Sentinel events</li> </ul>"},{"location":"archive/infrastructure-scalability-implementation/#43-multi-level-caching-strategy","title":"4.3 Multi-Level Caching Strategy","text":"<p>A multi-level caching strategy has been implemented, enabling:</p> <ul> <li>Edge caching with Cloudflare Workers</li> <li>Application-level caching with Redis</li> <li>Database-level caching with PgBouncer</li> <li>In-memory caching in application code</li> </ul> <p>The Redis Cluster and Sentinel configuration is defined in <code>infrastructure/kubernetes/redis-cluster.yaml</code>.</p>"},{"location":"archive/infrastructure-scalability-implementation/#5-monitoring-and-observability","title":"5. Monitoring and Observability","text":"<p>We've implemented monitoring and observability for all infrastructure components.</p>"},{"location":"archive/infrastructure-scalability-implementation/#51-prometheus-and-grafana","title":"5.1 Prometheus and Grafana","text":"<p>Prometheus and Grafana have been configured for monitoring, enabling:</p> <ul> <li>Metrics collection from all components</li> <li>Visualization of metrics in dashboards</li> <li>Alerting based on thresholds</li> <li>Historical data analysis</li> </ul>"},{"location":"archive/infrastructure-scalability-implementation/#52-service-monitors","title":"5.2 Service Monitors","text":"<p>Service Monitors have been configured for all components, enabling:</p> <ul> <li>Automatic discovery of monitoring targets</li> <li>Consistent monitoring configuration</li> <li>Metric relabeling for consistency</li> <li>Scrape configuration for different components</li> </ul>"},{"location":"archive/infrastructure-scalability-implementation/#next-steps","title":"Next Steps","text":"<p>With the infrastructure and scalability foundation in place, the next steps are to implement:</p> <ol> <li>Sprint 3: AI &amp; ML Enhancement</li> <li>Model versioning &amp; registry</li> <li>AI observability</li> <li>Advanced AI features</li> <li> <p>AI cost management</p> </li> <li> <p>Sprint 4: Developer Experience &amp; Testing</p> </li> <li>Migration to Next.js App Router</li> <li>Enhanced testing coverage</li> <li>Improved CI/CD pipeline</li> <li> <p>Enhanced documentation</p> </li> <li> <p>Sprint 5: Monitoring &amp; Observability</p> </li> <li>Distributed tracing</li> <li>Enhanced metrics collection</li> <li>Alerting strategy</li> <li> <p>Log management</p> </li> <li> <p>Sprint 6: User Experience &amp; Accessibility</p> </li> <li>Enhanced accessibility</li> <li>Internationalization</li> <li>Mobile experience optimization</li> <li>Performance enhancements</li> </ol>"},{"location":"archive/metadata-standardization/","title":"Maily Metadata Standardization","text":"<p>This document outlines the standardization of metadata files across the Maily project.</p>"},{"location":"archive/metadata-standardization/#packagejson-files","title":"Package.json Files","text":"<p>All <code>package.json</code> files have been standardized with:</p> <ol> <li>Consistent metadata (author, license, repository)</li> <li>Standard scripts based on package type</li> <li>Sorted dependencies</li> <li>Consistent versioning</li> </ol>"},{"location":"archive/metadata-standardization/#standard-scripts","title":"Standard Scripts","text":""},{"location":"archive/metadata-standardization/#root-package","title":"Root Package","text":"<pre><code>{\n  \"dev\": \"turbo run dev\",\n  \"build\": \"turbo run build\",\n  \"test\": \"turbo run test\",\n  \"lint\": \"turbo run lint\",\n  \"format\": \"prettier --write \\\"**/*.{ts,tsx,md}\\\"\",\n  \"clean\": \"turbo run clean &amp;&amp; rm -rf node_modules\",\n  \"prepare\": \"husky install\"\n}\n</code></pre>"},{"location":"archive/metadata-standardization/#web-application","title":"Web Application","text":"<pre><code>{\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\",\n  \"test\": \"jest\",\n  \"test:watch\": \"jest --watch\",\n  \"test:ci\": \"jest --ci --coverage --maxWorkers=2\",\n  \"test:coverage\": \"jest --coverage\",\n  \"cypress\": \"cypress open\",\n  \"cypress:headless\": \"cypress run\",\n  \"format\": \"prettier --write .\",\n  \"type-check\": \"tsc --noEmit\",\n  \"analyze-build\": \"ANALYZE=true next build\"\n}\n</code></pre>"},{"location":"archive/metadata-standardization/#api-application","title":"API Application","text":"<pre><code>{\n  \"start\": \"uvicorn main:app --reload\",\n  \"start:prod\": \"uvicorn main:app --host 0.0.0.0 --port 8000\",\n  \"test\": \"pytest\",\n  \"test:coverage\": \"pytest --cov=. --cov-report=html\",\n  \"lint\": \"flake8 .\",\n  \"format\": \"black .\"\n}\n</code></pre>"},{"location":"archive/metadata-standardization/#worker-application","title":"Worker Application","text":"<pre><code>{\n  \"start\": \"node dist/index.js\",\n  \"dev\": \"ts-node-dev --respawn --transpile-only src/index.ts\",\n  \"build\": \"tsc\",\n  \"test\": \"jest\",\n  \"lint\": \"eslint . --ext .ts\",\n  \"format\": \"prettier --write \\\"**/*.ts\\\"\"\n}\n</code></pre>"},{"location":"archive/metadata-standardization/#packages","title":"Packages","text":"<pre><code>{\n  \"build\": \"tsc\",\n  \"dev\": \"tsc --watch\",\n  \"lint\": \"eslint . --ext .ts,.tsx\",\n  \"test\": \"jest\",\n  \"clean\": \"rm -rf dist\"\n}\n</code></pre>"},{"location":"archive/metadata-standardization/#dependency-management","title":"Dependency Management","text":"<p>Dependencies are sorted alphabetically for better readability and to avoid merge conflicts.</p>"},{"location":"archive/metadata-standardization/#metadata-fields","title":"Metadata Fields","text":"<p>The following metadata fields are standardized across all packages:</p> <pre><code>{\n  \"author\": \"Maily Team\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/maily/maily.git\"\n  },\n  \"engines\": {\n    \"node\": \"&gt;=18.0.0\",\n    \"npm\": \"&gt;=8.0.0\"\n  }\n}\n</code></pre>"},{"location":"archive/metadata-standardization/#versioning","title":"Versioning","text":"<p>All packages use semantic versioning (MAJOR.MINOR.PATCH).</p>"},{"location":"archive/metadata-standardization/#maintenance","title":"Maintenance","text":"<p>When adding new dependencies or scripts, please follow the established patterns and organization.</p>"},{"location":"archive/monitoring-observability/","title":"Monitoring and Observability Implementation","text":"<p>This document provides an overview of the monitoring and observability features implemented in the Maily platform. These features enable comprehensive monitoring, alerting, and troubleshooting capabilities for the application.</p>"},{"location":"archive/monitoring-observability/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Distributed Tracing</li> <li>Structured Logging</li> <li>Metrics Collection</li> <li>Alerting and Incident Management</li> <li>Dashboards</li> <li>On-Call Rotation</li> <li>Integration with External Systems</li> <li>Configuration</li> <li>Best Practices</li> </ol>"},{"location":"archive/monitoring-observability/#overview","title":"Overview","text":"<p>The monitoring and observability implementation follows the three pillars of observability:</p> <ol> <li>Logs: Structured logging with context enrichment</li> <li>Metrics: Prometheus-based metrics collection and visualization</li> <li>Traces: Distributed tracing with OpenTelemetry</li> </ol> <p>These pillars are integrated to provide a comprehensive view of the system's health and performance, enabling quick identification and resolution of issues.</p>"},{"location":"archive/monitoring-observability/#distributed-tracing","title":"Distributed Tracing","text":"<p>Distributed tracing is implemented using OpenTelemetry, which provides a vendor-neutral way to collect and export traces.</p>"},{"location":"archive/monitoring-observability/#components","title":"Components","text":"<ul> <li>OpenTelemetry SDK: Integrated into the API service for trace generation</li> <li>OpenTelemetry Collector: Collects, processes, and exports traces</li> <li>Tempo: Distributed tracing backend for storage and querying</li> <li>Grafana: Visualization of traces</li> </ul>"},{"location":"archive/monitoring-observability/#implementation-details","title":"Implementation Details","text":"<p>The API service is instrumented with OpenTelemetry to automatically capture traces for HTTP requests, database queries, and Redis operations. Custom spans can be added to capture specific business logic.</p> <pre><code># Example of creating a custom span\nwith tracer.start_as_current_span(\"process_campaign\") as span:\n    span.set_attribute(\"campaign.id\", campaign_id)\n    # Business logic here\n</code></pre> <p>Trace context is propagated across service boundaries using HTTP headers, ensuring end-to-end traceability.</p>"},{"location":"archive/monitoring-observability/#configuration","title":"Configuration","text":"<p>The OpenTelemetry Collector is configured to:</p> <ul> <li>Receive traces from multiple sources (OTLP, Jaeger, Zipkin)</li> <li>Process traces with sampling, filtering, and enrichment</li> <li>Export traces to Tempo for storage and querying</li> </ul>"},{"location":"archive/monitoring-observability/#structured-logging","title":"Structured Logging","text":"<p>Structured logging is implemented using Loguru with JSON formatting, enabling easy parsing and querying of logs.</p>"},{"location":"archive/monitoring-observability/#components_1","title":"Components","text":"<ul> <li>Loguru: Python logging library with structured logging support</li> <li>JSON Formatter: Formats logs as JSON for machine readability</li> <li>Loki: Log aggregation and querying</li> <li>Grafana: Visualization of logs</li> </ul>"},{"location":"archive/monitoring-observability/#implementation-details_1","title":"Implementation Details","text":"<p>Logs are enriched with context information, including:</p> <ul> <li>Request ID for correlation with traces</li> <li>Service name and environment</li> <li>User information (when available)</li> <li>Additional context specific to the log event</li> </ul> <pre><code># Example of structured logging with context\nlogger.bind(\n    request_id=request_id,\n    user_id=user_id,\n    campaign_id=campaign_id\n).info(\"Campaign created\")\n</code></pre>"},{"location":"archive/monitoring-observability/#log-levels","title":"Log Levels","text":"<ul> <li>DEBUG: Detailed information for debugging</li> <li>INFO: General information about system operation</li> <li>WARNING: Potential issues that don't affect normal operation</li> <li>ERROR: Errors that affect a specific operation</li> <li>CRITICAL: Critical errors that affect the entire system</li> </ul>"},{"location":"archive/monitoring-observability/#metrics-collection","title":"Metrics Collection","text":"<p>Metrics collection is implemented using Prometheus, providing insights into system performance and health.</p>"},{"location":"archive/monitoring-observability/#components_2","title":"Components","text":"<ul> <li>Prometheus: Metrics collection and storage</li> <li>Prometheus Operator: Kubernetes-native deployment and management of Prometheus</li> <li>Grafana: Visualization of metrics</li> </ul>"},{"location":"archive/monitoring-observability/#metrics-categories","title":"Metrics Categories","text":"<ul> <li>System Metrics: CPU, memory, disk, network</li> <li>Application Metrics: Request rate, error rate, latency</li> <li>Business Metrics: Campaign creation rate, email delivery rate</li> <li>Custom Metrics: Cache hit ratio, AI model performance</li> </ul>"},{"location":"archive/monitoring-observability/#implementation-details_2","title":"Implementation Details","text":"<p>Metrics are exposed via HTTP endpoints and scraped by Prometheus. The API service uses the <code>prometheus_fastapi_instrumentator</code> library to automatically instrument FastAPI endpoints.</p> <pre><code># Example of custom metric\nfrom prometheus_client import Counter\n\ncampaign_counter = Counter(\n    \"maily_campaigns_created_total\",\n    \"Total number of campaigns created\",\n    [\"status\", \"model\"]\n)\n\n# Increment the counter\ncampaign_counter.labels(status=\"draft\", model=\"gpt-4\").inc()\n</code></pre>"},{"location":"archive/monitoring-observability/#alerting-and-incident-management","title":"Alerting and Incident Management","text":"<p>Alerting is implemented using Prometheus Alertmanager, which sends alerts to various notification channels.</p>"},{"location":"archive/monitoring-observability/#components_3","title":"Components","text":"<ul> <li>Prometheus Alertmanager: Alert routing, grouping, and notification</li> <li>PagerDuty: On-call management and incident response</li> <li>Slack: Team notifications</li> </ul>"},{"location":"archive/monitoring-observability/#alert-severity-levels","title":"Alert Severity Levels","text":"<ul> <li>Critical: Immediate action required, paged to on-call</li> <li>High: Urgent action required, notified via Slack and email</li> <li>Medium: Action required during business hours</li> <li>Low: Informational, no immediate action required</li> </ul>"},{"location":"archive/monitoring-observability/#implementation-details_3","title":"Implementation Details","text":"<p>Alerts are defined using Prometheus Alert Rules, which are evaluated regularly. When an alert fires, it is routed to the appropriate notification channel based on severity and service.</p> <pre><code># Example of alert rule\ngroups:\n- name: api\n  rules:\n  - alert: HighErrorRate\n    expr: sum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m])) &gt; 0.05\n    for: 5m\n    labels:\n      severity: critical\n      service: api\n    annotations:\n      summary: \"High error rate on API\"\n      description: \"Error rate is above 5% for 5 minutes\"\n</code></pre>"},{"location":"archive/monitoring-observability/#dashboards","title":"Dashboards","text":"<p>Dashboards are implemented using Grafana, providing visualization of metrics, logs, and traces.</p>"},{"location":"archive/monitoring-observability/#dashboard-categories","title":"Dashboard Categories","text":"<ul> <li>Overview: High-level system health and performance</li> <li>Service-specific: Detailed metrics for each service</li> <li>Business: Business metrics and KPIs</li> <li>Alerts: Active and recent alerts</li> </ul>"},{"location":"archive/monitoring-observability/#implementation-details_4","title":"Implementation Details","text":"<p>Dashboards are defined as code using Grafana's JSON model, enabling version control and automated deployment.</p>"},{"location":"archive/monitoring-observability/#on-call-rotation","title":"On-Call Rotation","text":"<p>On-call rotation is implemented using PagerDuty, ensuring 24/7 coverage for critical issues.</p>"},{"location":"archive/monitoring-observability/#components_4","title":"Components","text":"<ul> <li>PagerDuty: On-call scheduling, escalation, and notification</li> <li>Escalation Policies: Define escalation paths for different services</li> <li>Schedules: Define on-call rotations for different teams</li> </ul>"},{"location":"archive/monitoring-observability/#implementation-details_5","title":"Implementation Details","text":"<p>Two teams are defined for on-call rotation:</p> <ol> <li>Application Team: Responsible for application-level issues</li> <li>Infrastructure Team: Responsible for infrastructure-level issues</li> </ol> <p>Each team has a primary and secondary on-call engineer, with escalation to team leads if necessary.</p>"},{"location":"archive/monitoring-observability/#integration-with-external-systems","title":"Integration with External Systems","text":"<p>The monitoring system integrates with various external systems for enhanced functionality.</p>"},{"location":"archive/monitoring-observability/#integrations","title":"Integrations","text":"<ul> <li>Slack: Team notifications and alerts</li> <li>PagerDuty: On-call management and incident response</li> <li>Email: Notifications for non-urgent issues</li> <li>Webhook: Integration with custom systems</li> </ul>"},{"location":"archive/monitoring-observability/#configuration_1","title":"Configuration","text":"<p>Configuration is managed using Kubernetes ConfigMaps and Secrets, enabling easy updates and environment-specific settings.</p>"},{"location":"archive/monitoring-observability/#configuration-files","title":"Configuration Files","text":"<ul> <li>prometheus.yml: Prometheus configuration</li> <li>alertmanager.yml: Alertmanager configuration</li> <li>tempo.yml: Tempo configuration</li> <li>grafana-dashboards.yml: Grafana dashboard configuration</li> </ul>"},{"location":"archive/monitoring-observability/#best-practices","title":"Best Practices","text":""},{"location":"archive/monitoring-observability/#logging-best-practices","title":"Logging Best Practices","text":"<ol> <li>Use structured logging with context</li> <li>Include request ID for correlation with traces</li> <li>Use appropriate log levels</li> <li>Avoid logging sensitive information</li> <li>Include relevant context in logs</li> </ol>"},{"location":"archive/monitoring-observability/#metrics-best-practices","title":"Metrics Best Practices","text":"<ol> <li>Use meaningful metric names and labels</li> <li>Focus on the Four Golden Signals: latency, traffic, errors, and saturation</li> <li>Use histograms for latency measurements</li> <li>Keep cardinality under control</li> <li>Document metrics and their meaning</li> </ol>"},{"location":"archive/monitoring-observability/#tracing-best-practices","title":"Tracing Best Practices","text":"<ol> <li>Propagate trace context across service boundaries</li> <li>Use sampling for high-volume services</li> <li>Add custom attributes for business context</li> <li>Create custom spans for important operations</li> <li>Correlate traces with logs and metrics</li> </ol>"},{"location":"archive/monitoring-observability/#alerting-best-practices","title":"Alerting Best Practices","text":"<ol> <li>Alert on symptoms, not causes</li> <li>Use appropriate severity levels</li> <li>Include runbook links in alert notifications</li> <li>Avoid alert fatigue by tuning thresholds</li> <li>Regularly review and update alert rules</li> </ol>"},{"location":"archive/privacy-compliance/","title":"Privacy Compliance Documentation","text":""},{"location":"archive/privacy-compliance/#overview","title":"Overview","text":"<p>This document outlines Maily's compliance with major privacy regulations including GDPR, CCPA, and CAN-SPAM.</p>"},{"location":"archive/privacy-compliance/#gdpr-compliance","title":"GDPR Compliance","text":""},{"location":"archive/privacy-compliance/#data-processing","title":"Data Processing","text":"<ul> <li>Purpose limitation</li> <li>Data minimization</li> <li>Storage limitation</li> <li>Integrity and confidentiality</li> </ul>"},{"location":"archive/privacy-compliance/#user-rights","title":"User Rights","text":"<ul> <li>Right to access</li> <li>Right to rectification</li> <li>Right to erasure</li> <li>Right to data portability</li> <li>Right to object</li> <li>Right to restrict processing</li> </ul>"},{"location":"archive/privacy-compliance/#technical-measures","title":"Technical Measures","text":"<ul> <li>Data encryption (AES-256)</li> <li>Access controls</li> <li>Data anonymization</li> <li>Audit logging</li> </ul>"},{"location":"archive/privacy-compliance/#ccpa-compliance","title":"CCPA Compliance","text":""},{"location":"archive/privacy-compliance/#consumer-rights","title":"Consumer Rights","text":"<ul> <li>Right to know</li> <li>Right to delete</li> <li>Right to opt-out</li> <li>Right to non-discrimination</li> </ul>"},{"location":"archive/privacy-compliance/#technical-implementation","title":"Technical Implementation","text":"<ul> <li>Data inventory</li> <li>Consumer request handling</li> <li>Verification procedures</li> <li>Record keeping</li> </ul>"},{"location":"archive/privacy-compliance/#can-spam-compliance","title":"CAN-SPAM Compliance","text":""},{"location":"archive/privacy-compliance/#email-requirements","title":"Email Requirements","text":"<ul> <li>Clear identification</li> <li>Opt-out mechanism</li> <li>Physical address</li> <li>Honest subject lines</li> </ul>"},{"location":"archive/privacy-compliance/#technical-controls","title":"Technical Controls","text":"<ul> <li>Unsubscribe handling</li> <li>Header accuracy</li> <li>Content monitoring</li> <li>Complaint handling</li> </ul>"},{"location":"archive/privacy-compliance/#consent-management","title":"Consent Management","text":""},{"location":"archive/privacy-compliance/#collection","title":"Collection","text":"<ul> <li>Explicit consent mechanisms</li> <li>Purpose specification</li> <li>Granular options</li> <li>Record keeping</li> </ul>"},{"location":"archive/privacy-compliance/#implementation","title":"Implementation","text":"<ul> <li>Consent tracking</li> <li>Preference management</li> <li>Withdrawal handling</li> <li>Audit trail</li> </ul>"},{"location":"archive/privacy-compliance/#data-security","title":"Data Security","text":""},{"location":"archive/privacy-compliance/#storage","title":"Storage","text":"<ul> <li>Encryption at rest</li> <li>Access controls</li> <li>Backup procedures</li> <li>Retention policies</li> </ul>"},{"location":"archive/privacy-compliance/#transmission","title":"Transmission","text":"<ul> <li>TLS 1.3</li> <li>API security</li> <li>Third-party transfers</li> <li>Monitoring</li> </ul>"},{"location":"archive/privacy-compliance/#incident-response","title":"Incident Response","text":""},{"location":"archive/privacy-compliance/#procedures","title":"Procedures","text":"<ul> <li>Detection</li> <li>Assessment</li> <li>Notification</li> <li>Remediation</li> </ul>"},{"location":"archive/privacy-compliance/#documentation","title":"Documentation","text":"<ul> <li>Incident logs</li> <li>Impact assessment</li> <li>Notification templates</li> <li>Review process</li> </ul>"},{"location":"archive/security-compliance-architecture/","title":"Security and Compliance Architecture","text":"<p>This document outlines the security and compliance architecture implemented in the Maily platform, focusing on the enhancements made to achieve a production-grade level of security and compliance.</p>"},{"location":"archive/security-compliance-architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Security Scanning Pipeline</li> <li>Secrets Management</li> <li>Compliance Automation</li> <li>Authentication &amp; Authorization</li> <li>Implementation Details</li> <li>Best Practices</li> </ol>"},{"location":"archive/security-compliance-architecture/#overview","title":"Overview","text":"<p>The security and compliance architecture of Maily is designed to provide a robust foundation for protecting sensitive data, ensuring regulatory compliance, and maintaining the integrity and availability of the platform. The architecture follows a defense-in-depth approach, implementing multiple layers of security controls.</p>"},{"location":"archive/security-compliance-architecture/#security-scanning-pipeline","title":"Security Scanning Pipeline","text":"<p>The security scanning pipeline is implemented using a combination of tools integrated into the CI/CD workflow:</p>"},{"location":"archive/security-compliance-architecture/#container-scanning-with-trivy","title":"Container Scanning with Trivy","text":"<p>Trivy is used to scan container images for vulnerabilities in the operating system packages and application dependencies. The scanning is performed on all container images built during the CI/CD process.</p> <p>Implementation: <code>.github/workflows/security-scan.yml</code></p>"},{"location":"archive/security-compliance-architecture/#dependency-scanning-with-snyk","title":"Dependency Scanning with Snyk","text":"<p>Snyk is used to scan application dependencies for known vulnerabilities. The scanning is performed on both Python and JavaScript dependencies.</p> <p>Implementation: <code>.github/workflows/security-scan.yml</code></p>"},{"location":"archive/security-compliance-architecture/#api-security-testing-with-owasp-zap","title":"API Security Testing with OWASP ZAP","text":"<p>OWASP ZAP is used to perform security testing on the API endpoints, identifying potential vulnerabilities such as injection flaws, broken authentication, and security misconfigurations.</p> <p>Implementation: <code>.github/workflows/security-scan.yml</code> and <code>.zap/rules.tsv</code></p>"},{"location":"archive/security-compliance-architecture/#static-code-analysis-with-sonarqube","title":"Static Code Analysis with SonarQube","text":"<p>SonarQube is used to perform static code analysis, identifying code quality issues, bugs, and security vulnerabilities.</p> <p>Implementation: <code>.github/workflows/security-scan.yml</code></p>"},{"location":"archive/security-compliance-architecture/#secret-scanning-with-trufflehog","title":"Secret Scanning with TruffleHog","text":"<p>TruffleHog is used to scan the codebase for secrets and credentials that might have been accidentally committed.</p> <p>Implementation: <code>.github/workflows/security-scan.yml</code></p>"},{"location":"archive/security-compliance-architecture/#secrets-management","title":"Secrets Management","text":"<p>Secrets management is implemented using HashiCorp Vault, providing a centralized solution for storing, accessing, and distributing secrets.</p>"},{"location":"archive/security-compliance-architecture/#vault-infrastructure","title":"Vault Infrastructure","text":"<p>The Vault infrastructure is deployed on AWS using Terraform, with the following components:</p> <ul> <li>Vault cluster with high availability</li> <li>Auto-unseal using AWS KMS</li> <li>TLS encryption for all communications</li> <li>IAM roles and policies for secure access</li> <li>Backup and monitoring</li> </ul> <p>Implementation: <code>infrastructure/terraform/modules/vault/</code></p>"},{"location":"archive/security-compliance-architecture/#kubernetes-integration","title":"Kubernetes Integration","text":"<p>Vault is integrated with Kubernetes using the Vault Agent Injector, which injects secrets into pods at runtime.</p> <p>Implementation: <code>infrastructure/kubernetes/vault-integration.yaml</code></p>"},{"location":"archive/security-compliance-architecture/#secret-rotation","title":"Secret Rotation","text":"<p>Secrets are automatically rotated based on defined policies, ensuring that credentials are regularly updated.</p> <p>Implementation: Database credentials are dynamically generated with short TTLs.</p>"},{"location":"archive/security-compliance-architecture/#compliance-automation","title":"Compliance Automation","text":"<p>Compliance automation is implemented using Open Policy Agent (OPA) and Kyverno, providing policy-based control over the Kubernetes cluster.</p>"},{"location":"archive/security-compliance-architecture/#open-policy-agent-opa","title":"Open Policy Agent (OPA)","text":"<p>OPA is used to define and enforce policies for security, compliance, and operational best practices.</p> <p>Implementation: <code>infrastructure/kubernetes/policies/opa/</code> and <code>infrastructure/kubernetes/opa-gatekeeper.yaml</code></p>"},{"location":"archive/security-compliance-architecture/#kyverno","title":"Kyverno","text":"<p>Kyverno is used to enforce policies at the Kubernetes admission controller level, ensuring that all resources created in the cluster comply with defined policies.</p> <p>Implementation: <code>infrastructure/kubernetes/kyverno-policies.yaml</code> and <code>infrastructure/kubernetes/kyverno-deployment.yaml</code></p>"},{"location":"archive/security-compliance-architecture/#compliance-policies","title":"Compliance Policies","text":"<p>The following compliance policies are implemented:</p> <ul> <li>GDPR Compliance: Policies ensuring proper handling of personal data, including data protection, retention, and subject rights.</li> <li> <p>Implementation: <code>infrastructure/kubernetes/policies/opa/gdpr.rego</code></p> </li> <li> <p>CAN-SPAM Compliance: Policies ensuring compliance with email marketing regulations, including unsubscribe mechanisms and physical address inclusion.</p> </li> <li> <p>Implementation: <code>infrastructure/kubernetes/policies/opa/can-spam.rego</code></p> </li> <li> <p>Security Best Practices: Policies enforcing security best practices, such as running containers as non-root, using resource limits, and disallowing privileged containers.</p> </li> <li>Implementation: <code>infrastructure/kubernetes/policies/opa/security.rego</code></li> </ul>"},{"location":"archive/security-compliance-architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>Authentication and authorization are implemented using a combination of tools and techniques:</p>"},{"location":"archive/security-compliance-architecture/#authentication","title":"Authentication","text":"<ul> <li>JWT-based Authentication: JSON Web Tokens (JWT) are used for authenticating API requests.</li> <li>Multi-Factor Authentication (MFA): MFA is required for admin accounts.</li> </ul>"},{"location":"archive/security-compliance-architecture/#authorization","title":"Authorization","text":"<ul> <li>Role-Based Access Control (RBAC): RBAC is implemented for all API endpoints, ensuring that users can only access resources they are authorized to.</li> <li>Fine-Grained Authorization: OPA is used for fine-grained authorization decisions.</li> </ul>"},{"location":"archive/security-compliance-architecture/#implementation-details","title":"Implementation Details","text":""},{"location":"archive/security-compliance-architecture/#security-scanning-pipeline_1","title":"Security Scanning Pipeline","text":"<p>The security scanning pipeline is implemented as a GitHub Actions workflow that runs on every pull request and push to the main branch. The workflow includes the following steps:</p> <ol> <li>Trivy Container Scanning: Scans container images for vulnerabilities.</li> <li>Snyk Dependency Scanning: Scans application dependencies for vulnerabilities.</li> <li>SonarQube Static Code Analysis: Performs static code analysis.</li> <li>OWASP ZAP API Scanning: Performs security testing on API endpoints.</li> <li>CodeQL Analysis: Performs advanced static analysis.</li> <li>TruffleHog Secret Scanning: Scans for secrets in the codebase.</li> <li>Dependency Review: Reviews dependencies for security issues.</li> </ol>"},{"location":"archive/security-compliance-architecture/#secrets-management_1","title":"Secrets Management","text":"<p>The secrets management solution is implemented using HashiCorp Vault, with the following components:</p> <ol> <li>Vault Cluster: A highly available Vault cluster deployed on AWS EC2 instances.</li> <li>Auto-Unseal: Vault is configured to use AWS KMS for auto-unseal.</li> <li>Vault Agent Injector: The Vault Agent Injector is used to inject secrets into Kubernetes pods.</li> <li>Dynamic Secrets: Database credentials are dynamically generated with short TTLs.</li> <li>Secret Engines: The KV v2 and Database secret engines are enabled.</li> <li>Policies: Policies are defined to control access to secrets.</li> </ol>"},{"location":"archive/security-compliance-architecture/#compliance-automation_1","title":"Compliance Automation","text":"<p>Compliance automation is implemented using OPA Gatekeeper and Kyverno, with the following components:</p> <ol> <li>OPA Gatekeeper: Deployed as a validating webhook in the Kubernetes cluster.</li> <li>Kyverno: Deployed as a validating and mutating webhook in the Kubernetes cluster.</li> <li>Policies: Policies are defined for security, GDPR compliance, and CAN-SPAM compliance.</li> <li>Policy Enforcement: Policies are enforced at the Kubernetes admission controller level.</li> <li>Policy Reporting: Policy violations are reported and can be monitored.</li> </ol>"},{"location":"archive/security-compliance-architecture/#best-practices","title":"Best Practices","text":"<p>The following best practices are implemented:</p>"},{"location":"archive/security-compliance-architecture/#security","title":"Security","text":"<ul> <li>Defense in Depth: Multiple layers of security controls are implemented.</li> <li>Least Privilege: Services run with the minimum required privileges.</li> <li>Secure by Default: Security controls are enabled by default.</li> <li>Regular Updates: Dependencies and container images are regularly updated.</li> <li>Vulnerability Management: Vulnerabilities are identified and remediated.</li> </ul>"},{"location":"archive/security-compliance-architecture/#compliance","title":"Compliance","text":"<ul> <li>Privacy by Design: Privacy controls are built into the system from the ground up.</li> <li>Data Minimization: Only necessary data is collected and processed.</li> <li>Transparency: Clear documentation of data processing activities.</li> <li>User Rights: Mechanisms for users to exercise their rights.</li> <li>Regular Audits: Regular compliance audits are performed.</li> </ul>"},{"location":"archive/security-compliance-architecture/#operations","title":"Operations","text":"<ul> <li>Automation: Security and compliance controls are automated.</li> <li>Monitoring: Comprehensive monitoring of security and compliance.</li> <li>Incident Response: Clear procedures for responding to security incidents.</li> <li>Continuous Improvement: Regular review and improvement of security and compliance controls.</li> </ul>"},{"location":"archive/security-compliance-implementation/","title":"Security &amp; Compliance Implementation","text":"<p>This document outlines the production-grade implementation of the security and compliance enhancements for Maily, as specified in the enhancement plan.</p>"},{"location":"archive/security-compliance-implementation/#1-security-scanning-pipeline","title":"1. Security Scanning Pipeline","text":"<p>The security scanning pipeline is already well-implemented with multiple workflows:</p> <ul> <li>Trivy for container scanning</li> <li>Snyk for dependency scanning</li> <li>OWASP ZAP for API security testing</li> <li>SonarQube for static code analysis</li> </ul> <p>These tools are configured in GitHub Actions workflows: - <code>security-scan-pipeline.yml</code> - <code>security-scan.yml</code> - <code>security.yml</code></p> <p>The workflows run on pull requests, pushes to main, and on a scheduled basis to ensure continuous security monitoring.</p>"},{"location":"archive/security-compliance-implementation/#2-secrets-management-with-hashicorp-vault","title":"2. Secrets Management with HashiCorp Vault","text":"<p>We've implemented HashiCorp Vault for secure secrets management:</p>"},{"location":"archive/security-compliance-implementation/#21-vault-infrastructure-aws","title":"2.1 Vault Infrastructure (AWS)","text":"<p>A Terraform module has been created in <code>infrastructure/terraform/modules/vault/</code> to deploy Vault in AWS with:</p> <ul> <li>KMS-based auto-unseal</li> <li>IAM roles and policies</li> <li>Security groups</li> <li>Route53 DNS configuration</li> </ul>"},{"location":"archive/security-compliance-implementation/#22-vault-kubernetes-integration","title":"2.2 Vault Kubernetes Integration","text":"<p>Kubernetes manifests have been created for:</p> <ul> <li>Vault Agent Injector (<code>infrastructure/kubernetes/vault-agent-injector.yaml</code>): Injects secrets into pods</li> <li>Vault Kubernetes Integration (<code>infrastructure/kubernetes/vault-kubernetes.yaml</code>): Configures Vault for Kubernetes authentication</li> </ul>"},{"location":"archive/security-compliance-implementation/#23-secret-storage","title":"2.3 Secret Storage","text":"<p>Secrets are now stored in Vault instead of Kubernetes secrets, with:</p> <ul> <li>KV v2 secrets engine for storing application secrets</li> <li>Transit secrets engine for encryption as a service</li> <li>Kubernetes authentication for secure pod access to secrets</li> </ul>"},{"location":"archive/security-compliance-implementation/#3-compliance-automation","title":"3. Compliance Automation","text":"<p>We've implemented compliance automation using Open Policy Agent (OPA) and Kyverno:</p>"},{"location":"archive/security-compliance-implementation/#31-open-policy-agent-opa","title":"3.1 Open Policy Agent (OPA)","text":"<p>OPA is deployed with policies for:</p> <ul> <li>GDPR compliance: Data classification, non-root containers</li> <li>CCPA compliance: SSL for LoadBalancer services</li> <li>CAN-SPAM compliance: Unsubscribe links in email templates</li> <li>Security policies: Read-only root filesystem, no privileged containers</li> </ul> <p>The OPA deployment is configured in <code>infrastructure/kubernetes/opa-deployment.yaml</code>.</p>"},{"location":"archive/security-compliance-implementation/#32-kyverno","title":"3.2 Kyverno","text":"<p>Kyverno is deployed with policies for:</p> <ul> <li>Required labels for resources</li> <li>Restricted image registries</li> <li>Disallowing privileged containers</li> <li>Required pod probes</li> <li>GDPR data protection</li> <li>CCPA encryption requirements</li> <li>CAN-SPAM email requirements</li> <li>Automated compliance reporting</li> </ul> <p>The Kyverno deployment is configured in <code>infrastructure/kubernetes/kyverno-deployment.yaml</code>.</p>"},{"location":"archive/security-compliance-implementation/#4-authentication-authorization-with-auth0","title":"4. Authentication &amp; Authorization with Auth0","text":"<p>We've implemented Auth0 for enhanced authentication and authorization:</p>"},{"location":"archive/security-compliance-implementation/#41-auth0-configuration","title":"4.1 Auth0 Configuration","text":"<p>The Auth0 configuration is in <code>apps/api/config/auth0.py</code> and includes:</p> <ul> <li>JWT validation</li> <li>Role-based access control (RBAC)</li> <li>Permission-based access control</li> <li>User metadata management</li> </ul>"},{"location":"archive/security-compliance-implementation/#42-auth0-api-integration","title":"4.2 Auth0 API Integration","text":"<p>The Auth0 API integration is in <code>apps/api/routers/auth.py</code> and includes endpoints for:</p> <ul> <li>User profile</li> <li>User management</li> <li>Role and permission checking</li> </ul>"},{"location":"archive/security-compliance-implementation/#43-environment-configuration","title":"4.3 Environment Configuration","text":"<p>Auth0 environment variables have been added to <code>.env.example</code>:</p> <pre><code># Auth0 Configuration\nAUTH0_DOMAIN=maily.us.auth0.com\nAUTH0_API_AUDIENCE=https://api.maily.com\nAUTH0_MGMT_CLIENT_ID=your_auth0_management_client_id\nAUTH0_MGMT_CLIENT_SECRET=your_auth0_management_client_secret\n</code></pre>"},{"location":"archive/security-compliance-implementation/#next-steps","title":"Next Steps","text":"<p>With the security and compliance foundation in place, the next steps are to implement:</p> <ol> <li>Sprint 2: Infrastructure &amp; Scalability</li> <li>Multi-region deployment</li> <li>Edge computing capabilities</li> <li>Database optimization</li> <li> <p>Enhanced caching strategy</p> </li> <li> <p>Sprint 3: AI &amp; ML Enhancement</p> </li> <li>Model versioning &amp; registry</li> <li>AI observability</li> <li>Advanced AI features</li> <li> <p>AI cost management</p> </li> <li> <p>Sprint 4: Developer Experience &amp; Testing</p> </li> <li>Migration to Next.js App Router</li> <li>Enhanced testing coverage</li> <li>Improved CI/CD pipeline</li> <li> <p>Enhanced documentation</p> </li> <li> <p>Sprint 5: Monitoring &amp; Observability</p> </li> <li>Distributed tracing</li> <li>Enhanced metrics collection</li> <li>Alerting strategy</li> <li> <p>Log management</p> </li> <li> <p>Sprint 6: User Experience &amp; Accessibility</p> </li> <li>Enhanced accessibility</li> <li>Internationalization</li> <li>Mobile experience optimization</li> <li>Performance enhancements</li> </ol>"},{"location":"archive/sprint3-implementation-summary/","title":"Sprint 3 Implementation Summary: AI &amp; ML Enhancement","text":"<p>Last updated: March 4, 2025</p>"},{"location":"archive/sprint3-implementation-summary/#overview","title":"Overview","text":"<p>Sprint 3 focused on enhancing Maily's AI &amp; ML capabilities to provide more intelligent, efficient, and cost-effective email marketing features. This sprint delivered comprehensive improvements to the AI infrastructure, observability, model management, and advanced AI features.</p>"},{"location":"archive/sprint3-implementation-summary/#implementation-status","title":"Implementation Status","text":"<p>All planned Sprint 3 tasks have been successfully implemented and are now in production.</p>"},{"location":"archive/sprint3-implementation-summary/#key-deliverables","title":"Key Deliverables","text":""},{"location":"archive/sprint3-implementation-summary/#1-model-versioning-registry","title":"1. Model Versioning &amp; Registry","text":""},{"location":"archive/sprint3-implementation-summary/#11-weights-biases-integration","title":"1.1 Weights &amp; Biases Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/wandb_integration.py</code></li> <li>Features:</li> <li>Experiment tracking for model performance</li> <li>Model registry for versioning</li> <li>Performance monitoring dashboard</li> <li>Collaborative model management</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#12-dvc-integration","title":"1.2 DVC Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/dvc_integration.py</code></li> <li>Features:</li> <li>Model versioning</li> <li>Data versioning</li> <li>Pipeline tracking</li> <li>Remote storage integration</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#2-ai-observability","title":"2. AI Observability","text":""},{"location":"archive/sprint3-implementation-summary/#21-langfuse-integration","title":"2.1 Langfuse Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Built into the enhanced AI service</li> <li>Features:</li> <li>LLM tracing</li> <li>Prompt management</li> <li>Performance monitoring</li> <li>Cost tracking</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#22-arize-ai-integration","title":"2.2 Arize AI Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/arize_integration.py</code></li> <li>Features:</li> <li>ML observability</li> <li>Model performance monitoring</li> <li>Data drift detection</li> <li>Explainability tools</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#3-advanced-ai-features","title":"3. Advanced AI Features","text":""},{"location":"archive/sprint3-implementation-summary/#31-enhanced-anthropic-claude-3-integration","title":"3.1 Enhanced Anthropic Claude 3 Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/anthropic_integration.py</code></li> <li>Features:</li> <li>Advanced reasoning capabilities</li> <li>Email campaign analysis</li> <li>Email variation generation</li> <li>Personalized content generation</li> <li>Campaign performance analysis</li> <li>Subject line generation</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#32-stability-ai-integration","title":"3.2 Stability AI Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/stability_integration.py</code></li> <li>Features:</li> <li>Image generation for email content</li> <li>Email banner generation</li> <li>Product image generation</li> <li>Social media image generation</li> <li>Image resizing</li> <li>Image variation generation</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#4-ai-cost-management","title":"4. AI Cost Management","text":""},{"location":"archive/sprint3-implementation-summary/#41-helicone-integration","title":"4.1 Helicone Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/helicone_integration.py</code></li> <li>Features:</li> <li>API cost tracking</li> <li>Request metrics</li> <li>Cache metrics</li> <li>User metrics</li> <li>Model metrics</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#42-litellm-integration","title":"4.2 LiteLLM Integration","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/litellm_integration.py</code></li> <li>Features:</li> <li>Model routing</li> <li>Fallback mechanisms</li> <li>Cost optimization</li> <li>Token counting</li> <li>Cost estimation</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#5-api-endpoints","title":"5. API Endpoints","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/api.py</code></li> <li>Features:</li> <li>Engagement prediction</li> <li>Subject line optimization</li> <li>A/B testing</li> <li>Model training</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#6-integration-with-existing-services","title":"6. Integration with Existing Services","text":"<ul> <li>Status: \u2705 Completed</li> <li>Implementation: Implemented in <code>apps/api/ai/service_integration.py</code></li> <li>Features:</li> <li>Enhanced email campaign creation</li> <li>Advanced campaign analysis</li> <li>Contact discovery</li> <li>Improvement suggestions</li> <li>Subject line generation</li> </ul>"},{"location":"archive/sprint3-implementation-summary/#architecture","title":"Architecture","text":"<p>The AI &amp; ML enhancements follow a modular architecture with clear separation of concerns:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Enhanced AI Service           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Model Router   \u2502    AI Orchestrator    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  AI Tools       \u2502   Observability       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                 \u25b2\n          \u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Model Adapters             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Anthropic\u2502 OpenAI  \u2502  Google  \u2502 Stability\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                 \u25b2\n          \u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Observability &amp; Metrics         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Langfuse\u2502 Arize AI\u2502 Weights &amp; \u2502 Helicone \u2502\n\u2502         \u2502         \u2502   Biases  \u2502         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"archive/sprint3-implementation-summary/#implementation-details","title":"Implementation Details","text":""},{"location":"archive/sprint3-implementation-summary/#ai-service-architecture","title":"AI Service Architecture","text":"<p>The AI service architecture has been completely redesigned, moving from a basic package-based approach to a more sophisticated service-based architecture:</p> <ol> <li>Original Package (Deprecated):</li> <li>Location: <code>packages/ai</code></li> <li>Status: Deprecated but maintained for backward compatibility</li> <li> <p>Note: New features should use the enhanced AI service</p> </li> <li> <p>Enhanced AI Service:</p> </li> <li>Location: <code>apps/api/ai</code></li> <li>Primary components:<ul> <li>Service integration layer</li> <li>Model adapters</li> <li>AI tools</li> <li>Observability integrations</li> </ul> </li> </ol>"},{"location":"archive/sprint3-implementation-summary/#model-integration","title":"Model Integration","text":"<p>The sprint implemented advanced model integration with multiple providers:</p> <ol> <li>Anthropic Claude 3:</li> <li>Implemented dedicated adapter for Claude 3 Opus, Sonnet, and Haiku models</li> <li>Optimized for deep reasoning tasks</li> <li> <p>Configured with appropriate context windows</p> </li> <li> <p>LiteLLM Router:</p> </li> <li>Implemented cost-effective model routing</li> <li>Configured fallback chains</li> <li> <p>Set up model aliases for different use cases</p> </li> <li> <p>Stability AI:</p> </li> <li>Implemented image generation capabilities</li> <li>Configured for email-specific image generation</li> <li>Optimized for email template compatibility</li> </ol>"},{"location":"archive/sprint3-implementation-summary/#ai-tools","title":"AI Tools","text":"<p>The sprint delivered a comprehensive set of AI tools:</p> <ol> <li>Email Content Tool:</li> <li>Analyzes and optimizes email content</li> <li>Suggests improvements for engagement</li> <li> <p>Generates variations for A/B testing</p> </li> <li> <p>Contact Discovery Tool:</p> </li> <li>AI-powered contact discovery</li> <li>Audience segmentation suggestions</li> <li> <p>Personalization recommendations</p> </li> <li> <p>Platform Integration Tool:</p> </li> <li>Connects AI capabilities with the Maily platform</li> <li>Provides unified interface for AI features</li> <li>Ensures consistent AI experience</li> </ol>"},{"location":"archive/sprint3-implementation-summary/#testing-strategy","title":"Testing Strategy","text":"<p>The AI &amp; ML enhancements were tested using a comprehensive approach:</p> <ol> <li>Unit Testing:</li> <li>Individual components tested in isolation</li> <li>Mocked external dependencies</li> <li> <p>Focused on code correctness</p> </li> <li> <p>Integration Testing:</p> </li> <li>End-to-end testing of AI workflows</li> <li>Real API interactions with sandbox environments</li> <li> <p>Performance and reliability testing</p> </li> <li> <p>A/B Testing:</p> </li> <li>Comparison of AI-generated content with human-generated content</li> <li>Measurement of engagement metrics</li> <li>User feedback collection</li> </ol>"},{"location":"archive/sprint3-implementation-summary/#deployment-strategy","title":"Deployment Strategy","text":"<p>The AI &amp; ML enhancements were deployed using a phased approach:</p> <ol> <li>Phase 1: Infrastructure Setup</li> <li>Deployment of observability tools</li> <li>Configuration of model registry</li> <li> <p>Setup of cost tracking</p> </li> <li> <p>Phase 2: Core Services</p> </li> <li>Deployment of model adapters</li> <li>Implementation of AI service</li> <li> <p>Integration with existing services</p> </li> <li> <p>Phase 3: Advanced Features</p> </li> <li>Rollout of advanced AI features</li> <li>User interface integration</li> <li>Performance optimization</li> </ol>"},{"location":"archive/sprint3-implementation-summary/#conclusion","title":"Conclusion","text":"<p>Sprint 3 successfully delivered comprehensive AI &amp; ML enhancements to the Maily platform, providing users with advanced capabilities for email marketing. The implementation follows best practices for production AI systems, including observability, model management, and cost optimization.</p> <p>The enhanced AI service architecture provides a solid foundation for future AI capabilities, with clear separation of concerns and modular design. The integration with existing services ensures a seamless user experience, while the observability and cost management features provide operational excellence.</p>"},{"location":"archive/sprint3-implementation-summary/#next-steps","title":"Next Steps","text":"<p>With the successful completion of Sprint 3, the next steps are to implement:</p> <ol> <li>Sprint 4: Developer Experience &amp; Testing</li> <li>Migration to Next.js App Router</li> <li>Enhanced testing coverage</li> <li>Improved CI/CD pipeline</li> <li> <p>Enhanced documentation</p> </li> <li> <p>Sprint 5: Monitoring &amp; Observability</p> </li> <li>Distributed tracing</li> <li>Enhanced metrics collection</li> <li>Alerting strategy</li> <li> <p>Log management</p> </li> <li> <p>Sprint 6: User Experience &amp; Accessibility</p> </li> <li>Enhanced accessibility</li> <li>Internationalization</li> <li>Mobile experience optimization</li> <li>Performance enhancements</li> </ol>"},{"location":"archive/sprint3-implementation-summary/#references","title":"References","text":"<ul> <li>AI &amp; ML Implementation</li> <li>AI &amp; ML Usage Guide</li> <li>AI &amp; ML README</li> <li>AI Capabilities Summary</li> <li>AI Integration</li> </ul>"},{"location":"archive/sprint4-implementation-summary/","title":"Sprint 4: Developer Experience &amp; Testing Implementation Summary","text":"<p>This document provides a summary of the implementation for Sprint 4, focusing on Developer Experience &amp; Testing enhancements.</p>"},{"location":"archive/sprint4-implementation-summary/#1-migration-to-nextjs-app-router","title":"1. Migration to Next.js App Router","text":""},{"location":"archive/sprint4-implementation-summary/#11-templates-pages-migration","title":"1.1 Templates Pages Migration","text":"<p>We've successfully migrated the templates pages from the Pages Router to the App Router structure:</p> <ul> <li>\u2705 <code>pages/templates/index.tsx</code> \u2192 <code>app/templates/page.tsx</code></li> <li>\u2705 <code>pages/templates/[id].tsx</code> \u2192 <code>app/templates/[id]/page.tsx</code></li> <li>\u2705 <code>pages/templates/view/[id].tsx</code> \u2192 <code>app/templates/view/[id]/page.tsx</code></li> </ul>"},{"location":"archive/sprint4-implementation-summary/#12-api-routes-migration","title":"1.2 API Routes Migration","text":"<p>We've implemented the API routes using the App Router structure:</p> <ul> <li>\u2705 <code>pages/api/templates/index.ts</code> \u2192 <code>app/api/templates/route.ts</code></li> <li>\u2705 <code>pages/api/templates/[id].ts</code> \u2192 <code>app/api/templates/[id]/route.ts</code></li> <li>\u2705 <code>pages/api/templates/[id]/duplicate.ts</code> \u2192 <code>app/api/templates/[id]/duplicate/route.ts</code></li> </ul>"},{"location":"archive/sprint4-implementation-summary/#13-migration-tools","title":"1.3 Migration Tools","text":"<p>We've created a migration script to help track progress and identify pages that need to be migrated:</p> <ul> <li>\u2705 <code>scripts/migrate-to-app-router.js</code></li> </ul> <p>The script provides a detailed report of the migration status, including: - Total pages to migrate - Migrated pages - Pending pages - Migration progress percentage</p>"},{"location":"archive/sprint4-implementation-summary/#14-migration-documentation","title":"1.4 Migration Documentation","text":"<p>We've created a comprehensive migration guide to help developers understand the migration process:</p> <ul> <li>\u2705 <code>docs/app-router-migration-guide.md</code></li> </ul> <p>The guide includes: - Overview of the App Router - Directory structure differences - Step-by-step migration process - Common issues and solutions - Resources for further learning</p>"},{"location":"archive/sprint4-implementation-summary/#15-current-migration-status","title":"1.5 Current Migration Status","text":"<p>Current migration progress: 50%</p> <ul> <li>\u2705 Templates pages migrated</li> <li>\u2705 Templates API routes migrated</li> <li>\u274c Other pages pending migration</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#2-enhanced-testing-coverage","title":"2. Enhanced Testing Coverage","text":"<p>We've implemented a comprehensive testing strategy using modern tools:</p>"},{"location":"archive/sprint4-implementation-summary/#21-vitest-for-unit-and-integration-testing","title":"2.1 Vitest for Unit and Integration Testing","text":"<ul> <li>\u2705 Set up Vitest configuration with <code>vitest.config.ts</code></li> <li>\u2705 Created test setup file with <code>vitest.setup.ts</code></li> <li>\u2705 Implemented unit tests for UI components</li> <li>\u2705 Implemented integration tests for API routes</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#22-playwright-for-end-to-end-testing","title":"2.2 Playwright for End-to-End Testing","text":"<ul> <li>\u2705 Set up Playwright configuration with <code>playwright.config.ts</code></li> <li>\u2705 Created end-to-end tests for the templates page</li> <li>\u2705 Configured multiple browser profiles for cross-browser testing</li> <li>\u2705 Added mobile device testing configurations</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#3-improved-cicd-pipeline","title":"3. Improved CI/CD Pipeline","text":"<p>We've enhanced the CI/CD pipeline to automate testing and deployment:</p>"},{"location":"archive/sprint4-implementation-summary/#31-github-actions","title":"3.1 GitHub Actions","text":"<ul> <li>\u2705 Created GitHub Actions workflow for CI/CD in <code>.github/workflows/ci-cd.yml</code></li> <li>\u2705 Configured automated testing for pull requests</li> <li>\u2705 Set up build and deployment pipelines for staging and production</li> <li>\u2705 Added artifact storage for test results and build outputs</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#32-argocd-for-gitops","title":"3.2 ArgoCD for GitOps","text":"<ul> <li>\u2705 Created ArgoCD application manifest in <code>infrastructure/kubernetes/argocd/maily-app.yaml</code></li> <li>\u2705 Set up Kubernetes deployment manifests in <code>infrastructure/kubernetes/manifests/</code></li> <li>\u2705 Configured automated deployment to staging and production environments</li> <li>\u2705 Implemented health checks for Kubernetes probes</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#4-enhanced-documentation","title":"4. Enhanced Documentation","text":"<p>We've improved the documentation to make it easier for developers to understand and work with the codebase:</p>"},{"location":"archive/sprint4-implementation-summary/#41-api-documentation","title":"4.1 API Documentation","text":"<ul> <li>\u2705 Created OpenAPI/Swagger documentation in <code>docs/api/swagger.yaml</code></li> <li>\u2705 Documented all API endpoints, request parameters, and response schemas</li> <li>\u2705 Added examples for all API operations</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#42-migration-guide","title":"4.2 Migration Guide","text":"<ul> <li>\u2705 Updated the App Router migration guide with detailed instructions</li> <li>\u2705 Fixed the migration script to correctly identify migrated API routes</li> <li>\u2705 Added examples and best practices for migrating different types of components</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#5-next-steps","title":"5. Next Steps","text":"<p>To complete the implementation of Sprint 4, the following tasks need to be addressed:</p>"},{"location":"archive/sprint4-implementation-summary/#51-complete-app-router-migration","title":"5.1 Complete App Router Migration","text":"<ul> <li>Continue migrating the remaining pages to the App Router structure</li> <li>Update shared components to work with both Pages Router and App Router during the transition</li> <li>Implement middleware for authentication and authorization</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#52-docusaurus-documentation-site","title":"5.2 Docusaurus Documentation Site","text":"<ul> <li>Set up Docusaurus for comprehensive developer documentation</li> <li>Migrate existing documentation to the new format</li> <li>Add interactive examples and tutorials</li> </ul>"},{"location":"archive/sprint4-implementation-summary/#3-conclusion","title":"3. Conclusion","text":"<p>The migration to the App Router is progressing well, with 50% of the pages already migrated. The templates section is fully migrated, providing a good example for the rest of the application. The migration script and documentation will help developers continue the migration process efficiently.</p> <p>The next steps will focus on completing the migration, enhancing testing coverage, improving the CI/CD pipeline, and enhancing documentation to achieve the goals of Sprint 4.</p>"},{"location":"archive/sprint5-implementation-summary/","title":"Sprint 5 Implementation Summary","text":"<p>This document summarizes the implementation work completed during Sprint 5, focusing on monitoring and observability enhancements for the Maily platform.</p>"},{"location":"archive/sprint5-implementation-summary/#overview","title":"Overview","text":"<p>Sprint 5 focused on implementing comprehensive monitoring and observability features to improve system reliability, performance tracking, and incident response. The implementation follows the three pillars of observability: logs, metrics, and traces.</p>"},{"location":"archive/sprint5-implementation-summary/#key-deliverables","title":"Key Deliverables","text":"<ol> <li>Distributed Tracing: Implemented OpenTelemetry-based distributed tracing</li> <li>Structured Logging: Enhanced logging with structured formats and context enrichment</li> <li>Metrics Collection: Expanded Prometheus metrics collection and visualization</li> <li>Alerting System: Implemented comprehensive alerting with PagerDuty integration</li> <li>On-Call Rotation: Set up on-call schedules and escalation policies</li> <li>Dashboards: Created Grafana dashboards for monitoring system health and performance</li> </ol>"},{"location":"archive/sprint5-implementation-summary/#implementation-details","title":"Implementation Details","text":""},{"location":"archive/sprint5-implementation-summary/#distributed-tracing","title":"Distributed Tracing","text":"<ul> <li>Implemented OpenTelemetry tracing in the API service</li> <li>Set up OpenTelemetry Collector for trace collection and processing</li> <li>Configured Tempo for trace storage and querying</li> <li>Created Grafana dashboards for trace visualization</li> <li>Implemented trace context propagation across service boundaries</li> </ul> <p>Key Files: - <code>apps/api/monitoring/tracing.py</code>: OpenTelemetry tracing implementation - <code>infrastructure/kubernetes/monitoring/opentelemetry-collector.yaml</code>: OpenTelemetry Collector configuration - <code>infrastructure/kubernetes/monitoring/tempo.yaml</code>: Tempo configuration</p>"},{"location":"archive/sprint5-implementation-summary/#structured-logging","title":"Structured Logging","text":"<ul> <li>Implemented structured logging with JSON formatting</li> <li>Added context enrichment for logs (request ID, user info, etc.)</li> <li>Set up log correlation with traces</li> <li>Configured Loki for log aggregation and querying</li> <li>Created Grafana dashboards for log visualization</li> </ul> <p>Key Files: - <code>apps/api/monitoring/logging.py</code>: Structured logging implementation - <code>apps/api/main.py</code>: Integration of structured logging</p>"},{"location":"archive/sprint5-implementation-summary/#metrics-collection","title":"Metrics Collection","text":"<ul> <li>Expanded Prometheus metrics collection</li> <li>Added custom metrics for business processes</li> <li>Configured Prometheus Operator for Kubernetes-native deployment</li> <li>Created Grafana dashboards for metrics visualization</li> </ul> <p>Key Files: - <code>apps/api/monitoring/metrics.py</code>: Custom metrics implementation - <code>infrastructure/kubernetes/monitoring/prometheus.yaml</code>: Prometheus configuration</p>"},{"location":"archive/sprint5-implementation-summary/#alerting-system","title":"Alerting System","text":"<ul> <li>Implemented Prometheus Alertmanager for alert routing and notification</li> <li>Set up PagerDuty integration for incident management</li> <li>Configured Slack notifications for team alerts</li> <li>Defined alert rules for various system components</li> </ul> <p>Key Files: - <code>infrastructure/kubernetes/monitoring/alertmanager-config.yaml</code>: Alertmanager configuration - <code>infrastructure/kubernetes/monitoring/pagerduty-integration.yaml</code>: PagerDuty integration</p>"},{"location":"archive/sprint5-implementation-summary/#on-call-rotation","title":"On-Call Rotation","text":"<ul> <li>Set up PagerDuty schedules for on-call rotation</li> <li>Defined escalation policies for different services</li> <li>Configured notification preferences for on-call engineers</li> </ul> <p>Key Files: - <code>infrastructure/kubernetes/monitoring/pagerduty-integration.yaml</code>: PagerDuty schedules and escalation policies</p>"},{"location":"archive/sprint5-implementation-summary/#dashboards","title":"Dashboards","text":"<ul> <li>Created Grafana dashboards for system monitoring</li> <li>Implemented service-level indicator (SLI) dashboards</li> <li>Set up business metrics dashboards</li> <li>Created alert overview dashboards</li> </ul> <p>Key Files: - <code>infrastructure/kubernetes/monitoring/grafana-dashboards.yaml</code>: Grafana dashboard definitions</p>"},{"location":"archive/sprint5-implementation-summary/#technical-architecture","title":"Technical Architecture","text":"<p>The monitoring and observability architecture consists of the following components:</p> <ol> <li>Data Collection:</li> <li>OpenTelemetry SDK for trace generation</li> <li>Loguru for structured logging</li> <li> <p>Prometheus client for metrics exposition</p> </li> <li> <p>Data Processing:</p> </li> <li>OpenTelemetry Collector for trace processing</li> <li>Fluentd for log processing</li> <li> <p>Prometheus for metrics scraping and storage</p> </li> <li> <p>Data Storage:</p> </li> <li>Tempo for trace storage</li> <li>Loki for log storage</li> <li> <p>Prometheus for metrics storage</p> </li> <li> <p>Visualization and Alerting:</p> </li> <li>Grafana for visualization of logs, metrics, and traces</li> <li>Prometheus Alertmanager for alert routing</li> <li>PagerDuty for incident management</li> </ol>"},{"location":"archive/sprint5-implementation-summary/#integration-points","title":"Integration Points","text":"<p>The monitoring and observability features integrate with the following system components:</p> <ol> <li>API Service:</li> <li>Trace generation for HTTP requests</li> <li>Structured logging for application events</li> <li> <p>Metrics exposition for performance monitoring</p> </li> <li> <p>Database:</p> </li> <li>Trace instrumentation for database queries</li> <li> <p>Performance metrics collection</p> </li> <li> <p>Redis Cache:</p> </li> <li>Trace instrumentation for cache operations</li> <li> <p>Cache performance metrics</p> </li> <li> <p>External Services:</p> </li> <li>Trace context propagation to external services</li> <li>Metrics collection for external service calls</li> </ol>"},{"location":"archive/sprint5-implementation-summary/#performance-considerations","title":"Performance Considerations","text":"<p>The monitoring and observability implementation is designed to have minimal impact on system performance:</p> <ol> <li>Sampling: Trace sampling is configured to balance data collection with performance</li> <li>Batching: Spans and logs are batched before transmission to reduce network overhead</li> <li>Compression: Data is compressed during transmission to reduce bandwidth usage</li> <li>Resource Limits: Resource limits are set for monitoring components to prevent resource contention</li> </ol>"},{"location":"archive/sprint5-implementation-summary/#security-considerations","title":"Security Considerations","text":"<p>Security measures implemented in the monitoring and observability system:</p> <ol> <li>Data Sanitization: Sensitive data is redacted from logs and traces</li> <li>Access Control: RBAC is implemented for access to monitoring dashboards</li> <li>Encryption: Data is encrypted in transit between monitoring components</li> <li>Authentication: Authentication is required for access to monitoring interfaces</li> </ol>"},{"location":"archive/sprint5-implementation-summary/#future-enhancements","title":"Future Enhancements","text":"<p>Planned future enhancements for the monitoring and observability system:</p> <ol> <li>Automated Remediation: Implement automated remediation for common issues</li> <li>Anomaly Detection: Add machine learning-based anomaly detection</li> <li>SLO Monitoring: Implement service level objective (SLO) monitoring</li> <li>Capacity Planning: Add capacity planning based on historical metrics</li> <li>Cost Attribution: Implement cost attribution for resource usage</li> </ol>"},{"location":"archive/sprint5-implementation-summary/#conclusion","title":"Conclusion","text":"<p>The monitoring and observability enhancements implemented in Sprint 5 provide a solid foundation for system reliability and performance monitoring. The implementation follows industry best practices and integrates with existing system components to provide comprehensive visibility into system behavior.</p>"},{"location":"archive/sprint5-implementation-summary/#references","title":"References","text":"<ul> <li>OpenTelemetry Documentation</li> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>PagerDuty Documentation</li> <li>Monitoring and Observability Implementation Guide</li> </ul>"},{"location":"archive/sprint6-implementation-plan/","title":"Sprint 6 Implementation Plan: User Experience &amp; Accessibility","text":"<p>This document outlines the implementation plan for Sprint 6, focusing on enhancing the user experience and accessibility of the Maily platform.</p>"},{"location":"archive/sprint6-implementation-plan/#overview","title":"Overview","text":"<p>Sprint 6 will focus on four key areas: 1. Enhancing accessibility 2. Implementing internationalization 3. Optimizing mobile experience 4. Enhancing performance</p>"},{"location":"archive/sprint6-implementation-plan/#current-status","title":"Current Status","text":"<p>Based on the review of the codebase, some initial work has been done on internationalization: - Basic i18n configuration is set up using i18next and react-i18next - A list of supported languages has been defined - A structure for translation files has been established with an initial English translation file</p> <p>However, the following areas still need implementation: - Accessibility features - Complete internationalization - Mobile optimization - Performance enhancements</p>"},{"location":"archive/sprint6-implementation-plan/#implementation-tasks","title":"Implementation Tasks","text":""},{"location":"archive/sprint6-implementation-plan/#1-enhance-accessibility","title":"1. Enhance Accessibility","text":""},{"location":"archive/sprint6-implementation-plan/#task-11-implement-accessibility-testing","title":"Task 1.1: Implement Accessibility Testing","text":"<ul> <li>Tool: Axe for accessibility testing</li> <li>Actions:</li> <li>Install axe-core and related testing libraries</li> <li>Set up automated accessibility testing in CI pipeline</li> <li>Create accessibility test scripts for key user flows</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-12-implement-accessible-components","title":"Task 1.2: Implement Accessible Components","text":"<ul> <li>Tool: React Aria for accessible components</li> <li>Actions:</li> <li>Install React Aria packages</li> <li>Replace existing UI components with accessible alternatives</li> <li>Implement keyboard navigation support</li> <li>Add ARIA attributes to custom components</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-13-implement-wcag-21-aa-compliance","title":"Task 1.3: Implement WCAG 2.1 AA Compliance","text":"<ul> <li>Actions:</li> <li>Audit current application for WCAG 2.1 AA compliance issues</li> <li>Fix color contrast issues</li> <li>Ensure proper heading structure</li> <li>Add skip navigation links</li> <li>Implement focus management</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-14-add-keyboard-navigation-support","title":"Task 1.4: Add Keyboard Navigation Support","text":"<ul> <li>Actions:</li> <li>Implement focus trapping for modals</li> <li>Add keyboard shortcuts for common actions</li> <li>Ensure all interactive elements are keyboard accessible</li> <li>Implement focus indicators</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#2-implement-internationalization","title":"2. Implement Internationalization","text":""},{"location":"archive/sprint6-implementation-plan/#task-21-complete-translation-infrastructure","title":"Task 2.1: Complete Translation Infrastructure","text":"<ul> <li>Tool: next-intl for internationalization</li> <li>Actions:</li> <li>Migrate from i18next to next-intl for better Next.js integration</li> <li>Set up language detection and switching</li> <li>Implement language persistence</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-22-extract-ui-strings","title":"Task 2.2: Extract UI Strings","text":"<ul> <li>Actions:</li> <li>Extract all UI strings from components</li> <li>Create translation files for all supported languages</li> <li>Implement pluralization and formatting for dates, numbers, and currencies</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-23-set-up-translation-management","title":"Task 2.3: Set Up Translation Management","text":"<ul> <li>Tool: Crowdin for translation management</li> <li>Actions:</li> <li>Set up Crowdin project</li> <li>Configure integration with GitHub</li> <li>Upload source strings</li> <li>Set up translation workflow</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-24-implement-rtl-support","title":"Task 2.4: Implement RTL Support","text":"<ul> <li>Actions:</li> <li>Add RTL layout support</li> <li>Test and fix layout issues in RTL languages</li> <li>Implement language-specific styling</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#3-optimize-mobile-experience","title":"3. Optimize Mobile Experience","text":""},{"location":"archive/sprint6-implementation-plan/#task-31-implement-responsive-design","title":"Task 3.1: Implement Responsive Design","text":"<ul> <li>Tool: Tailwind CSS for responsive design</li> <li>Actions:</li> <li>Audit current UI for mobile usability issues</li> <li>Implement responsive layouts for all pages</li> <li>Create mobile-specific components when necessary</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-32-optimize-touch-interactions","title":"Task 3.2: Optimize Touch Interactions","text":"<ul> <li>Actions:</li> <li>Increase touch target sizes</li> <li>Implement touch-friendly controls</li> <li>Add swipe gestures for common actions</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-33-implement-mobile-performance-optimizations","title":"Task 3.3: Implement Mobile Performance Optimizations","text":"<ul> <li>Actions:</li> <li>Optimize image loading for mobile</li> <li>Implement lazy loading for off-screen content</li> <li>Reduce bundle size for mobile devices</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-34-test-on-mobile-devices","title":"Task 3.4: Test on Mobile Devices","text":"<ul> <li>Tool: Lighthouse for performance testing</li> <li>Actions:</li> <li>Set up mobile device testing environment</li> <li>Test on various device sizes and browsers</li> <li>Fix mobile-specific issues</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#4-enhance-performance","title":"4. Enhance Performance","text":""},{"location":"archive/sprint6-implementation-plan/#task-41-implement-performance-monitoring","title":"Task 4.1: Implement Performance Monitoring","text":"<ul> <li>Tool: Next.js Analytics for performance monitoring</li> <li>Actions:</li> <li>Set up Next.js Analytics</li> <li>Configure performance metrics collection</li> <li>Create performance dashboards</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-42-optimize-bundle-size","title":"Task 4.2: Optimize Bundle Size","text":"<ul> <li>Tool: Webpack Bundle Analyzer for bundle optimization</li> <li>Actions:</li> <li>Install and configure Webpack Bundle Analyzer</li> <li>Identify large dependencies</li> <li>Implement code splitting and tree shaking</li> <li>Replace large libraries with smaller alternatives</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-43-implement-code-splitting-and-lazy-loading","title":"Task 4.3: Implement Code Splitting and Lazy Loading","text":"<ul> <li>Actions:</li> <li>Implement dynamic imports for route-based code splitting</li> <li>Add lazy loading for large components</li> <li>Implement prefetching for critical resources</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#task-44-optimize-critical-rendering-path","title":"Task 4.4: Optimize Critical Rendering Path","text":"<ul> <li>Actions:</li> <li>Optimize CSS delivery</li> <li>Defer non-critical JavaScript</li> <li>Implement server components for improved performance</li> <li>Add resource hints (preload, prefetch, preconnect)</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#testing-strategy","title":"Testing Strategy","text":""},{"location":"archive/sprint6-implementation-plan/#accessibility-testing","title":"Accessibility Testing","text":"<ul> <li>Automated testing with axe-core</li> <li>Manual testing with screen readers</li> <li>Keyboard navigation testing</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#internationalization-testing","title":"Internationalization Testing","text":"<ul> <li>Verify translations in all supported languages</li> <li>Test RTL layouts</li> <li>Test language switching and persistence</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#mobile-testing","title":"Mobile Testing","text":"<ul> <li>Test on various device sizes and browsers</li> <li>Test touch interactions</li> <li>Test performance on mobile networks</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#performance-testing","title":"Performance Testing","text":"<ul> <li>Lighthouse performance audits</li> <li>Core Web Vitals monitoring</li> <li>Bundle size monitoring</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#deliverables","title":"Deliverables","text":"<ol> <li>Accessible UI components</li> <li>WCAG 2.1 AA compliance</li> <li>Multi-language support</li> <li>RTL layout support</li> <li>Responsive design for all pages</li> <li>Mobile-optimized UI</li> <li>Optimized bundle size</li> <li>Improved performance metrics</li> </ol>"},{"location":"archive/sprint6-implementation-plan/#timeline","title":"Timeline","text":"<ul> <li>Week 1: Accessibility enhancements</li> <li>Week 2: Internationalization implementation</li> <li>Week 3: Mobile experience optimization</li> <li>Week 4: Performance enhancements</li> </ul>"},{"location":"archive/sprint6-implementation-plan/#success-criteria","title":"Success Criteria","text":"<ol> <li>WCAG 2.1 AA compliance verified by automated and manual testing</li> <li>Support for all specified languages with complete translations</li> <li>Responsive design that works well on all device sizes</li> <li>Performance improvements measured by:</li> <li>20% reduction in bundle size</li> <li>30% improvement in First Contentful Paint</li> <li>25% improvement in Time to Interactive</li> <li>90+ Lighthouse performance score</li> </ol>"},{"location":"archive/sprint6-implementation-summary/","title":"Sprint 6 Implementation Summary","text":"<p>This document summarizes the implementation work completed during Sprint 6, focusing on user experience and accessibility enhancements for the Maily platform.</p>"},{"location":"archive/sprint6-implementation-summary/#overview","title":"Overview","text":"<p>Sprint 6 focused on implementing comprehensive user experience and accessibility features to improve the platform's usability, internationalization, mobile experience, and performance. The implementation follows the WCAG 2.1 AA guidelines and best practices for web accessibility.</p>"},{"location":"archive/sprint6-implementation-summary/#key-deliverables","title":"Key Deliverables","text":"<ol> <li>Accessibility Enhancements: Implemented accessible components and testing tools</li> <li>Internationalization: Enhanced the i18n infrastructure with next-intl</li> <li>Mobile Experience: Added responsive design components and utilities</li> <li>Performance Optimization: Implemented code splitting and bundle analysis</li> </ol>"},{"location":"archive/sprint6-implementation-summary/#implementation-details","title":"Implementation Details","text":""},{"location":"archive/sprint6-implementation-summary/#accessibility-enhancements","title":"Accessibility Enhancements","text":"<ul> <li>Implemented Axe accessibility testing integration</li> <li>Created accessible UI components using React Aria</li> <li>Added skip navigation links for keyboard users</li> <li>Ensured proper focus management and keyboard navigation</li> </ul> <p>Key Files: - <code>apps/web/components/accessibility/AxeAccessibility.tsx</code>: Integration with axe-core for accessibility testing - <code>apps/web/components/accessibility/AccessibleButton.tsx</code>: Accessible button component - <code>apps/web/components/accessibility/SkipNavLink.tsx</code>: Skip navigation link for keyboard users</p>"},{"location":"archive/sprint6-implementation-summary/#internationalization","title":"Internationalization","text":"<ul> <li>Enhanced i18n infrastructure with next-intl</li> <li>Configured support for multiple languages including RTL languages</li> <li>Created language switcher component</li> <li>Implemented utilities for RTL support</li> </ul> <p>Key Files: - <code>apps/web/i18n/next-intl-config.ts</code>: Configuration for next-intl - <code>apps/web/components/internationalization/LanguageSwitcher.tsx</code>: Language switcher component - <code>apps/web/utils/rtl.ts</code>: Utilities for RTL support</p>"},{"location":"archive/sprint6-implementation-summary/#mobile-experience","title":"Mobile Experience","text":"<ul> <li>Implemented responsive container component</li> <li>Added utilities for responsive design</li> <li>Ensured proper touch target sizes and spacing</li> </ul> <p>Key Files: - <code>apps/web/components/layout/ResponsiveContainer.tsx</code>: Responsive container component</p>"},{"location":"archive/sprint6-implementation-summary/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Configured Webpack Bundle Analyzer for bundle size analysis</li> <li>Implemented lazy loading utilities for code splitting</li> <li>Added script for analyzing build performance</li> </ul> <p>Key Files: - <code>apps/web/next.config.analyzer.js</code>: Configuration for bundle analyzer - <code>apps/web/utils/lazyLoad.tsx</code>: Utility for lazy loading components</p>"},{"location":"archive/sprint6-implementation-summary/#technical-architecture","title":"Technical Architecture","text":"<p>The accessibility and user experience enhancements are built on the following architecture:</p> <ol> <li>Accessibility Layer:</li> <li>Axe for automated accessibility testing</li> <li>React Aria for accessible component primitives</li> <li> <p>Custom accessible components</p> </li> <li> <p>Internationalization Layer:</p> </li> <li>next-intl for i18n infrastructure</li> <li>JSON-based translation files</li> <li> <p>RTL support utilities</p> </li> <li> <p>Responsive Design Layer:</p> </li> <li>Tailwind CSS for responsive styling</li> <li>Responsive container components</li> <li> <p>Mobile-first approach</p> </li> <li> <p>Performance Layer:</p> </li> <li>Code splitting with React.lazy and Suspense</li> <li>Bundle analysis with Webpack Bundle Analyzer</li> <li>Optimized loading strategies</li> </ol>"},{"location":"archive/sprint6-implementation-summary/#integration-points","title":"Integration Points","text":"<p>The user experience and accessibility features integrate with the following system components:</p> <ol> <li>Frontend Framework:</li> <li>Integration with Next.js App Router</li> <li> <p>Server and client components support</p> </li> <li> <p>UI Components:</p> </li> <li>Enhancement of existing UI components with accessibility features</li> <li> <p>New accessible component alternatives</p> </li> <li> <p>Build System:</p> </li> <li>Integration with Webpack for bundle analysis</li> <li>Performance optimization in the build process</li> </ol>"},{"location":"archive/sprint6-implementation-summary/#testing-strategy","title":"Testing Strategy","text":"<p>The implementation includes a comprehensive testing strategy:</p> <ol> <li>Accessibility Testing:</li> <li>Automated testing with Axe</li> <li>Manual testing with screen readers</li> <li> <p>Keyboard navigation testing</p> </li> <li> <p>Internationalization Testing:</p> </li> <li>Testing with different languages</li> <li>RTL layout testing</li> <li> <p>Translation completeness verification</p> </li> <li> <p>Responsive Design Testing:</p> </li> <li>Testing on different device sizes</li> <li>Touch interaction testing</li> <li> <p>Mobile performance testing</p> </li> <li> <p>Performance Testing:</p> </li> <li>Bundle size analysis</li> <li>Load time measurement</li> <li>Core Web Vitals monitoring</li> </ol>"},{"location":"archive/sprint6-implementation-summary/#future-enhancements","title":"Future Enhancements","text":"<p>Planned future enhancements for the user experience and accessibility system:</p> <ol> <li>Accessibility:</li> <li>Implement more complex accessible components (datepicker, combobox)</li> <li>Add automated accessibility testing in CI pipeline</li> <li> <p>Create accessibility documentation and guidelines</p> </li> <li> <p>Internationalization:</p> </li> <li>Implement translation management workflow with Crowdin</li> <li>Add more languages and improve translation coverage</li> <li> <p>Implement locale-specific formatting for dates, numbers, and currencies</p> </li> <li> <p>Mobile Experience:</p> </li> <li>Implement offline support for mobile users</li> <li>Add mobile-specific gestures and interactions</li> <li> <p>Optimize images and assets for mobile devices</p> </li> <li> <p>Performance:</p> </li> <li>Implement server components for improved performance</li> <li>Add resource hints for critical resources</li> <li>Implement advanced caching strategies</li> </ol>"},{"location":"archive/sprint6-implementation-summary/#conclusion","title":"Conclusion","text":"<p>The user experience and accessibility enhancements implemented in Sprint 6 provide a solid foundation for an inclusive and performant user experience. The implementation follows industry best practices and standards, ensuring that Maily is accessible to all users regardless of their abilities or devices.</p>"},{"location":"archive/sprint6-implementation-summary/#references","title":"References","text":"<ul> <li>WCAG 2.1 Guidelines</li> <li>React Aria Documentation</li> <li>next-intl Documentation</li> <li>Web Performance Optimization</li> </ul>"},{"location":"archive/sprint7-implementation-plan/","title":"Sprint 7 Implementation Plan: Advanced UX &amp; Performance Optimization","text":"<p>This document outlines the implementation plan for Sprint 7, focusing on advanced user experience features and performance optimizations that build upon the foundation established in Sprint 6.</p>"},{"location":"archive/sprint7-implementation-plan/#overview","title":"Overview","text":"<p>Sprint 7 will focus on four key areas: 1. Advanced accessibility components and automation 2. Enhanced internationalization and translation management 3. Mobile-specific optimizations and offline support 4. Advanced performance optimizations with server components</p>"},{"location":"archive/sprint7-implementation-plan/#current-status","title":"Current Status","text":"<p>Based on the review of Sprint 6 implementation, the following foundation has been established: - Basic accessibility components (AxeAccessibility, AccessibleButton, SkipNavLink) - Internationalization infrastructure with next-intl - Responsive design components - Performance monitoring and lazy loading utilities</p> <p>Building on this foundation, Sprint 7 will implement more advanced features and optimizations.</p>"},{"location":"archive/sprint7-implementation-plan/#implementation-tasks","title":"Implementation Tasks","text":""},{"location":"archive/sprint7-implementation-plan/#1-advanced-accessibility-components-automation","title":"1. Advanced Accessibility Components &amp; Automation","text":""},{"location":"archive/sprint7-implementation-plan/#task-11-implement-complex-accessible-components","title":"Task 1.1: Implement Complex Accessible Components","text":"<ul> <li>Tool: React Aria for accessible components</li> <li>Actions:</li> <li>Implement accessible DatePicker component</li> <li>Implement accessible ComboBox component</li> <li>Implement accessible Dialog/Modal component</li> <li>Implement accessible Tabs component</li> <li>Implement accessible Toast/Notification component</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-12-automate-accessibility-testing-in-ci","title":"Task 1.2: Automate Accessibility Testing in CI","text":"<ul> <li>Tool: GitHub Actions for CI integration</li> <li>Actions:</li> <li>Configure axe-core testing in CI pipeline</li> <li>Set up accessibility testing reports</li> <li>Implement accessibility testing thresholds</li> <li>Add accessibility testing to PR checks</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-13-create-accessibility-documentation","title":"Task 1.3: Create Accessibility Documentation","text":"<ul> <li>Actions:</li> <li>Create accessibility guidelines document</li> <li>Document accessibility best practices</li> <li>Create component-specific accessibility documentation</li> <li>Add accessibility checklist for developers</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-14-implement-advanced-focus-management","title":"Task 1.4: Implement Advanced Focus Management","text":"<ul> <li>Actions:</li> <li>Implement focus trapping for modals and dialogs</li> <li>Add focus restoration when components unmount</li> <li>Implement focus management for dynamic content</li> <li>Add keyboard shortcuts for common actions</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#2-enhanced-internationalization-translation-management","title":"2. Enhanced Internationalization &amp; Translation Management","text":""},{"location":"archive/sprint7-implementation-plan/#task-21-implement-translation-management-workflow","title":"Task 2.1: Implement Translation Management Workflow","text":"<ul> <li>Tool: Crowdin for translation management</li> <li>Actions:</li> <li>Set up Crowdin project</li> <li>Configure GitHub integration for Crowdin</li> <li>Implement translation sync workflow</li> <li>Create translation contribution guidelines</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-22-expand-language-support","title":"Task 2.2: Expand Language Support","text":"<ul> <li>Actions:</li> <li>Add support for additional languages</li> <li>Improve translation coverage for existing languages</li> <li>Implement language-specific formatting</li> <li>Add language detection based on user preferences</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-23-implement-locale-specific-formatting","title":"Task 2.3: Implement Locale-Specific Formatting","text":"<ul> <li>Tool: Intl API for formatting</li> <li>Actions:</li> <li>Implement locale-specific date formatting</li> <li>Implement locale-specific number formatting</li> <li>Implement locale-specific currency formatting</li> <li>Add support for pluralization rules</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-24-enhance-rtl-support","title":"Task 2.4: Enhance RTL Support","text":"<ul> <li>Actions:</li> <li>Improve RTL layout for complex components</li> <li>Add RTL-specific styling for custom components</li> <li>Implement bidirectional text support</li> <li>Test and fix RTL-specific issues</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#3-mobile-specific-optimizations-offline-support","title":"3. Mobile-Specific Optimizations &amp; Offline Support","text":""},{"location":"archive/sprint7-implementation-plan/#task-31-implement-offline-support","title":"Task 3.1: Implement Offline Support","text":"<ul> <li>Tool: Workbox for service worker management</li> <li>Actions:</li> <li>Implement service worker for offline caching</li> <li>Add offline fallback pages</li> <li>Implement background sync for offline actions</li> <li>Create offline user experience guidelines</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-32-add-mobile-specific-gestures","title":"Task 3.2: Add Mobile-Specific Gestures","text":"<ul> <li>Tool: use-gesture for gesture recognition</li> <li>Actions:</li> <li>Implement swipe gestures for navigation</li> <li>Add pull-to-refresh functionality</li> <li>Implement pinch-to-zoom for relevant content</li> <li>Add haptic feedback for interactions</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-33-optimize-images-and-assets","title":"Task 3.3: Optimize Images and Assets","text":"<ul> <li>Tool: Next.js Image component</li> <li>Actions:</li> <li>Implement responsive images with srcset</li> <li>Configure image optimization pipeline</li> <li>Implement lazy loading for images</li> <li>Add WebP/AVIF format support</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-34-enhance-mobile-navigation","title":"Task 3.4: Enhance Mobile Navigation","text":"<ul> <li>Actions:</li> <li>Implement mobile-specific navigation patterns</li> <li>Add bottom navigation bar for mobile</li> <li>Optimize touch targets for mobile</li> <li>Implement mobile-specific layouts</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#4-advanced-performance-optimizations","title":"4. Advanced Performance Optimizations","text":""},{"location":"archive/sprint7-implementation-plan/#task-41-implement-server-components","title":"Task 4.1: Implement Server Components","text":"<ul> <li>Tool: Next.js Server Components</li> <li>Actions:</li> <li>Identify components suitable for server rendering</li> <li>Refactor components to use server component pattern</li> <li>Implement streaming server components</li> <li>Optimize data fetching with server components</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-42-add-resource-hints","title":"Task 4.2: Add Resource Hints","text":"<ul> <li>Actions:</li> <li>Implement preload for critical resources</li> <li>Add prefetch for likely navigation targets</li> <li>Configure preconnect for external domains</li> <li>Implement modulepreload for JavaScript modules</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-43-implement-advanced-caching-strategies","title":"Task 4.3: Implement Advanced Caching Strategies","text":"<ul> <li>Tool: SWR for data fetching and caching</li> <li>Actions:</li> <li>Implement stale-while-revalidate caching</li> <li>Configure cache invalidation strategies</li> <li>Add cache persistence for offline support</li> <li>Implement optimistic updates for UI</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#task-44-optimize-web-vitals","title":"Task 4.4: Optimize Web Vitals","text":"<ul> <li>Tool: Web Vitals library for monitoring</li> <li>Actions:</li> <li>Optimize Largest Contentful Paint (LCP)</li> <li>Minimize Cumulative Layout Shift (CLS)</li> <li>Improve First Input Delay (FID) and Interaction to Next Paint (INP)</li> <li>Implement Core Web Vitals monitoring and reporting</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#testing-strategy","title":"Testing Strategy","text":""},{"location":"archive/sprint7-implementation-plan/#accessibility-testing","title":"Accessibility Testing","text":"<ul> <li>Automated testing with axe-core in CI</li> <li>Manual testing with screen readers (NVDA, VoiceOver)</li> <li>Keyboard navigation testing</li> <li>Testing with users with disabilities</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#internationalization-testing","title":"Internationalization Testing","text":"<ul> <li>Testing with all supported languages</li> <li>RTL layout testing</li> <li>Locale-specific formatting testing</li> <li>Translation completeness verification</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#mobile-testing","title":"Mobile Testing","text":"<ul> <li>Testing on various mobile devices and browsers</li> <li>Offline functionality testing</li> <li>Touch interaction and gesture testing</li> <li>Mobile performance testing</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#performance-testing","title":"Performance Testing","text":"<ul> <li>Core Web Vitals monitoring</li> <li>Lighthouse performance audits</li> <li>Bundle size monitoring</li> <li>Real User Monitoring (RUM)</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#deliverables","title":"Deliverables","text":"<ol> <li>Advanced accessible components (DatePicker, ComboBox, Dialog, Tabs)</li> <li>Automated accessibility testing in CI</li> <li>Comprehensive accessibility documentation</li> <li>Translation management workflow with Crowdin</li> <li>Expanded language support and locale-specific formatting</li> <li>Offline support with service workers</li> <li>Mobile-specific gestures and optimizations</li> <li>Server components for improved performance</li> <li>Resource hints for critical resources</li> <li>Advanced caching strategies</li> <li>Optimized Core Web Vitals</li> </ol>"},{"location":"archive/sprint7-implementation-plan/#timeline","title":"Timeline","text":"<ul> <li>Week 1: Advanced accessibility components and automation</li> <li>Week 2: Enhanced internationalization and translation management</li> <li>Week 3: Mobile-specific optimizations and offline support</li> <li>Week 4: Advanced performance optimizations</li> </ul>"},{"location":"archive/sprint7-implementation-plan/#success-criteria","title":"Success Criteria","text":"<ol> <li>All complex components meet WCAG 2.1 AA compliance</li> <li>Automated accessibility testing integrated in CI pipeline</li> <li>Support for at least 15 languages with complete translations</li> <li>Offline functionality works for core user flows</li> <li>Mobile-specific gestures implemented for key interactions</li> <li>Server components implemented for data-heavy pages</li> <li>Performance improvements measured by:</li> <li>15% improvement in Largest Contentful Paint</li> <li>Cumulative Layout Shift score below 0.1</li> <li>First Input Delay below 100ms</li> <li>95+ Lighthouse performance score</li> </ol>"},{"location":"archive/sprint7-implementation-summary/","title":"Sprint 7 Implementation Summary","text":"<p>This document summarizes the implementation work completed during Sprint 7, focusing on advanced user experience features and performance optimizations that build upon the foundation established in Sprint 6.</p>"},{"location":"archive/sprint7-implementation-summary/#overview","title":"Overview","text":"<p>Sprint 7 focused on implementing advanced accessibility components, enhancing internationalization, optimizing mobile experience, and improving performance. The implementation follows the WCAG 2.1 AA guidelines and best practices for web accessibility, providing a comprehensive set of accessible components for the Maily platform.</p>"},{"location":"archive/sprint7-implementation-summary/#key-deliverables","title":"Key Deliverables","text":"<ol> <li>Advanced Accessibility Components: Implemented complex accessible components including DatePicker, ComboBox, Dialog, and Tabs</li> <li>Accessibility Documentation: Created comprehensive documentation and examples for accessibility components</li> <li>Accessibility Showcase: Developed a showcase page to demonstrate all accessibility components</li> <li>Component Integration: Ensured all components work together seamlessly and follow consistent patterns</li> </ol>"},{"location":"archive/sprint7-implementation-summary/#implementation-details","title":"Implementation Details","text":""},{"location":"archive/sprint7-implementation-summary/#advanced-accessibility-components","title":"Advanced Accessibility Components","text":"<ul> <li>Implemented AccessibleDatePicker for accessible date selection</li> <li>Created AccessibleComboBox for accessible autocomplete and dropdown functionality</li> <li>Developed AccessibleDialog for accessible modal dialogs with focus management</li> <li>Implemented AccessibleTabs for accessible tabbed interfaces with both horizontal and vertical orientations</li> </ul> <p>Key Files: - <code>apps/web/components/accessibility/AccessibleDatePicker.tsx</code>: Accessible date picker component - <code>apps/web/components/accessibility/AccessibleComboBox.tsx</code>: Accessible combo box component - <code>apps/web/components/accessibility/AccessibleDialog.tsx</code>: Accessible dialog component - <code>apps/web/components/accessibility/AccessibleTabs.tsx</code>: Accessible tabs component</p>"},{"location":"archive/sprint7-implementation-summary/#component-examples-and-documentation","title":"Component Examples and Documentation","text":"<ul> <li>Created example components for each accessibility component</li> <li>Developed a comprehensive showcase page to demonstrate all components</li> <li>Created detailed documentation for developers</li> </ul> <p>Key Files: - <code>apps/web/components/accessibility/examples/DatePickerExample.tsx</code>: Date picker example - <code>apps/web/components/accessibility/examples/ComboBoxExample.tsx</code>: Combo box example - <code>apps/web/components/accessibility/examples/DialogExample.tsx</code>: Dialog example - <code>apps/web/components/accessibility/examples/TabsExample.tsx</code>: Tabs example - <code>apps/web/components/accessibility/AccessibilityShowcase.tsx</code>: Showcase component - <code>apps/web/app/accessibility-showcase/page.tsx</code>: Showcase page - <code>apps/web/app/accessibility-showcase/layout.tsx</code>: Showcase layout - <code>docs/accessibility-components-guide.md</code>: Comprehensive documentation</p>"},{"location":"archive/sprint7-implementation-summary/#technical-architecture","title":"Technical Architecture","text":"<p>The advanced accessibility components are built on the following architecture:</p> <ol> <li>React Aria Layer:</li> <li>React Aria hooks for accessible behavior</li> <li>React Stately for component state management</li> <li>Focus management utilities</li> <li> <p>Keyboard navigation support</p> </li> <li> <p>Component Layer:</p> </li> <li>Accessible component implementations</li> <li>ARIA attributes and roles</li> <li>Keyboard event handling</li> <li> <p>Focus management</p> </li> <li> <p>Styling Layer:</p> </li> <li>Tailwind CSS for responsive styling</li> <li>High contrast visuals</li> <li>Focus indicators</li> <li> <p>State-based styling</p> </li> <li> <p>Documentation Layer:</p> </li> <li>Component examples</li> <li>Usage documentation</li> <li>Accessibility guidelines</li> <li>Best practices</li> </ol>"},{"location":"archive/sprint7-implementation-summary/#integration-points","title":"Integration Points","text":"<p>The advanced accessibility components integrate with the following system components:</p> <ol> <li>Existing Accessibility Components:</li> <li>Integration with AxeAccessibility for testing</li> <li>Integration with SkipNavLink for navigation</li> <li> <p>Integration with AccessibleButton for actions</p> </li> <li> <p>Internationalization System:</p> </li> <li>Integration with next-intl for localization</li> <li>Support for RTL languages</li> <li> <p>Locale-aware formatting</p> </li> <li> <p>Frontend Framework:</p> </li> <li>Integration with Next.js App Router</li> <li>Server and client components support</li> <li>Responsive design system</li> </ol>"},{"location":"archive/sprint7-implementation-summary/#testing-strategy","title":"Testing Strategy","text":"<p>The implementation includes a comprehensive testing strategy:</p> <ol> <li>Automated Testing:</li> <li>Integration with axe-core for accessibility testing</li> <li>Component-level unit tests</li> <li> <p>Integration tests for component interactions</p> </li> <li> <p>Manual Testing:</p> </li> <li>Keyboard navigation testing</li> <li>Screen reader testing</li> <li>High contrast mode testing</li> <li> <p>Mobile device testing</p> </li> <li> <p>Documentation Testing:</p> </li> <li>Example component verification</li> <li>Documentation accuracy checking</li> <li>Usage pattern validation</li> </ol>"},{"location":"archive/sprint7-implementation-summary/#future-enhancements","title":"Future Enhancements","text":"<p>Planned future enhancements for the accessibility system:</p> <ol> <li>Additional Components:</li> <li>Implement accessible data tables</li> <li>Create accessible form components</li> <li> <p>Develop accessible navigation components</p> </li> <li> <p>Testing Automation:</p> </li> <li>Implement automated accessibility testing in CI pipeline</li> <li>Create accessibility test reports</li> <li> <p>Set up accessibility testing thresholds</p> </li> <li> <p>User Testing:</p> </li> <li>Conduct testing with users with disabilities</li> <li>Gather feedback for improvements</li> <li> <p>Implement user-suggested enhancements</p> </li> <li> <p>Performance Optimization:</p> </li> <li>Optimize component bundle size</li> <li>Improve rendering performance</li> <li>Enhance mobile performance</li> </ol>"},{"location":"archive/sprint7-implementation-summary/#conclusion","title":"Conclusion","text":"<p>The advanced accessibility components implemented in Sprint 7 provide a comprehensive set of tools for building accessible user interfaces. These components follow industry best practices and standards, ensuring that Maily is accessible to all users regardless of their abilities or devices.</p> <p>The implementation builds upon the foundation established in Sprint 6, adding more complex components and enhancing the overall accessibility of the platform. The documentation and examples provide developers with the resources they need to create accessible user interfaces.</p>"},{"location":"archive/sprint7-implementation-summary/#references","title":"References","text":"<ul> <li>WCAG 2.1 Guidelines</li> <li>React Aria Documentation</li> <li>WAI-ARIA Authoring Practices</li> <li>Accessibility Components Guide</li> </ul>"},{"location":"archive/subscribers-implementation-summary/","title":"Subscribers Management Implementation Summary","text":""},{"location":"archive/subscribers-implementation-summary/#overview","title":"Overview","text":"<p>The subscribers management feature provides comprehensive tools for managing email list subscribers, allowing users to view, filter, edit, and track subscriber activity within the Maily platform.</p>"},{"location":"archive/subscribers-implementation-summary/#components-implemented","title":"Components Implemented","text":""},{"location":"archive/subscribers-implementation-summary/#pages","title":"Pages","text":"<ul> <li>Subscribers List Page (<code>/subscribers</code>): Main page for viewing and filtering subscribers</li> <li>Subscriber Detail Page (<code>/subscribers/[id]</code>): Detailed view of a single subscriber with activity history</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#core-components","title":"Core Components","text":"<ul> <li>SubscribersList: Server component to fetch and display subscriber data in a table</li> <li>SubscribersListSkeleton: Loading state for the subscribers list</li> <li>SubscribersFilter: Server component to fetch and display filtering options</li> <li>SubscriberDetail: Server component to fetch and display detailed subscriber information</li> <li>SubscriberDetailSkeleton: Loading state for the subscriber detail</li> <li>SubscriberActivity: Server component to fetch and display subscriber activity history</li> <li>SubscriberActivitySkeleton: Loading state for the activity history</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#features","title":"Features","text":""},{"location":"archive/subscribers-implementation-summary/#listing-filtering","title":"Listing &amp; Filtering","text":"<ul> <li>Table view of all subscribers with pagination</li> <li>Filtering by status, source, segment, and activity</li> <li>Tagging system with ability to filter by tags</li> <li>Search functionality to find subscribers by email or name</li> <li>Sorting options for different subscriber attributes</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#subscriber-profile","title":"Subscriber Profile","text":"<ul> <li>Comprehensive subscriber information display</li> <li>Contact details including email, phone, and address</li> <li>Engagement metrics and visualization</li> <li>Status indicators (active/inactive)</li> <li>Tag management</li> <li>Quick action buttons (edit, delete, unsubscribe)</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#activity-tracking","title":"Activity Tracking","text":"<ul> <li>Timeline visualization of subscriber activity</li> <li>Color-coded activity types for better visualization</li> <li>Multiple activity types tracked (email opens, clicks, profile updates, etc.)</li> <li>Chronological order with timestamps</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#graphql-integration","title":"GraphQL Integration","text":"<ul> <li>Queries:</li> <li><code>GET_SUBSCRIBERS</code>: Fetch list of subscribers with filtering</li> <li><code>GET_SUBSCRIBER</code>: Fetch detailed information for a single subscriber</li> <li><code>GET_SUBSCRIBER_ACTIVITY</code>: Fetch activity history for a subscriber</li> <li> <p><code>GET_SUBSCRIBER_FILTERS</code>: Fetch available filter options</p> </li> <li> <p>Mutations:</p> </li> <li><code>CREATE_SUBSCRIBER</code>: Add a new subscriber</li> <li><code>UPDATE_SUBSCRIBER</code>: Update an existing subscriber's information</li> <li><code>DELETE_SUBSCRIBER</code>: Remove a subscriber</li> <li><code>ADD_TAG_TO_SUBSCRIBER</code>: Assign a tag to a subscriber</li> <li><code>REMOVE_TAG_FROM_SUBSCRIBER</code>: Remove a tag from a subscriber</li> <li><code>UNSUBSCRIBE_SUBSCRIBER</code>: Mark a subscriber as unsubscribed</li> <li><code>RESUBSCRIBE_SUBSCRIBER</code>: Reactivate a previously unsubscribed subscriber</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#uiux-highlights","title":"UI/UX Highlights","text":"<ul> <li>Responsive design that works on mobile and desktop</li> <li>Skeleton loading states for improved perceived performance</li> <li>Interactive elements (buttons, filters, tables) with appropriate hover states</li> <li>Color-coded indicators for engagement scores and activity types</li> <li>Visual timeline for activity history</li> </ul>"},{"location":"archive/subscribers-implementation-summary/#next-steps","title":"Next Steps","text":"<ol> <li>Connect the UI components to real data from the backend GraphQL API</li> <li>Implement the form for adding and editing subscribers</li> <li>Add bulk operations (tag multiple subscribers, export selections)</li> <li>Implement subscriber segmentation tools</li> <li>Add AI-powered subscriber insights and engagement recommendations</li> </ol>"},{"location":"archive/tech-stack/","title":"Maily Technology Stack","text":"<p>Last updated: March 4, 2025</p> <p>This document provides a comprehensive overview of the technology stack used in the Maily platform. It serves as a reference for developers, architects, and stakeholders to understand the technologies, frameworks, libraries, and tools that power our email marketing platform.</p>"},{"location":"archive/tech-stack/#frontend-technologies","title":"Frontend Technologies","text":""},{"location":"archive/tech-stack/#core-framework","title":"Core Framework","text":"<ul> <li>Next.js: v14.2.0 - React framework with App Router architecture</li> <li>React: v18.3.0 - UI component library</li> <li>TypeScript: v5.4.2 - Typed JavaScript</li> </ul>"},{"location":"archive/tech-stack/#ui-styling","title":"UI &amp; Styling","text":"<ul> <li>Tailwind CSS: v4.1.0 - Utility-first CSS framework</li> <li>shadcn/ui: v3.0.0 - Component library built on Radix UI</li> <li>Radix UI: v3.0.0 - Headless UI components</li> <li>Framer Motion: v11.0.0 - Animation library</li> <li>next-themes: v1.0.0 - Theme management for Next.js</li> </ul>"},{"location":"archive/tech-stack/#state-management","title":"State Management","text":"<ul> <li>TanStack Query (React Query): v6.0.0 - Server state management</li> <li>Zustand: v5.0.0 - Client state management</li> <li>React Hook Form: v8.0.0 - Form state management</li> <li>Zod: v3.22.0 - Schema validation</li> </ul>"},{"location":"archive/tech-stack/#data-visualization","title":"Data Visualization","text":"<ul> <li>Recharts: v2.10.0 - React charting library</li> <li>react-grid-layout: v2.0.0 - Grid layout system for dashboards</li> <li>visx: v3.8.0 - Low-level visualization components</li> </ul>"},{"location":"archive/tech-stack/#internationalization","title":"Internationalization","text":"<ul> <li>next-intl: v3.5.0 - Internationalization for Next.js</li> <li>Formatjs: v2.0.0 - Internationalization framework</li> <li>date-fns: v3.0.0 - Date utility library with i18n support</li> </ul>"},{"location":"archive/tech-stack/#testing","title":"Testing","text":"<ul> <li>Vitest: v1.5.0 - Unit testing framework</li> <li>Testing Library: v15.0.0 - Component testing utilities</li> <li>Playwright: v2.0.0 - End-to-end testing</li> <li>MSW: v2.0.0 - API mocking</li> </ul>"},{"location":"archive/tech-stack/#backend-technologies","title":"Backend Technologies","text":""},{"location":"archive/tech-stack/#api-framework","title":"API Framework","text":"<ul> <li>Express: v4.18.2 - Node.js web framework</li> <li>Fastify: v5.0.0 - High-performance Node.js framework</li> <li>GraphQL: v16.8.0 - API query language</li> <li>Apollo Server: v4.9.0 - GraphQL server</li> <li>Pothos: v4.0.0 - Code-first GraphQL schema builder</li> </ul>"},{"location":"archive/tech-stack/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>NextAuth.js: v5.0.0 - Authentication for Next.js</li> <li>Auth0: - Identity platform</li> <li>JWT: v9.0.0 - JSON Web Tokens</li> <li>CASL: v7.0.0 - Authorization library</li> </ul>"},{"location":"archive/tech-stack/#database","title":"Database","text":"<ul> <li>PostgreSQL: v16.0 - Relational database</li> <li>PgBouncer: v1.22.0 - Connection pooling for PostgreSQL</li> <li>Prisma: v5.10.0 - ORM for TypeScript</li> <li>Redis: v7.2.0 - In-memory data store</li> <li>MongoDB: v7.0.0 - Document database (specific features)</li> </ul>"},{"location":"archive/tech-stack/#messaging-event-streaming","title":"Messaging &amp; Event Streaming","text":"<ul> <li>Kafka: v3.6.0 - Event streaming platform</li> <li>Redis Streams: v7.2.0 - Streaming data structure</li> <li>WebSockets: - Real-time communication</li> </ul>"},{"location":"archive/tech-stack/#ai-machine-learning","title":"AI &amp; Machine Learning","text":""},{"location":"archive/tech-stack/#core-ai","title":"Core AI","text":"<ul> <li>Anthropic Claude 3: - Large language model (Opus, Sonnet, Haiku)</li> <li>LiteLLM: v1.0.0 - LLM router and orchestration</li> <li>LangChain: v0.2.0 - LLM framework</li> <li>Stability AI: - Image generation</li> </ul>"},{"location":"archive/tech-stack/#ml-ops","title":"ML Ops","text":"<ul> <li>Weights &amp; Biases: - ML experiment tracking</li> <li>DVC: v3.30.0 - ML versioning</li> <li>MLflow: v2.10.0 - ML lifecycle management</li> </ul>"},{"location":"archive/tech-stack/#ai-observability","title":"AI Observability","text":"<ul> <li>Langfuse: v2.0.0 - LLM observability</li> <li>Arize AI: - ML monitoring</li> <li>Helicone: v2.0.0 - LLM cost management</li> </ul>"},{"location":"archive/tech-stack/#etl-data-pipeline","title":"ETL &amp; Data Pipeline","text":"<ul> <li>Apache Airflow: v2.8.0 - Workflow management</li> <li>dbt: v1.6.0 - Data transformation</li> <li>Feast: v0.35.0 - Feature store</li> </ul>"},{"location":"archive/tech-stack/#devops-infrastructure","title":"DevOps &amp; Infrastructure","text":""},{"location":"archive/tech-stack/#containerization-orchestration","title":"Containerization &amp; Orchestration","text":"<ul> <li>Docker: v25.0.0 - Containerization</li> <li>Kubernetes: v1.30.0 - Container orchestration</li> <li>Helm: v3.14.0 - Kubernetes package manager</li> </ul>"},{"location":"archive/tech-stack/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions: - CI/CD platform</li> <li>ArgoCD: v2.10.0 - GitOps CD</li> <li>Turborepo: v2.0.0 - Monorepo build system</li> </ul>"},{"location":"archive/tech-stack/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>OpenTelemetry: v1.22.0 - Observability framework</li> <li>Prometheus: v2.50.0 - Metrics collection</li> <li>Grafana: v10.3.0 - Metrics visualization</li> <li>Tempo: v2.3.0 - Distributed tracing</li> <li>Loki: v2.9.0 - Log aggregation</li> </ul>"},{"location":"archive/tech-stack/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>Terraform: v1.7.0 - Infrastructure provisioning</li> <li>Pulumi: v3.100.0 - Infrastructure as code</li> </ul>"},{"location":"archive/tech-stack/#cloud-providers-services","title":"Cloud Providers &amp; Services","text":"<ul> <li>AWS: Primary cloud provider</li> <li>EKS: Kubernetes service</li> <li>RDS: Database service</li> <li>S3: Object storage</li> <li>CloudFront: CDN</li> <li>Lambda: Serverless compute</li> <li>EventBridge: Event bus</li> <li>SQS: Message queuing</li> <li>Route53: DNS service</li> <li>WAF: Web application firewall</li> <li>Global Accelerator: Network acceleration</li> <li>Cloudflare: Edge services</li> <li>Workers: Edge computing</li> <li>KV: Edge key-value store</li> <li>D1: Edge SQL database</li> <li>R2: Object storage</li> </ul>"},{"location":"archive/tech-stack/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"archive/tech-stack/#security-tools","title":"Security Tools","text":"<ul> <li>Trivy: v0.47.0 - Container security scanning</li> <li>Snyk: - Vulnerability scanning</li> <li>OWASP ZAP: v2.14.0 - Web application security scanner</li> <li>SonarQube: v10.3.0 - Code quality and security</li> </ul>"},{"location":"archive/tech-stack/#secrets-management","title":"Secrets Management","text":"<ul> <li>HashiCorp Vault: v1.15.0 - Secrets management</li> <li>AWS Secrets Manager: - Cloud secrets management</li> </ul>"},{"location":"archive/tech-stack/#policy-compliance","title":"Policy &amp; Compliance","text":"<ul> <li>Open Policy Agent (OPA): v0.60.0 - Policy enforcement</li> <li>Kyverno: v1.11.0 - Kubernetes policy management</li> </ul>"},{"location":"archive/tech-stack/#development-tools","title":"Development Tools","text":""},{"location":"archive/tech-stack/#code-quality","title":"Code Quality","text":"<ul> <li>ESLint: v9.0.0 - JavaScript linting</li> <li>Prettier: v3.1.0 - Code formatting</li> <li>TypeScript: v5.4.2 - Type checking</li> <li>husky: v9.0.0 - Git hooks</li> </ul>"},{"location":"archive/tech-stack/#documentation","title":"Documentation","text":"<ul> <li>Docusaurus: v3.1.0 - Documentation site generator</li> <li>Swagger/OpenAPI: v3.0.0 - API documentation</li> <li>Storybook: v8.0.0 - Component documentation</li> </ul>"},{"location":"archive/tech-stack/#package-management","title":"Package Management","text":"<ul> <li>pnpm: v9.0.0 - Fast, disk space efficient package manager</li> <li>Changesets: v2.0.0 - Versioning and changelog management</li> </ul>"},{"location":"archive/tech-stack/#version-control","title":"Version Control","text":"<ul> <li>Git: v2.43.0 - Version control system</li> <li>GitHub: - Repository hosting and collaboration</li> </ul>"},{"location":"archive/tech-stack/#project-management","title":"Project Management","text":"<ul> <li>Jira: - Issue tracking</li> <li>Confluence: - Documentation</li> <li>Slack: - Team communication</li> </ul>"},{"location":"archive/tech-stack/#analytics-reporting","title":"Analytics &amp; Reporting","text":"<ul> <li>Mixpanel: - Product analytics</li> <li>PostHog: v1.60.0 - Product analytics and feature flags</li> <li>Cube.js: v0.35.0 - Analytics API</li> <li>Metabase: v0.48.0 - Business intelligence</li> </ul>"},{"location":"archive/tech-stack/#email-infrastructure","title":"Email Infrastructure","text":"<ul> <li>Amazon SES: - Email sending service</li> <li>MJML: v4.15.0 - Responsive email framework</li> <li>Mailparser: v3.6.0 - Email parsing library</li> <li>nodemailer: v6.9.0 - Email sending library</li> </ul>"},{"location":"archive/tech-stack/#standards-protocols","title":"Standards &amp; Protocols","text":"<ul> <li>OAuth 2.0: - Authorization framework</li> <li>OpenID Connect: - Identity layer</li> <li>SMTP: - Email transmission</li> <li>REST: - API architecture</li> <li>GraphQL: - API query language</li> <li>WebSockets: - Real-time communication</li> </ul>"},{"location":"archive/tech-stack/#integration-services","title":"Integration Services","text":"<ul> <li>Stripe: - Payment processing</li> <li>Segment: - Customer data platform</li> <li>Zapier: - Workflow automation</li> <li>Twilio: - Communication APIs</li> <li>Intercom: - Customer messaging platform</li> </ul>"},{"location":"archive/tech-stack/#mobile-support","title":"Mobile Support","text":"<ul> <li>React Native: v0.73.0 - Cross-platform mobile development</li> <li>Expo: v50.0.0 - React Native framework</li> <li>Progressive Web App (PWA): - Web-based mobile experience</li> </ul>"},{"location":"archive/tech-stack/#conclusion","title":"Conclusion","text":"<p>This technology stack represents the current state of the Maily platform as of March 2025. The stack is continuously evaluated and updated to ensure we're using the most appropriate, secure, and performant technologies for our needs.</p> <p>For questions about specific technologies or implementation details, please refer to the respective documentation or contact the technical lead responsible for that area of the platform.</p>"},{"location":"archive/templates-implementation-summary/","title":"Templates Management Implementation Summary","text":""},{"location":"archive/templates-implementation-summary/#overview","title":"Overview","text":"<p>The templates management feature provides a comprehensive toolset for creating, viewing, and managing email templates, enabling users to efficiently design and reuse email content for their marketing campaigns within the Maily platform.</p>"},{"location":"archive/templates-implementation-summary/#components-implemented","title":"Components Implemented","text":""},{"location":"archive/templates-implementation-summary/#pages","title":"Pages","text":"<ul> <li>Templates List Page (<code>/templates</code>): Main page for browsing and filtering email templates</li> <li>Template Detail Page (<code>/templates/[id]</code>): Detailed view of a single template with preview and usage statistics</li> </ul>"},{"location":"archive/templates-implementation-summary/#core-components","title":"Core Components","text":"<ul> <li>TemplatesList: Server component to fetch and display templates in a grid layout with thumbnails</li> <li>TemplatesListSkeleton: Loading state for the templates list</li> <li>TemplateDetail: Server component to fetch and display detailed template information with preview</li> <li>TemplateDetailSkeleton: Loading state for the template detail view</li> </ul>"},{"location":"archive/templates-implementation-summary/#features","title":"Features","text":""},{"location":"archive/templates-implementation-summary/#template-library","title":"Template Library","text":"<ul> <li>Grid view of all templates with visual thumbnails for quick recognition</li> <li>Filtering by category, creator, and search functionality</li> <li>Sort options for organizing templates by various attributes</li> <li>Template categorization system for better organization</li> </ul>"},{"location":"archive/templates-implementation-summary/#template-preview-and-management","title":"Template Preview and Management","text":"<ul> <li>Detailed template information display with metadata</li> <li>Real-time preview of email templates</li> <li>HTML source code viewer with syntax highlighting</li> <li>Mobile and desktop preview toggle</li> <li>Quick actions for editing, duplicating, and creating campaigns</li> </ul>"},{"location":"archive/templates-implementation-summary/#usage-statistics","title":"Usage Statistics","text":"<ul> <li>Metrics for template performance across campaigns</li> <li>Campaign history tracking where template was used</li> <li>Open rate and engagement analysis by template</li> <li>Comprehensive usage statistics to inform design decisions</li> </ul>"},{"location":"archive/templates-implementation-summary/#graphql-integration","title":"GraphQL Integration","text":"<ul> <li>Leveraging existing queries:</li> <li><code>GET_TEMPLATES</code>: Fetch list of templates with filtering</li> <li> <p><code>GET_TEMPLATE</code>: Fetch detailed information for a single template</p> </li> <li> <p>Existing mutations for templates:</p> </li> <li><code>CREATE_TEMPLATE</code>: Add a new template</li> <li><code>UPDATE_TEMPLATE</code>: Update an existing template's information</li> <li><code>DELETE_TEMPLATE</code>: Remove a template</li> </ul>"},{"location":"archive/templates-implementation-summary/#uiux-highlights","title":"UI/UX Highlights","text":"<ul> <li>Visual grid layout for template browsing with thumbnails</li> <li>Hover states with quick actions for common operations</li> <li>Tab-based interface for different template views (preview, HTML, stats)</li> <li>Skeleton loading states for improved perceived performance</li> <li>Consistent design language matching the overall application</li> </ul>"},{"location":"archive/templates-implementation-summary/#next-steps","title":"Next Steps","text":"<ol> <li>Implement a full-featured template editor with drag-and-drop capabilities</li> <li>Add AI-powered template generation and suggestions</li> <li>Implement template versioning and history</li> <li>Add template sharing and collaboration features</li> <li>Create a template marketplace with pre-built designs</li> <li>Implement personalization token management for dynamic content</li> </ol>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/","title":"AI Trust Agents Implementation Plan","text":"<p>This document outlines the implementation plan for the AI Trust Agents component of the Trust Infrastructure phase, which will provide advanced personalization for email campaigns.</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>AI Model Architecture</li> <li>Service Integration</li> <li>Database Changes</li> <li>API Endpoints</li> <li>Frontend Components</li> <li>Testing Strategy</li> <li>Performance Considerations</li> </ul>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#overview","title":"Overview","text":"<p>AI Trust Agents will analyze recipient data to deliver highly personalized email content, reducing spam perception and increasing engagement. The system will use advanced AI models to predict individual recipient preferences and generate tailored content.</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#key-features","title":"Key Features","text":"<ul> <li>Predictive personalization based on user behavior and preferences</li> <li>AI-powered content generation for email campaigns</li> <li>Trust scoring system for campaigns and recipients</li> <li>Integration with existing AI layer and OctoTools</li> </ul>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#integration-points","title":"Integration Points","text":"<ul> <li>AI Layer: Enhancing the existing AI capabilities with personalization models</li> <li>Campaign Service: For generating personalized campaign content</li> <li>User Service: For accessing user data and preferences</li> <li>Analytics Service: For feedback on effectiveness of personalization</li> </ul>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#ai-model-architecture","title":"AI Model Architecture","text":""},{"location":"archive/trust-infrastructure-ai-agents-implementation/#personalization-model","title":"Personalization Model","text":"<p>Develop a machine learning model to: - Predict recipient engagement probability - Classify recipients into personalization categories (informational, promotional, relationship, transactional) - Generate personalization scores based on historical engagement data</p> <p>The model will use TensorFlow and be trained on: - Open rates, click rates, and conversion data - Email frequency preferences - Device and time preferences - Content type preferences</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#content-generation","title":"Content Generation","text":"<p>Utilize OctoTools with LLM integration to: - Generate personalized email content based on recipient category - Adapt subject lines, body content, and CTAs to individual preferences - Ensure brand voice consistency while personalizing messaging - Support multiple languages and content types</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#service-integration","title":"Service Integration","text":""},{"location":"archive/trust-infrastructure-ai-agents-implementation/#aitrustagent-service","title":"AITrustAgent Service","text":"<p>Create a new service in <code>apps/api/ai/trust_agent/</code> that will: - Initialize and manage personalization models - Extract user features from historical data - Predict personalization categories and preferences - Calculate trust scores for recipients and campaigns - Generate personalized content through LLM integration</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#campaign-service-extension","title":"Campaign Service Extension","text":"<p>Extend the Campaign Service to: - Request personalized content for each recipient - Store personalization data with campaign metrics - Track effectiveness of personalization through A/B testing - Adjust personalization strategies based on feedback</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#database-changes","title":"Database Changes","text":""},{"location":"archive/trust-infrastructure-ai-agents-implementation/#new-models","title":"New Models","text":"<p>Create the following new database models: - <code>UserPersonalizationProfile</code>: To store recipient preferences and categories - <code>PersonalizationHistory</code>: To track personalization effectiveness - <code>TrustScore</code>: To maintain trust scores for recipients</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#schema-modifications","title":"Schema Modifications","text":"<p>Update existing models: - Add <code>personalization_enabled</code> field to Campaign model - Add <code>personalization_data</code> JSON field to store customized content - Add <code>trust_score</code> field to User model</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#api-endpoints","title":"API Endpoints","text":"<p>Add new API endpoints: - <code>GET /ai/personalization/profile/{user_id}</code>: Get personalization profile for a user - <code>POST /ai/personalization/analyze</code>: Analyze content for personalization options - <code>POST /campaigns/{id}/personalize</code>: Generate personalized content for a campaign</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#frontend-components","title":"Frontend Components","text":""},{"location":"archive/trust-infrastructure-ai-agents-implementation/#personalization-controls","title":"Personalization Controls","text":"<p>Create React components for: - Enabling/disabling personalization for campaigns - Visualizing personalization categories and strategies - Previewing personalized content for different recipient types</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#trust-score-display","title":"Trust Score Display","text":"<p>Create components to: - Display trust scores for campaigns and recipients - Show personalization effectiveness metrics - Provide insights on improving personalization</p>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit test personalization models with sample user data</li> <li>A/B test personalization strategies on real campaigns</li> <li>Measure effectiveness through engagement metrics comparison</li> <li>Validate content generation with human reviewers</li> </ul>"},{"location":"archive/trust-infrastructure-ai-agents-implementation/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Cache personalization profiles for frequently accessed users</li> <li>Use batch processing for campaign personalization</li> <li>Implement queue system for content generation requests</li> <li>Scale AI resources dynamically based on demand</li> <li>Optimize model size for production deployment</li> </ul>"},{"location":"archive/trust-infrastructure-certificates-implementation/","title":"Trust Certificates Implementation Plan","text":"<p>This document outlines the implementation plan for the Trust Certificates component of the Trust Infrastructure phase, which will provide blockchain-verified authenticity for email campaigns.</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Smart Contract Development</li> <li>Backend Services</li> <li>Database Changes</li> <li>API Endpoints</li> <li>Email Integration</li> <li>Frontend Components</li> <li>Testing Strategy</li> <li>Security Considerations</li> </ul>"},{"location":"archive/trust-infrastructure-certificates-implementation/#overview","title":"Overview","text":"<p>Trust Certificates will provide a cryptographic verification mechanism for email campaigns, allowing recipients to verify the legitimacy of emails instantly. Each certificate will be stored on-chain and accessible via a clickable link or QR code in the email footer.</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#key-features","title":"Key Features","text":"<ul> <li>Blockchain-verified certificates for email campaigns</li> <li>One-click verification for recipients</li> <li>Tamper-proof record of campaign metrics and authenticity</li> <li>Integration with email templates and verification page</li> </ul>"},{"location":"archive/trust-infrastructure-certificates-implementation/#integration-points","title":"Integration Points","text":"<ul> <li>Campaign Service: To generate certificates during campaign creation</li> <li>Email Renderer: To embed certificate links in email footers</li> <li>Blockchain Service: To issue and verify certificates on-chain</li> <li>Frontend: To provide a verification interface for recipients</li> </ul>"},{"location":"archive/trust-infrastructure-certificates-implementation/#smart-contract-development","title":"Smart Contract Development","text":""},{"location":"archive/trust-infrastructure-certificates-implementation/#trust-certificate-contract","title":"Trust Certificate Contract","text":"<p>Create a smart contract that will: - Store certificate data including marketer address, campaign ID, and metrics hash - Issue new certificates with cryptographic signatures - Allow verification of certificate authenticity - Support certificate revocation if needed</p> <p>The contract will use a structure to store: - Marketer wallet address - Campaign identifier - Hash of campaign metrics - Timestamp of certificate issuance - Revocation status</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#backend-services","title":"Backend Services","text":""},{"location":"archive/trust-infrastructure-certificates-implementation/#certificate-service","title":"Certificate Service","text":"<p>Create a new service in <code>apps/api/blockchain/services/</code> that will: - Generate unique certificate IDs based on campaign data - Hash campaign metrics securely - Interact with the certificate smart contract - Retrieve and verify certificate data</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#campaign-service-integration","title":"Campaign Service Integration","text":"<p>Extend the Campaign Service to: - Generate certificates when campaigns are created - Store certificate IDs with campaign data - Update certificates when campaign metrics change - Provide certificate verification functionality</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#database-changes","title":"Database Changes","text":""},{"location":"archive/trust-infrastructure-certificates-implementation/#new-models","title":"New Models","text":"<p>Create a <code>TrustCertificate</code> model with: - Certificate ID (unique blockchain identifier) - Campaign ID reference - User/marketer ID reference - Metrics hash - Blockchain transaction hash - Creation timestamp</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#schema-modifications","title":"Schema Modifications","text":"<p>Update existing models: - Add <code>certificate_id</code> field to Campaign model - Add relationship between Campaign and Certificate models</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#api-endpoints","title":"API Endpoints","text":"<p>Add new API endpoints: - <code>POST /certificates/issue</code>: Issue a new certificate for a campaign - <code>GET /certificates/{id}</code>: Get certificate details by ID - <code>GET /certificates/verify/{id}</code>: Verify the authenticity of a certificate - <code>GET /campaigns/{id}/certificate</code>: Get the certificate for a specific campaign</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#email-integration","title":"Email Integration","text":""},{"location":"archive/trust-infrastructure-certificates-implementation/#email-template-updates","title":"Email Template Updates","text":"<p>Modify the email rendering service to: - Include certificate verification links in email footers - Generate QR codes for certificate verification - Support different verification link styles based on email client</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#verification-link-format","title":"Verification Link Format","text":"<p>Design the verification link format: - Direct link to verification page with certificate ID as parameter - Short URL format for mobile compatibility - Support for email client tracking protection</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#frontend-components","title":"Frontend Components","text":""},{"location":"archive/trust-infrastructure-certificates-implementation/#certificate-verification-page","title":"Certificate Verification Page","text":"<p>Create a public-facing page at <code>/verify/{certificate_id}</code> that: - Queries the blockchain for certificate data - Displays certificate details in user-friendly format - Shows campaign metrics and authentic status - Includes marketer information and timestamp</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#certificate-management-interface","title":"Certificate Management Interface","text":"<p>Create an admin interface for marketers to: - View all certificates for their campaigns - Check verification status and metrics - Download certificate data for compliance purposes</p>"},{"location":"archive/trust-infrastructure-certificates-implementation/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit test certificate generation and verification</li> <li>Test certificate embedding in various email clients</li> <li>Verify blockchain interactions in testnet environments</li> <li>Test edge cases like certificate revocation</li> </ul>"},{"location":"archive/trust-infrastructure-certificates-implementation/#security-considerations","title":"Security Considerations","text":"<ul> <li>Implement proper access control for certificate issuance</li> <li>Use cryptographic best practices for hashing and signatures</li> <li>Ensure certificate data cannot be tampered with</li> <li>Protect against replay attacks and certificate spoofing</li> <li>Implement rate limiting for verification requests</li> </ul>"},{"location":"archive/trust-infrastructure-implementation-plan/","title":"Maily Trust Infrastructure - Implementation Plan","text":"<p>This document outlines a comprehensive implementation plan for integrating Phase 1 of the Trust Infrastructure into the existing Maily platform. The implementation has been designed to work with Maily's microservices architecture and current technology stack.</p>"},{"location":"archive/trust-infrastructure-implementation-plan/#overview","title":"Overview","text":"<p>The Trust Infrastructure phase introduces three key components:</p> <ol> <li>Cross-Chain $MAILY Token - A blockchain token system that rewards marketers based on verified campaign performance metrics</li> <li>AI Trust Agents - Advanced AI-driven personalization to increase email relevance and engagement</li> <li>Trust Certificates - Blockchain-verified certificates that prove the authenticity of email campaigns</li> </ol>"},{"location":"archive/trust-infrastructure-implementation-plan/#project-structure","title":"Project Structure","text":"<p>The implementation will add new components while integrating with Maily's existing architecture:</p> <pre><code>maily/\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 api/                  &lt;- Existing FastAPI backend\n\u2502   \u2502   \u251c\u2500\u2500 blockchain/       &lt;- New blockchain services\n\u2502   \u2502   \u251c\u2500\u2500 ai/trust_agent/   &lt;- New AI trust agent module\n\u2502   \u251c\u2500\u2500 web/                  &lt;- Existing Next.js frontend\n\u2502   \u2502   \u251c\u2500\u2500 components/trust/ &lt;- New trust-related components\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 blockchain/           &lt;- New blockchain package\n\u2502   \u2502   \u251c\u2500\u2500 contracts/        &lt;- Smart contracts\n\u2502   \u2502   \u251c\u2500\u2500 oracles/          &lt;- Chainlink oracles\n\u2502   \u251c\u2500\u2500 ai/                   &lt;- Existing AI package\n\u2502   \u2502   \u251c\u2500\u2500 trust/            &lt;- New trust-related AI models\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 terraform/            &lt;- Existing Terraform configs\n\u2502   \u2502   \u251c\u2500\u2500 modules/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 blockchain/   &lt;- New blockchain infrastructure\n</code></pre>"},{"location":"archive/trust-infrastructure-implementation-plan/#integration-with-existing-systems","title":"Integration with Existing Systems","text":"<p>The Trust Infrastructure components will integrate with Maily's existing systems:</p> <ol> <li>API Integration: The blockchain and AI trust services will be integrated into the existing API layer through new endpoints and services</li> <li>Database Extensions: The existing PostgreSQL database will be extended with new tables for blockchain-related data</li> <li>Frontend Components: The web application will be enhanced with new components for displaying trust scores and certificates</li> <li>Infrastructure: New infrastructure components will be deployed within the existing Kubernetes cluster</li> </ol>"},{"location":"archive/trust-infrastructure-implementation-plan/#related-documentation","title":"Related Documentation","text":"<p>There are existing documents related to the Trust Infrastructure:</p> <ul> <li>MAILY-trust-infrastructure-implementation.md - Contains technical details and code examples</li> <li>MAILY-trust-infrastructure-production-implementation.md - Contains production deployment details</li> </ul> <p>These existing documents contain valuable technical information but are incomplete and too code-heavy. As part of this implementation, we will:</p> <ol> <li>Refine the existing documents to make them more concise overview documents that focus on system architecture and key implementation decisions, removing excessive code examples.</li> </ol>"},{"location":"archive/trust-infrastructure-implementation-plan/#implementation-plans","title":"Implementation Plans","text":"<p>The following detailed implementation plans have been prepared for each component:</p> <ol> <li>Cross-Chain $MAILY Token Implementation Plan: ERC20-compatible token with cross-chain capabilities for rewarding marketers based on verified campaign performance</li> <li>AI Trust Agents Implementation Plan: AI-driven personalization to increase email relevance and engagement</li> <li>Trust Certificates Implementation Plan: Blockchain-verified certificates that prove the authenticity of email campaigns</li> </ol> <p>Each plan includes:</p> <ul> <li>Required changes to existing systems</li> <li>New components to be developed</li> <li>Database schema modifications</li> <li>API endpoints to be created</li> <li>UI components to be developed</li> <li>Testing strategy</li> </ul>"},{"location":"archive/trust-infrastructure-implementation-plan/#implementation-sequence","title":"Implementation Sequence","text":"<p>The recommended implementation sequence is:</p> <ol> <li>Phase 1A: Set up blockchain infrastructure and deploy the $MAILY token contracts</li> <li>Phase 1B: Implement the Trust Certificates system, which depends on the blockchain infrastructure</li> <li>Phase 1C: Develop the AI Trust Agents, which can operate independently but will integrate with the other components</li> </ol>"},{"location":"archive/trust-infrastructure-implementation-plan/#success-criteria","title":"Success Criteria","text":"<p>The Trust Infrastructure implementation will be considered successful when:</p> <ol> <li>Marketers can earn $MAILY tokens based on verifiable campaign performance metrics</li> <li>Recipients can verify the authenticity of emails with one-click certificate verification</li> <li>Email content is automatically personalized based on recipient preferences</li> <li>All components are integrated with Maily's existing systems and production-ready</li> </ol>"},{"location":"archive/trust-infrastructure-implementation-plan/#document-management","title":"Document Management","text":"<p>The implementation will organize documentation as follows:</p> <ol> <li>Overview Documents (refined from existing docs):</li> <li><code>MAILY-trust-infrastructure-implementation.md</code> - High-level system architecture and key decisions</li> <li><code>MAILY-trust-infrastructure-production-implementation.md</code> - Production deployment</li> <li> <p>Required changes to existing systems strategy</p> </li> <li> <p>Implementation Plans (new component-specific docs):</p> </li> <li><code>trust-infrastructure-token-implementation.md</code> - Token implementation plan</li> <li><code>trust-infrastructure-ai-agents-implementation.md</code> - AI Trust Agents implementation plan</li> <li> <p><code>trust-infrastructure-certificates-implementation.md</code> - Trust Certificates implementation plan</p> </li> <li> <p>Technical Reference (to be created during development):</p> </li> <li>Code examples, API specifications, and detailed technical designs</li> <li>Stored in the appropriate codebase directories with READMEs</li> <li>New components to be developed</li> <li>Database schema modifications</li> <li>API endpoints to be created</li> <li>UI components to be developed</li> <li>Testing strategy</li> </ol>"},{"location":"archive/trust-infrastructure-token-implementation/","title":"Cross-Chain $MAILY Token Implementation Plan","text":"<p>This document outlines the high-level implementation plan for the Cross-Chain $MAILY Token component of the Trust Infrastructure phase.</p>"},{"location":"archive/trust-infrastructure-token-implementation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Smart Contract Development</li> <li>Backend Services</li> <li>Database Changes</li> <li>API Endpoints</li> <li>Frontend Components</li> <li>Testing Strategy</li> <li>Security Considerations</li> </ul>"},{"location":"archive/trust-infrastructure-token-implementation/#overview","title":"Overview","text":"<p>The $MAILY token will be deployed initially on Ethereum and Polygon, with support for zkSync Era planned for future iterations. The token will utilize the Interchain Token Standard (ITS) for cross-chain compatibility and Chainlink oracles for verifying email campaign metrics on-chain.</p>"},{"location":"archive/trust-infrastructure-token-implementation/#key-features","title":"Key Features","text":"<ul> <li>ERC20-compatible token with cross-chain capabilities</li> <li>Performance-based minting mechanism tied to campaign metrics</li> <li>Verifiable on-chain metrics through Chainlink oracles</li> <li>Secure wallet integration for marketers</li> </ul>"},{"location":"archive/trust-infrastructure-token-implementation/#integration-points","title":"Integration Points","text":"<ul> <li>Campaign Service: To track and record metrics</li> <li>User Service: To associate users with blockchain wallets</li> <li>Email Sending Pipeline: To embed token information in emails</li> <li>Analytics Service: To process performance data</li> </ul>"},{"location":"archive/trust-infrastructure-token-implementation/#smart-contract-development","title":"Smart Contract Development","text":""},{"location":"archive/trust-infrastructure-token-implementation/#maily-token-contract","title":"$MAILY Token Contract","text":"<p>Create an ERC20-compatible token contract with: - Access control for minter and oracle roles - Performance-based token minting function - Cross-chain compatibility via LayerZero - Maximum supply cap of 1 billion tokens</p> <p>The contract will include a <code>mintBasedOnPerformance</code> function that mints tokens based on campaign open rates and click rates.</p>"},{"location":"archive/trust-infrastructure-token-implementation/#chainlink-oracle-integration","title":"Chainlink Oracle Integration","text":"<p>Develop a Chainlink External Adapter to: - Fetch campaign metrics from Maily's API - Convert metrics to basis points (e.g., 15.43% \u2192 1543 basis points) - Submit verified metrics to the blockchain</p>"},{"location":"archive/trust-infrastructure-token-implementation/#backend-services","title":"Backend Services","text":""},{"location":"archive/trust-infrastructure-token-implementation/#blockchainservice","title":"BlockchainService","text":"<p>Create a new service in <code>apps/api/blockchain/services/</code> that will: - Connect to Ethereum and Polygon networks - Load and interact with smart contracts - Handle wallet management and transaction signing - Record blockchain events in the database - Update token balances for users</p>"},{"location":"archive/trust-infrastructure-token-implementation/#campaign-service-extension","title":"Campaign Service Extension","text":"<p>Extend the existing Campaign Service to: - Add blockchain verification option for campaigns - Calculate and store campaign metrics - Call the blockchain service to mint tokens based on performance - Update campaigns with token rewards and verification data</p>"},{"location":"archive/trust-infrastructure-token-implementation/#user-service-extension","title":"User Service Extension","text":"<p>Add wallet management to the User Service: - Link blockchain wallets to user accounts - Validate wallet addresses - Handle multiple wallets per user with primary designation - Retrieve token balances for users</p>"},{"location":"archive/trust-infrastructure-token-implementation/#database-changes","title":"Database Changes","text":""},{"location":"archive/trust-infrastructure-token-implementation/#new-models","title":"New Models","text":"<p>Create the following new database models: - <code>WalletAddress</code>: To store user wallet addresses - <code>TokenBalance</code>: To track token balances per wallet - <code>BlockchainEvent</code>: To log blockchain transactions and events</p>"},{"location":"archive/trust-infrastructure-token-implementation/#schema-modifications","title":"Schema Modifications","text":"<p>Update existing models: - Add <code>blockchain_enabled</code> and <code>token_reward</code> fields to the Campaign model - Add wallet address relationship to the User model</p>"},{"location":"archive/trust-infrastructure-token-implementation/#migrations","title":"Migrations","text":"<p>Create a database migration script to: - Add new blockchain-related tables - Add new fields to existing tables - Create appropriate indexes for performance</p>"},{"location":"archive/trust-infrastructure-token-implementation/#api-endpoints","title":"API Endpoints","text":"<p>Add new API endpoints: - <code>POST /blockchain/wallet</code>: Link a wallet address to a user - <code>GET /blockchain/balance/{address}</code>: Get token balance for an address - <code>POST /blockchain/campaigns/{id}/finalize</code>: Finalize campaign and record metrics on-chain</p>"},{"location":"archive/trust-infrastructure-token-implementation/#frontend-components","title":"Frontend Components","text":""},{"location":"archive/trust-infrastructure-token-implementation/#wallet-management","title":"Wallet Management","text":"<p>Create a React component to: - Allow users to link their Ethereum wallet addresses - Validate wallet address format - Display current linked wallets - Set primary wallet address</p>"},{"location":"archive/trust-infrastructure-token-implementation/#token-balance-display","title":"Token Balance Display","text":"<p>Create a component to: - Display user's token balance - Show transaction history - Visualize rewards earned from campaigns</p>"},{"location":"archive/trust-infrastructure-token-implementation/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit test smart contracts with Hardhat and Waffle</li> <li>Integration test blockchain services with mock providers</li> <li>E2E test wallet linking and campaign finalization flows</li> <li>Test cross-chain compatibility in testnet environments</li> </ul>"},{"location":"archive/trust-infrastructure-token-implementation/#security-considerations","title":"Security Considerations","text":"<ul> <li>Use OpenZeppelin contracts for security best practices</li> <li>Implement access control for all sensitive functions</li> <li>Store private keys securely using HashiCorp Vault</li> <li>Perform static analysis of smart contracts with tools like Slither</li> <li>Conduct formal verification for critical contract functions</li> <li>Implement rate limiting for blockchain operations</li> </ul>"},{"location":"legal/cookies/","title":"Cookie Policy","text":"<p>Last updated: March 21, 2024</p>"},{"location":"legal/cookies/#1-introduction","title":"1. Introduction","text":"<p>This Cookie Policy explains how JustMaily (\"we\", \"us\", or \"our\"), an open-source project developed by Mindburn Labs, uses cookies and similar technologies when you visit our website (justmaily.com) or use our email marketing platform (app.justmaily.com).</p> <p>Beta Notice: JustMaily is currently in beta and available for whitelisted users only. Cookie preferences and functionality may change as the project evolves.</p>"},{"location":"legal/cookies/#2-what-are-cookies","title":"2. What Are Cookies?","text":"<p>Cookies are small text files stored on your device when you visit a website. They help remember your preferences and improve your browsing experience.</p>"},{"location":"legal/cookies/#3-types-of-cookies-we-use","title":"3. Types of Cookies We Use","text":""},{"location":"legal/cookies/#31-essential-cookies-always-active","title":"3.1 Essential Cookies (Always Active)","text":"<p>These cookies are necessary for the website to function and cannot be switched off: - Authentication cookies - Security cookies - Load balancing cookies - Session management cookies</p> <p>Example: <pre><code>{\n  \"name\": \"session_id\",\n  \"purpose\": \"Maintains your login session\",\n  \"duration\": \"Session\",\n  \"type\": \"Essential\"\n}\n</code></pre></p>"},{"location":"legal/cookies/#32-functional-cookies-optional","title":"3.2 Functional Cookies (Optional)","text":"<p>These cookies enable enhanced functionality: - Language preferences - Theme settings - User interface customization - Form auto-fill data</p> <p>Example: <pre><code>{\n  \"name\": \"user_preferences\",\n  \"purpose\": \"Stores your UI preferences\",\n  \"duration\": \"1 year\",\n  \"type\": \"Functional\"\n}\n</code></pre></p>"},{"location":"legal/cookies/#33-analytics-cookies-optional","title":"3.3 Analytics Cookies (Optional)","text":"<p>These cookies help us understand how visitors use our site: - Page visit statistics - Traffic sources - User behavior patterns - Performance metrics</p> <p>Example: <pre><code>{\n  \"name\": \"ga_tracking\",\n  \"purpose\": \"Google Analytics tracking\",\n  \"duration\": \"2 years\",\n  \"type\": \"Analytics\"\n}\n</code></pre></p>"},{"location":"legal/cookies/#34-marketing-cookies-optional","title":"3.4 Marketing Cookies (Optional)","text":"<p>These cookies track your online activity to help deliver targeted advertising: - Ad performance tracking - Campaign effectiveness - Behavioral profiling - Retargeting data</p> <p>Example: <pre><code>{\n  \"name\": \"ad_tracking\",\n  \"purpose\": \"Advertisement tracking\",\n  \"duration\": \"90 days\",\n  \"type\": \"Marketing\"\n}\n</code></pre></p>"},{"location":"legal/cookies/#4-third-party-cookies","title":"4. Third-Party Cookies","text":"<p>We use cookies from these trusted partners:</p>"},{"location":"legal/cookies/#41-analytics-partners","title":"4.1 Analytics Partners","text":"<ul> <li>Google Analytics</li> <li>Mixpanel</li> <li>Hotjar</li> </ul>"},{"location":"legal/cookies/#42-marketing-partners","title":"4.2 Marketing Partners","text":"<ul> <li>Google Ads</li> <li>Facebook Pixel</li> <li>LinkedIn Insight</li> </ul>"},{"location":"legal/cookies/#43-functionality-partners","title":"4.3 Functionality Partners","text":"<ul> <li>Intercom (chat)</li> <li>Stripe (payments)</li> <li>CloudFlare (security)</li> </ul>"},{"location":"legal/cookies/#5-cookie-duration","title":"5. Cookie Duration","text":"<p>Our cookies fall into these duration categories: - Session cookies: Deleted when you close your browser - Persistent cookies: Remain for a set period - Permanent cookies: Remain until manually deleted</p>"},{"location":"legal/cookies/#6-managing-cookies","title":"6. Managing Cookies","text":""},{"location":"legal/cookies/#61-cookie-consent","title":"6.1 Cookie Consent","text":"<p>You can manage your cookie preferences through our consent banner: - Accept all cookies - Reject non-essential cookies - Customize preferences</p>"},{"location":"legal/cookies/#62-browser-settings","title":"6.2 Browser Settings","text":"<p>Instructions for managing cookies in popular browsers:</p>"},{"location":"legal/cookies/#chrome","title":"Chrome","text":"<ol> <li>Click Menu &gt; Settings</li> <li>Search for \"cookies\"</li> <li>Click \"Privacy and security\"</li> <li>Choose cookie settings</li> </ol>"},{"location":"legal/cookies/#firefox","title":"Firefox","text":"<ol> <li>Click Menu &gt; Options</li> <li>Select \"Privacy &amp; Security\"</li> <li>Choose cookie handling preferences</li> </ol>"},{"location":"legal/cookies/#safari","title":"Safari","text":"<ol> <li>Click Safari &gt; Preferences</li> <li>Select \"Privacy\"</li> <li>Manage cookie settings</li> </ol>"},{"location":"legal/cookies/#edge","title":"Edge","text":"<ol> <li>Click Menu &gt; Settings</li> <li>Select \"Privacy &amp; security\"</li> <li>Choose cookie preferences</li> </ol>"},{"location":"legal/cookies/#7-do-not-track","title":"7. Do Not Track","text":"<p>We honor Do Not Track (DNT) signals: - DNT enabled: Only essential cookies - DNT disabled: Normal cookie operation - Browser default: Follow consent preferences</p>"},{"location":"legal/cookies/#8-cookie-policy-updates","title":"8. Cookie Policy Updates","text":""},{"location":"legal/cookies/#81-changes","title":"8.1 Changes","text":"<p>We may update this policy to reflect: - New features - Legal requirements - Security improvements - Partner changes</p>"},{"location":"legal/cookies/#82-notifications","title":"8.2 Notifications","text":"<p>You'll be notified of changes through: - Website banner - Email notification - Platform announcement</p>"},{"location":"legal/cookies/#9-cookie-data-collection","title":"9. Cookie Data Collection","text":""},{"location":"legal/cookies/#91-information-collected","title":"9.1 Information Collected","text":"<p>Our cookies may collect: - IP address - Browser type - Device information - Usage patterns - Preferences</p>"},{"location":"legal/cookies/#92-data-usage","title":"9.2 Data Usage","text":"<p>Cookie data is used for: - Improving service - Personalizing experience - Analyzing performance - Security measures</p>"},{"location":"legal/cookies/#10-gdpr-compliance","title":"10. GDPR Compliance","text":""},{"location":"legal/cookies/#101-legal-basis","title":"10.1 Legal Basis","text":"<p>We process cookie data under: - Consent (marketing) - Legitimate interest (analytics) - Legal obligation (security) - Contract fulfillment (essential)</p>"},{"location":"legal/cookies/#102-data-rights","title":"10.2 Data Rights","text":"<p>You have the right to: - Access cookie data - Delete cookie data - Restrict processing - Withdraw consent</p>"},{"location":"legal/cookies/#11-contact-information","title":"11. Contact Information","text":"<p>For cookie-related inquiries: - Email: privacy@justmaily.com - GitHub Issues: https://github.com/justmaily/issues - Web: https://app.justmaily.com/privacy/cookies</p>"},{"location":"legal/cookies/#12-technical-details","title":"12. Technical Details","text":""},{"location":"legal/cookies/#121-cookie-security","title":"12.1 Cookie Security","text":"<p>Our cookies are: - Encrypted in transit - Securely stored - Regularly audited - Access controlled</p>"},{"location":"legal/cookies/#122-cookie-standards","title":"12.2 Cookie Standards","text":"<p>We follow: - RFC 6265 - GDPR requirements - CCPA guidelines - Industry best practices</p>"},{"location":"legal/cookies/#13-beta-program-notice","title":"13. Beta Program Notice","text":"<p>During the beta phase: - Cookie preferences may be reset with updates - New cookie types may be introduced - Analytics may be more extensive for testing - Cookie behavior may change - Settings may not persist between versions</p>"},{"location":"legal/privacy/","title":"Privacy Policy","text":"<p>Last updated: March 21, 2024</p>"},{"location":"legal/privacy/#1-introduction","title":"1. Introduction","text":"<p>JustMaily (\"we\", \"our\", or \"us\") is an open-source project developed by Mindburn Labs (beta). This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our email marketing platform at app.justmaily.com.</p> <p>Beta Notice: JustMaily is currently in beta and is free to test for whitelisted users within certain limits. Features, terms, and conditions are subject to change.</p>"},{"location":"legal/privacy/#2-information-we-collect","title":"2. Information We Collect","text":""},{"location":"legal/privacy/#21-personal-information","title":"2.1 Personal Information","text":"<ul> <li>Email addresses</li> <li>Names</li> <li>Contact information</li> <li>Usage data</li> <li>Campaign analytics</li> </ul>"},{"location":"legal/privacy/#22-technical-information","title":"2.2 Technical Information","text":"<ul> <li>IP addresses</li> <li>Browser type</li> <li>Device information</li> <li>Cookies and tracking data</li> <li>Log files</li> </ul>"},{"location":"legal/privacy/#3-how-we-use-your-information","title":"3. How We Use Your Information","text":"<ul> <li>To provide and maintain our service</li> <li>To process your transactions</li> <li>To send administrative information</li> <li>To provide customer support</li> <li>To analyze and improve our service</li> <li>To comply with legal obligations</li> </ul>"},{"location":"legal/privacy/#4-gdpr-compliance","title":"4. GDPR Compliance","text":""},{"location":"legal/privacy/#41-legal-basis-for-processing","title":"4.1 Legal Basis for Processing","text":"<p>Under GDPR, we process personal data based on the following legal grounds: - Consent - Contract fulfillment - Legal obligations - Legitimate interests</p>"},{"location":"legal/privacy/#42-your-rights","title":"4.2 Your Rights","text":"<p>You have the right to: - Access your personal data - Rectify inaccurate data - Erase your data (\"right to be forgotten\") - Restrict processing - Data portability - Object to processing - Withdraw consent</p>"},{"location":"legal/privacy/#43-data-transfers","title":"4.3 Data Transfers","text":"<p>We ensure appropriate safeguards for data transfers outside the EEA through: - Standard contractual clauses - Privacy Shield certification - Adequacy decisions</p>"},{"location":"legal/privacy/#5-ccpa-compliance","title":"5. CCPA Compliance","text":""},{"location":"legal/privacy/#51-california-residents-rights","title":"5.1 California Residents' Rights","text":"<p>Under CCPA, you have the right to: - Know what personal information is collected - Know if personal information is sold or disclosed - Say no to the sale of personal information - Access your personal information - Equal service and price</p>"},{"location":"legal/privacy/#52-personal-information-sales","title":"5.2 Personal Information Sales","text":"<p>We do not sell personal information. We may share data with service providers under strict confidentiality agreements.</p>"},{"location":"legal/privacy/#53-data-access-requests","title":"5.3 Data Access Requests","text":"<p>To exercise your rights under CCPA: - Email: privacy@justmaily.com - Web: https://app.justmaily.com/privacy/request</p>"},{"location":"legal/privacy/#6-data-retention-and-portability","title":"6. Data Retention and Portability","text":""},{"location":"legal/privacy/#61-retention-periods","title":"6.1 Retention Periods","text":"<ul> <li>Active account data: Duration of account plus 30 days</li> <li>Campaign data: 12 months from creation</li> <li>Analytics data: 24 months</li> <li>Inactive accounts: Deleted after 12 months of inactivity</li> </ul>"},{"location":"legal/privacy/#62-data-deletion","title":"6.2 Data Deletion","text":"<p>We automatically delete: - Inactive account data after 12 months - Failed campaign drafts after 30 days - Unverified email addresses after 7 days</p>"},{"location":"legal/privacy/#63-data-portability","title":"6.3 Data Portability","text":"<p>We support your right to data portability: - Export all your data in machine-readable formats (JSON, CSV) - Download subscriber lists and campaign data - Export analytics and performance metrics - Transfer data to another service - Regular backup recommendations</p>"},{"location":"legal/privacy/#64-export-formats","title":"6.4 Export Formats","text":"<p>Available data export formats include: - Subscriber Data: CSV, JSON - Campaigns: HTML, JSON - Analytics: CSV, JSON - Templates: HTML, JSON - Configuration: YAML, JSON</p>"},{"location":"legal/privacy/#65-beta-data-notice","title":"6.5 Beta Data Notice","text":"<p>During the beta period: - Export your data regularly - No guarantee of data persistence - Migration tools may be limited - Format changes may occur - Export functionality may change</p>"},{"location":"legal/privacy/#7-cookie-policy","title":"7. Cookie Policy","text":""},{"location":"legal/privacy/#71-essential-cookies","title":"7.1 Essential Cookies","text":"<ul> <li>Authentication</li> <li>Security</li> <li>Load balancing</li> <li>User preferences</li> </ul>"},{"location":"legal/privacy/#72-analytics-cookies","title":"7.2 Analytics Cookies","text":"<ul> <li>Usage patterns</li> <li>Performance monitoring</li> <li>Feature optimization</li> </ul>"},{"location":"legal/privacy/#73-marketing-cookies-optional","title":"7.3 Marketing Cookies (Optional)","text":"<ul> <li>Behavioral analysis</li> <li>Campaign effectiveness</li> <li>Service improvements</li> </ul>"},{"location":"legal/privacy/#8-data-security","title":"8. Data Security","text":""},{"location":"legal/privacy/#81-security-measures","title":"8.1 Security Measures","text":"<ul> <li>End-to-end encryption</li> <li>Regular security audits</li> <li>Access controls</li> <li>Employee training</li> <li>Incident response plan</li> </ul>"},{"location":"legal/privacy/#82-data-breaches","title":"8.2 Data Breaches","text":"<p>We will notify affected users and authorities within 72 hours of discovering a breach.</p>"},{"location":"legal/privacy/#9-third-party-services","title":"9. Third-Party Services","text":""},{"location":"legal/privacy/#91-service-providers","title":"9.1 Service Providers","text":"<ul> <li>AWS (hosting)</li> <li>Stripe (payments)</li> <li>Intercom (support)</li> <li>Google Analytics (analytics)</li> </ul>"},{"location":"legal/privacy/#92-data-processing-agreements","title":"9.2 Data Processing Agreements","text":"<p>All third-party providers have signed DPAs ensuring GDPR/CCPA compliance.</p>"},{"location":"legal/privacy/#10-childrens-privacy","title":"10. Children's Privacy","text":"<p>We do not knowingly collect data from children under 16. Parents can request data deletion by contacting privacy@justmaily.com.</p>"},{"location":"legal/privacy/#11-changes-to-privacy-policy","title":"11. Changes to Privacy Policy","text":"<p>We will notify you of material changes via: - Email notification - Website notice - Application alert</p>"},{"location":"legal/privacy/#12-contact-information","title":"12. Contact Information","text":"<p>Privacy Officer: - Email: privacy@justmaily.com - Web: https://app.justmaily.com/privacy</p> <p>Project Maintainers: - GitHub: https://github.com/justmaily - Email: support@justmaily.com</p>"},{"location":"legal/privacy/#13-open-source-notice","title":"13. Open Source Notice","text":"<p>JustMaily is an open-source project. While we strive to protect your privacy, please note: - The project is in beta stage - Features and policies may change - Service is provided \"as is\" - Usage limits apply to beta testing - Access is currently limited to whitelisted users</p>"},{"location":"legal/terms/","title":"Terms of Service","text":"<p>Last updated: March 21, 2024</p>"},{"location":"legal/terms/#1-agreement-to-terms","title":"1. Agreement to Terms","text":"<p>By accessing or using JustMaily's email marketing platform at app.justmaily.com, you agree to be bound by these Terms of Service (\"Terms\"). If you disagree with any part of the terms, you may not access the service.</p>"},{"location":"legal/terms/#2-beta-notice","title":"2. Beta Notice","text":"<p>JustMaily is currently in beta and is provided as an open-source project developed by Mindburn Labs. Please note: - The service is free during the beta period for whitelisted users - Features and functionality may change without notice - Usage limits and restrictions apply - Access is limited to approved beta testers - No guarantees of service availability or continuity - Terms may be updated as the project evolves</p>"},{"location":"legal/terms/#3-description-of-service","title":"3. Description of Service","text":"<p>JustMaily provides an AI-powered email marketing platform that enables users to: - Create and manage email campaigns - Analyze campaign performance - Manage subscriber lists - Automate email marketing workflows</p>"},{"location":"legal/terms/#4-account-terms","title":"4. Account Terms","text":""},{"location":"legal/terms/#41-account-requirements","title":"4.1 Account Requirements","text":"<ul> <li>You must be 18 years or older</li> <li>Provide accurate and complete information</li> <li>Secure your account credentials</li> <li>Notify us of any unauthorized access</li> <li>Be approved for beta testing access</li> </ul>"},{"location":"legal/terms/#42-account-restrictions","title":"4.2 Account Restrictions","text":"<p>You may not: - Share account credentials - Use the service for illegal purposes - Impersonate others - Circumvent rate limits - Exceed beta testing usage limits</p>"},{"location":"legal/terms/#5-beta-testing-terms","title":"5. Beta Testing Terms","text":""},{"location":"legal/terms/#51-service-availability","title":"5.1 Service Availability","text":"<ul> <li>Service provided \"as is\" during beta</li> <li>No guaranteed uptime or availability</li> <li>Features may be added or removed</li> <li>Beta period duration not guaranteed</li> <li>Migration path to production not guaranteed</li> </ul>"},{"location":"legal/terms/#52-usage-limits","title":"5.2 Usage Limits","text":"<ul> <li>Maximum 5,000 subscribers per account</li> <li>Up to 50,000 emails per month</li> <li>Maximum 100 campaigns per month</li> <li>API rate limit: 100 requests per minute</li> <li>Storage limit: 1GB per account</li> <li>Maximum file size: 10MB per upload</li> </ul>"},{"location":"legal/terms/#53-beta-requirements","title":"5.3 Beta Requirements","text":"<ul> <li>Must be a whitelisted user</li> <li>Required to report bugs and issues</li> <li>Participation in feedback surveys</li> <li>No commercial use without approval</li> <li>No reselling or redistribution</li> <li>Regular usage of the platform</li> </ul>"},{"location":"legal/terms/#54-whitelisting-process","title":"5.4 Whitelisting Process","text":"<ol> <li>Submit application at app.justmaily.com/beta</li> <li>Provide use case and requirements</li> <li>Agree to beta testing terms</li> <li>Receive approval and access token</li> <li>Complete onboarding process</li> </ol>"},{"location":"legal/terms/#55-beta-duration","title":"5.5 Beta Duration","text":"<ul> <li>Initial beta period: 3 months</li> <li>May be extended as needed</li> <li>30 days notice before beta end</li> <li>Data export period after beta</li> <li>Migration options if available</li> </ul>"},{"location":"legal/terms/#6-acceptable-use","title":"6. Acceptable Use","text":""},{"location":"legal/terms/#61-permitted-use","title":"6.1 Permitted Use","text":"<ul> <li>Legal marketing communications</li> <li>Opt-in subscriber lists</li> <li>Compliant email content</li> <li>Authorized sender domains</li> <li>Beta testing purposes only</li> </ul>"},{"location":"legal/terms/#62-prohibited-use","title":"6.2 Prohibited Use","text":"<ul> <li>Spam or unsolicited emails</li> <li>Malicious content</li> <li>Illegal activities</li> <li>Intellectual property violations</li> <li>Commercial use beyond beta testing scope</li> </ul>"},{"location":"legal/terms/#7-data-usage","title":"7. Data Usage","text":""},{"location":"legal/terms/#71-your-data","title":"7.1 Your Data","text":"<ul> <li>You retain ownership of your content</li> <li>We process data as per our Privacy Policy</li> <li>You are responsible for data accuracy</li> <li>Regular backups are recommended</li> <li>Data may be deleted after beta period</li> </ul>"},{"location":"legal/terms/#72-our-data","title":"7.2 Our Data","text":"<ul> <li>We own our service infrastructure</li> <li>Platform analytics belong to us</li> <li>Aggregate data may be used for improvements</li> <li>AI models remain our property</li> <li>Beta testing data may be used for development</li> </ul>"},{"location":"legal/terms/#8-service-level-agreement","title":"8. Service Level Agreement","text":""},{"location":"legal/terms/#81-beta-service-levels","title":"8.1 Beta Service Levels","text":"<ul> <li>No uptime guarantees during beta</li> <li>Maintenance may occur at any time</li> <li>Service interruptions may occur</li> <li>No compensation for downtime</li> <li>Best-effort support only</li> </ul>"},{"location":"legal/terms/#82-support","title":"8.2 Support","text":"<ul> <li>Community support via GitHub</li> <li>Email support for critical issues</li> <li>Response time not guaranteed</li> <li>Self-service documentation</li> <li>Beta feedback collection</li> </ul>"},{"location":"legal/terms/#9-intellectual-property","title":"9. Intellectual Property","text":""},{"location":"legal/terms/#91-open-source-components","title":"9.1 Open Source Components","text":"<ul> <li>Project licensed under MIT License</li> <li>Source code available at github.com/justmaily</li> <li>Contributions welcome under project guidelines</li> <li>Third-party licenses respected and listed</li> <li>Attribution requirements maintained</li> </ul>"},{"location":"legal/terms/#92-mit-license-terms","title":"9.2 MIT License Terms","text":"<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <ol> <li>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</li> <li>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</li> <li>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</li> </ol>"},{"location":"legal/terms/#93-your-content","title":"9.3 Your Content","text":"<ul> <li>Email content and designs</li> <li>Subscriber lists</li> <li>Custom templates</li> <li>Campaign data</li> <li>Beta testing feedback</li> </ul>"},{"location":"legal/terms/#10-termination","title":"10. Termination","text":""},{"location":"legal/terms/#101-your-rights","title":"10.1 Your Rights","text":"<ul> <li>Cancel beta testing anytime</li> <li>Export your data</li> <li>Delete your account</li> <li>Provide feedback</li> <li>Discontinue use</li> </ul>"},{"location":"legal/terms/#102-our-rights","title":"10.2 Our Rights","text":"<ul> <li>Suspend accounts for violations</li> <li>Terminate beta access</li> <li>Remove harmful content</li> <li>Preserve legal evidence</li> <li>End beta program</li> </ul>"},{"location":"legal/terms/#11-liability-and-warranties","title":"11. Liability and Warranties","text":""},{"location":"legal/terms/#111-beta-disclaimer","title":"11.1 Beta Disclaimer","text":"<ul> <li>Service provided \"as is\"</li> <li>No guaranteed results</li> <li>Technical issues may occur</li> <li>Features may change</li> <li>No production use guarantees</li> </ul>"},{"location":"legal/terms/#112-limitation-of-liability","title":"11.2 Limitation of Liability","text":"<ul> <li>No liability for beta issues</li> <li>No consequential damages</li> <li>Force majeure events</li> <li>Data loss not compensated</li> <li>Service interruption not compensated</li> </ul>"},{"location":"legal/terms/#12-changes-to-terms","title":"12. Changes to Terms","text":""},{"location":"legal/terms/#121-modifications","title":"12.1 Modifications","text":"<ul> <li>Terms may be updated</li> <li>Changes effective immediately</li> <li>Continued use implies acceptance</li> <li>Beta terms subject to change</li> <li>Notice may not be provided</li> </ul>"},{"location":"legal/terms/#122-notifications","title":"12.2 Notifications","text":"<ul> <li>GitHub repository updates</li> <li>Platform announcements</li> <li>Email notifications</li> <li>In-app notifications</li> <li>Community updates</li> </ul>"},{"location":"legal/terms/#13-project-information","title":"13. Project Information","text":""},{"location":"legal/terms/#131-open-source","title":"13.1 Open Source","text":"<ul> <li>GitHub: https://github.com/justmaily</li> <li>License: [License Type]</li> <li>Contribution guidelines</li> <li>Issue tracking</li> <li>Documentation</li> </ul>"},{"location":"legal/terms/#132-contact","title":"13.2 Contact","text":"<ul> <li>Email: support@justmaily.com</li> <li>GitHub Issues</li> <li>Community forums</li> <li>Beta testing feedback</li> <li>Security reports</li> </ul>"},{"location":"legal/terms/#14-beta-program","title":"14. Beta Program","text":""},{"location":"legal/terms/#141-participation","title":"14.1 Participation","text":"<ul> <li>Whitelisted access only</li> <li>Usage limits apply</li> <li>Feedback requirements</li> <li>No guaranteed duration</li> <li>No compensation provided</li> </ul>"},{"location":"legal/terms/#142-termination","title":"14.2 Termination","text":"<ul> <li>Program may end anytime</li> <li>Data export requirements</li> <li>Migration options</li> <li>Notice period</li> <li>Service discontinuation</li> </ul>"},{"location":"legal/terms/#15-payment-terms","title":"15. Payment Terms","text":""},{"location":"legal/terms/#151-pricing","title":"15.1 Pricing","text":"<ul> <li>Subscription fees are billed monthly/annually</li> <li>Prices are subject to change with 30 days notice</li> <li>All fees are non-refundable unless required by law</li> </ul>"},{"location":"legal/terms/#152-payment-processing","title":"15.2 Payment Processing","text":"<ul> <li>Payments are processed via Stripe</li> <li>Failed payments may result in service suspension</li> <li>Currency conversions are subject to exchange rates</li> </ul>"},{"location":"legal/terms/#16-indemnification","title":"16. Indemnification","text":"<p>You agree to indemnify JustMaily for: - Policy violations - Legal claims - Data breaches caused by you - Intellectual property disputes</p>"},{"location":"legal/terms/#17-governing-law","title":"17. Governing Law","text":""},{"location":"legal/terms/#171-jurisdiction","title":"17.1 Jurisdiction","text":"<ul> <li>Laws of the jurisdiction where you reside</li> <li>Exclusive venue selection</li> <li>Alternative dispute resolution</li> <li>Class action waiver</li> </ul>"},{"location":"legal/terms/#172-severability","title":"17.2 Severability","text":"<ul> <li>Invalid terms severability</li> <li>Remaining terms valid</li> <li>Good faith negotiations</li> <li>Legal compliance</li> </ul>"},{"location":"legal/terms/#18-contact-information","title":"18. Contact Information","text":"<p>Project Contacts: - Legal: legal@justmaily.com - Support: support@justmaily.com - Security: security@justmaily.com - GitHub: https://github.com/justmaily</p> <p>Community: - GitHub Discussions - Issue Tracker - Documentation Wiki</p> <p>Business Hours: - Monday-Friday: 9:00 AM - 5:00 PM EST - Excluding federal holidays</p>"}]}
