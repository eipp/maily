version: '3.8'

services:
  analytics-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: analytics-service
    ports:
      - "4000:4000"
      - "9090:9090"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - API_PREFIX=/api/v1
      - MONGODB_URI=mongodb://mongodb:27017/maily-analytics
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - JWT_SECRET=local-dev-secret-key
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_EXCHANGE=maily-events
      - RABBITMQ_QUEUE=analytics-events
      - LOG_LEVEL=debug
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mongodb:
    image: mongo:6.0
    container_name: analytics-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=maily-analytics
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: analytics-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    image: prom/prometheus:latest
    container_name: analytics-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - analytics-network
    restart: unless-stopped
    depends_on:
      - analytics-service

  grafana:
    image: grafana/grafana:latest
    container_name: analytics-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - analytics-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  mongodb-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:

networks:
  analytics-network:
    driver: bridge
