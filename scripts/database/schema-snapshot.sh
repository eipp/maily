#!/bin/bash
# Database Schema Snapshot Script for Maily
# This script creates a snapshot of the current database schema for migration consolidation

set -e

# Default values
ENVIRONMENT="${1:-development}"
LOG_DIR="deployment_logs"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
SNAPSHOT_DIR="database/snapshots"
LOG_FILE="${LOG_DIR}/schema_snapshot_${ENVIRONMENT}_${TIMESTAMP}.log"
SNAPSHOT_FILE="${SNAPSHOT_DIR}/schema_snapshot_${ENVIRONMENT}_${TIMESTAMP}.sql"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create log and snapshot directories if they don't exist
mkdir -p $LOG_DIR
mkdir -p $SNAPSHOT_DIR

# Display banner
echo -e "${BLUE}=====================================================================${NC}"
echo -e "${BLUE}                   MAILY DATABASE SCHEMA SNAPSHOT${NC}"
echo -e "${BLUE}=====================================================================${NC}"
echo "Environment: ${ENVIRONMENT}"
echo "Timestamp: $(date)"
echo "Log file: ${LOG_FILE}"
echo "Snapshot file: ${SNAPSHOT_FILE}"
echo ""

# Log start
echo "====================================================================" | tee -a $LOG_FILE
echo "Starting Maily Database Schema Snapshot (${ENVIRONMENT})" | tee -a $LOG_FILE
echo "Timestamp: $(date)" | tee -a $LOG_FILE
echo "====================================================================" | tee -a $LOG_FILE

# Function to display step information
step() {
  echo -e "${BLUE}-> $1${NC}" | tee -a $LOG_FILE
}

# Function to display success messages
success() {
  echo -e "${GREEN}âœ“ $1${NC}" | tee -a $LOG_FILE
}

# Function to display warning messages
warning() {
  echo -e "${YELLOW}! $1${NC}" | tee -a $LOG_FILE
}

# Function to display error messages and exit
error() {
  echo -e "${RED}ERROR: $1${NC}" | tee -a $LOG_FILE
  exit 1
}

# Function to run a command with logging
run_command() {
  local cmd="$1"
  local error_msg="${2:-Command failed}"

  echo "$ $cmd" | tee -a $LOG_FILE
  if eval "$cmd" >> $LOG_FILE 2>&1; then
    return 0
  else
    local exit_code=$?
    error "${error_msg} (Exit code: ${exit_code})"
    return $exit_code
  fi
}

# Load environment variables
step "Loading environment variables"
if [ -f ".env.${ENVIRONMENT}" ]; then
  source ./scripts/source-env.sh "${ENVIRONMENT}"
  success "Environment variables loaded"
else
  if [ -f ".env" ]; then
    warning ".env.${ENVIRONMENT} not found, using .env"
    source ./scripts/source-env.sh
    success "Environment variables loaded from .env"
  else
    error "No environment file found"
  fi
fi

# Check database connection
step "Checking database connection"
if [ -z "$DATABASE_URL" ]; then
  warning "DATABASE_URL is not set, attempting to use individual connection parameters"
  if [ -z "$DATABASE_HOST" ] || [ -z "$DATABASE_USER" ] || [ -z "$DATABASE_NAME" ]; then
    error "Database connection parameters are not set"
  fi
else
  # Parse the DATABASE_URL to get connection details
  DB_REGEX="postgresql://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+)"
  if [[ $DATABASE_URL =~ $DB_REGEX ]]; then
    DATABASE_USER="${BASH_REMATCH[1]}"
    DATABASE_PASSWORD="${BASH_REMATCH[2]}"
    DATABASE_HOST="${BASH_REMATCH[3]}"
    DATABASE_PORT="${BASH_REMATCH[4]}"
    DATABASE_NAME="${BASH_REMATCH[5]}"
  else
    error "Failed to parse DATABASE_URL"
  fi
fi

# Try to connect to the database
run_command "PGPASSWORD=${DATABASE_PASSWORD} psql -h ${DATABASE_HOST} -U ${DATABASE_USER} -d ${DATABASE_NAME} -c '\\conninfo'" "Failed to connect to database"
success "Database connection successful"

# Create schema snapshot
step "Creating schema snapshot"
run_command "PGPASSWORD=${DATABASE_PASSWORD} pg_dump -h ${DATABASE_HOST} -U ${DATABASE_USER} -d ${DATABASE_NAME} --schema-only -f ${SNAPSHOT_FILE}" "Failed to create schema snapshot"
success "Schema snapshot created: ${SNAPSHOT_FILE}"

# Add migration metadata
step "Adding migration metadata"
cat << EOF >> ${SNAPSHOT_FILE}

-- Migration metadata
-- Generated by Maily schema snapshot tool
-- Environment: ${ENVIRONMENT}
-- Timestamp: $(date)
-- This snapshot represents the consolidated state of multiple migration systems:
-- 1. SQL Migrations (packages/database/migrations/*.sql)
-- 2. Alembic Migrations (apps/api/database/migrations/versions/*.py)
-- 3. Prisma Migrations (packages/db)
-- 4. Supabase Migrations (scripts/db-migration.sh)
--
-- This will be used as the baseline for the consolidated migration system.
EOF

success "Migration metadata added"

# Create migration history table if it doesn't exist
step "Ensuring migration_history table exists"
cat << EOF >> ${SNAPSHOT_FILE}

-- Ensure migration history table exists
CREATE TABLE IF NOT EXISTS migration_history (
    id SERIAL PRIMARY KEY,
    migration_name TEXT UNIQUE NOT NULL,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    migration_source TEXT DEFAULT 'consolidated',
    migration_description TEXT
);

-- Record this snapshot as a migration
INSERT INTO migration_history (migration_name, migration_description)
VALUES ('schema_snapshot_${ENVIRONMENT}_${TIMESTAMP}', 'Consolidated schema snapshot')
ON CONFLICT (migration_name) DO NOTHING;
EOF

success "Migration history table definition added"

# Output success
echo -e "\n${GREEN}=====================================================================${NC}"
echo -e "${GREEN}                   SCHEMA SNAPSHOT CREATED${NC}"
echo -e "${GREEN}=====================================================================${NC}"
echo "Environment: ${ENVIRONMENT}"
echo "Timestamp: $(date)"
echo "Log file: ${LOG_FILE}"
echo "Snapshot file: ${SNAPSHOT_FILE}"
echo -e "${GREEN}=====================================================================${NC}"

echo -e "\n${BLUE}Next steps:${NC}"
echo "1. Review the schema snapshot in ${SNAPSHOT_FILE}"
echo "2. Use this as your baseline for the consolidated migration system"
echo "3. Run the migration consolidation script"

exit 0 