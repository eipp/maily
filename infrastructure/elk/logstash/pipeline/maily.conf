# Maily Logstash Pipeline Configuration

input {
  # Receive logs from Filebeat
  beats {
    port => 5044
    host => "0.0.0.0"
  }

  # Direct TCP input for application logs
  tcp {
    port => 5000
    codec => json
    tags => ["app_direct"]
  }

  # Direct UDP input for high-volume logs
  udp {
    port => 5000
    codec => json
    tags => ["app_direct"]
  }

  # HTTP input for direct log submission from applications
  http {
    port => 8080
    codec => json
    tags => ["http_input"]
  }
}

filter {
  # Add common fields
  mutate {
    add_field => {
      "[@metadata][processed_timestamp]" => "%{@timestamp}"
      "environment" => "${ENVIRONMENT:production}"
    }
  }

  # Process logs based on service/application
  if [kubernetes][labels][app] == "maily-api" or [service] == "maily-api" {
    mutate { add_field => { "[@metadata][app_type]" => "api" } }

    # Parse JSON if not already parsed
    if [message] and ![level] {
      json {
        source => "message"
        skip_on_invalid_json => true
        target => "parsed_json"
      }

      # If parsing succeeded, restructure the log
      if [parsed_json] {
        mutate {
          rename => { "[parsed_json][level]" => "level" }
          rename => { "[parsed_json][message]" => "message" }
          rename => { "[parsed_json][timestamp]" => "app_timestamp" }
          rename => { "[parsed_json][request_id]" => "request_id" }
          rename => { "[parsed_json][user_id]" => "user_id" }
          rename => { "[parsed_json][tenant_id]" => "tenant_id" }
          rename => { "[parsed_json][path]" => "path" }
          rename => { "[parsed_json][method]" => "method" }
          rename => { "[parsed_json][status_code]" => "status_code" }
          rename => { "[parsed_json][duration_ms]" => "duration_ms" }
          remove_field => ["parsed_json"]
        }

        # Convert level to lowercase for consistent searching
        mutate { lowercase => ["level"] }

        # Set log timestamp from app timestamp if available
        if [app_timestamp] {
          date {
            match => ["app_timestamp", "ISO8601"]
            target => "@timestamp"
            remove_field => ["app_timestamp"]
          }
        }
      }
    }

    # Add API metrics
    if [duration_ms] {
      # Tag slow requests
      if [duration_ms] > 500 {
        mutate { add_tag => ["slow_request"] }
      }

      # Tag very slow requests
      if [duration_ms] > 2000 {
        mutate { add_tag => ["very_slow_request"] }
      }
    }
  }

  # Web/frontend logs
  else if [kubernetes][labels][app] == "maily-web" or [service] == "maily-web" {
    mutate { add_field => { "[@metadata][app_type]" => "web" } }

    # Parse JSON if not already parsed
    if [message] and ![level] {
      json {
        source => "message"
        skip_on_invalid_json => true
        target => "parsed_json"
      }

      # If parsing succeeded, restructure the log
      if [parsed_json] {
        mutate {
          rename => { "[parsed_json][level]" => "level" }
          rename => { "[parsed_json][message]" => "message" }
          rename => { "[parsed_json][timestamp]" => "app_timestamp" }
          rename => { "[parsed_json][route]" => "route" }
          rename => { "[parsed_json][userId]" => "user_id" }
          rename => { "[parsed_json][page]" => "page" }
          remove_field => ["parsed_json"]
        }

        # Convert level to lowercase for consistent searching
        mutate { lowercase => ["level"] }

        # Set log timestamp from app timestamp if available
        if [app_timestamp] {
          date {
            match => ["app_timestamp", "ISO8601"]
            target => "@timestamp"
            remove_field => ["app_timestamp"]
          }
        }
      }
    }
  }

  # Workers logs
  else if [kubernetes][labels][app] == "maily-workers" or [service] == "maily-workers" {
    mutate { add_field => { "[@metadata][app_type]" => "workers" } }

    # Parse JSON if not already parsed
    if [message] and ![level] {
      json {
        source => "message"
        skip_on_invalid_json => true
        target => "parsed_json"
      }

      # If parsing succeeded, restructure the log
      if [parsed_json] {
        mutate {
          rename => { "[parsed_json][level]" => "level" }
          rename => { "[parsed_json][message]" => "message" }
          rename => { "[parsed_json][timestamp]" => "app_timestamp" }
          rename => { "[parsed_json][job_id]" => "job_id" }
          rename => { "[parsed_json][worker_type]" => "worker_type" }
          rename => { "[parsed_json][execution_time]" => "execution_time" }
          remove_field => ["parsed_json"]
        }

        # Convert level to lowercase for consistent searching
        mutate { lowercase => ["level"] }

        # Set log timestamp from app timestamp if available
        if [app_timestamp] {
          date {
            match => ["app_timestamp", "ISO8601"]
            target => "@timestamp"
            remove_field => ["app_timestamp"]
          }
        }
      }
    }
  }

  # Process system logs
  else if [kubernetes][container_name] or [docker][container] {
    mutate { add_field => { "[@metadata][app_type]" => "system" } }

    # Extract container info
    if [kubernetes][container_name] {
      mutate {
        add_field => { "container_name" => "%{[kubernetes][container_name]}" }
        add_field => { "pod_name" => "%{[kubernetes][pod_name]}" }
        add_field => { "namespace" => "%{[kubernetes][namespace_name]}" }
      }
    } else if [docker][container] {
      mutate {
        add_field => { "container_name" => "%{[docker][container][name]}" }
        add_field => { "container_id" => "%{[docker][container][id]}" }
      }
    }
  }

  # Add severity level for all logs if missing
  if ![level] {
    if "error" in [message] or "exception" in [message] or "fail" in [message] or "failed" in [message] {
      mutate { add_field => { "level" => "error" } }
    } else if "warn" in [message] or "warning" in [message] {
      mutate { add_field => { "level" => "warn" } }
    } else {
      mutate { add_field => { "level" => "info" } }
    }
  }
}

output {
  # Output to stdout for debugging (commented out for production)
  # stdout { codec => rubydebug }

  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "maily-logs-%{[@metadata][app_type]}-%{+YYYY.MM.dd}"
    # Custom document ID can be set if needed:
    # document_id => "%{request_id}"

    # Set to true to wait for Elasticsearch to respond to indexing operations
    action => "index"

    # Templates and ILM settings for production
    manage_template => false
    ilm_enabled => true
    ilm_rollover_alias => "maily"
    ilm_pattern => "000001"
    ilm_policy => "maily"

    # Retry settings
    retry_on_conflict => 5
    action_on_failure => "log"
  }
}
