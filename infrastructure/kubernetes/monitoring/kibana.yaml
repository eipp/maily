apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: monitoring
data:
  kibana.yml: |
    server.name: kibana
    server.host: 0.0.0.0
    server.port: 5601

    elasticsearch.hosts: ["http://elasticsearch:9200"]
    elasticsearch.requestTimeout: 90000

    # Monitoring settings
    monitoring.ui.container.elasticsearch.enabled: true
    xpack.monitoring.enabled: true
    xpack.monitoring.kibana.collection.enabled: true

    # Security settings
    xpack.security.enabled: true
    elasticsearch.username: kibana_system
    # elasticsearch.password is set from secret

    # Reporting and various limits
    xpack.reporting.enabled: true
    xpack.reporting.capture.timeouts.waitForElements: 30s
    xpack.reporting.csv.maxSizeBytes: 10485760

    # APM integration
    xpack.apm.enabled: true
    xpack.apm.ui.enabled: true

    # Setup telemetry (requires opt-in during first usage)
    telemetry.optIn: false
    telemetry.enabled: false

---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: monitoring
  labels:
    app: kibana
spec:
  ports:
    - port: 5601
      targetPort: 5601
      protocol: TCP
      name: http
  selector:
    app: kibana
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: monitoring
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:8.12.0
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          env:
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: kibana-password
          ports:
            - containerPort: 5601
              name: http
          volumeMounts:
            - name: kibana-config
              mountPath: /usr/share/kibana/config/kibana.yml
              subPath: kibana.yml
          readinessProbe:
            httpGet:
              path: /api/status
              port: 5601
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /api/status
              port: 5601
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: kibana-config
          configMap:
            name: kibana-config

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - kibana.maily.com
      secretName: kibana-tls
  rules:
    - host: kibana.maily.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kibana
                port:
                  number: 5601
