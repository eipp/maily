name: Database Migrations

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/migrations/**'
      - 'scripts/**'
  pull_request:
    paths:
      - 'supabase/migrations/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy migrations to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  validate:
    name: Validate migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: maily_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Setup environment
        run: |
          cat > .env.test <<EOF
          # Test environment configuration
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/maily_test
          DATABASE_HOST=localhost
          DATABASE_PORT=5432
          DATABASE_NAME=maily_test
          DATABASE_USER=postgres
          DATABASE_PASSWORD=postgres
          EOF

      - name: Apply migrations
        run: |
          chmod +x ./scripts/*.sh
          ./scripts/db-migration.sh test migrate

      - name: Validate schema
        run: |
          # Add schema validation logic here
          psql postgresql://postgres:postgres@localhost:5432/maily_test -c "SELECT count(*) FROM migration_history"

  deploy:
    name: Deploy migrations
    needs: validate
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Check for migrations
        id: check_migrations
        run: |
          chmod +x ./scripts/*.sh
          ./scripts/check-migrations.sh ${{ github.event.inputs.environment || 'development' }} || echo "::set-output name=has_migrations::true"

      - name: Deploy migrations
        if: steps.check_migrations.outputs.has_migrations == 'true'
        run: |
          ./scripts/db-migration.sh ${{ github.event.inputs.environment || 'development' }} migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

      - name: Notify on success
        if: success()
        run: |
          echo "Migrations applied successfully to ${{ github.event.inputs.environment || 'development' }}"
          # Add notification logic here (Slack, email, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "Migration failed for ${{ github.event.inputs.environment || 'development' }}"
          # Add notification logic here (Slack, email, etc.) 