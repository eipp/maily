name: CD

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name maily-${{ needs.prepare.outputs.environment }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy with Helm
        run: |
          cd infrastructure/helm/maily
          helm upgrade --install maily . \
            --namespace maily-${{ needs.prepare.outputs.environment }} \
            --values values-${{ needs.prepare.outputs.environment }}.yaml \
            --set image.tag=${{ needs.prepare.outputs.version }} \
            --wait --timeout 10m

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-service -n maily-${{ needs.prepare.outputs.environment }} --timeout=5m
          kubectl rollout status deployment/web -n maily-${{ needs.prepare.outputs.environment }} --timeout=5m
          kubectl rollout status deployment/ai-service -n maily-${{ needs.prepare.outputs.environment }} --timeout=5m

  post-deploy:
    name: Post Deploy Tasks
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - name: Run database migrations
        run: |
          # Setup database migration tools
          curl -sL https://raw.githubusercontent.com/yourusername/maily/main/scripts/db-migration.sh | bash -s -- ${{ needs.prepare.outputs.environment }}
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}

      - name: Run smoke tests
        run: |
          # Run post-deployment smoke tests
          npm install -g newman
          newman run tests/postman/maily-smoke-tests.json \
            --env-var "baseUrl=https://api-${{ needs.prepare.outputs.environment }}.maily.com"

      - name: Create deployment tag
        if: ${{ needs.prepare.outputs.environment == 'production' }}
        run: |
          git tag deploy-${{ needs.prepare.outputs.environment }}-${{ needs.prepare.outputs.version }}
          git push origin deploy-${{ needs.prepare.outputs.environment }}-${{ needs.prepare.outputs.version }}

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ needs.prepare.outputs.environment }}
          description: 'Deployment of version ${{ needs.prepare.outputs.version }} to ${{ needs.prepare.outputs.environment }}'