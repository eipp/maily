name: AI Mesh Network CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'ai_service/**'
      - 'Dockerfile.ai-mesh'
      - 'kubernetes/deployments/ai-mesh-deployment.yaml'
      - '.github/workflows/ai-mesh-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ai_service/**'
      - 'Dockerfile.ai-mesh'
      - 'kubernetes/deployments/ai-mesh-deployment.yaml'
      - '.github/workflows/ai-mesh-deploy.yml'
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: maily/ai-mesh-network
  KUBE_NAMESPACE: maily

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maily_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ai_service/requirements-ai-mesh.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        env:
          REDIS_URL: redis://localhost:6379/0
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: maily_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          pytest tests/test_ai_mesh_network.py -v --cov=ai_service
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage.xml
        if: always()

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.ai-mesh
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Save Docker image tag
        id: save-tag
        run: |
          echo "IMAGE_TAG=$(echo ${{ steps.meta.outputs.tags }} | cut -d',' -f1 | cut -d':' -f2)" >> $GITHUB_ENV

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Deploy to Kubernetes
        run: |
          # Replace variables in deployment file
          sed -i "s|\${DOCKER_REGISTRY}|${{ env.DOCKER_REGISTRY }}|g" kubernetes/deployments/ai-mesh-deployment.yaml
          sed -i "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" kubernetes/deployments/ai-mesh-deployment.yaml
          
          # Apply deployment
          kubectl apply -f kubernetes/deployments/ai-mesh-deployment.yaml
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/ai-mesh-network -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
      
      - name: Run post-deployment tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Get service endpoint
          SERVICE_IP=$(kubectl get svc ai-mesh-network -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Test health endpoint
          curl -f http://$SERVICE_IP/health || exit 1
          
          echo "Deployment verified successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: |
          bandit -r ai_service -f json -o bandit-results.json
      
      - name: Run Safety dependency scan
        run: |
          safety check -r ai_service/requirements-ai-mesh.txt --json > safety-results.json
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
        if: always()

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, security-scan]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "AI Mesh Network Deployment: ${{ needs.deploy.result == 'success' && 'Success ✅' || 'Failed ❌' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*AI Mesh Network Deployment*: ${{ needs.deploy.result == 'success' && 'Success ✅' || 'Failed ❌' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Security Scan:*\n${{ needs.security-scan.result == 'success' && 'Passed ✅' || 'Issues Found ⚠️' }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
