name: Deploy MailyDocs

on:
  push:
    branches:
      - main
    paths:
      - 'apps/api/services/document_generator.py'
      - 'apps/api/endpoints/mailydocs.py'
      - 'apps/api/db/documents.py'
      - 'apps/api/ai/tools/document_generator_tool.py'
      - 'docker/mailydocs.dockerfile'
      - 'kubernetes/mailydocs-deployment.yaml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        default: ''

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: maily
  K8S_CLUSTER: maily-production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maily_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run unit tests
        run: |
          pytest apps/api/tests/unit/test_document_generation.py -v --cov=apps/api/services

      - name: Run integration tests
        run: |
          pytest apps/api/tests/integration/test_mailydocs_api.py -v --cov=apps/api/endpoints

      - name: Upload test coverage
        uses: codecov/codecov-action@v3

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image version
        id: vars
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/mailydocs.dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}/mailydocs:${{ env.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}/mailydocs:latest
          build-args: |
            BUILD_VERSION=${{ env.VERSION }}

      - name: Save image version for next job
        run: echo "VERSION=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.K8S_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Deploy to Kubernetes
        run: |
          export ECR_REPOSITORY="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          export VERSION="${{ needs.build.outputs.VERSION }}"

          # Replace variables in the deployment file
          envsubst < kubernetes/mailydocs-deployment.yaml > deployment.yaml

          # Apply Kubernetes resources
          kubectl apply -f deployment.yaml

          # Wait for deployment to complete
          kubectl rollout status deployment/mailydocs -n maily --timeout=5m

      - name: Verify deployment
        run: |
          # Check pods are running
          kubectl get pods -n maily -l app=mailydocs

          # Check services are available
          kubectl get svc -n maily -l app=mailydocs

          # Check ingress is configured
          kubectl get ingress -n maily mailydocs-ingress

  notify:
    name: Notify Deployment Status
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "üöÄ MailyDocs deployed successfully to production!\nVersion: ${{ needs.build.outputs.VERSION }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: ${{ needs.deploy.result != 'success' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ùå MailyDocs deployment to production failed!\nSee: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
