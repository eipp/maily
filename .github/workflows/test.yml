name: Continuous Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Python unit tests
        run: |
          pytest tests/unit/ -v

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          npm ci

      - name: Run JavaScript/TypeScript unit tests
        run: |
          npm run test:unit

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up environment variables
        run: |
          echo "TEST_API_KEY=${{ secrets.TEST_API_KEY }}" >> $GITHUB_ENV
          echo "TEST_DB_URL=${{ secrets.TEST_DB_URL }}" >> $GITHUB_ENV

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Set up environment variables
        run: |
          echo "TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}" >> $GITHUB_ENV
          echo "TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}" >> $GITHUB_ENV
          echo "TEST_CAMPAIGN_NAME=${{ secrets.TEST_CAMPAIGN_NAME }}" >> $GITHUB_ENV
          echo "TEST_CAMPAIGN_SUBJECT=${{ secrets.TEST_CAMPAIGN_SUBJECT }}" >> $GITHUB_ENV
          echo "TEST_AUDIENCE_ID=${{ secrets.TEST_AUDIENCE_ID }}" >> $GITHUB_ENV

      - name: Start application for E2E tests
        run: |
          npm run build
          npm run start:test &
          sleep 10 # Give the app time to start

      - name: Run E2E tests
        run: |
          npx playwright test tests/e2e/

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Set up environment variables
        run: |
          echo "TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}" >> $GITHUB_ENV
          echo "TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}" >> $GITHUB_ENV

      - name: Start application for performance tests
        run: |
          npm run build
          npm run start:test &
          sleep 10 # Give the app time to start

      - name: Run performance tests
        run: |
          npx playwright test tests/performance/

      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  ai-component-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          npm ci

      - name: Set up environment variables
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
          echo "GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}" >> $GITHUB_ENV

      - name: Run AI component tests
        run: |
          npm run test:ai-components

  test-coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, ai-component-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Generate Python coverage report
        run: |
          pytest --cov=. --cov-report=xml:coverage-python.xml tests/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          npm ci

      - name: Generate JavaScript/TypeScript coverage report
        run: |
          npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-python.xml,./coverage/lcov.info
          fail_ci_if_error: true
          verbose: true
