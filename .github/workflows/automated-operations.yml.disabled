name: Automated Operations

on:
  # Run on a schedule
  schedule:
    # Run daily at 01:00 UTC
    - cron: '0 1 * * *'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - docs-cleanup
          - docs-generation
          - deployment-verification
          - db-maintenance
          - security-scan
          - certificate-management

jobs:
  docs-cleanup:
    name: Documentation Cleanup
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.operation == 'all' || github.event.inputs.operation == 'docs-cleanup' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run automated docs cleanup
        run: |
          chmod +x scripts/automated-docs-cleanup.sh
          ./scripts/automated-docs-cleanup.sh

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Automated documentation cleanup [skip ci]"
          title: "Automated documentation cleanup"
          body: |
            This PR contains automated documentation cleanup changes.

            - Archived outdated documentation
            - Updated documentation references
            - Generated cleanup report
          branch: auto-docs-cleanup
          base: main

  docs-generation:
    name: Documentation Generation
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.operation == 'all' || github.event.inputs.operation == 'docs-generation' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material pydoc-markdown pymdown-extensions

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Make scripts executable
        run: |
          chmod +x scripts/generate-api-docs.js
          chmod +x scripts/generate-inline-docs.js
          chmod +x scripts/adr.js
          chmod +x scripts/docs-automation.js

      - name: Generate documentation
        run: node scripts/docs-automation.js

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: docs-validation-report
          path: docs-validation-report.json

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Automated documentation generation [skip ci]"
          title: "Automated documentation generation"
          body: |
            This PR contains automatically generated documentation:

            - API documentation from OpenAPI specification
            - Inline code documentation from source comments
            - Updated Architectural Decision Records index
            - Onboarding documentation
          branch: auto-docs-generation
          base: main

  deployment-verification:
    name: Deployment Verification
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.operation == 'all' || github.event.inputs.operation == 'deployment-verification' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run deployment verification
        run: |
          chmod +x scripts/automated-deployment-verification.sh
          ./scripts/automated-deployment-verification.sh
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload verification report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-verification-report
          path: deployment-reports/
          retention-days: 30

  db-maintenance:
    name: Database Maintenance
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.operation == 'all' || github.event.inputs.operation == 'db-maintenance' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run database maintenance
        run: |
          chmod +x scripts/automated-db-maintenance.sh
          ./scripts/automated-db-maintenance.sh
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MAINTENANCE_WINDOW: ${{ github.event.inputs.operation == 'db-maintenance' || (github.event_name == 'schedule' && github.event.schedule == '0 1 * * 0') }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload maintenance report
        uses: actions/upload-artifact@v3
        with:
          name: db-maintenance-report
          path: db-maintenance-reports/
          retention-days: 30

  certificate-management:
    name: Certificate Management
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.operation == 'all' || github.event.inputs.operation == 'certificate-management' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Run certificate management
        run: |
          chmod +x scripts/automated-certificate-management.sh
          ./scripts/automated-certificate-management.sh
        env:
          NAMESPACE: maily-production
          RENEWAL_THRESHOLD_DAYS: 30
          CRITICAL_THRESHOLD_DAYS: 14
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          EMAIL_RECIPIENT: ${{ secrets.CERT_EMAIL_RECIPIENT }}

      - name: Upload certificate report
        uses: actions/upload-artifact@v3
        with:
          name: certificate-status-report
          path: certificate-reports/
          retention-days: 30

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.operation == 'all' || github.event.inputs.operation == 'security-scan' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for secrets scanning

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Install security tools
        run: |
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          # Install gitleaks
          curl -L https://github.com/zricethezav/gitleaks/releases/download/v8.16.3/gitleaks_8.16.3_linux_x64.tar.gz | tar xz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

          # Install additional tools
          pip install safety

      - name: Run security scan
        run: |
          chmod +x scripts/automated-security-scan.sh
          ./scripts/automated-security-scan.sh
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          AUTO_FIX: ${{ github.event_name == 'workflow_dispatch' }}

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-reports
          path: security-reports/
          retention-days: 30
