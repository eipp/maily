name: Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop, release/* ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'
  CACHE_NPM: 'npm'
  CACHE_PIP: 'pip'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ${{ env.CACHE_PIP }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-dev.txt

      - name: Lint JavaScript/TypeScript
        run: npm run lint

      - name: Lint Python
        run: python -m flake8

      - name: Type check
        run: npm run type-check

      - name: Format check
        run: |
          npm run format:check
          python -m black --check .

      - name: Check for circular dependencies
        run: npx madge --circular --extensions ts,tsx apps/

      - name: Code complexity analysis
        uses: kontrail/codeclimate-action@master
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          JACOCO_SOURCE_PATH: "${{github.workspace}}/apps/web/src"
        with:
          coverageCommand: npm run test:coverage

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maily_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ${{ env.CACHE_PIP }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run JavaScript/TypeScript tests
        run: npm run test:coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maily_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run Python tests
        run: pytest --cov=apps/api
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maily_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json,./apps/api/coverage.xml
          flags: unittest

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ${{ env.CACHE_PIP }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Start test environment
        run: docker-compose -f docker-compose.tests.yml up -d

      - name: Wait for test environment
        run: sleep 10

      - name: Run integration tests
        run: npm run test:integration
        env:
          API_URL: http://localhost:3000/api

      - name: Run API integration tests
        run: pytest --cov=apps/api tests/integration
        env:
          API_URL: http://localhost:3000/api

      - name: Stop test environment
        run: docker-compose -f docker-compose.tests.yml down

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test environment
        run: docker-compose -f docker-compose.tests.yml up -d

      - name: Wait for test environment
        run: sleep 20

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            apps/web/playwright-report/
            apps/web/test-results/
          retention-days: 30

      - name: Stop test environment
        run: docker-compose -f docker-compose.tests.yml down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript, python

      - name: Run dependency check
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Python dependency check
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/maily-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [unit-tests, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ${{ env.CACHE_PIP }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Build frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.maily.app

      - name: Build and push API Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}-api
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export image digests
        run: |
          echo "::set-output name=api_digest::$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}-api --format '{{.Id}}')"
          echo "::set-output name=frontend_digest::$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}-frontend --format '{{.Id}}')"
        id: digests

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'

      - name: Setup ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Get kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Update Kubernetes manifests
        run: |
          cd infrastructure/kubernetes/overlays/dev
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: Deploy with ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app sync maily-dev
          argocd app wait maily-dev --health --timeout 300
        env:
          KUBECONFIG: kubeconfig.yaml
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}

      - name: Run database migrations
        run: |
          kubectl exec -n maily deployment/maily-api -- python -m apps.api.run_migrations
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/maily-api -n maily
          kubectl rollout status deployment/maily-frontend -n maily
        env:
          KUBECONFIG: kubeconfig.yaml

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-publish, e2e-tests]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'

      - name: Setup ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Get kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Update Kubernetes manifests
        run: |
          cd infrastructure/kubernetes/overlays/staging
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: Deploy with ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app sync maily-staging
          argocd app wait maily-staging --health --timeout 300
        env:
          KUBECONFIG: kubeconfig.yaml
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}

      - name: Run database migrations
        run: |
          kubectl exec -n maily deployment/maily-api -- python -m apps.api.run_migrations
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke -- --baseUrl https://staging.maily.app
        env:
          API_KEY: ${{ secrets.STAGING_API_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'

      - name: Setup ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Get kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Update Kubernetes manifests
        run: |
          cd infrastructure/kubernetes/overlays/production
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: Deploy with ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app sync maily-production
          argocd app wait maily-production --health --timeout 300
        env:
          KUBECONFIG: kubeconfig.yaml
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}

      - name: Backup production database
        run: |
          kubectl exec -n maily deployment/maily-api -- python -m apps.api.backup_database --environment production
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Run database migrations
        run: |
          kubectl exec -n maily deployment/maily-api -- python -m apps.api.run_migrations
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke -- --baseUrl https://maily.app
        env:
          API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: Notify deployment
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Maily has been deployed to production! :rocket:",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Maily has been deployed to production! :rocket:*\n\nCommit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\nWorkflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
