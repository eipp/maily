apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  namespace: maily-production
  labels:
    app: redis
    role: master
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: redis
        role: master
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        imagePullPolicy: IfNotPresent
        command:
          - redis-server
          - "/redis-master/redis.conf"
        env:
        - name: MASTER
          value: "true"
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-config
          mountPath: /redis-master
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: maily-production
  labels:
    app: redis
    role: master
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    role: master
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: maily-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2
---
# Redis ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: maily-production
data:
  redis.conf: |
    # Redis configuration file

    # General
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300

    # Snapshotting
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data

    # Memory Management
    maxmemory 800mb
    maxmemory-policy allkeys-lru

    # Append Only Mode
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec

    # Security
    requirepass ${REDIS_PASSWORD}
---
# Redis Password Secret (create with kubectl)
# kubectl create secret generic redis-password --from-literal=redis-password=your-secure-password
