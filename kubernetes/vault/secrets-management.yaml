apiVersion: v1
kind: Namespace
metadata:
  name: vault
  labels:
    name: vault
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: vault
data:
  vault-config.json: |
    {
      "listener": {
        "tcp": {
          "address": "0.0.0.0:8200",
          "tls_disable": 1
        }
      },
      "storage": {
        "file": {
          "path": "/vault/data"
        }
      },
      "ui": true,
      "plugin_directory": "/vault/plugins",
      "api_addr": "http://vault.vault:8200",
      "default_lease_ttl": "168h",
      "max_lease_ttl": "720h",
      "seal": {
        "awskms": {
          "region": "us-west-2",
          "kms_key_id": "alias/maily-vault-key"
        }
      }
    }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  serviceName: vault
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault
      containers:
      - name: vault
        image: vault:1.13.3
        command:
        - vault
        - server
        - -config=/vault/config/vault-config.json
        ports:
        - containerPort: 8200
          name: vault-port
          protocol: TCP
        - containerPort: 8201
          name: vault-internal
          protocol: TCP
        env:
        - name: VAULT_ADDR
          value: "http://127.0.0.1:8200"
        - name: POD_IP_ADDR
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VAULT_CACERT
          value: /vault/tls/ca.crt
        - name: VAULT_API_ADDR
          value: "http://$(POD_IP_ADDR):8200"
        - name: VAULT_K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: VAULT_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: "us-west-2"
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
        - name: vault-data
          mountPath: /vault/data
        - name: vault-plugins
          mountPath: /vault/plugins
        securityContext:
          capabilities:
            add: ["IPC_LOCK"]
        readinessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: vault-config
        configMap:
          name: vault-config
      - name: vault-plugins
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: vault-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  selector:
    app: vault
  ports:
  - name: vault-port
    port: 8200
    targetPort: 8200
  - name: vault-internal
    port: 8201
    targetPort: 8201
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: vault
data:
  vault-agent-config.hcl: |
    exit_after_auth = true
    pid_file = "/home/vault/pidfile"

    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "maily"
        }
      }

      sink "file" {
        config = {
          path = "/home/vault/.vault-token"
        }
      }
    }

    template {
      destination = "/vault/secrets/config.json"
      contents = <<EOH
      {{ with secret "maily/data/config" }}
      {
        "database": {
          "host": "{{ .Data.data.db_host }}",
          "port": {{ .Data.data.db_port }},
          "username": "{{ .Data.data.db_username }}",
          "password": "{{ .Data.data.db_password }}",
          "database": "{{ .Data.data.db_name }}"
        },
        "redis": {
          "host": "{{ .Data.data.redis_host }}",
          "port": {{ .Data.data.redis_port }},
          "password": "{{ .Data.data.redis_password }}"
        },
        "aws": {
          "region": "{{ .Data.data.aws_region }}",
          "access_key": "{{ .Data.data.aws_access_key }}",
          "secret_key": "{{ .Data.data.aws_secret_key }}"
        },
        "jwt": {
          "secret": "{{ .Data.data.jwt_secret }}",
          "expiration": {{ .Data.data.jwt_expiration }}
        },
        "smtp": {
          "host": "{{ .Data.data.smtp_host }}",
          "port": {{ .Data.data.smtp_port }},
          "username": "{{ .Data.data.smtp_username }}",
          "password": "{{ .Data.data.smtp_password }}",
          "from": "{{ .Data.data.smtp_from }}"
        }
      }
      {{ end }}
      EOH
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-agent-injector
  namespace: vault
  labels:
    app: vault-agent-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault-agent-injector
  template:
    metadata:
      labels:
        app: vault-agent-injector
    spec:
      serviceAccountName: vault
      containers:
      - name: vault-agent-injector
        image: hashicorp/vault-k8s:1.2.0
        imagePullPolicy: IfNotPresent
        env:
        - name: AGENT_INJECT_LISTEN
          value: ":8080"
        - name: AGENT_INJECT_LOG_LEVEL
          value: "info"
        - name: AGENT_INJECT_VAULT_ADDR
          value: "http://vault.vault:8200"
        - name: AGENT_INJECT_VAULT_AUTH_PATH
          value: "auth/kubernetes"
        - name: AGENT_INJECT_VAULT_IMAGE
          value: "vault:1.13.3"
        - name: AGENT_INJECT_TLS_AUTO
          value: "vault-agent-injector-cfg"
        - name: AGENT_INJECT_TLS_AUTO_HOSTS
          value: "vault-agent-injector-svc,vault-agent-injector-svc.vault,vault-agent-injector-svc.vault.svc"
        livenessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTPS
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTPS
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: vault-agent-injector-svc
  namespace: vault
  labels:
    app: vault-agent-injector
spec:
  ports:
  - port: 443
    targetPort: 8080
  selector:
    app: vault-agent-injector
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: vault-agent-injector-cfg
  labels:
    app: vault-agent-injector
webhooks:
- name: vault.hashicorp.com
  admissionReviewVersions:
  - "v1beta1"
  - "v1"
  clientConfig:
    service:
      name: vault-agent-injector-svc
      namespace: vault
      path: "/mutate"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  failurePolicy: Ignore
  sideEffects: None
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: maily-vault
  namespace: maily
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: maily-vault-role
  namespace: maily
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: maily-vault-rolebinding
  namespace: maily
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: maily-vault-role
subjects:
- kind: ServiceAccount
  name: maily-vault
  namespace: maily
---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-setup
  namespace: vault
spec:
  template:
    spec:
      serviceAccountName: vault
      containers:
      - name: vault-setup
        image: vault:1.13.3
        command:
        - /bin/sh
        - -c
        - |
          # Wait for Vault to be ready
          until vault status; do
            echo "Waiting for Vault to be ready..."
            sleep 5
          done

          # Initialize Vault if needed
          if ! vault status | grep -q "Initialized.*true"; then
            echo "Initializing Vault..."
            vault operator init -key-shares=5 -key-threshold=3 -format=json > /tmp/vault-init.json
            cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[0]' > /tmp/unseal-key-1
            cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[1]' > /tmp/unseal-key-2
            cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[2]' > /tmp/unseal-key-3
            cat /tmp/vault-init.json | jq -r '.root_token' > /tmp/root-token
            
            # Store unseal keys and root token as Kubernetes secrets
            kubectl create secret generic vault-unseal-keys \
              --from-file=/tmp/unseal-key-1 \
              --from-file=/tmp/unseal-key-2 \
              --from-file=/tmp/unseal-key-3 \
              -n vault
            
            kubectl create secret generic vault-root-token \
              --from-file=/tmp/root-token \
              -n vault
          fi

          # Unseal Vault if needed
          if vault status | grep -q "Sealed.*true"; then
            echo "Unsealing Vault..."
            vault operator unseal $(cat /tmp/unseal-key-1)
            vault operator unseal $(cat /tmp/unseal-key-2)
            vault operator unseal $(cat /tmp/unseal-key-3)
          fi

          # Login with root token
          vault login $(cat /tmp/root-token)

          # Enable Kubernetes auth method
          vault auth enable kubernetes

          # Configure Kubernetes auth method
          vault write auth/kubernetes/config \
            kubernetes_host="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT" \
            token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
            kubernetes_ca_cert="$(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)" \
            issuer="https://kubernetes.default.svc.cluster.local"

          # Create a role for Maily services
          vault write auth/kubernetes/role/maily \
            bound_service_account_names="maily-*" \
            bound_service_account_namespaces="maily" \
            policies="maily" \
            ttl=1h

          # Enable KV secrets engine
          vault secrets enable -path=maily kv-v2

          # Create a policy for Maily services
          vault policy write maily - <<EOF
          path "maily/data/*" {
            capabilities = ["read"]
          }
          path "maily/metadata/*" {
            capabilities = ["list"]
          }
          EOF

          # Create example secrets
          vault kv put maily/config \
            db_host="maily-db.maily.svc.cluster.local" \
            db_port="5432" \
            db_username="maily" \
            db_password="example-password" \
            db_name="maily" \
            redis_host="maily-redis.maily.svc.cluster.local" \
            redis_port="6379" \
            redis_password="example-redis-password" \
            aws_region="us-west-2" \
            aws_access_key="example-access-key" \
            aws_secret_key="example-secret-key" \
            jwt_secret="example-jwt-secret" \
            jwt_expiration="3600" \
            smtp_host="smtp.example.com" \
            smtp_port="587" \
            smtp_username="example-smtp-username" \
            smtp_password="example-smtp-password" \
            smtp_from="no-reply@example.com"

          echo "Vault setup completed successfully!"
        env:
        - name: VAULT_ADDR
          value: "http://vault.vault:8200"
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-rotation-script
  namespace: vault
data:
  rotate-secrets.sh: |
    #!/bin/bash
    set -e

    # Login to Vault
    vault login $(cat /tmp/root-token)

    # Rotate database password
    NEW_DB_PASSWORD=$(openssl rand -base64 32)
    vault kv patch maily/config db_password="$NEW_DB_PASSWORD"
    
    # Rotate JWT secret
    NEW_JWT_SECRET=$(openssl rand -base64 64)
    vault kv patch maily/config jwt_secret="$NEW_JWT_SECRET"
    
    # Rotate AWS keys (in a real environment, this would be done through AWS API)
    NEW_AWS_ACCESS_KEY="new-example-access-key"
    NEW_AWS_SECRET_KEY="new-example-secret-key"
    vault kv patch maily/config aws_access_key="$NEW_AWS_ACCESS_KEY" aws_secret_key="$NEW_AWS_SECRET_KEY"
    
    echo "Secrets rotation completed successfully!"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-secrets-rotation
  namespace: vault
spec:
  schedule: "0 0 1 * *"  # Monthly at midnight on the 1st
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault
          containers:
          - name: vault-secrets-rotation
            image: vault:1.13.3
            command:
            - /bin/sh
            - -c
            - |
              cp /scripts/rotate-secrets.sh /tmp/rotate-secrets.sh
              chmod +x /tmp/rotate-secrets.sh
              /tmp/rotate-secrets.sh
            volumeMounts:
            - name: vault-token
              mountPath: /tmp/root-token
              subPath: root-token
            - name: scripts
              mountPath: /scripts
          volumes:
          - name: vault-token
            secret:
              secretName: vault-root-token
          - name: scripts
            configMap:
              name: vault-rotation-script
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Pod
metadata:
  name: maily-vault-example
  namespace: maily
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-status: "update"
    vault.hashicorp.com/role: "maily"
    vault.hashicorp.com/agent-inject-secret-config.json: "maily/data/config"
    vault.hashicorp.com/agent-inject-template-config.json: |
      {{ with secret "maily/data/config" }}
      {
        "database": {
          "host": "{{ .Data.data.db_host }}",
          "port": {{ .Data.data.db_port }},
          "username": "{{ .Data.data.db_username }}",
          "password": "{{ .Data.data.db_password }}",
          "database": "{{ .Data.data.db_name }}"
        },
        "redis": {
          "host": "{{ .Data.data.redis_host }}",
          "port": {{ .Data.data.redis_port }},
          "password": "{{ .Data.data.redis_password }}"
        },
        "aws": {
          "region": "{{ .Data.data.aws_region }}",
          "access_key": "{{ .Data.data.aws_access_key }}",
          "secret_key": "{{ .Data.data.aws_secret_key }}"
        },
        "jwt": {
          "secret": "{{ .Data.data.jwt_secret }}",
          "expiration": {{ .Data.data.jwt_expiration }}
        },
        "smtp": {
          "host": "{{ .Data.data.smtp_host }}",
          "port": {{ .Data.data.smtp_port }},
          "username": "{{ .Data.data.smtp_username }}",
          "password": "{{ .Data.data.smtp_password }}",
          "from": "{{ .Data.data.smtp_from }}"
        }
      }
      {{ end }}
spec:
  serviceAccountName: maily-vault
  containers:
  - name: app
    image: alpine:latest
    command:
    - /bin/sh
    - -c
    - |
      echo "Waiting for secrets to be available..."
      while [ ! -f /vault/secrets/config.json ]; do
        sleep 1
      done
      echo "Secrets are available!"
      cat /vault/secrets/config.json
      echo "Sleeping..."
      sleep 3600
