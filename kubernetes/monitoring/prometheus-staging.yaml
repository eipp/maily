apiVersion: v1
kind: Namespace
metadata:
  name: staging
  labels:
    name: staging

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config-staging
  namespace: staging
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        environment: staging
        version: latest

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'maily-staging-services'
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          action: keep
          regex: staging
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_service_name

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules-staging
  namespace: staging
data:
  alert-rules.yml: |
    groups:
    - name: maily-staging-alerts
      rules:
      - alert: HighCPUUsage
        expr: sum(rate(container_cpu_usage_seconds_total{namespace="staging"}[5m])) by (pod) > 0.8
        for: 5m
        labels:
          severity: warning
          version: latest
          environment: staging
        annotations:
          summary: "High CPU usage detected in staging"
          description: "Pod {{ $labels.pod }} has high CPU usage"

      - alert: HighMemoryUsage
        expr: sum(container_memory_usage_bytes{namespace="staging"}) by (pod) / sum(container_spec_memory_limit_bytes{namespace="staging"}) by (pod) > 0.8
        for: 5m
        labels:
          severity: warning
          version: latest
          environment: staging
        annotations:
          summary: "High memory usage detected in staging"
          description: "Pod {{ $labels.pod }} has high memory usage"

      - alert: PodCrashLooping
        expr: increase(kube_pod_container_status_restarts_total{namespace="staging"}[1h]) > 5
        for: 10m
        labels:
          severity: warning
          version: latest
          environment: staging
        annotations:
          summary: "Pod is crash looping in staging"
          description: "Pod {{ $labels.pod }} is crash looping"

      - alert: APIHighErrorRate
        expr: sum(rate(http_requests_total{namespace="staging", status=~"5.."}[5m])) by (service) / sum(rate(http_requests_total{namespace="staging"}[5m])) by (service) > 0.05
        for: 5m
        labels:
          severity: warning
          version: latest
          environment: staging
        annotations:
          summary: "High API error rate in staging"
          description: "Service {{ $labels.service }} has a high error rate"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-staging
  namespace: staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-staging
  template:
    metadata:
      labels:
        app: prometheus-staging
    spec:
      serviceAccountName: prometheus-staging
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--storage.tsdb.retention.time=7d"
        - "--web.console.libraries=/etc/prometheus/console_libraries"
        - "--web.console.templates=/etc/prometheus/consoles"
        - "--web.enable-lifecycle"
        ports:
        - containerPort: 9090
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        - name: prometheus-storage
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config-staging
      - name: prometheus-rules
        configMap:
          name: prometheus-rules-staging
      - name: prometheus-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-staging
  namespace: staging
  labels:
    app: prometheus-staging
spec:
  selector:
    app: prometheus-staging
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-staging
  namespace: staging

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-staging
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-staging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-staging
subjects:
- kind: ServiceAccount
  name: prometheus-staging
  namespace: staging