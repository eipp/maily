# Prometheus configuration values for Maily application monitoring
# To be used with Helm chart deployment: helm upgrade --install prometheus prometheus-community/prometheus -f prometheus-values.yaml -n monitoring

global:
  evaluation_interval: 1m
  scrape_interval: 15s
  scrape_timeout: 10s

# Alertmanager configuration
alertmanager:
  enabled: true
  persistentVolume:
    enabled: true
    size: 10Gi
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job', 'alertname', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - match:
          severity: critical
        receiver: 'pagerduty'
    receivers:
    - name: 'slack'
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#maily-alerts'
        send_resolved: true
        title: '{{ template "slack.default.title" . }}'
        text: '{{ template "slack.default.text" . }}'
    - name: 'pagerduty'
      pagerduty_configs:
      - service_key: '${PAGERDUTY_SERVICE_KEY}'
        send_resolved: true

# Server configuration
server:
  persistentVolume:
    enabled: true
    size: 50Gi

# For multi-env support, we'll configure Prometheus to discover services in different namespaces
kubeStateMetrics:
  enabled: true

nodeExporter:
  enabled: true

pushgateway:
  enabled: true

# Scrape configurations to monitor all environments
scrape_configs:
  # Scrape Kubernetes API
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # Scrape all services across namespaces with prometheus.io/scrape=true annotation
  - job_name: 'kubernetes-services'
    kubernetes_sd_configs:
      - role: service
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_service_name
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_environment]
        action: replace
        target_label: environment
        regex: (.*)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_component]
        action: replace
        target_label: component
        regex: (.*)

  # Scrape all pods across namespaces with prometheus.io/scrape=true annotation
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_environment]
        action: replace
        target_label: environment
        regex: (.*)
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_component]
        action: replace
        target_label: component
        regex: (.*)

  # Scrape specific environment namespaces
  - job_name: 'maily-production'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: [maily-production]
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - action: replace
        target_label: environment
        replacement: production

  - job_name: 'maily-staging'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: [maily-staging]
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - action: replace
        target_label: environment
        replacement: staging

  - job_name: 'maily-testing'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: [maily-test]
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - action: replace
        target_label: environment
        replacement: testing

  - job_name: 'maily-development'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: [maily-dev]
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - action: replace
        target_label: environment
        replacement: development

# Alert rules for multi-environment monitoring
alerting_rules:
  groups:
  - name: maily.rules
    rules:
    # High error rate alerts
    - alert: HighErrorRate
      expr: sum(rate(http_requests_total{status=~"5.."}[5m])) by (environment, service) / sum(rate(http_requests_total[5m])) by (environment, service) > 0.05
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High HTTP error rate for {{ $labels.service }} in {{ $labels.environment }}"
        description: "{{ $labels.service }} in {{ $labels.environment }} environment has error rate above 5% (current value: {{ $value | humanizePercentage }})"

    # Critical high error rate
    - alert: CriticalErrorRate
      expr: sum(rate(http_requests_total{status=~"5.."}[5m])) by (environment, service) / sum(rate(http_requests_total[5m])) by (environment, service) > 0.15
      for: 3m
      labels:
        severity: critical
      annotations:
        summary: "Critical HTTP error rate for {{ $labels.service }} in {{ $labels.environment }}"
        description: "{{ $labels.service }} in {{ $labels.environment }} environment has error rate above 15% (current value: {{ $value | humanizePercentage }})"

    # Slow response times
    - alert: SlowResponseTime
      expr: histogram_quantile(0.95, sum(rate(request_duration_seconds_bucket[5m])) by (le, environment, service)) > 2
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Slow response times for {{ $labels.service }} in {{ $labels.environment }}"
        description: "95th percentile response time for {{ $labels.service }} in {{ $labels.environment }} environment is above 2 seconds (current value: {{ $value }} seconds)"

    # High CPU usage
    - alert: HighCPUUsage
      expr: sum(rate(container_cpu_usage_seconds_total{container!="POD", container!=""}[5m])) by (environment, pod) / sum(container_spec_cpu_quota{container!="POD", container!=""} / container_spec_cpu_period{container!="POD", container!=""}) by (environment, pod) > 0.8
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High CPU usage for pod {{ $labels.pod }} in {{ $labels.environment }}"
        description: "CPU usage for {{ $labels.pod }} in {{ $labels.environment }} environment is above 80% for the last 10 minutes (current value: {{ $value | humanizePercentage }})"

    # High memory usage
    - alert: HighMemoryUsage
      expr: sum(container_memory_working_set_bytes{container!="POD", container!=""}) by (environment, pod) / sum(container_spec_memory_limit_bytes{container!="POD", container!=""}) by (environment, pod) > 0.85
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage for pod {{ $labels.pod }} in {{ $labels.environment }}"
        description: "Memory usage for {{ $labels.pod }} in {{ $labels.environment }} environment is above 85% for the last 10 minutes (current value: {{ $value | humanizePercentage }})"

    # Service down
    - alert: ServiceDown
      expr: sum(up{job=~"maily-.+"}) by (environment, service) == 0
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "Service {{ $labels.service }} is down in {{ $labels.environment }}"
        description: "{{ $labels.service }} in {{ $labels.environment }} environment has been down for more than 2 minutes"

    # Environment-specific thresholds for production
    - alert: ProductionHighErrorRate
      expr: sum(rate(http_requests_total{status=~"5..", environment="production"}[5m])) by (service) / sum(rate(http_requests_total{environment="production"}[5m])) by (service) > 0.01
      for: 3m
      labels:
        severity: critical
      annotations:
        summary: "High error rate for {{ $labels.service }} in PRODUCTION"
        description: "{{ $labels.service }} in PRODUCTION environment has error rate above 1% (current value: {{ $value | humanizePercentage }})" 