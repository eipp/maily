openapi: 3.0.3
info:
  title: "Maily API - {Service Name}"
  description: "API for the {Service Name} within the Maily Platform"
  version: "1.0.0"
  contact:
    name: "Maily API Team"
    email: "api@maily.app"
    url: "https://docs.maily.app"
  license:
    name: "Proprietary"
servers:
  - url: "https://api.maily.app/api/v1/{service-name}"
    description: "Production environment"
  - url: "https://staging-api.maily.app/api/v1/{service-name}"
    description: "Staging environment"
  - url: "https://dev-api.maily.app/api/v1/{service-name}"
    description: "Development environment"

tags:
  - name: "{Resource Name}"
    description: "Operations related to {Resource Name}"
  - name: "Health"
    description: "Health check endpoints"

paths:
  # Health check endpoint - mandatory for all services
  /health:
    get:
      tags:
        - "Health"
      summary: "Service health check"
      description: "Returns the health status of the service"
      operationId: "getHealthStatus"
      security: []  # No auth required for health check
      responses:
        '200':
          description: "Service is healthy"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        '503':
          description: "Service is unhealthy"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"

  # Example collection endpoint
  "/{resources}":
    get:
      tags:
        - "{Resource Name}"
      summary: "List {resources}"
      description: "Returns a paginated list of {resources}"
      operationId: "list{Resources}"
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/FieldsParam"
        # Add custom filter parameters here
      responses:
        '200':
          description: "List of {resources}"
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{Resource}List"
              example:
                data:
                  - id: "res_123abc"
                    createdAt: "2025-02-28T14:30:00Z"
                    updatedAt: "2025-02-28T14:30:00Z"
                    # Add other properties
                meta:
                  requestId: "req_abc123"
                  timestamp: "2025-02-28T14:30:00Z"
                pagination:
                  page: 1
                  limit: 20
                  totalItems: 243
                  totalPages: 13
                  links:
                    self: "/api/v1/{service-name}/{resources}?page=1&limit=20"
                    next: "/api/v1/{service-name}/{resources}?page=2&limit=20"
                    prev: null
                    first: "/api/v1/{service-name}/{resources}?page=1&limit=20"
                    last: "/api/v1/{service-name}/{resources}?page=13&limit=20"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
    post:
      tags:
        - "{Resource Name}"
      summary: "Create a new {resource}"
      description: "Creates a new {resource} with the provided data"
      operationId: "create{Resource}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{Resource}Create"
            example:
              # Provide an example of the request body
              property1: "value1"
              property2: "value2"
      responses:
        '201':
          description: "{Resource} created successfully"
          headers:
            Location:
              schema:
                type: string
              description: "URL of the newly created resource"
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{Resource}Response"
              example:
                data:
                  id: "res_123abc"
                  createdAt: "2025-02-28T14:30:00Z"
                  updatedAt: "2025-02-28T14:30:00Z"
                  property1: "value1"
                  property2: "value2"
                meta:
                  requestId: "req_abc123"
                  timestamp: "2025-02-28T14:30:00Z"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '409':
          $ref: "#/components/responses/Conflict"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"

  # Example single resource endpoint
  "/{resources}/{resourceId}":
    get:
      tags:
        - "{Resource Name}"
      summary: "Get a specific {resource}"
      description: "Returns a specific {resource} by its ID"
      operationId: "get{Resource}"
      parameters:
        - name: "resourceId"
          in: path
          description: "ID of the {resource} to retrieve"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/FieldsParam"
      responses:
        '200':
          description: "{Resource} found"
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{Resource}Response"
              example:
                data:
                  id: "res_123abc"
                  createdAt: "2025-02-28T14:30:00Z"
                  updatedAt: "2025-02-28T14:30:00Z"
                  # Add other properties
                meta:
                  requestId: "req_abc123"
                  timestamp: "2025-02-28T14:30:00Z"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
    put:
      tags:
        - "{Resource Name}"
      summary: "Replace a {resource}"
      description: "Replaces an existing {resource} with new data"
      operationId: "replace{Resource}"
      parameters:
        - name: "resourceId"
          in: path
          description: "ID of the {resource} to replace"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{Resource}Replace"
            example:
              # Provide a complete example
              property1: "new-value1"
              property2: "new-value2"
      responses:
        '200':
          description: "{Resource} replaced successfully"
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{Resource}Response"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
    patch:
      tags:
        - "{Resource Name}"
      summary: "Update a {resource} partially"
      description: "Updates specific fields of an existing {resource}"
      operationId: "update{Resource}"
      parameters:
        - name: "resourceId"
          in: path
          description: "ID of the {resource} to update"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{Resource}Update"
            example:
              # Provide an example with only fields to update
              property1: "updated-value1"
      responses:
        '200':
          description: "{Resource} updated successfully"
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{Resource}Response"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - "{Resource Name}"
      summary: "Delete a {resource}"
      description: "Deletes an existing {resource}"
      operationId: "delete{Resource}"
      parameters:
        - name: "resourceId"
          in: path
          description: "ID of the {resource} to delete"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "{Resource} deleted successfully"
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from authentication service"
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: "API key for service-to-service authentication"

  headers:
    X-Request-ID:
      schema:
        type: string
      description: "Unique identifier for the request"
    X-RateLimit-Limit:
      schema:
        type: integer
      description: "The number of allowed requests in the current period"
    X-RateLimit-Remaining:
      schema:
        type: integer
      description: "The number of remaining requests in the current period"
    X-RateLimit-Reset:
      schema:
        type: integer
      description: "The time at which the current rate limit window resets"

  parameters:
    PageParam:
      name: page
      in: query
      description: "Page number for pagination (1-based)"
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: "Number of items per page"
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SortByParam:
      name: sort_by
      in: query
      description: "Field to sort by"
      schema:
        type: string
    SortOrderParam:
      name: sort_order
      in: query
      description: "Sort direction"
      schema:
        type: string
        enum: [asc, desc]
        default: asc
    FieldsParam:
      name: fields
      in: query
      description: "Comma-separated list of fields to include in the response"
      schema:
        type: string

  responses:
    BadRequest:
      description: "Bad request - validation error or invalid parameters"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "The request contains invalid parameters"
              details:
                - field: "email"
                  message: "Must be a valid email address"
                  value: "invalid-email"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    Unauthorized:
      description: "Authentication required or authentication failed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "AUTHENTICATION_REQUIRED"
              message: "Authentication is required to access this resource"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    Forbidden:
      description: "Access denied - insufficient permissions"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "FORBIDDEN"
              message: "You do not have permission to access this resource"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "RESOURCE_NOT_FOUND"
              message: "The requested resource could not be found"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    Conflict:
      description: "Request conflicts with current state"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "RESOURCE_CONFLICT"
              message: "The request conflicts with the current state of the resource"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    UnprocessableEntity:
      description: "Validation errors"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "The request contains invalid data"
              details:
                - field: "email"
                  message: "Email already exists"
                  value: "user@example.com"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    TooManyRequests:
      description: "Rate limit exceeded"
      headers:
        X-RateLimit-Limit:
          $ref: "#/components/headers/X-RateLimit-Limit"
        X-RateLimit-Remaining:
          $ref: "#/components/headers/X-RateLimit-Remaining"
        X-RateLimit-Reset:
          $ref: "#/components/headers/X-RateLimit-Reset"
        Retry-After:
          schema:
            type: integer
          description: "Seconds to wait before retrying"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Too many requests, please try again later"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    InternalServerError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "INTERNAL_SERVER_ERROR"
              message: "An unexpected error occurred"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"
    ServiceUnavailable:
      description: "Service temporarily unavailable"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "SERVICE_UNAVAILABLE"
              message: "The service is temporarily unavailable"
              requestId: "req_abc123"
              timestamp: "2025-02-28T14:30:00Z"

  schemas:
    # Common structures
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: "Current page number"
          example: 1
        limit:
          type: integer
          description: "Items per page"
          example: 20
        totalItems:
          type: integer
          description: "Total number of items"
          example: 243
        totalPages:
          type: integer
          description: "Total number of pages"
          example: 13
        links:
          type: object
          properties:
            self:
              type: string
              description: "Link to current page"
              example: "/api/v1/{service-name}/{resources}?page=1&limit=20"
            next:
              type: string
              nullable: true
              description: "Link to next page"
              example: "/api/v1/{service-name}/{resources}?page=2&limit=20"
            prev:
              type: string
              nullable: true
              description: "Link to previous page"
              example: null
            first:
              type: string
              description: "Link to first page"
              example: "/api/v1/{service-name}/{resources}?page=1&limit=20"
            last:
              type: string
              description: "Link to last page"
              example: "/api/v1/{service-name}/{resources}?page=13&limit=20"
          required:
            - self
            - next
            - prev
            - first
            - last
      required:
        - page
        - limit
        - totalItems
        - totalPages
        - links

    Meta:
      type: object
      properties:
        requestId:
          type: string
          description: "Unique identifier for the request"
          example: "req_abc123"
        timestamp:
          type: string
          format: date-time
          description: "Time when the response was generated"
          example: "2025-02-28T14:30:00Z"
      required:
        - requestId
        - timestamp

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: "Error code"
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: "Human-readable error message"
              example: "The request contains invalid parameters"
            details:
              type: array
              description: "Detailed error information"
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: "Field with error"
                    example: "email"
                  message:
                    type: string
                    description: "Error message for the field"
                    example: "Must be a valid email address"
                  value:
                    type: string
                    description: "Value that caused the error"
                    example: "invalid-email"
                required:
                  - field
                  - message
            requestId:
              type: string
              description: "Unique identifier for the request"
              example: "req_abc123"
            timestamp:
              type: string
              format: date-time
              description: "Time when the error occurred"
              example: "2025-02-28T14:30:00Z"
          required:
            - code
            - message
            - requestId
            - timestamp
      required:
        - error

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: "Health status of the service"
          example: "healthy"
        version:
          type: string
          description: "Service version"
          example: "1.0.0"
        timestamp:
          type: string
          format: date-time
          description: "Time when the health check was performed"
          example: "2025-02-28T14:30:00Z"
        checks:
          type: array
          description: "Status of individual health checks"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Name of the check"
                example: "database"
              status:
                type: string
                enum: [healthy, unhealthy]
                description: "Status of the check"
                example: "healthy"
              message:
                type: string
                nullable: true
                description: "Additional information"
                example: "Connected to database"
            required:
              - name
              - status
      required:
        - status
        - version
        - timestamp
        - checks

    # Template schemas for resources
    # Replace these with actual resource schemas
    "{Resource}Base":
      type: object
      properties:
        # Add properties common to all resource operations
        property1:
          type: string
          description: "Description of property1"
          example: "value1"
        property2:
          type: string
          description: "Description of property2"
          example: "value2"
      required:
        - property1

    "{Resource}Create":
      allOf:
        - $ref: "#/components/schemas/{Resource}Base"
        # Add properties specific to creation

    "{Resource}Replace":
      allOf:
        - $ref: "#/components/schemas/{Resource}Base"
        # Add properties specific to replacement

    "{Resource}Update":
      type: object
      properties:
        # Add properties that can be updated
        property1:
          type: string
          description: "Description of property1"
          example: "updated-value1"
      # No required fields for partial updates

    "{Resource}":
      allOf:
        - $ref: "#/components/schemas/{Resource}Base"
        - type: object
          properties:
            id:
              type: string
              description: "Unique identifier"
              example: "res_123abc"
            createdAt:
              type: string
              format: date-time
              description: "Creation timestamp"
              example: "2025-02-28T14:30:00Z"
            updatedAt:
              type: string
              format: date-time
              description: "Last update timestamp"
              example: "2025-02-28T14:30:00Z"
          required:
            - id
            - createdAt
            - updatedAt

    "{Resource}Response":
      type: object
      properties:
        data:
          $ref: "#/components/schemas/{Resource}"
        meta:
          $ref: "#/components/schemas/Meta"
      required:
        - data
        - meta

    "{Resource}List":
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/{Resource}"
        meta:
          $ref: "#/components/schemas/Meta"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - data
        - meta
        - pagination

security:
  - bearerAuth: []
  - apiKeyAuth: []
